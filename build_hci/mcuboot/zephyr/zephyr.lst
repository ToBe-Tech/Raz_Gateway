
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20 84 00 20 39 3b 00 00 61 aa 00 00 0d 3b 00 00      .. 9;..a....;..
  10:	0d 3b 00 00 0d 3b 00 00 0d 3b 00 00 00 00 00 00     .;...;...;......
	...
  2c:	55 38 00 00 0d 3b 00 00 00 00 00 00 01 38 00 00     U8...;.......8..
  3c:	0d 3b 00 00                                         .;..

00000040 <_irq_vector_table>:
  40:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  50:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  60:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  70:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  80:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  90:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  a0:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  b0:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  c0:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  d0:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  e0:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..
  f0:	05 39 00 00 05 39 00 00 05 39 00 00 05 39 00 00     .9...9...9...9..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size+0x60>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_IDLE_STACK_SIZE+0xa0>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x48>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <__data_size+0x58>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <__data_size+0x5c>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
     234:	d204      	bcs.n	240 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x40>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x40>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <__data_size+0x50>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <__data_size+0x1c>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <__data_size+0x1c>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <__data_size+0x54>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <__data_size+0x48>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <__data_size+0x48>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_IDLE_STACK_SIZE+0xa6>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <__data_size+0x1c>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <__data_size+0x48>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x40>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x72>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0x6c>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <__data_size+0x66>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <__data_size+0x9c>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <__data_size+0x80>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <__data_size+0x92>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <__data_size+0x96>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <__data_size+0x8c>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <__data_size+0x8e>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <__data_size+0x15c>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
     350:	d204      	bcs.n	35c <__data_size+0xec>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <__data_size+0xec>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <__data_size+0x160>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
     37c:	d204      	bcs.n	388 <__data_size+0x118>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <__data_size+0x118>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <__data_size+0x132>
     39c:	d106      	bne.n	3ac <__data_size+0x13c>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <__data_size+0x13c>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <__data_size+0x8e>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0x8e>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <__data_size+0xec>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <__data_size+0x118>

000003d4 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     3d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3d6:	4b34      	ldr	r3, [pc, #208]	; (4a8 <FIH_LABEL_FIH_CALL_END_444+0x52>)
     3d8:	4a34      	ldr	r2, [pc, #208]	; (4ac <FIH_LABEL_FIH_CALL_END_444+0x56>)
     3da:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     3de:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     3e2:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     3e6:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     3ea:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     3ee:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     3f2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     3f6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     3fa:	f000 f87f 	bl	4fc <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     3fe:	482c      	ldr	r0, [pc, #176]	; (4b0 <FIH_LABEL_FIH_CALL_END_444+0x5a>)
     400:	f000 f85e 	bl	4c0 <flash_device_get_binding>
     404:	b900      	cbnz	r0, 408 <CONFIG_FLASH_SIZE+0x8>
        BOOT_LOG_ERR("Flash device %s not found",
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     406:	e7fe      	b.n	406 <CONFIG_FLASH_SIZE+0x6>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     408:	482a      	ldr	r0, [pc, #168]	; (4b4 <FIH_LABEL_FIH_CALL_END_444+0x5e>)
     40a:	f007 fc7b 	bl	7d04 <z_impl_device_get_binding>
     40e:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     410:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     412:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     414:	6813      	ldr	r3, [r2, #0]
     416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     41a:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     41c:	680b      	ldr	r3, [r1, #0]
     41e:	f44f 7288 	mov.w	r2, #272	; 0x110
     422:	210d      	movs	r1, #13
     424:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     426:	68a3      	ldr	r3, [r4, #8]
     428:	a901      	add	r1, sp, #4
     42a:	685b      	ldr	r3, [r3, #4]
     42c:	4620      	mov	r0, r4
     42e:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     430:	b970      	cbnz	r0, 450 <FIH_LABEL_FIH_CALL_START_432>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     432:	9b01      	ldr	r3, [sp, #4]
     434:	049a      	lsls	r2, r3, #18
     436:	d40b      	bmi.n	450 <FIH_LABEL_FIH_CALL_START_432>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     43c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     440:	b10b      	cbz	r3, 446 <CONFIG_FLASH_SIZE+0x46>
     442:	07db      	lsls	r3, r3, #31
     444:	d504      	bpl.n	450 <FIH_LABEL_FIH_CALL_START_432>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
        rc = boot_console_init();
     446:	f002 fcf5 	bl	2e34 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     44a:	481b      	ldr	r0, [pc, #108]	; (4b8 <FIH_LABEL_FIH_CALL_END_444+0x62>)
     44c:	f003 f836 	bl	34bc <boot_serial_start>

00000450 <FIH_LABEL_FIH_CALL_START_432>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     450:	a801      	add	r0, sp, #4
     452:	f000 fc67 	bl	d24 <boot_go>

00000456 <FIH_LABEL_FIH_CALL_END_444>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     456:	4b19      	ldr	r3, [pc, #100]	; (4bc <FIH_LABEL_FIH_CALL_END_444+0x66>)
     458:	681b      	ldr	r3, [r3, #0]
     45a:	4283      	cmp	r3, r0
     45c:	d000      	beq.n	460 <FIH_LABEL_FIH_CALL_END_444+0xa>
        BOOT_LOG_ERR("Unable to find bootable image");
        FIH_PANIC;
     45e:	e7fe      	b.n	45e <FIH_LABEL_FIH_CALL_END_444+0x8>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     460:	f44f 3190 	mov.w	r1, #73728	; 0x12000
     464:	2000      	movs	r0, #0
     466:	f00a ff17 	bl	b298 <fprotect_area>

    if (rc != 0) {
     46a:	b100      	cbz	r0, 46e <FIH_LABEL_FIH_CALL_END_444+0x18>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     46c:	e7fe      	b.n	46c <FIH_LABEL_FIH_CALL_END_444+0x16>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     46e:	4669      	mov	r1, sp
     470:	f89d 0008 	ldrb.w	r0, [sp, #8]
     474:	f008 ff99 	bl	93aa <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     478:	9b00      	ldr	r3, [sp, #0]
     47a:	9c03      	ldr	r4, [sp, #12]
     47c:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     47e:	9b01      	ldr	r3, [sp, #4]
     480:	891d      	ldrh	r5, [r3, #8]
    usb_disable();
     482:	f001 fd3d 	bl	1f00 <usb_disable>
                                     rsp->br_image_off +
     486:	1966      	adds	r6, r4, r5
    nrf_cleanup_peripheral();
     488:	f000 fdc2 	bl	1010 <nrf_cleanup_peripheral>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     48c:	f04f 0220 	mov.w	r2, #32
     490:	f3ef 8311 	mrs	r3, BASEPRI
     494:	f382 8812 	msr	BASEPRI_MAX, r2
     498:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     49c:	5963      	ldr	r3, [r4, r5]
     49e:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4a2:	6873      	ldr	r3, [r6, #4]
     4a4:	4798      	blx	r3
    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     4a6:	e7fe      	b.n	4a6 <FIH_LABEL_FIH_CALL_END_444+0x50>
     4a8:	40010000 	.word	0x40010000
     4ac:	6e524635 	.word	0x6e524635
     4b0:	0000dba8 	.word	0x0000dba8
     4b4:	0000dbbb 	.word	0x0000dbbb
     4b8:	0000d718 	.word	0x0000d718
     4bc:	2000070c 	.word	0x2000070c

000004c0 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     4c0:	b510      	push	{r4, lr}
    if (!flash_dev) {
     4c2:	4c04      	ldr	r4, [pc, #16]	; (4d4 <flash_device_get_binding+0x14>)
     4c4:	6823      	ldr	r3, [r4, #0]
     4c6:	b913      	cbnz	r3, 4ce <flash_device_get_binding+0xe>
     4c8:	f007 fc1c 	bl	7d04 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     4cc:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     4ce:	6820      	ldr	r0, [r4, #0]
     4d0:	bd10      	pop	{r4, pc}
     4d2:	bf00      	nop
     4d4:	20000708 	.word	0x20000708

000004d8 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     4da:	4a07      	ldr	r2, [pc, #28]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
{
     4dc:	4603      	mov	r3, r0
     4de:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     4e0:	6810      	ldr	r0, [r2, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     4e2:	aa01      	add	r2, sp, #4
     4e4:	4619      	mov	r1, r3
     4e6:	f00a fcc6 	bl	ae76 <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     4ea:	b918      	cbnz	r0, 4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
        return rc;
    }

    sector->fs_off = page.start_offset;
     4ec:	9b01      	ldr	r3, [sp, #4]
     4ee:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     4f0:	9b02      	ldr	r3, [sp, #8]
     4f2:	6063      	str	r3, [r4, #4]

    return rc;
}
     4f4:	b004      	add	sp, #16
     4f6:	bd10      	pop	{r4, pc}
     4f8:	20000708 	.word	0x20000708

000004fc <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     4fc:	4802      	ldr	r0, [pc, #8]	; (508 <os_heap_init+0xc>)
     4fe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     502:	f005 bc77 	b.w	5df4 <mbedtls_memory_buffer_alloc_init>
     506:	bf00      	nop
     508:	20002aaa 	.word	0x20002aaa

0000050c <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     510:	b0f9      	sub	sp, #484	; 0x1e4
     512:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     516:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 6f8 <FIH_LABEL_FIH_CALL_END_638+0x2c>
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     51a:	a838      	add	r0, sp, #224	; 0xe0
     51c:	f8da 6000 	ldr.w	r6, [sl]
{
     520:	4617      	mov	r7, r2
     522:	461d      	mov	r5, r3
     524:	f00c fa57 	bl	c9d6 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     528:	2100      	movs	r1, #0
     52a:	a838      	add	r0, sp, #224	; 0xe0
     52c:	f005 fd74 	bl	6018 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     530:	b13c      	cbz	r4, 542 <bootutil_img_validate+0x36>
     532:	f1b8 0f00 	cmp.w	r8, #0
     536:	dd04      	ble.n	542 <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     538:	4642      	mov	r2, r8
     53a:	4621      	mov	r1, r4
     53c:	a838      	add	r0, sp, #224	; 0xe0
     53e:	f00c fa4e 	bl	c9de <mbedtls_sha256_update>
    size += hdr->ih_protect_tlv_size;
     542:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     544:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     548:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     54a:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
     54c:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     550:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     552:	45c8      	cmp	r8, r9
     554:	d849      	bhi.n	5ea <FIH_LABEL_FIH_CALL_END_308+0xe>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     556:	a90d      	add	r1, sp, #52	; 0x34
     558:	a838      	add	r0, sp, #224	; 0xe0
     55a:	f00c fa79 	bl	ca50 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     55e:	9b86      	ldr	r3, [sp, #536]	; 0x218
     560:	b123      	cbz	r3, 56c <bootutil_img_validate+0x60>
        memcpy(out_hash, hash, 32);
     562:	2220      	movs	r2, #32
     564:	a90d      	add	r1, sp, #52	; 0x34
     566:	4618      	mov	r0, r3
     568:	f00a fabb 	bl	aae2 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     56c:	2300      	movs	r3, #0
     56e:	9300      	str	r3, [sp, #0]
     570:	462a      	mov	r2, r5
     572:	f64f 73ff 	movw	r3, #65535	; 0xffff
     576:	4639      	mov	r1, r7
     578:	a807      	add	r0, sp, #28
     57a:	f008 ff27 	bl	93cc <bootutil_tlv_iter_begin>
    if (rc) {
     57e:	4604      	mov	r4, r0
     580:	2800      	cmp	r0, #0
     582:	f040 80b1 	bne.w	6e8 <FIH_LABEL_FIH_CALL_END_638+0x1c>
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     586:	f8df 9174 	ldr.w	r9, [pc, #372]	; 6fc <FIH_LABEL_FIH_CALL_END_638+0x30>
    int key_id = -1;
     58a:	f04f 37ff 	mov.w	r7, #4294967295
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     58e:	f10d 0316 	add.w	r3, sp, #22
     592:	aa05      	add	r2, sp, #20
     594:	a906      	add	r1, sp, #24
     596:	a807      	add	r0, sp, #28
     598:	f008 ff64 	bl	9464 <bootutil_tlv_iter_next>
        if (rc < 0) {
     59c:	f1b0 0800 	subs.w	r8, r0, #0
     5a0:	f2c0 80a8 	blt.w	6f4 <FIH_LABEL_FIH_CALL_END_638+0x28>
        } else if (rc > 0) {
     5a4:	f040 8095 	bne.w	6d2 <FIH_LABEL_FIH_CALL_END_638+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5a8:	f8bd b016 	ldrh.w	fp, [sp, #22]
     5ac:	f1bb 0f10 	cmp.w	fp, #16
     5b0:	d131      	bne.n	616 <FIH_LABEL_FIH_CALL_END_308+0x3a>
            if (len != sizeof(hash)) {
     5b2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
     5b6:	2c20      	cmp	r4, #32
     5b8:	f040 8094 	bne.w	6e4 <FIH_LABEL_FIH_CALL_END_638+0x18>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5bc:	9906      	ldr	r1, [sp, #24]
     5be:	4623      	mov	r3, r4
     5c0:	aa38      	add	r2, sp, #224	; 0xe0
     5c2:	4628      	mov	r0, r5
     5c4:	f009 ff22 	bl	a40c <flash_area_read>
            if (rc) {
     5c8:	4680      	mov	r8, r0
     5ca:	2800      	cmp	r0, #0
     5cc:	f040 8092 	bne.w	6f4 <FIH_LABEL_FIH_CALL_END_638+0x28>

000005d0 <FIH_LABEL_FIH_CALL_START_291>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5d0:	4622      	mov	r2, r4
     5d2:	a938      	add	r1, sp, #224	; 0xe0
     5d4:	a80d      	add	r0, sp, #52	; 0x34
     5d6:	f008 ff90 	bl	94fa <boot_fih_memequal>
     5da:	4604      	mov	r4, r0

000005dc <FIH_LABEL_FIH_CALL_END_308>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     5dc:	4b48      	ldr	r3, [pc, #288]	; (700 <FIH_LABEL_FIH_CALL_END_638+0x34>)
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	4283      	cmp	r3, r0
     5e2:	f040 8081 	bne.w	6e8 <FIH_LABEL_FIH_CALL_END_638+0x1c>
            sha256_valid = 1;
     5e6:	2401      	movs	r4, #1
     5e8:	e7d1      	b.n	58e <bootutil_img_validate+0x82>
        if (blk_sz > tmp_buf_sz) {
     5ea:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     5ec:	9a82      	ldr	r2, [sp, #520]	; 0x208
        blk_sz = size - off;
     5ee:	eba8 0b09 	sub.w	fp, r8, r9
     5f2:	459b      	cmp	fp, r3
     5f4:	bf28      	it	cs
     5f6:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     5f8:	465b      	mov	r3, fp
     5fa:	4649      	mov	r1, r9
     5fc:	4628      	mov	r0, r5
     5fe:	f009 ff05 	bl	a40c <flash_area_read>
        if (rc) {
     602:	4604      	mov	r4, r0
     604:	2800      	cmp	r0, #0
     606:	d16f      	bne.n	6e8 <FIH_LABEL_FIH_CALL_END_638+0x1c>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     608:	9982      	ldr	r1, [sp, #520]	; 0x208
     60a:	465a      	mov	r2, fp
     60c:	a838      	add	r0, sp, #224	; 0xe0
     60e:	f00c f9e6 	bl	c9de <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     612:	44d9      	add	r9, fp
     614:	e79d      	b.n	552 <bootutil_img_validate+0x46>
        } else if (type == IMAGE_TLV_KEYHASH) {
     616:	f1bb 0f01 	cmp.w	fp, #1
     61a:	d137      	bne.n	68c <FIH_LABEL_FIH_CALL_END_308+0xb0>
            if (len > 32) {
     61c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     620:	2b20      	cmp	r3, #32
     622:	d85f      	bhi.n	6e4 <FIH_LABEL_FIH_CALL_END_638+0x18>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     624:	9906      	ldr	r1, [sp, #24]
     626:	aa38      	add	r2, sp, #224	; 0xe0
     628:	4628      	mov	r0, r5
     62a:	f009 feef 	bl	a40c <flash_area_read>
            if (rc) {
     62e:	4680      	mov	r8, r0
     630:	2800      	cmp	r0, #0
     632:	d15f      	bne.n	6f4 <FIH_LABEL_FIH_CALL_END_638+0x28>
            key_id = bootutil_find_key(buf, len);
     634:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     638:	f1bb 0f20 	cmp.w	fp, #32
     63c:	d903      	bls.n	646 <FIH_LABEL_FIH_CALL_END_308+0x6a>
        return -1;
     63e:	f04f 38ff 	mov.w	r8, #4294967295
            key_id = bootutil_find_key(buf, len);
     642:	4647      	mov	r7, r8
     644:	e7a3      	b.n	58e <bootutil_img_validate+0x82>
    for (i = 0; i < bootutil_key_cnt; i++) {
     646:	f8d9 3000 	ldr.w	r3, [r9]
     64a:	4f2e      	ldr	r7, [pc, #184]	; (704 <FIH_LABEL_FIH_CALL_END_638+0x38>)
     64c:	9303      	str	r3, [sp, #12]
     64e:	9b03      	ldr	r3, [sp, #12]
     650:	4598      	cmp	r8, r3
     652:	daf4      	bge.n	63e <FIH_LABEL_FIH_CALL_END_308+0x62>
    mbedtls_sha256_init(ctx);
     654:	a81d      	add	r0, sp, #116	; 0x74
     656:	f00c f9be 	bl	c9d6 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     65a:	2100      	movs	r1, #0
     65c:	a81d      	add	r0, sp, #116	; 0x74
     65e:	f005 fcdb 	bl	6018 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     662:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     664:	f857 1b08 	ldr.w	r1, [r7], #8
     668:	6812      	ldr	r2, [r2, #0]
     66a:	a81d      	add	r0, sp, #116	; 0x74
     66c:	f00c f9b7 	bl	c9de <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     670:	a915      	add	r1, sp, #84	; 0x54
     672:	a81d      	add	r0, sp, #116	; 0x74
     674:	f00c f9ec 	bl	ca50 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     678:	465a      	mov	r2, fp
     67a:	a938      	add	r1, sp, #224	; 0xe0
     67c:	a815      	add	r0, sp, #84	; 0x54
     67e:	f00a fa09 	bl	aa94 <memcmp>
     682:	2800      	cmp	r0, #0
     684:	d0dd      	beq.n	642 <FIH_LABEL_FIH_CALL_END_308+0x66>
    for (i = 0; i < bootutil_key_cnt; i++) {
     686:	f108 0801 	add.w	r8, r8, #1
     68a:	e7e0      	b.n	64e <FIH_LABEL_FIH_CALL_END_308+0x72>
        } else if (type == EXPECTED_SIG_TLV) {
     68c:	f1bb 0f20 	cmp.w	fp, #32
     690:	f47f af7d 	bne.w	58e <bootutil_img_validate+0x82>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     694:	2f00      	cmp	r7, #0
     696:	db19      	blt.n	6cc <FIH_LABEL_FIH_CALL_END_638>
     698:	f8d9 3000 	ldr.w	r3, [r9]
     69c:	42bb      	cmp	r3, r7
     69e:	dd15      	ble.n	6cc <FIH_LABEL_FIH_CALL_END_638>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     6a8:	d11c      	bne.n	6e4 <FIH_LABEL_FIH_CALL_END_638+0x18>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6aa:	9906      	ldr	r1, [sp, #24]
     6ac:	aa38      	add	r2, sp, #224	; 0xe0
     6ae:	4628      	mov	r0, r5
     6b0:	f009 feac 	bl	a40c <flash_area_read>
            if (rc) {
     6b4:	4680      	mov	r8, r0
     6b6:	b9e8      	cbnz	r0, 6f4 <FIH_LABEL_FIH_CALL_END_638+0x28>

000006b8 <FIH_LABEL_FIH_CALL_START_617>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6b8:	b2ff      	uxtb	r7, r7
     6ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6be:	9700      	str	r7, [sp, #0]
     6c0:	aa38      	add	r2, sp, #224	; 0xe0
     6c2:	4659      	mov	r1, fp
     6c4:	a80d      	add	r0, sp, #52	; 0x34
     6c6:	f000 f81f 	bl	708 <bootutil_verify_sig>
     6ca:	4606      	mov	r6, r0

000006cc <FIH_LABEL_FIH_CALL_END_638>:
                key_id = -1;
     6cc:	f04f 37ff 	mov.w	r7, #4294967295
     6d0:	e75d      	b.n	58e <bootutil_img_validate+0x82>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     6d2:	b16c      	cbz	r4, 6f0 <FIH_LABEL_FIH_CALL_END_638+0x24>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     6d4:	4b0a      	ldr	r3, [pc, #40]	; (700 <FIH_LABEL_FIH_CALL_END_638+0x34>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     6d6:	681b      	ldr	r3, [r3, #0]
     6d8:	42b3      	cmp	r3, r6
     6da:	d001      	beq.n	6e0 <FIH_LABEL_FIH_CALL_END_638+0x14>
        return FIH_FAILURE;
     6dc:	f8da 6000 	ldr.w	r6, [sl]
        return -1;
     6e0:	4634      	mov	r4, r6
     6e2:	e001      	b.n	6e8 <FIH_LABEL_FIH_CALL_END_638+0x1c>
                rc = -1;
     6e4:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     6e8:	4620      	mov	r0, r4
     6ea:	b079      	add	sp, #484	; 0x1e4
     6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = !sha256_valid;
     6f0:	f04f 0801 	mov.w	r8, #1
        return -1;
     6f4:	4644      	mov	r4, r8
     6f6:	e7f7      	b.n	6e8 <FIH_LABEL_FIH_CALL_END_638+0x1c>
     6f8:	20000000 	.word	0x20000000
     6fc:	0000d720 	.word	0x0000d720
     700:	2000070c 	.word	0x2000070c
     704:	0000d724 	.word	0x0000d724

00000708 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     70c:	461f      	mov	r7, r3
     70e:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     712:	4b6a      	ldr	r3, [pc, #424]	; (8bc <FIH_LABEL_FIH_CALL_END_647+0x2>)
{
     714:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     718:	681d      	ldr	r5, [r3, #0]
{
     71a:	4680      	mov	r8, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     71c:	a827      	add	r0, sp, #156	; 0x9c
{
     71e:	468a      	mov	sl, r1
     720:	4691      	mov	r9, r2
    mbedtls_rsa_init(&ctx);
     722:	f00c f915 	bl	c950 <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     726:	4b66      	ldr	r3, [pc, #408]	; (8c0 <FIH_LABEL_FIH_CALL_END_647+0x6>)
     728:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
     72c:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     72e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     732:	aa8a      	add	r2, sp, #552	; 0x228
    end = cp + *bootutil_keys[key_id].len;
     734:	685b      	ldr	r3, [r3, #4]
     736:	681b      	ldr	r3, [r3, #0]
     738:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     73a:	4621      	mov	r1, r4
     73c:	2330      	movs	r3, #48	; 0x30
     73e:	a802      	add	r0, sp, #8
     740:	f00a feaa 	bl	b498 <mbedtls_asn1_get_tag>
     744:	bb68      	cbnz	r0, 7a2 <bootutil_verify_sig+0x9a>
    if (*p + len != end) {
     746:	9b02      	ldr	r3, [sp, #8]
     748:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     74a:	4413      	add	r3, r2
     74c:	429c      	cmp	r4, r3
     74e:	d128      	bne.n	7a2 <bootutil_verify_sig+0x9a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     750:	aa29      	add	r2, sp, #164	; 0xa4
     752:	4621      	mov	r1, r4
     754:	a802      	add	r0, sp, #8
     756:	f00a feb3 	bl	b4c0 <mbedtls_asn1_get_mpi>
     75a:	bb10      	cbnz	r0, 7a2 <bootutil_verify_sig+0x9a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     75c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     760:	465a      	mov	r2, fp
     762:	4621      	mov	r1, r4
     764:	a802      	add	r0, sp, #8
     766:	f00a feab 	bl	b4c0 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     76a:	4606      	mov	r6, r0
     76c:	b9c8      	cbnz	r0, 7a2 <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     76e:	a829      	add	r0, sp, #164	; 0xa4
     770:	f00b fa09 	bl	bb86 <mbedtls_mpi_size>
    if (*p != end) {
     774:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     776:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     778:	429c      	cmp	r4, r3
     77a:	d112      	bne.n	7a2 <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     77c:	e9cd 6b00 	strd	r6, fp, [sp]
     780:	4633      	mov	r3, r6
     782:	4632      	mov	r2, r6
     784:	a929      	add	r1, sp, #164	; 0xa4
     786:	a827      	add	r0, sp, #156	; 0x9c
     788:	f00c f89f 	bl	c8ca <mbedtls_rsa_import>
    if (rc != 0) {
     78c:	b948      	cbnz	r0, 7a2 <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     78e:	a827      	add	r0, sp, #156	; 0x9c
     790:	f005 fbd4 	bl	5f3c <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     794:	b928      	cbnz	r0, 7a2 <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     796:	a829      	add	r0, sp, #164	; 0xa4
     798:	f00b f9f5 	bl	bb86 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     79c:	4287      	cmp	r7, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     79e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     7a0:	d00a      	beq.n	7b8 <FIH_LABEL_FIH_CALL_START_226>
        mbedtls_rsa_free(&ctx);
     7a2:	a827      	add	r0, sp, #156	; 0x9c
     7a4:	f00c f8de 	bl	c964 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     7a8:	a827      	add	r0, sp, #156	; 0x9c
     7aa:	f00c f8db 	bl	c964 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     7ae:	4628      	mov	r0, r5
     7b0:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007b8 <FIH_LABEL_FIH_CALL_START_226>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     7b8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
     7bc:	d002      	beq.n	7c4 <FIH_LABEL_FIH_CALL_END_282+0x2>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     7be:	f04f 35ff 	mov.w	r5, #4294967295

000007c2 <FIH_LABEL_FIH_CALL_END_282>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     7c2:	e7f1      	b.n	7a8 <bootutil_verify_sig+0xa0>
    if (hlen != PSS_HLEN) {
     7c4:	f1ba 0f20 	cmp.w	sl, #32
     7c8:	d1f9      	bne.n	7be <FIH_LABEL_FIH_CALL_START_226+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     7ca:	aa8a      	add	r2, sp, #552	; 0x228
     7cc:	4649      	mov	r1, r9
     7ce:	a827      	add	r0, sp, #156	; 0x9c
     7d0:	f005 fbda 	bl	5f88 <mbedtls_rsa_public>
     7d4:	4604      	mov	r4, r0
     7d6:	2800      	cmp	r0, #0
     7d8:	d1f1      	bne.n	7be <FIH_LABEL_FIH_CALL_START_226+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7da:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     7de:	2bbc      	cmp	r3, #188	; 0xbc
     7e0:	d1ed      	bne.n	7be <FIH_LABEL_FIH_CALL_START_226+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     7e2:	af52      	add	r7, sp, #328	; 0x148
     7e4:	9003      	str	r0, [sp, #12]
    int count = PSS_MASK_LEN;
     7e6:	26df      	movs	r6, #223	; 0xdf
     7e8:	463d      	mov	r5, r7
    mbedtls_sha256_init(ctx);
     7ea:	a80c      	add	r0, sp, #48	; 0x30
     7ec:	f00c f8f3 	bl	c9d6 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     7f0:	2100      	movs	r1, #0
     7f2:	a80c      	add	r0, sp, #48	; 0x30
     7f4:	f005 fc10 	bl	6018 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     7f8:	2220      	movs	r2, #32
     7fa:	f20d 3107 	addw	r1, sp, #775	; 0x307
     7fe:	a80c      	add	r0, sp, #48	; 0x30
     800:	f00c f8ed 	bl	c9de <mbedtls_sha256_update>
     804:	2204      	movs	r2, #4
     806:	a903      	add	r1, sp, #12
     808:	a80c      	add	r0, sp, #48	; 0x30
     80a:	f00c f8e8 	bl	c9de <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     80e:	a904      	add	r1, sp, #16
     810:	a80c      	add	r0, sp, #48	; 0x30
     812:	f00c f91d 	bl	ca50 <mbedtls_sha256_finish>
        if (bytes > count)
     816:	2e20      	cmp	r6, #32
        counter[3]++;
     818:	f89d 300f 	ldrb.w	r3, [sp, #15]
        if (bytes > count)
     81c:	46b1      	mov	r9, r6
     81e:	bfa8      	it	ge
     820:	f04f 0920 	movge.w	r9, #32
        counter[3]++;
     824:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     826:	4638      	mov	r0, r7
     828:	464a      	mov	r2, r9
     82a:	a904      	add	r1, sp, #16
        count -= bytes;
     82c:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     830:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     834:	f00a f955 	bl	aae2 <memcpy>
    while (count > 0) {
     838:	2e00      	cmp	r6, #0
        mask += bytes;
     83a:	444f      	add	r7, r9
    while (count > 0) {
     83c:	dcd5      	bgt.n	7ea <FIH_LABEL_FIH_CALL_END_282+0x28>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     83e:	462f      	mov	r7, r5
     840:	ab8a      	add	r3, sp, #552	; 0x228
     842:	4629      	mov	r1, r5
     844:	2200      	movs	r2, #0
        db_mask[i] ^= em[i];
     846:	7808      	ldrb	r0, [r1, #0]
     848:	f813 6b01 	ldrb.w	r6, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     84c:	3201      	adds	r2, #1
        db_mask[i] ^= em[i];
     84e:	4070      	eors	r0, r6
    for (i = 0; i < PSS_MASK_LEN; i++) {
     850:	2adf      	cmp	r2, #223	; 0xdf
        db_mask[i] ^= em[i];
     852:	f801 0b01 	strb.w	r0, [r1], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     856:	d1f6      	bne.n	846 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x46>
    db_mask[0] &= 0x7F;
     858:	782b      	ldrb	r3, [r5, #0]
     85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     85e:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     860:	f817 6b01 	ldrb.w	r6, [r7], #1
     864:	2e00      	cmp	r6, #0
     866:	d1aa      	bne.n	7be <FIH_LABEL_FIH_CALL_START_226+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     868:	3401      	adds	r4, #1
     86a:	2cbe      	cmp	r4, #190	; 0xbe
     86c:	d1f8      	bne.n	860 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x60>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     86e:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     872:	2b01      	cmp	r3, #1
     874:	d1a3      	bne.n	7be <FIH_LABEL_FIH_CALL_START_226+0x6>
    mbedtls_sha256_init(ctx);
     876:	a80c      	add	r0, sp, #48	; 0x30
     878:	f00c f8ad 	bl	c9d6 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     87c:	4631      	mov	r1, r6
     87e:	a80c      	add	r0, sp, #48	; 0x30
     880:	f005 fbca 	bl	6018 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     884:	490f      	ldr	r1, [pc, #60]	; (8c4 <FIH_LABEL_FIH_CALL_END_647+0xa>)
     886:	2208      	movs	r2, #8
     888:	a80c      	add	r0, sp, #48	; 0x30
     88a:	f00c f8a8 	bl	c9de <mbedtls_sha256_update>
     88e:	4641      	mov	r1, r8
     890:	2220      	movs	r2, #32
     892:	a80c      	add	r0, sp, #48	; 0x30
     894:	f00c f8a3 	bl	c9de <mbedtls_sha256_update>
     898:	2220      	movs	r2, #32
     89a:	f20d 2107 	addw	r1, sp, #519	; 0x207
     89e:	a80c      	add	r0, sp, #48	; 0x30
     8a0:	f00c f89d 	bl	c9de <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     8a4:	a904      	add	r1, sp, #16
     8a6:	a80c      	add	r0, sp, #48	; 0x30
     8a8:	f00c f8d2 	bl	ca50 <mbedtls_sha256_finish>

000008ac <FIH_LABEL_FIH_CALL_START_631>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     8ac:	2220      	movs	r2, #32
     8ae:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8b2:	a804      	add	r0, sp, #16
     8b4:	f008 fe21 	bl	94fa <boot_fih_memequal>
     8b8:	4605      	mov	r5, r0

000008ba <FIH_LABEL_FIH_CALL_END_647>:
    if (rc) {
     8ba:	e782      	b.n	7c2 <FIH_LABEL_FIH_CALL_END_282>
     8bc:	20000000 	.word	0x20000000
     8c0:	0000d724 	.word	0x0000d724
     8c4:	0000dbc2 	.word	0x0000dbc2

000008c8 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8cc:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     8ce:	2302      	movs	r3, #2
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     8d0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 940 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     8d4:	f8ad 3000 	strh.w	r3, [sp]
{
     8d8:	460d      	mov	r5, r1
     8da:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8dc:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     8de:	f817 0b01 	ldrb.w	r0, [r7], #1
     8e2:	a901      	add	r1, sp, #4
     8e4:	f002 f8de 	bl	2aa4 <flash_area_open>
        if (rc != 0) {
     8e8:	4604      	mov	r4, r0
     8ea:	b9a0      	cbnz	r0, 916 <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     8ec:	9801      	ldr	r0, [sp, #4]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     8ee:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     8f0:	2310      	movs	r3, #16
     8f2:	aa02      	add	r2, sp, #8
     8f4:	3910      	subs	r1, #16
     8f6:	f009 fd89 	bl	a40c <flash_area_read>
     8fa:	4604      	mov	r4, r0
        flash_area_close(*fap);
     8fc:	9801      	ldr	r0, [sp, #4]
     8fe:	f009 fd84 	bl	a40a <flash_area_close>
        if (rc != 0) {
     902:	b944      	cbnz	r4, 916 <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     904:	2210      	movs	r2, #16
     906:	4641      	mov	r1, r8
     908:	a802      	add	r0, sp, #8
     90a:	f00a f8c3 	bl	aa94 <memcmp>
     90e:	b140      	cbz	r0, 922 <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     910:	b12e      	cbz	r6, 91e <boot_read_swap_size+0x56>
    return -1;
     912:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     916:	4620      	mov	r0, r4
     918:	b006      	add	sp, #24
     91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     91e:	2601      	movs	r6, #1
     920:	e7dd      	b.n	8de <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     922:	9801      	ldr	r0, [sp, #4]
     924:	f00a fcca 	bl	b2bc <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     928:	2304      	movs	r3, #4
     92a:	f1a0 0108 	sub.w	r1, r0, #8
     92e:	462a      	mov	r2, r5
     930:	9801      	ldr	r0, [sp, #4]
     932:	f009 fd6b 	bl	a40c <flash_area_read>
     936:	4604      	mov	r4, r0
        flash_area_close(fap);
     938:	9801      	ldr	r0, [sp, #4]
     93a:	f009 fd66 	bl	a40a <flash_area_close>
     93e:	e7ea      	b.n	916 <boot_read_swap_size+0x4e>
     940:	0000d970 	.word	0x0000d970

00000944 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     948:	4b32      	ldr	r3, [pc, #200]	; (a14 <FIH_LABEL_FIH_CALL_END_437+0x6a>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     94a:	b088      	sub	sp, #32
     94c:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     94e:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     950:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     952:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     954:	f008 fd2f 	bl	93b6 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     958:	a906      	add	r1, sp, #24
     95a:	b2c0      	uxtb	r0, r0
     95c:	f002 f8a2 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
     960:	2800      	cmp	r0, #0
     962:	d152      	bne.n	a0a <FIH_LABEL_FIH_CALL_END_437+0x60>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     964:	4621      	mov	r1, r4
     966:	f008 fd26 	bl	93b6 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     96a:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     96c:	a907      	add	r1, sp, #28
     96e:	b2c0      	uxtb	r0, r0
     970:	fb05 6504 	mla	r5, r5, r4, r6
     974:	f002 f896 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
     978:	2800      	cmp	r0, #0
     97a:	d02e      	beq.n	9da <FIH_LABEL_FIH_CALL_END_437+0x30>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     97c:	272c      	movs	r7, #44	; 0x2c
     97e:	4367      	muls	r7, r4
     980:	eb06 0807 	add.w	r8, r6, r7
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     984:	9b06      	ldr	r3, [sp, #24]
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     986:	f8d8 1010 	ldr.w	r1, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     98a:	f011 0110 	ands.w	r1, r1, #16
     98e:	d133      	bne.n	9f8 <FIH_LABEL_FIH_CALL_END_437+0x4e>

00000990 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     990:	f44f 7280 	mov.w	r2, #256	; 0x100
     994:	9201      	str	r2, [sp, #4]
     996:	4a20      	ldr	r2, [pc, #128]	; (a18 <FIH_LABEL_FIH_CALL_END_437+0x6e>)
     998:	9200      	str	r2, [sp, #0]
     99a:	e9cd 1103 	strd	r1, r1, [sp, #12]
     99e:	462a      	mov	r2, r5
     9a0:	9102      	str	r1, [sp, #8]
     9a2:	4608      	mov	r0, r1
     9a4:	f7ff fdb2 	bl	50c <bootutil_img_validate>
     9a8:	4605      	mov	r5, r0

000009aa <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9aa:	4b1c      	ldr	r3, [pc, #112]	; (a1c <FIH_LABEL_FIH_CALL_END_437+0x72>)
     9ac:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9ae:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9b0:	429a      	cmp	r2, r3
     9b2:	d10c      	bne.n	9ce <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     9b4:	f8d8 200c 	ldr.w	r2, [r8, #12]
     9b8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     9bc:	189b      	adds	r3, r3, r2
     9be:	d206      	bcs.n	9ce <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= flash_area_get_size(fap)) {
     9c0:	6882      	ldr	r2, [r0, #8]
     9c2:	4293      	cmp	r3, r2
     9c4:	d203      	bcs.n	9ce <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9c6:	4b16      	ldr	r3, [pc, #88]	; (a20 <FIH_LABEL_FIH_CALL_END_437+0x76>)
     9c8:	681b      	ldr	r3, [r3, #0]
     9ca:	42ab      	cmp	r3, r5
     9cc:	d01a      	beq.n	a04 <FIH_LABEL_FIH_CALL_END_437+0x5a>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     9ce:	b1c4      	cbz	r4, a02 <FIH_LABEL_FIH_CALL_END_437+0x58>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     9d0:	6882      	ldr	r2, [r0, #8]
     9d2:	2100      	movs	r1, #0
     9d4:	f009 fd69 	bl	a4aa <flash_area_erase>
     9d8:	e013      	b.n	a02 <FIH_LABEL_FIH_CALL_END_437+0x58>
    erased_val = flash_area_erased_val(fap);
     9da:	9807      	ldr	r0, [sp, #28]
     9dc:	f009 fd9d 	bl	a51a <flash_area_erased_val>
     9e0:	4607      	mov	r7, r0
    flash_area_close(fap);
     9e2:	9807      	ldr	r0, [sp, #28]
     9e4:	f009 fd11 	bl	a40a <flash_area_close>
    for (i = 0; i < len; i++) {
     9e8:	1e6b      	subs	r3, r5, #1
     9ea:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     9ec:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     9f0:	42b9      	cmp	r1, r7
     9f2:	d1c3      	bne.n	97c <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     9f4:	4293      	cmp	r3, r2
     9f6:	d1f9      	bne.n	9ec <FIH_LABEL_FIH_CALL_END_437+0x42>
            swap_erase_trailer_sectors(state, fap);
     9f8:	9906      	ldr	r1, [sp, #24]
        if (slot != BOOT_PRIMARY_SLOT) {
     9fa:	b114      	cbz	r4, a02 <FIH_LABEL_FIH_CALL_END_437+0x58>
            swap_erase_trailer_sectors(state, fap);
     9fc:	4630      	mov	r0, r6
     9fe:	f008 fe72 	bl	96e6 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a02:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     a04:	9806      	ldr	r0, [sp, #24]
     a06:	f009 fd00 	bl	a40a <flash_area_close>

    FIH_RET(fih_rc);
}
     a0a:	4628      	mov	r0, r5
     a0c:	b008      	add	sp, #32
     a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a12:	bf00      	nop
     a14:	20000000 	.word	0x20000000
     a18:	200042aa 	.word	0x200042aa
     a1c:	96f3b83d 	.word	0x96f3b83d
     a20:	2000070c 	.word	0x2000070c

00000a24 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a26:	460d      	mov	r5, r1
     a28:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a2a:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a2c:	4628      	mov	r0, r5
    size = copy_size = 0;
     a2e:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a32:	f008 fe17 	bl	9664 <boot_status_is_reset>
     a36:	b1f0      	cbz	r0, a76 <boot_swap_image+0x52>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a38:	4e12      	ldr	r6, [pc, #72]	; (a84 <boot_swap_image+0x60>)
     a3a:	6823      	ldr	r3, [r4, #0]
     a3c:	42b3      	cmp	r3, r6
     a3e:	d103      	bne.n	a48 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a40:	aa01      	add	r2, sp, #4
     a42:	4620      	mov	r0, r4
     a44:	f008 fda3 	bl	958e <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a4a:	42b3      	cmp	r3, r6
     a4c:	d104      	bne.n	a58 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a4e:	466a      	mov	r2, sp
     a50:	2101      	movs	r1, #1
     a52:	4620      	mov	r0, r4
     a54:	f008 fd9b 	bl	958e <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     a58:	e9dd 3200 	ldrd	r3, r2, [sp]
     a5c:	4293      	cmp	r3, r2
            copy_size = size;
     a5e:	bf88      	it	hi
     a60:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     a62:	9b01      	ldr	r3, [sp, #4]
     a64:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     a66:	4620      	mov	r0, r4
     a68:	9a01      	ldr	r2, [sp, #4]
     a6a:	4629      	mov	r1, r5
     a6c:	f000 f9e0 	bl	e30 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
     a70:	2000      	movs	r0, #0
     a72:	b002      	add	sp, #8
     a74:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a76:	f105 0108 	add.w	r1, r5, #8
     a7a:	f7ff ff25 	bl	8c8 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a7e:	68ab      	ldr	r3, [r5, #8]
     a80:	9301      	str	r3, [sp, #4]
     a82:	e7f0      	b.n	a66 <boot_swap_image+0x42>
     a84:	96f3b83d 	.word	0x96f3b83d

00000a88 <boot_copy_region>:
{
     a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a8c:	f8df b070 	ldr.w	fp, [pc, #112]	; b00 <boot_copy_region+0x78>
     a90:	4c1c      	ldr	r4, [pc, #112]	; (b04 <boot_copy_region+0x7c>)
     a92:	4d1d      	ldr	r5, [pc, #116]	; (b08 <boot_copy_region+0x80>)
{
     a94:	4688      	mov	r8, r1
     a96:	4691      	mov	r9, r2
     a98:	469a      	mov	sl, r3
    bytes_copied = 0;
     a9a:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a9e:	429e      	cmp	r6, r3
     aa0:	d301      	bcc.n	aa6 <boot_copy_region+0x1e>
    return 0;
     aa2:	2000      	movs	r0, #0
     aa4:	e00f      	b.n	ac6 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     aa8:	4a15      	ldr	r2, [pc, #84]	; (b00 <boot_copy_region+0x78>)
        if (sz - bytes_copied > sizeof buf) {
     aaa:	1b9f      	subs	r7, r3, r6
     aac:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     ab0:	bf28      	it	cs
     ab2:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ab6:	463b      	mov	r3, r7
     ab8:	eb06 010a 	add.w	r1, r6, sl
     abc:	4640      	mov	r0, r8
     abe:	f009 fca5 	bl	a40c <flash_area_read>
        if (rc != 0) {
     ac2:	b110      	cbz	r0, aca <boot_copy_region+0x42>
            return BOOT_EFLASH;
     ac4:	2001      	movs	r0, #1
}
     ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     aca:	990a      	ldr	r1, [sp, #40]	; 0x28
     acc:	463b      	mov	r3, r7
     ace:	465a      	mov	r2, fp
     ad0:	1871      	adds	r1, r6, r1
     ad2:	4648      	mov	r0, r9
     ad4:	f009 fcb6 	bl	a444 <flash_area_write>
        if (rc != 0) {
     ad8:	2800      	cmp	r0, #0
     ada:	d1f3      	bne.n	ac4 <boot_copy_region+0x3c>
     adc:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     ae0:	443e      	add	r6, r7
     ae2:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     ae6:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     aea:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     aee:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     af2:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     af6:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     afa:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     afe:	e7cd      	b.n	a9c <boot_copy_region+0x14>
     b00:	20000f10 	.word	0x20000f10
     b04:	40010000 	.word	0x40010000
     b08:	6e524635 	.word	0x6e524635

00000b0c <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b10:	4b81      	ldr	r3, [pc, #516]	; (d18 <FIH_LABEL_FIH_CALL_END_2142+0x40>)
     b12:	6243      	str	r3, [r0, #36]	; 0x24
{
     b14:	460e      	mov	r6, r1
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b16:	4b81      	ldr	r3, [pc, #516]	; (d1c <FIH_LABEL_FIH_CALL_END_2142+0x44>)
     b18:	6503      	str	r3, [r0, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b1a:	2100      	movs	r1, #0
{
     b1c:	4604      	mov	r4, r0
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b1e:	4608      	mov	r0, r1
     b20:	f008 fc49 	bl	93b6 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b24:	f104 0120 	add.w	r1, r4, #32
     b28:	b2c0      	uxtb	r0, r0
     b2a:	f001 ffbb 	bl	2aa4 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b2e:	2101      	movs	r1, #1
     b30:	2000      	movs	r0, #0
     b32:	f008 fc40 	bl	93b6 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b36:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     b3a:	b2c0      	uxtb	r0, r0
     b3c:	f001 ffb2 	bl	2aa4 <flash_area_open>
     b40:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b42:	4620      	mov	r0, r4
     b44:	f008 fd64 	bl	9610 <boot_read_sectors>
    if (rc != 0) {
     b48:	2800      	cmp	r0, #0
     b4a:	d148      	bne.n	bde <context_boot_go+0xd2>
    rc = boot_read_image_headers(state, false, NULL);
     b4c:	2200      	movs	r2, #0
     b4e:	4611      	mov	r1, r2
     b50:	4620      	mov	r0, r4
     b52:	f008 fd06 	bl	9562 <boot_read_image_headers>
    if (rc != 0) {
     b56:	2800      	cmp	r0, #0
     b58:	d158      	bne.n	c0c <context_boot_go+0x100>
    if (boot_slots_compatible(state)) {
     b5a:	4620      	mov	r0, r4
     b5c:	f008 fee3 	bl	9926 <boot_slots_compatible>
     b60:	2800      	cmp	r0, #0
     b62:	d053      	beq.n	c0c <context_boot_go+0x100>
        boot_status_reset(bs);
     b64:	4668      	mov	r0, sp
     b66:	f008 fd74 	bl	9652 <boot_status_reset>
        rc = swap_read_status(state, bs);
     b6a:	4669      	mov	r1, sp
     b6c:	4620      	mov	r0, r4
     b6e:	f008 fe0e 	bl	978e <swap_read_status>
        if (rc != 0) {
     b72:	2800      	cmp	r0, #0
     b74:	d14a      	bne.n	c0c <context_boot_go+0x100>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     b76:	4668      	mov	r0, sp
     b78:	f008 fd74 	bl	9664 <boot_status_is_reset>
     b7c:	f080 0101 	eor.w	r1, r0, #1
     b80:	466a      	mov	r2, sp
     b82:	b2c9      	uxtb	r1, r1
     b84:	4620      	mov	r0, r4
     b86:	f008 fcec 	bl	9562 <boot_read_image_headers>
        if (rc != 0) {
     b8a:	4602      	mov	r2, r0
     b8c:	bbf0      	cbnz	r0, c0c <context_boot_go+0x100>
        if (!boot_status_is_reset(bs)) {
     b8e:	4668      	mov	r0, sp
     b90:	f008 fd68 	bl	9664 <boot_status_is_reset>
     b94:	4607      	mov	r7, r0
     b96:	bbe8      	cbnz	r0, c14 <context_boot_go+0x108>
    rc = boot_swap_image(state, bs);
     b98:	4669      	mov	r1, sp
     b9a:	4620      	mov	r0, r4
     b9c:	f7ff ff42 	bl	a24 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     ba8:	3b03      	subs	r3, #3
     baa:	2b01      	cmp	r3, #1
     bac:	d806      	bhi.n	bbc <context_boot_go+0xb0>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     bae:	4638      	mov	r0, r7
     bb0:	f008 fe3b 	bl	982a <swap_set_image_ok>
        if (rc != 0) {
     bb4:	b110      	cbz	r0, bbc <context_boot_go+0xb0>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bb6:	23ff      	movs	r3, #255	; 0xff
     bb8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc0:	3b02      	subs	r3, #2
     bc2:	2b02      	cmp	r3, #2
     bc4:	d806      	bhi.n	bd4 <context_boot_go+0xc8>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     bc6:	2000      	movs	r0, #0
     bc8:	f008 fe1d 	bl	9806 <swap_set_copy_done>
        if (rc != 0) {
     bcc:	b110      	cbz	r0, bd4 <context_boot_go+0xc8>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bce:	23ff      	movs	r3, #255	; 0xff
     bd0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     bd4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     bd8:	2bff      	cmp	r3, #255	; 0xff
     bda:	d112      	bne.n	c02 <context_boot_go+0xf6>
        while (1) {}
     bdc:	e7fe      	b.n	bdc <context_boot_go+0xd0>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bde:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     be0:	4298      	cmp	r0, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     be2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     be6:	d1b1      	bne.n	b4c <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     be8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     bec:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     bf0:	2b04      	cmp	r3, #4
     bf2:	d836      	bhi.n	c62 <FIH_LABEL_FIH_CALL_END_1912+0x10>
     bf4:	2b01      	cmp	r3, #1
     bf6:	d83a      	bhi.n	c6e <FIH_LABEL_FIH_CALL_END_1912+0x1c>
     bf8:	d051      	beq.n	c9e <FIH_LABEL_FIH_CALL_END_1912+0x4c>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bfa:	23ff      	movs	r3, #255	; 0xff
     bfc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c00:	e04d      	b.n	c9e <FIH_LABEL_FIH_CALL_END_1912+0x4c>
            rc = boot_read_image_headers(state, false, bs);
     c02:	466a      	mov	r2, sp
     c04:	2100      	movs	r1, #0
     c06:	4620      	mov	r0, r4
     c08:	f008 fcab 	bl	9562 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c0c:	2301      	movs	r3, #1
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c0e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c12:	e7e9      	b.n	be8 <context_boot_go+0xdc>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c14:	f89d 8007 	ldrb.w	r8, [sp, #7]
     c18:	f1b8 0f01 	cmp.w	r8, #1
     c1c:	d115      	bne.n	c4a <FIH_LABEL_FIH_CALL_START_1897>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c1e:	4610      	mov	r0, r2
     c20:	f004 ff4a 	bl	5ab8 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c24:	1e83      	subs	r3, r0, #2
     c26:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c28:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c2a:	d80b      	bhi.n	c44 <FIH_LABEL_FIH_CALL_END_1861+0x10>

00000c2c <FIH_LABEL_FIH_CALL_START_1846>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c2c:	4641      	mov	r1, r8
     c2e:	4620      	mov	r0, r4
     c30:	f7ff fe88 	bl	944 <boot_validate_slot.isra.0>

00000c34 <FIH_LABEL_FIH_CALL_END_1861>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c34:	4b3a      	ldr	r3, [pc, #232]	; (d20 <FIH_LABEL_FIH_CALL_END_2142+0x48>)
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	4298      	cmp	r0, r3
     c3a:	d003      	beq.n	c44 <FIH_LABEL_FIH_CALL_END_1861+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     c3c:	2801      	cmp	r0, #1
     c3e:	bf14      	ite	ne
     c40:	2705      	movne	r7, #5
     c42:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c44:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     c48:	e7ce      	b.n	be8 <context_boot_go+0xdc>

00000c4a <FIH_LABEL_FIH_CALL_START_1897>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c4a:	2101      	movs	r1, #1
     c4c:	4620      	mov	r0, r4
     c4e:	f7ff fe79 	bl	944 <boot_validate_slot.isra.0>

00000c52 <FIH_LABEL_FIH_CALL_END_1912>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c52:	4b33      	ldr	r3, [pc, #204]	; (d20 <FIH_LABEL_FIH_CALL_END_2142+0x48>)
     c54:	681b      	ldr	r3, [r3, #0]
     c56:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c58:	bf0c      	ite	eq
     c5a:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c5e:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c60:	e7d5      	b.n	c0e <context_boot_go+0x102>
        switch (BOOT_SWAP_TYPE(state)) {
     c62:	2b05      	cmp	r3, #5
     c64:	d1c9      	bne.n	bfa <context_boot_go+0xee>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c66:	2000      	movs	r0, #0
     c68:	f008 fddf 	bl	982a <swap_set_image_ok>
     c6c:	e012      	b.n	c94 <FIH_LABEL_FIH_CALL_END_1912+0x42>
        rc = boot_swap_image(state, bs);
     c6e:	4669      	mov	r1, sp
     c70:	4620      	mov	r0, r4
     c72:	f7ff fed7 	bl	a24 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     c76:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c7a:	1eda      	subs	r2, r3, #3
     c7c:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     c7e:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c80:	d80b      	bhi.n	c9a <FIH_LABEL_FIH_CALL_END_1912+0x48>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c82:	2000      	movs	r0, #0
     c84:	f008 fdd1 	bl	982a <swap_set_image_ok>
        if (rc != 0) {
     c88:	4605      	mov	r5, r0
     c8a:	2800      	cmp	r0, #0
     c8c:	d1b5      	bne.n	bfa <context_boot_go+0xee>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c8e:	2000      	movs	r0, #0
     c90:	f008 fdb9 	bl	9806 <swap_set_copy_done>
            if (rc != 0) {
     c94:	4605      	mov	r5, r0
     c96:	b110      	cbz	r0, c9e <FIH_LABEL_FIH_CALL_END_1912+0x4c>
     c98:	e7af      	b.n	bfa <context_boot_go+0xee>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c9a:	2b02      	cmp	r3, #2
     c9c:	d0f7      	beq.n	c8e <FIH_LABEL_FIH_CALL_END_1912+0x3c>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c9e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     ca2:	2bff      	cmp	r3, #255	; 0xff
     ca4:	d100      	bne.n	ca8 <FIH_LABEL_FIH_CALL_END_1912+0x56>
            BOOT_LOG_ERR("panic!");
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     ca6:	e7fe      	b.n	ca6 <FIH_LABEL_FIH_CALL_END_1912+0x54>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     ca8:	2b01      	cmp	r3, #1
     caa:	d010      	beq.n	cce <FIH_LABEL_FIH_CALL_START_2127>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     cac:	466a      	mov	r2, sp
     cae:	2100      	movs	r1, #0
     cb0:	4620      	mov	r0, r4
     cb2:	f008 fc56 	bl	9562 <boot_read_image_headers>
            if (rc != 0) {
     cb6:	4605      	mov	r5, r0
     cb8:	b148      	cbz	r0, cce <FIH_LABEL_FIH_CALL_START_2127>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     cba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     cbc:	f009 fba5 	bl	a40a <flash_area_close>
     cc0:	6a20      	ldr	r0, [r4, #32]
     cc2:	f009 fba2 	bl	a40a <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     cc6:	4628      	mov	r0, r5
     cc8:	b004      	add	sp, #16
     cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000cce <FIH_LABEL_FIH_CALL_START_2127>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     cce:	2100      	movs	r1, #0
     cd0:	4620      	mov	r0, r4
     cd2:	f7ff fe37 	bl	944 <boot_validate_slot.isra.0>
     cd6:	4607      	mov	r7, r0

00000cd8 <FIH_LABEL_FIH_CALL_END_2142>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cd8:	f8df 8044 	ldr.w	r8, [pc, #68]	; d20 <FIH_LABEL_FIH_CALL_END_2142+0x48>
     cdc:	f8d8 3000 	ldr.w	r3, [r8]
     ce0:	4283      	cmp	r3, r0
     ce2:	d10f      	bne.n	d04 <FIH_LABEL_FIH_CALL_END_2142+0x2c>
    memset(&bs, 0, sizeof(struct boot_status));
     ce4:	2210      	movs	r2, #16
     ce6:	2100      	movs	r1, #0
     ce8:	4668      	mov	r0, sp
     cea:	f009 ff05 	bl	aaf8 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cee:	6a20      	ldr	r0, [r4, #32]
     cf0:	f008 fb6a 	bl	93c8 <flash_area_get_device_id>
     cf4:	7130      	strb	r0, [r6, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     cf6:	6a23      	ldr	r3, [r4, #32]
    fih_rc = FIH_SUCCESS;
     cf8:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     cfc:	685b      	ldr	r3, [r3, #4]
     cfe:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d00:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     d02:	e7da      	b.n	cba <FIH_LABEL_FIH_CALL_END_1912+0x68>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d04:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d06:	f009 fb80 	bl	a40a <flash_area_close>
     d0a:	6a20      	ldr	r0, [r4, #32]
     d0c:	f009 fb7d 	bl	a40a <flash_area_close>
    if (rc) {
     d10:	2d00      	cmp	r5, #0
     d12:	bf08      	it	eq
     d14:	463d      	moveq	r5, r7
     d16:	e7d6      	b.n	cc6 <FIH_LABEL_FIH_CALL_END_1912+0x74>
     d18:	20000b10 	.word	0x20000b10
     d1c:	20000710 	.word	0x20000710
     d20:	2000070c 	.word	0x2000070c

00000d24 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d24:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d26:	4d06      	ldr	r5, [pc, #24]	; (d40 <FIH_LABEL_FIH_CALL_END_2762+0x4>)
{
     d28:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d2a:	2260      	movs	r2, #96	; 0x60
     d2c:	2100      	movs	r1, #0
     d2e:	4628      	mov	r0, r5
     d30:	f009 fee2 	bl	aaf8 <memset>

00000d34 <FIH_LABEL_FIH_CALL_START_2748>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d34:	4621      	mov	r1, r4
     d36:	4628      	mov	r0, r5
     d38:	f7ff fee8 	bl	b0c <context_boot_go>

00000d3c <FIH_LABEL_FIH_CALL_END_2762>:
}
     d3c:	bd38      	pop	{r3, r4, r5, pc}
     d3e:	bf00      	nop
     d40:	20001310 	.word	0x20001310

00000d44 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d44:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d46:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d48:	461d      	mov	r5, r3
     d4a:	b143      	cbz	r3, d5e <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d4c:	795b      	ldrb	r3, [r3, #5]
     d4e:	2b01      	cmp	r3, #1
     d50:	d107      	bne.n	d62 <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d52:	b921      	cbnz	r1, d5e <boot_read_image_header+0x1a>
     d54:	4b20      	ldr	r3, [pc, #128]	; (dd8 <boot_read_image_header+0x94>)
     d56:	682a      	ldr	r2, [r5, #0]
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	429a      	cmp	r2, r3
     d5c:	d817      	bhi.n	d8e <boot_read_image_header+0x4a>
    off = 0;
     d5e:	2400      	movs	r4, #0
     d60:	e018      	b.n	d94 <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     d62:	2b02      	cmp	r3, #2
     d64:	d1fb      	bne.n	d5e <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     d66:	682b      	ldr	r3, [r5, #0]
     d68:	2b01      	cmp	r3, #1
     d6a:	d907      	bls.n	d7c <boot_read_image_header+0x38>
     d6c:	4a1a      	ldr	r2, [pc, #104]	; (dd8 <boot_read_image_header+0x94>)
     d6e:	6812      	ldr	r2, [r2, #0]
     d70:	4293      	cmp	r3, r2
     d72:	d8f4      	bhi.n	d5e <boot_read_image_header+0x1a>
                if (slot == 0) {
     d74:	fab1 f181 	clz	r1, r1
     d78:	0949      	lsrs	r1, r1, #5
     d7a:	e7f0      	b.n	d5e <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     d7c:	d1ef      	bne.n	d5e <boot_read_image_header+0x1a>
                if (slot == 0) {
     d7e:	b131      	cbz	r1, d8e <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     d80:	2901      	cmp	r1, #1
     d82:	d1ec      	bne.n	d5e <boot_read_image_header+0x1a>
     d84:	7929      	ldrb	r1, [r5, #4]
     d86:	3902      	subs	r1, #2
     d88:	bf18      	it	ne
     d8a:	2101      	movne	r1, #1
     d8c:	e7e7      	b.n	d5e <boot_read_image_header+0x1a>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     d8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d90:	685c      	ldr	r4, [r3, #4]
     d92:	2100      	movs	r1, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d94:	2000      	movs	r0, #0
     d96:	f008 fb0e 	bl	93b6 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d9a:	a901      	add	r1, sp, #4
     d9c:	b2c0      	uxtb	r0, r0
     d9e:	f001 fe81 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
     da2:	b130      	cbz	r0, db2 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     da4:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     da6:	9801      	ldr	r0, [sp, #4]
     da8:	f009 fb2f 	bl	a40a <flash_area_close>
    return rc;
}
     dac:	4620      	mov	r0, r4
     dae:	b002      	add	sp, #8
     db0:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     db2:	4621      	mov	r1, r4
     db4:	9801      	ldr	r0, [sp, #4]
     db6:	2320      	movs	r3, #32
     db8:	4632      	mov	r2, r6
     dba:	f009 fb27 	bl	a40c <flash_area_read>
    if (rc != 0) {
     dbe:	4604      	mov	r4, r0
     dc0:	2800      	cmp	r0, #0
     dc2:	d1ef      	bne.n	da4 <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     dc4:	2d00      	cmp	r5, #0
     dc6:	d0ee      	beq.n	da6 <boot_read_image_header+0x62>
     dc8:	6834      	ldr	r4, [r6, #0]
     dca:	4b04      	ldr	r3, [pc, #16]	; (ddc <boot_read_image_header+0x98>)
     dcc:	1ae4      	subs	r4, r4, r3
     dce:	bf18      	it	ne
     dd0:	f04f 34ff 	movne.w	r4, #4294967295
     dd4:	e7e7      	b.n	da6 <boot_read_image_header+0x62>
     dd6:	bf00      	nop
     dd8:	20000004 	.word	0x20000004
     ddc:	96f3b83d 	.word	0x96f3b83d

00000de0 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     de0:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     de2:	684b      	ldr	r3, [r1, #4]
{
     de4:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     de6:	4a11      	ldr	r2, [pc, #68]	; (e2c <fixup_revert+0x4c>)
     de8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     dec:	4293      	cmp	r3, r2
{
     dee:	4606      	mov	r6, r0
     df0:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     df2:	d118      	bne.n	e26 <fixup_revert+0x46>
        bs->op != BOOT_STATUS_OP_MOVE ||
     df4:	680b      	ldr	r3, [r1, #0]
     df6:	2b01      	cmp	r3, #1
     df8:	d115      	bne.n	e26 <fixup_revert+0x46>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
     dfa:	4669      	mov	r1, sp
     dfc:	4620      	mov	r0, r4
     dfe:	f004 fe0b 	bl	5a18 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
     e02:	f89d 3000 	ldrb.w	r3, [sp]
     e06:	2b03      	cmp	r3, #3
     e08:	d10d      	bne.n	e26 <fixup_revert+0x46>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     e0a:	4621      	mov	r1, r4
     e0c:	4630      	mov	r0, r6
     e0e:	f008 fc6a 	bl	96e6 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
     e12:	4620      	mov	r0, r4
     e14:	f00a faca 	bl	b3ac <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
     e18:	68a9      	ldr	r1, [r5, #8]
     e1a:	4620      	mov	r0, r4
     e1c:	f008 fb92 	bl	9544 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
     e20:	4620      	mov	r0, r4
     e22:	f004 fdeb 	bl	59fc <boot_write_magic>
        assert(rc == 0);
    }
}
     e26:	b002      	add	sp, #8
     e28:	bd70      	pop	{r4, r5, r6, pc}
     e2a:	bf00      	nop
     e2c:	04000100 	.word	0x04000100

00000e30 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
     e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e34:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e36:	460c      	mov	r4, r1
     e38:	685e      	ldr	r6, [r3, #4]
     e3a:	b089      	sub	sp, #36	; 0x24
     e3c:	4605      	mov	r5, r0
     e3e:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
     e40:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
     e42:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
     e44:	4293      	cmp	r3, r2
     e46:	4608      	mov	r0, r1
     e48:	f101 0101 	add.w	r1, r1, #1
     e4c:	d3f9      	bcc.n	e42 <swap_run+0x12>
     e4e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     e52:	f8c8 0000 	str.w	r0, [r8]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
     e56:	4620      	mov	r0, r4
     e58:	f008 fc04 	bl	9664 <boot_status_is_reset>
     e5c:	b198      	cbz	r0, e86 <swap_run+0x56>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     e5e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
     e60:	f008 fb4d 	bl	94fe <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     e64:	6aab      	ldr	r3, [r5, #40]	; 0x28
        sz = 0;
     e66:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     e68:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
     e6a:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
     e6c:	4290      	cmp	r0, r2
     e6e:	d901      	bls.n	e74 <swap_run+0x44>
                break;
            }
            first_trailer_idx--;
     e70:	3b01      	subs	r3, #1
            sz += sector_sz;
     e72:	e7fa      	b.n	e6a <swap_run+0x3a>
        }

        if (g_last_idx >= first_trailer_idx) {
     e74:	f8d8 2000 	ldr.w	r2, [r8]
     e78:	429a      	cmp	r2, r3
     e7a:	d304      	bcc.n	e86 <swap_run+0x56>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
     e7c:	2301      	movs	r3, #1
     e7e:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
     e80:	b009      	add	sp, #36	; 0x24
     e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
     e86:	a906      	add	r1, sp, #24
     e88:	2002      	movs	r0, #2
     e8a:	f001 fe0b 	bl	2aa4 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
     e8e:	a907      	add	r1, sp, #28
     e90:	2005      	movs	r0, #5
     e92:	f001 fe07 	bl	2aa4 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
     e96:	9a07      	ldr	r2, [sp, #28]
     e98:	4621      	mov	r1, r4
     e9a:	4628      	mov	r0, r5
     e9c:	f7ff ffa0 	bl	de0 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
     ea0:	7963      	ldrb	r3, [r4, #5]
     ea2:	2b01      	cmp	r3, #1
     ea4:	d10a      	bne.n	ebc <swap_run+0x8c>
        idx = g_last_idx;
     ea6:	f8d8 7000 	ldr.w	r7, [r8]
    BOOT_STATUS_ASSERT(rc == 0);
     eaa:	f8df b160 	ldr.w	fp, [pc, #352]	; 100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
            if (idx <= (g_last_idx - bs->idx + 1)) {
     eae:	f8d8 3000 	ldr.w	r3, [r8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
     eb2:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
     eb6:	b98f      	cbnz	r7, edc <swap_run+0xac>
        bs->idx = BOOT_STATUS_IDX_0;
     eb8:	2301      	movs	r3, #1
     eba:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
     ebc:	2302      	movs	r3, #2
     ebe:	7163      	strb	r3, [r4, #5]
    idx = 1;
     ec0:	2701      	movs	r7, #1
    while (idx <= g_last_idx) {
     ec2:	f8d8 3000 	ldr.w	r3, [r8]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
     ec6:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
     eca:	42bb      	cmp	r3, r7
     ecc:	d248      	bcs.n	f60 <swap_run+0x130>
    flash_area_close(fap_pri);
     ece:	4650      	mov	r0, sl
     ed0:	f009 fa9b 	bl	a40a <flash_area_close>
    flash_area_close(fap_sec);
     ed4:	9807      	ldr	r0, [sp, #28]
     ed6:	f009 fa98 	bl	a40a <flash_area_close>
     eda:	e7d1      	b.n	e80 <swap_run+0x50>
            if (idx <= (g_last_idx - bs->idx + 1)) {
     edc:	6822      	ldr	r2, [r4, #0]
     ede:	3301      	adds	r3, #1
     ee0:	1a9b      	subs	r3, r3, r2
     ee2:	42bb      	cmp	r3, r7
     ee4:	d33a      	bcc.n	f5c <swap_run+0x12c>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return fs->fs_off;
     ee8:	6819      	ldr	r1, [r3, #0]
     eea:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
     eee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
     ef2:	2a01      	cmp	r2, #1
     ef4:	f853 3c08 	ldr.w	r3, [r3, #-8]
     ef8:	eba3 0301 	sub.w	r3, r3, r1
     efc:	eba0 0a01 	sub.w	sl, r0, r1
     f00:	9304      	str	r3, [sp, #16]
     f02:	d111      	bne.n	f28 <swap_run+0xf8>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f04:	9b07      	ldr	r3, [sp, #28]
     f06:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
     f08:	68e3      	ldr	r3, [r4, #12]
     f0a:	2b02      	cmp	r3, #2
     f0c:	d008      	beq.n	f20 <swap_run+0xf0>
            rc = swap_erase_trailer_sectors(state, fap_pri);
     f0e:	4649      	mov	r1, r9
     f10:	4628      	mov	r0, r5
     f12:	f008 fbe8 	bl	96e6 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
     f16:	4622      	mov	r2, r4
     f18:	4649      	mov	r1, r9
     f1a:	4628      	mov	r0, r5
     f1c:	f008 fc18 	bl	9750 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     f20:	9903      	ldr	r1, [sp, #12]
     f22:	4628      	mov	r0, r5
     f24:	f008 fbdf 	bl	96e6 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
     f28:	4632      	mov	r2, r6
     f2a:	4651      	mov	r1, sl
     f2c:	4648      	mov	r0, r9
     f2e:	f008 fbd8 	bl	96e2 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
     f32:	9b04      	ldr	r3, [sp, #16]
     f34:	464a      	mov	r2, r9
     f36:	4649      	mov	r1, r9
     f38:	e9cd a600 	strd	sl, r6, [sp]
     f3c:	4628      	mov	r0, r5
     f3e:	f7ff fda3 	bl	a88 <boot_copy_region>
    rc = boot_write_status(state, bs);
     f42:	4621      	mov	r1, r4
     f44:	4628      	mov	r0, r5
     f46:	f008 fb9a 	bl	967e <boot_write_status>
    bs->idx++;
     f4a:	6823      	ldr	r3, [r4, #0]
     f4c:	3301      	adds	r3, #1
     f4e:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
     f50:	b120      	cbz	r0, f5c <swap_run+0x12c>
     f52:	f8db 3000 	ldr.w	r3, [fp]
     f56:	3301      	adds	r3, #1
     f58:	f8cb 3000 	str.w	r3, [fp]
            idx--;
     f5c:	3f01      	subs	r7, #1
     f5e:	e7a6      	b.n	eae <swap_run+0x7e>
        if (idx >= bs->idx) {
     f60:	6823      	ldr	r3, [r4, #0]
     f62:	42bb      	cmp	r3, r7
     f64:	d84d      	bhi.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     f66:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f68:	f8dd b01c 	ldr.w	fp, [sp, #28]
     f6c:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
     f70:	9104      	str	r1, [sp, #16]
     f72:	00fb      	lsls	r3, r7, #3
     f74:	3b08      	subs	r3, #8
     f76:	6811      	ldr	r1, [r2, #0]
     f78:	9103      	str	r1, [sp, #12]
     f7a:	58d1      	ldr	r1, [r2, r3]
     f7c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
     f7e:	58d0      	ldr	r0, [r2, r3]
     f80:	6813      	ldr	r3, [r2, #0]
     f82:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
     f86:	7923      	ldrb	r3, [r4, #4]
     f88:	2b01      	cmp	r3, #1
     f8a:	d138      	bne.n	ffe <swap_run+0x1ce>
     f8c:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
     f8e:	4632      	mov	r2, r6
     f90:	1ac9      	subs	r1, r1, r3
     f92:	4650      	mov	r0, sl
     f94:	9105      	str	r1, [sp, #20]
     f96:	f008 fba4 	bl	96e2 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
     f9a:	9905      	ldr	r1, [sp, #20]
     f9c:	9100      	str	r1, [sp, #0]
     f9e:	464b      	mov	r3, r9
     fa0:	4652      	mov	r2, sl
     fa2:	4659      	mov	r1, fp
     fa4:	9601      	str	r6, [sp, #4]
     fa6:	4628      	mov	r0, r5
     fa8:	f7ff fd6e 	bl	a88 <boot_copy_region>
        rc = boot_write_status(state, bs);
     fac:	4621      	mov	r1, r4
     fae:	4628      	mov	r0, r5
     fb0:	f008 fb65 	bl	967e <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
     fb4:	2302      	movs	r3, #2
     fb6:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     fb8:	b118      	cbz	r0, fc2 <swap_run+0x192>
     fba:	4a14      	ldr	r2, [pc, #80]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fbc:	6813      	ldr	r3, [r2, #0]
     fbe:	3301      	adds	r3, #1
     fc0:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
     fc2:	4632      	mov	r2, r6
     fc4:	4649      	mov	r1, r9
     fc6:	4658      	mov	r0, fp
     fc8:	f008 fb8b 	bl	96e2 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
     fcc:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
     fd0:	4651      	mov	r1, sl
     fd2:	1a9b      	subs	r3, r3, r2
     fd4:	e9cd 9600 	strd	r9, r6, [sp]
     fd8:	465a      	mov	r2, fp
     fda:	4628      	mov	r0, r5
     fdc:	f7ff fd54 	bl	a88 <boot_copy_region>
        rc = boot_write_status(state, bs);
     fe0:	4621      	mov	r1, r4
     fe2:	4628      	mov	r0, r5
     fe4:	f008 fb4b 	bl	967e <boot_write_status>
        bs->idx++;
     fe8:	6823      	ldr	r3, [r4, #0]
     fea:	3301      	adds	r3, #1
     fec:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
     fee:	2301      	movs	r3, #1
     ff0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     ff2:	b130      	cbz	r0, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     ff4:	4a05      	ldr	r2, [pc, #20]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     ff6:	6813      	ldr	r3, [r2, #0]
     ff8:	3301      	adds	r3, #1
     ffa:	6013      	str	r3, [r2, #0]
     ffc:	e001      	b.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
    if (bs->state == BOOT_STATUS_STATE_1) {
     ffe:	2b02      	cmp	r3, #2
    1000:	d0df      	beq.n	fc2 <swap_run+0x192>
        idx++;
    1002:	3701      	adds	r7, #1
    1004:	e75d      	b.n	ec2 <swap_run+0x92>
    1006:	bf00      	nop
    1008:	20000004 	.word	0x20000004
    100c:	20001370 	.word	0x20001370

00001010 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1010:	4a16      	ldr	r2, [pc, #88]	; (106c <nrf_cleanup_peripheral+0x5c>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1012:	f04f 33ff 	mov.w	r3, #4294967295
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1016:	2101      	movs	r1, #1
    1018:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    101a:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    101e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1022:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    1026:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1028:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    102c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1030:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
    1034:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1036:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    103a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    103e:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1042:	2100      	movs	r1, #0
    1044:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1048:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    104c:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    1050:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1054:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    }
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable_all(NRF_PPI_Type * p_reg)
{
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
    1058:	f5a2 4210 	sub.w	r2, r2, #36864	; 0x9000
    105c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1064:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1068:	4770      	bx	lr
    106a:	bf00      	nop
    106c:	4000b000 	.word	0x4000b000

00001070 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1074:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1076:	b915      	cbnz	r5, 107e <base64_encode+0xe>
		*olen = 0;
    1078:	6015      	str	r5, [r2, #0]
		return 0;
    107a:	2000      	movs	r0, #0
    107c:	e012      	b.n	10a4 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    107e:	2403      	movs	r4, #3
    1080:	fbb5 f4f4 	udiv	r4, r5, r4
    1084:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1088:	42bd      	cmp	r5, r7
    108a:	bf18      	it	ne
    108c:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    108e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1092:	d209      	bcs.n	10a8 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1094:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    1096:	3401      	adds	r4, #1
    1098:	428c      	cmp	r4, r1
    109a:	d800      	bhi.n	109e <base64_encode+0x2e>
    109c:	b938      	cbnz	r0, 10ae <base64_encode+0x3e>
		*olen = n + 1;
    109e:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    10a0:	f06f 000b 	mvn.w	r0, #11

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    10a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    10a8:	f04f 34ff 	mov.w	r4, #4294967295
    10ac:	e7f7      	b.n	109e <base64_encode+0x2e>
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    10ae:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 116c <base64_encode+0xfc>
    10b2:	4604      	mov	r4, r0
	for (i = 0, p = dst; i < n; i += 3) {
    10b4:	2100      	movs	r1, #0
    10b6:	42b9      	cmp	r1, r7
    10b8:	f103 0c03 	add.w	ip, r3, #3
    10bc:	f104 0604 	add.w	r6, r4, #4
    10c0:	d32c      	bcc.n	111c <base64_encode+0xac>
	if (i < slen) {
    10c2:	42a9      	cmp	r1, r5
    10c4:	4627      	mov	r7, r4
    10c6:	d224      	bcs.n	1112 <base64_encode+0xa2>
		C1 = *src++;
    10c8:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    10ca:	f101 0c01 	add.w	ip, r1, #1
    10ce:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    10d0:	4926      	ldr	r1, [pc, #152]	; (116c <base64_encode+0xfc>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    10d2:	bf38      	it	cc
    10d4:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    10d6:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    10da:	bf28      	it	cs
    10dc:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    10de:	f811 e00e 	ldrb.w	lr, [r1, lr]
    10e2:	f884 e000 	strb.w	lr, [r4]
		if ((i + 1) < slen) {
    10e6:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    10e8:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    10ec:	bf3c      	itt	cc
    10ee:	009b      	lslcc	r3, r3, #2
    10f0:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    10f4:	ea4f 1707 	mov.w	r7, r7, lsl #4
    10f8:	f007 0730 	and.w	r7, r7, #48	; 0x30
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    10fc:	bf38      	it	cc
    10fe:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1100:	f81e 7007 	ldrb.w	r7, [lr, r7]
    1104:	7067      	strb	r7, [r4, #1]
			*p++ = '=';
    1106:	bf28      	it	cs
    1108:	233d      	movcs	r3, #61	; 0x3d
    110a:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    110c:	233d      	movs	r3, #61	; 0x3d
    110e:	70e3      	strb	r3, [r4, #3]
    1110:	4637      	mov	r7, r6
	*olen = p - dst;
    1112:	1a38      	subs	r0, r7, r0
	*p = 0U;
    1114:	2300      	movs	r3, #0
	*olen = p - dst;
    1116:	6010      	str	r0, [r2, #0]
	*p = 0U;
    1118:	703b      	strb	r3, [r7, #0]
	return 0;
    111a:	e7ae      	b.n	107a <base64_encode+0xa>
		C1 = *src++;
    111c:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    1120:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		C3 = *src++;
    1124:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1128:	ea4f 09a4 	mov.w	r9, r4, asr #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    112c:	0124      	lsls	r4, r4, #4
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    112e:	f81e 9009 	ldrb.w	r9, [lr, r9]
    1132:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1136:	f004 0430 	and.w	r4, r4, #48	; 0x30
    113a:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    113e:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1140:	f819 4004 	ldrb.w	r4, [r9, r4]
    1144:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1148:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    114c:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
		*p++ = base64_enc_map[C3 & 0x3F];
    1150:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1154:	5ce3      	ldrb	r3, [r4, r3]
    1156:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    115a:	f81e 3008 	ldrb.w	r3, [lr, r8]
    115e:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1162:	3103      	adds	r1, #3
    1164:	4634      	mov	r4, r6
    1166:	4663      	mov	r3, ip
    1168:	e7a5      	b.n	10b6 <base64_encode+0x46>
    116a:	bf00      	nop
    116c:	0000dd58 	.word	0x0000dd58

00001170 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1174:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1178:	f8df 812c 	ldr.w	r8, [pc, #300]	; 12a8 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    117c:	2700      	movs	r7, #0
    117e:	463c      	mov	r4, r7
    1180:	463d      	mov	r5, r7
    1182:	4575      	cmp	r5, lr
    1184:	d31f      	bcc.n	11c6 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    1186:	bbe4      	cbnz	r4, 1202 <base64_decode+0x92>
		*olen = 0;
    1188:	6014      	str	r4, [r2, #0]
		return 0;
    118a:	2000      	movs	r0, #0
	}

	*olen = p - dst;

	return 0;
}
    118c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    1190:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    1192:	4576      	cmp	r6, lr
    1194:	d033      	beq.n	11fe <base64_decode+0x8e>
    1196:	f813 c006 	ldrb.w	ip, [r3, r6]
    119a:	f1bc 0f20 	cmp.w	ip, #32
    119e:	d0f7      	beq.n	1190 <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    11a0:	ebae 0906 	sub.w	r9, lr, r6
    11a4:	f1b9 0f01 	cmp.w	r9, #1
    11a8:	eba6 0505 	sub.w	r5, r6, r5
    11ac:	d00d      	beq.n	11ca <base64_decode+0x5a>
    11ae:	f1bc 0f0d 	cmp.w	ip, #13
    11b2:	d10a      	bne.n	11ca <base64_decode+0x5a>
    11b4:	eb03 0906 	add.w	r9, r3, r6
    11b8:	f899 9001 	ldrb.w	r9, [r9, #1]
    11bc:	f1b9 0f0a 	cmp.w	r9, #10
    11c0:	d16e      	bne.n	12a0 <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    11c2:	1c75      	adds	r5, r6, #1
    11c4:	e7dd      	b.n	1182 <base64_decode+0x12>
    11c6:	462e      	mov	r6, r5
    11c8:	e7e3      	b.n	1192 <base64_decode+0x22>
		if (src[i] == '\n') {
    11ca:	f1bc 0f0a 	cmp.w	ip, #10
    11ce:	d0f8      	beq.n	11c2 <base64_decode+0x52>
		if (x != 0U) {
    11d0:	b92d      	cbnz	r5, 11de <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    11d2:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    11d6:	d105      	bne.n	11e4 <base64_decode+0x74>
    11d8:	3701      	adds	r7, #1
    11da:	2f02      	cmp	r7, #2
    11dc:	d90d      	bls.n	11fa <base64_decode+0x8a>
			return -EINVAL;
    11de:	f06f 0015 	mvn.w	r0, #21
    11e2:	e7d3      	b.n	118c <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    11e4:	f01c 0f80 	tst.w	ip, #128	; 0x80
    11e8:	d1f9      	bne.n	11de <base64_decode+0x6e>
    11ea:	f818 500c 	ldrb.w	r5, [r8, ip]
    11ee:	2d7f      	cmp	r5, #127	; 0x7f
    11f0:	d0f5      	beq.n	11de <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    11f2:	2d3f      	cmp	r5, #63	; 0x3f
    11f4:	d801      	bhi.n	11fa <base64_decode+0x8a>
    11f6:	2f00      	cmp	r7, #0
    11f8:	d1f1      	bne.n	11de <base64_decode+0x6e>
		n++;
    11fa:	3401      	adds	r4, #1
    11fc:	e7e1      	b.n	11c2 <base64_decode+0x52>
    11fe:	4635      	mov	r5, r6
    1200:	e7c1      	b.n	1186 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    1202:	f004 0607 	and.w	r6, r4, #7
    1206:	f04f 0c06 	mov.w	ip, #6
    120a:	08e4      	lsrs	r4, r4, #3
    120c:	fb0c f606 	mul.w	r6, ip, r6
    1210:	fb0c f404 	mul.w	r4, ip, r4
    1214:	3607      	adds	r6, #7
	n -= j;
    1216:	1be4      	subs	r4, r4, r7
    1218:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    121c:	b170      	cbz	r0, 123c <base64_decode+0xcc>
    121e:	428c      	cmp	r4, r1
    1220:	d80c      	bhi.n	123c <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1222:	2700      	movs	r7, #0
		j -= (base64_dec_map[*src] == 64U);
    1224:	f8df e080 	ldr.w	lr, [pc, #128]	; 12a8 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1228:	f8df 8080 	ldr.w	r8, [pc, #128]	; 12ac <base64_decode+0x13c>
    122c:	441d      	add	r5, r3
	if (dst == NULL || dlen < n) {
    122e:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1230:	2603      	movs	r6, #3
    1232:	463c      	mov	r4, r7
    1234:	429d      	cmp	r5, r3
    1236:	d105      	bne.n	1244 <base64_decode+0xd4>
	*olen = p - dst;
    1238:	1a0c      	subs	r4, r1, r0
	return 0;
    123a:	e7a5      	b.n	1188 <base64_decode+0x18>
		*olen = n;
    123c:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    123e:	f06f 000b 	mvn.w	r0, #11
    1242:	e7a3      	b.n	118c <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1244:	f813 9b01 	ldrb.w	r9, [r3], #1
    1248:	f1a9 0c0a 	sub.w	ip, r9, #10
    124c:	fa5f fc8c 	uxtb.w	ip, ip
    1250:	f1bc 0f16 	cmp.w	ip, #22
    1254:	d804      	bhi.n	1260 <base64_decode+0xf0>
    1256:	fa48 fc0c 	asr.w	ip, r8, ip
    125a:	f01c 0f01 	tst.w	ip, #1
    125e:	d0e9      	beq.n	1234 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    1260:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    1264:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    1266:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    126a:	bf08      	it	eq
    126c:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    126e:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    1272:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1274:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    1278:	d1dc      	bne.n	1234 <base64_decode+0xc4>
			if (j > 0) {
    127a:	b17e      	cbz	r6, 129c <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    127c:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    127e:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    1280:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    1282:	d102      	bne.n	128a <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    1284:	3101      	adds	r1, #1
			n = 0;
    1286:	2400      	movs	r4, #0
    1288:	e7d4      	b.n	1234 <base64_decode+0xc4>
			if (j > 2) {
    128a:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    128c:	ea4f 2417 	mov.w	r4, r7, lsr #8
    1290:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    1292:	bf16      	itet	ne
    1294:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1296:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1298:	3103      	addne	r1, #3
    129a:	e7f4      	b.n	1286 <base64_decode+0x116>
			n = 0;
    129c:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    129e:	e7c9      	b.n	1234 <base64_decode+0xc4>
		if (x != 0U) {
    12a0:	2d00      	cmp	r5, #0
    12a2:	d0a2      	beq.n	11ea <base64_decode+0x7a>
    12a4:	e79b      	b.n	11de <base64_decode+0x6e>
    12a6:	bf00      	nop
    12a8:	0000dcd8 	.word	0x0000dcd8
    12ac:	ffbffff6 	.word	0xffbffff6

000012b0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    12b0:	680b      	ldr	r3, [r1, #0]
    12b2:	3301      	adds	r3, #1
    12b4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    12b6:	4b01      	ldr	r3, [pc, #4]	; (12bc <char_out+0xc>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	4718      	bx	r3
    12bc:	20000008 	.word	0x20000008

000012c0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    12c0:	b507      	push	{r0, r1, r2, lr}
    12c2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    12c4:	2100      	movs	r1, #0
{
    12c6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    12c8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    12ca:	4803      	ldr	r0, [pc, #12]	; (12d8 <vprintk+0x18>)
    12cc:	a901      	add	r1, sp, #4
    12ce:	f000 f913 	bl	14f8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    12d2:	b003      	add	sp, #12
    12d4:	f85d fb04 	ldr.w	pc, [sp], #4
    12d8:	000012b1 	.word	0x000012b1

000012dc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    12dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    12e0:	8b05      	ldrh	r5, [r0, #24]
{
    12e2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    12e4:	0728      	lsls	r0, r5, #28
{
    12e6:	4690      	mov	r8, r2
	if (processing) {
    12e8:	d411      	bmi.n	130e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    12ea:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    12ec:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    12f0:	f040 80cd 	bne.w	148e <process_event+0x1b2>
			evt = process_recheck(mgr);
    12f4:	4620      	mov	r0, r4
    12f6:	f008 fbcb 	bl	9a90 <process_recheck>
		}

		if (evt == EVT_NOP) {
    12fa:	b178      	cbz	r0, 131c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    12fc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12fe:	8b21      	ldrh	r1, [r4, #24]
    1300:	2804      	cmp	r0, #4
    1302:	d811      	bhi.n	1328 <process_event+0x4c>
    1304:	e8df f000 	tbb	[pc, r0]
    1308:	856d10c3 	.word	0x856d10c3
    130c:	95          	.byte	0x95
    130d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    130e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1310:	bf0c      	ite	eq
    1312:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1316:	f045 0520 	orrne.w	r5, r5, #32
    131a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    131c:	f388 8811 	msr	BASEPRI, r8
    1320:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1328:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    132c:	45aa      	cmp	sl, r5
    132e:	f000 80a6 	beq.w	147e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1332:	2700      	movs	r7, #0
    1334:	46b9      	mov	r9, r7
    1336:	463e      	mov	r6, r7
    1338:	68a3      	ldr	r3, [r4, #8]
    133a:	2b00      	cmp	r3, #0
    133c:	f000 80bd 	beq.w	14ba <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1340:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1344:	8321      	strh	r1, [r4, #24]
    1346:	f388 8811 	msr	BASEPRI, r8
    134a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    134e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1350:	2900      	cmp	r1, #0
    1352:	f000 80bb 	beq.w	14cc <process_event+0x1f0>
	return node->next;
    1356:	680d      	ldr	r5, [r1, #0]
    1358:	2900      	cmp	r1, #0
    135a:	f000 80b7 	beq.w	14cc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    135e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1362:	4633      	mov	r3, r6
    1364:	4652      	mov	r2, sl
    1366:	4620      	mov	r0, r4
    1368:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    136a:	2d00      	cmp	r5, #0
    136c:	d076      	beq.n	145c <process_event+0x180>
    136e:	682b      	ldr	r3, [r5, #0]
    1370:	4629      	mov	r1, r5
    1372:	461d      	mov	r5, r3
    1374:	e7f0      	b.n	1358 <process_event+0x7c>
    1376:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    137a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    137c:	2a01      	cmp	r2, #1
    137e:	d81b      	bhi.n	13b8 <process_event+0xdc>
	list->head = NULL;
    1380:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1382:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1386:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1388:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    138a:	b289      	uxth	r1, r1
	list->tail = NULL;
    138c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1390:	d109      	bne.n	13a6 <process_event+0xca>
    1392:	463b      	mov	r3, r7
    1394:	e003      	b.n	139e <process_event+0xc2>
				mgr->refs += 1U;
    1396:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	3201      	adds	r2, #1
    139c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    139e:	2b00      	cmp	r3, #0
    13a0:	d1f9      	bne.n	1396 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13a2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    13a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    13a8:	4620      	mov	r0, r4
    13aa:	f008 fb71 	bl	9a90 <process_recheck>
    13ae:	2800      	cmp	r0, #0
    13b0:	d07b      	beq.n	14aa <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13b2:	f041 0120 	orr.w	r1, r1, #32
    13b6:	e077      	b.n	14a8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    13b8:	2b04      	cmp	r3, #4
    13ba:	d10a      	bne.n	13d2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13bc:	f021 0107 	bic.w	r1, r1, #7
    13c0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    13c2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    13c4:	4620      	mov	r0, r4
    13c6:	f008 fb63 	bl	9a90 <process_recheck>
    13ca:	b110      	cbz	r0, 13d2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13cc:	f041 0120 	orr.w	r1, r1, #32
    13d0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13d2:	8b21      	ldrh	r1, [r4, #24]
    13d4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13d8:	45aa      	cmp	sl, r5
    13da:	d050      	beq.n	147e <process_event+0x1a2>
    13dc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    13de:	46b9      	mov	r9, r7
    13e0:	e7aa      	b.n	1338 <process_event+0x5c>
			transit = mgr->transitions->start;
    13e2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13e4:	f021 0107 	bic.w	r1, r1, #7
    13e8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    13ec:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    13ee:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    13f2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    13f4:	d12d      	bne.n	1452 <process_event+0x176>
		    || (transit != NULL)) {
    13f6:	f1b9 0f00 	cmp.w	r9, #0
    13fa:	d040      	beq.n	147e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    13fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1400:	8321      	strh	r1, [r4, #24]
    1402:	f388 8811 	msr	BASEPRI, r8
    1406:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    140a:	493a      	ldr	r1, [pc, #232]	; (14f4 <process_event+0x218>)
    140c:	4620      	mov	r0, r4
    140e:	47c8      	blx	r9
    1410:	e029      	b.n	1466 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1412:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1416:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1418:	f041 0104 	orr.w	r1, r1, #4
    141c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    141e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1420:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1424:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1426:	d0e6      	beq.n	13f6 <process_event+0x11a>
    1428:	2700      	movs	r7, #0
		res = 0;
    142a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    142c:	f04f 0a04 	mov.w	sl, #4
    1430:	e782      	b.n	1338 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1432:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1436:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1438:	f041 0105 	orr.w	r1, r1, #5
    143c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    143e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1440:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1444:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1446:	d0d6      	beq.n	13f6 <process_event+0x11a>
    1448:	2700      	movs	r7, #0
		res = 0;
    144a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    144c:	f04f 0a05 	mov.w	sl, #5
    1450:	e772      	b.n	1338 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1452:	2700      	movs	r7, #0
		res = 0;
    1454:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1456:	f04f 0a06 	mov.w	sl, #6
    145a:	e76d      	b.n	1338 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    145c:	462b      	mov	r3, r5
    145e:	e787      	b.n	1370 <process_event+0x94>
			if (transit != NULL) {
    1460:	f1b9 0f00 	cmp.w	r9, #0
    1464:	d1d1      	bne.n	140a <process_event+0x12e>
	__asm__ volatile(
    1466:	f04f 0320 	mov.w	r3, #32
    146a:	f3ef 8811 	mrs	r8, BASEPRI
    146e:	f383 8812 	msr	BASEPRI_MAX, r3
    1472:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1476:	8b23      	ldrh	r3, [r4, #24]
    1478:	f023 0308 	bic.w	r3, r3, #8
    147c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    147e:	8b25      	ldrh	r5, [r4, #24]
    1480:	06ea      	lsls	r2, r5, #27
    1482:	d52e      	bpl.n	14e2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1484:	f025 0310 	bic.w	r3, r5, #16
    1488:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    148a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    148e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1490:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1492:	2e00      	cmp	r6, #0
    1494:	f6bf af6f 	bge.w	1376 <process_event+0x9a>
	list->head = NULL;
    1498:	2300      	movs	r3, #0
		*clients = mgr->clients;
    149a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    149c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a0:	f021 0107 	bic.w	r1, r1, #7
    14a4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14a8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14aa:	8b21      	ldrh	r1, [r4, #24]
    14ac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14b0:	45aa      	cmp	sl, r5
    14b2:	f04f 0900 	mov.w	r9, #0
    14b6:	f47f af3f 	bne.w	1338 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    14ba:	2f00      	cmp	r7, #0
    14bc:	d09b      	beq.n	13f6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14be:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14c2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    14c4:	f388 8811 	msr	BASEPRI, r8
    14c8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    14cc:	2f00      	cmp	r7, #0
    14ce:	d0c7      	beq.n	1460 <process_event+0x184>
	return node->next;
    14d0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    14d2:	4639      	mov	r1, r7
    14d4:	4633      	mov	r3, r6
    14d6:	4652      	mov	r2, sl
    14d8:	4620      	mov	r0, r4
    14da:	f008 fb05 	bl	9ae8 <notify_one>
	list->head = node;
    14de:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    14e0:	e7f4      	b.n	14cc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    14e2:	06ab      	lsls	r3, r5, #26
    14e4:	f57f af1a 	bpl.w	131c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    14e8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    14ec:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    14ee:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    14f2:	e6ff      	b.n	12f4 <process_event+0x18>
    14f4:	00009b15 	.word	0x00009b15

000014f8 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    14f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14fc:	b08d      	sub	sp, #52	; 0x34
    14fe:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1500:	1e53      	subs	r3, r2, #1
{
    1502:	4681      	mov	r9, r0
    1504:	9101      	str	r1, [sp, #4]
	fmt--;
    1506:	9303      	str	r3, [sp, #12]
	size_t count = 0;
    1508:	f04f 0800 	mov.w	r8, #0

start:
	while (*++fmt != '%') {
    150c:	9b03      	ldr	r3, [sp, #12]
    150e:	7858      	ldrb	r0, [r3, #1]
    1510:	2825      	cmp	r0, #37	; 0x25
    1512:	f103 0401 	add.w	r4, r3, #1
    1516:	d119      	bne.n	154c <cbvprintf+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
    1518:	461e      	mov	r6, r3
	special = 0;
    151a:	2000      	movs	r0, #0
	precision = -1;
    151c:	f04f 37ff 	mov.w	r7, #4294967295
	for (fmt++ ; ; fmt++) {
    1520:	3602      	adds	r6, #2
	length_mod = 0;
    1522:	4603      	mov	r3, r0
	padding_mode = 0;
    1524:	9002      	str	r0, [sp, #8]
	min_width = -1;
    1526:	463c      	mov	r4, r7
		switch (*fmt) {
    1528:	7831      	ldrb	r1, [r6, #0]
    152a:	9603      	str	r6, [sp, #12]
    152c:	2939      	cmp	r1, #57	; 0x39
    152e:	d856      	bhi.n	15de <cbvprintf+0xe6>
    1530:	291f      	cmp	r1, #31
    1532:	d814      	bhi.n	155e <cbvprintf+0x66>
    1534:	2900      	cmp	r1, #0
    1536:	f000 81fe 	beq.w	1936 <CONFIG_USB_DEVICE_VID+0x21>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    153a:	9901      	ldr	r1, [sp, #4]
    153c:	2025      	movs	r0, #37	; 0x25
    153e:	47c8      	blx	r9
			OUTC(*fmt);
    1540:	9901      	ldr	r1, [sp, #4]
    1542:	7830      	ldrb	r0, [r6, #0]
    1544:	47c8      	blx	r9
    1546:	f108 0802 	add.w	r8, r8, #2
			goto start;
    154a:	e7df      	b.n	150c <cbvprintf+0x14>
		if (*fmt == '\0') {
    154c:	2800      	cmp	r0, #0
    154e:	f000 81f2 	beq.w	1936 <CONFIG_USB_DEVICE_VID+0x21>
		OUTC(*fmt);
    1552:	9901      	ldr	r1, [sp, #4]
    1554:	47c8      	blx	r9
    1556:	f108 0801 	add.w	r8, r8, #1
	while (*++fmt != '%') {
    155a:	9403      	str	r4, [sp, #12]
    155c:	e7d6      	b.n	150c <cbvprintf+0x14>
		switch (*fmt) {
    155e:	f1a1 0220 	sub.w	r2, r1, #32
    1562:	2a19      	cmp	r2, #25
    1564:	d8e9      	bhi.n	153a <cbvprintf+0x42>
    1566:	f20f 0c08 	addw	ip, pc, #8
    156a:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    156e:	bf00      	nop
    1570:	000015d9 	.word	0x000015d9
    1574:	0000153b 	.word	0x0000153b
    1578:	0000153b 	.word	0x0000153b
    157c:	000015d9 	.word	0x000015d9
    1580:	0000153b 	.word	0x0000153b
    1584:	00001661 	.word	0x00001661
    1588:	0000153b 	.word	0x0000153b
    158c:	0000153b 	.word	0x0000153b
    1590:	0000153b 	.word	0x0000153b
    1594:	0000153b 	.word	0x0000153b
    1598:	000016a7 	.word	0x000016a7
    159c:	000015d9 	.word	0x000015d9
    15a0:	0000153b 	.word	0x0000153b
    15a4:	000016b9 	.word	0x000016b9
    15a8:	0000166d 	.word	0x0000166d
    15ac:	0000153b 	.word	0x0000153b
    15b0:	00001679 	.word	0x00001679
    15b4:	00001697 	.word	0x00001697
    15b8:	00001697 	.word	0x00001697
    15bc:	00001697 	.word	0x00001697
    15c0:	00001697 	.word	0x00001697
    15c4:	00001697 	.word	0x00001697
    15c8:	00001697 	.word	0x00001697
    15cc:	00001697 	.word	0x00001697
    15d0:	00001697 	.word	0x00001697
    15d4:	00001697 	.word	0x00001697
    15d8:	4608      	mov	r0, r1
    15da:	3601      	adds	r6, #1
    15dc:	e7a4      	b.n	1528 <cbvprintf+0x30>
    15de:	2958      	cmp	r1, #88	; 0x58
    15e0:	f000 80f5 	beq.w	17ce <cbvprintf+0x2d6>
    15e4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    15e8:	fa5f fc82 	uxtb.w	ip, r2
    15ec:	f1bc 0f17 	cmp.w	ip, #23
    15f0:	d8a3      	bhi.n	153a <cbvprintf+0x42>
    15f2:	2a17      	cmp	r2, #23
    15f4:	d8a1      	bhi.n	153a <cbvprintf+0x42>
    15f6:	f20f 0c08 	addw	ip, pc, #8
    15fa:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    15fe:	bf00      	nop
    1600:	0000186f 	.word	0x0000186f
    1604:	000016df 	.word	0x000016df
    1608:	0000153b 	.word	0x0000153b
    160c:	0000153b 	.word	0x0000153b
    1610:	0000153b 	.word	0x0000153b
    1614:	000016bf 	.word	0x000016bf
    1618:	000016df 	.word	0x000016df
    161c:	0000153b 	.word	0x0000153b
    1620:	0000153b 	.word	0x0000153b
    1624:	000016bf 	.word	0x000016bf
    1628:	0000153b 	.word	0x0000153b
    162c:	0000153b 	.word	0x0000153b
    1630:	0000153b 	.word	0x0000153b
    1634:	000017a7 	.word	0x000017a7
    1638:	0000153b 	.word	0x0000153b
    163c:	0000153b 	.word	0x0000153b
    1640:	00001851 	.word	0x00001851
    1644:	0000153b 	.word	0x0000153b
    1648:	000016df 	.word	0x000016df
    164c:	0000153b 	.word	0x0000153b
    1650:	0000153b 	.word	0x0000153b
    1654:	000017a7 	.word	0x000017a7
    1658:	0000153b 	.word	0x0000153b
    165c:	000016bf 	.word	0x000016bf
			OUTC('%');
    1660:	9901      	ldr	r1, [sp, #4]
    1662:	2025      	movs	r0, #37	; 0x25
    1664:	47c8      	blx	r9
    1666:	f108 0801 	add.w	r8, r8, #1
			goto start;
    166a:	e74f      	b.n	150c <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    166c:	9a02      	ldr	r2, [sp, #8]
    166e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1672:	9202      	str	r2, [sp, #8]
			precision = 0;
    1674:	2700      	movs	r7, #0
			continue;
    1676:	e7b0      	b.n	15da <cbvprintf+0xe2>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1678:	2c00      	cmp	r4, #0
    167a:	da0c      	bge.n	1696 <cbvprintf+0x19e>
    167c:	2f00      	cmp	r7, #0
    167e:	da0c      	bge.n	169a <cbvprintf+0x1a2>
    1680:	9a02      	ldr	r2, [sp, #8]
    1682:	2a00      	cmp	r2, #0
    1684:	f000 814f 	beq.w	1926 <CONFIG_USB_DEVICE_VID+0x11>
				if (min_width < 0) {
    1688:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    168c:	220a      	movs	r2, #10
    168e:	fb02 1404 	mla	r4, r2, r4, r1
				min_width = 10 * min_width + *fmt - '0';
    1692:	3c30      	subs	r4, #48	; 0x30
    1694:	e7a1      	b.n	15da <cbvprintf+0xe2>
			if (precision >= 0) {
    1696:	2f00      	cmp	r7, #0
    1698:	dbf6      	blt.n	1688 <cbvprintf+0x190>
				precision = 10 * precision + *fmt - '0';
    169a:	220a      	movs	r2, #10
    169c:	fb02 1207 	mla	r2, r2, r7, r1
    16a0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    16a4:	e799      	b.n	15da <cbvprintf+0xe2>
			if (precision >= 0) {
    16a6:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
    16a8:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    16ac:	f280 813d 	bge.w	192a <CONFIG_USB_DEVICE_VID+0x15>
				if (min_width < 0) {
    16b0:	2a00      	cmp	r2, #0
    16b2:	f280 813c 	bge.w	192e <CONFIG_USB_DEVICE_VID+0x19>
					min_width = -min_width;
    16b6:	4254      	negs	r4, r2
		switch (*fmt) {
    16b8:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    16ba:	9202      	str	r2, [sp, #8]
    16bc:	e78d      	b.n	15da <cbvprintf+0xe2>
			if (*fmt == 'h' && length_mod == 'h') {
    16be:	2968      	cmp	r1, #104	; 0x68
    16c0:	d103      	bne.n	16ca <cbvprintf+0x1d2>
    16c2:	2b68      	cmp	r3, #104	; 0x68
    16c4:	d106      	bne.n	16d4 <cbvprintf+0x1dc>
				length_mod = 'H';
    16c6:	2348      	movs	r3, #72	; 0x48
    16c8:	e787      	b.n	15da <cbvprintf+0xe2>
			} else if (*fmt == 'l' && length_mod == 'l') {
    16ca:	296c      	cmp	r1, #108	; 0x6c
    16cc:	d102      	bne.n	16d4 <cbvprintf+0x1dc>
    16ce:	2b6c      	cmp	r3, #108	; 0x6c
    16d0:	f000 812f 	beq.w	1932 <CONFIG_USB_DEVICE_VID+0x1d>
			} else if (length_mod == '\0') {
    16d4:	2b00      	cmp	r3, #0
    16d6:	f47f af30 	bne.w	153a <cbvprintf+0x42>
		switch (*fmt) {
    16da:	460b      	mov	r3, r1
    16dc:	e77d      	b.n	15da <cbvprintf+0xe2>
			if (length_mod == 'z') {
    16de:	2b7a      	cmp	r3, #122	; 0x7a
    16e0:	d106      	bne.n	16f0 <cbvprintf+0x1f8>
			} else if (*fmt == 'u') {
    16e2:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    16e4:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    16e8:	d115      	bne.n	1716 <cbvprintf+0x21e>
				d = va_arg(ap, unsigned int);
    16ea:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    16ee:	e00c      	b.n	170a <cbvprintf+0x212>
			} else if (length_mod == 'l') {
    16f0:	2b6c      	cmp	r3, #108	; 0x6c
    16f2:	d0f6      	beq.n	16e2 <cbvprintf+0x1ea>
			} else if (length_mod == 'L') {
    16f4:	2b4c      	cmp	r3, #76	; 0x4c
    16f6:	d1f4      	bne.n	16e2 <cbvprintf+0x1ea>
					unsigned long long llu =
    16f8:	3507      	adds	r5, #7
    16fa:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    16fe:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1700:	e9d3 6b00 	ldrd	r6, fp, [r3]
    1704:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
    1708:	d107      	bne.n	171a <cbvprintf+0x222>
			} else if (special == ' ') {
    170a:	2820      	cmp	r0, #32
    170c:	d142      	bne.n	1794 <cbvprintf+0x29c>
				prefix = " ";
    170e:	f8df a230 	ldr.w	sl, [pc, #560]	; 1940 <CONFIG_USB_DEVICE_VID+0x2b>
				min_width--;
    1712:	3c01      	subs	r4, #1
    1714:	e00a      	b.n	172c <cbvprintf+0x234>
				d = va_arg(ap, int);
    1716:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    171a:	f1bb 0f00 	cmp.w	fp, #0
    171e:	daf4      	bge.n	170a <cbvprintf+0x212>
				d = -d;
    1720:	4276      	negs	r6, r6
				prefix = "-";
    1722:	f8df a220 	ldr.w	sl, [pc, #544]	; 1944 <CONFIG_USB_DEVICE_VID+0x2f>
				d = -d;
    1726:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    172a:	3c01      	subs	r4, #1
	int i = 0;
    172c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1730:	9305      	str	r3, [sp, #20]
    1732:	2300      	movs	r3, #0
    1734:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1736:	4630      	mov	r0, r6
    1738:	4659      	mov	r1, fp
    173a:	220a      	movs	r2, #10
    173c:	2300      	movs	r3, #0
    173e:	f7fe fcdf 	bl	100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1742:	9b04      	ldr	r3, [sp, #16]
    1744:	f103 3cff 	add.w	ip, r3, #4294967295
    1748:	f8cd c010 	str.w	ip, [sp, #16]
    174c:	f8dd c014 	ldr.w	ip, [sp, #20]
    1750:	3230      	adds	r2, #48	; 0x30
    1752:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    1756:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    175a:	46b4      	mov	ip, r6
    175c:	465a      	mov	r2, fp
	} while (num);
    175e:	f1bc 0f0a 	cmp.w	ip, #10
    1762:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1766:	4606      	mov	r6, r0
    1768:	468b      	mov	fp, r1
	} while (num);
    176a:	d2e4      	bcs.n	1736 <cbvprintf+0x23e>
	return -i;
    176c:	f1c3 0601 	rsb	r6, r3, #1
			data = buf + sizeof(buf) - data_len;
    1770:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1772:	eb0d 0b03 	add.w	fp, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1776:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1778:	f1ab 0b04 	sub.w	fp, fp, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    177c:	da04      	bge.n	1788 <cbvprintf+0x290>
    177e:	9b02      	ldr	r3, [sp, #8]
    1780:	f013 0f01 	tst.w	r3, #1
    1784:	bf18      	it	ne
    1786:	4627      	movne	r7, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1788:	1bbb      	subs	r3, r7, r6
		if (precision > 0) {
    178a:	2b00      	cmp	r3, #0
		min_width -= data_len;
    178c:	bfd4      	ite	le
    178e:	1ba4      	suble	r4, r4, r6
			min_width -= precision;
    1790:	1be4      	subgt	r4, r4, r7
    1792:	e016      	b.n	17c2 <cbvprintf+0x2ca>
			} else if (special == '+') {
    1794:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1796:	bf0a      	itet	eq
    1798:	f8df a1ac 	ldreq.w	sl, [pc, #428]	; 1948 <CONFIG_USB_DEVICE_VID+0x33>
	prefix = "";
    179c:	f8df a1ac 	ldrne.w	sl, [pc, #428]	; 194c <CONFIG_USB_DEVICE_VID+0x37>
				min_width--;
    17a0:	f104 34ff 	addeq.w	r4, r4, #4294967295
    17a4:	e7c2      	b.n	172c <cbvprintf+0x234>
			if (*fmt == 'p') {
    17a6:	2970      	cmp	r1, #112	; 0x70
    17a8:	d110      	bne.n	17cc <cbvprintf+0x2d4>
				x = (uintptr_t)va_arg(ap, void *);
    17aa:	f855 2b04 	ldr.w	r2, [r5], #4
    17ae:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    17b0:	bb02      	cbnz	r2, 17f4 <cbvprintf+0x2fc>
					data = "(nil)";
    17b2:	f8df b19c 	ldr.w	fp, [pc, #412]	; 1950 <CONFIG_USB_DEVICE_VID+0x3b>
		min_width -= data_len;
    17b6:	3c05      	subs	r4, #5
		precision -= data_len;
    17b8:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    17bc:	2605      	movs	r6, #5
	prefix = "";
    17be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 194c <CONFIG_USB_DEVICE_VID+0x37>
		}

		if (!(padding_mode & PAD_TAIL)) {
    17c2:	9a02      	ldr	r2, [sp, #8]
    17c4:	0797      	lsls	r7, r2, #30
    17c6:	d46f      	bmi.n	18a8 <cbvprintf+0x3b0>
    17c8:	4627      	mov	r7, r4
    17ca:	e060      	b.n	188e <cbvprintf+0x396>
		switch (*fmt) {
    17cc:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    17ce:	2b6c      	cmp	r3, #108	; 0x6c
    17d0:	d103      	bne.n	17da <cbvprintf+0x2e2>
				x = va_arg(ap, unsigned int);
    17d2:	f855 2b04 	ldr.w	r2, [r5], #4
    17d6:	2300      	movs	r3, #0
    17d8:	e008      	b.n	17ec <cbvprintf+0x2f4>
			} else if (length_mod == 'L') {
    17da:	2b4c      	cmp	r3, #76	; 0x4c
    17dc:	d1f9      	bne.n	17d2 <cbvprintf+0x2da>
				unsigned long long llx =
    17de:	3507      	adds	r5, #7
    17e0:	f025 0307 	bic.w	r3, r5, #7
    17e4:	461d      	mov	r5, r3
    17e6:	685b      	ldr	r3, [r3, #4]
    17e8:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    17ec:	2823      	cmp	r0, #35	; 0x23
    17ee:	d128      	bne.n	1842 <cbvprintf+0x34a>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    17f0:	0688      	lsls	r0, r1, #26
    17f2:	d523      	bpl.n	183c <cbvprintf+0x344>
    17f4:	f8df a15c 	ldr.w	sl, [pc, #348]	; 1954 <CONFIG_USB_DEVICE_VID+0x3f>
				min_width -= 2;
    17f8:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    17fa:	f001 0160 	and.w	r1, r1, #96	; 0x60
    17fe:	f1a1 0e39 	sub.w	lr, r1, #57	; 0x39
	int i = 0;
    1802:	f10d 0c2d 	add.w	ip, sp, #45	; 0x2d
    1806:	f04f 0b00 	mov.w	fp, #0
		unsigned int c = num % base;
    180a:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    180e:	2909      	cmp	r1, #9
			c += alpha;
    1810:	bf88      	it	hi
    1812:	4471      	addhi	r1, lr
		buftop[--i] = c + '0';
    1814:	3130      	adds	r1, #48	; 0x30
    1816:	f80c 1d01 	strb.w	r1, [ip, #-1]!
	} while (num);
    181a:	2a10      	cmp	r2, #16
		num /= base;
    181c:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1820:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1824:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1828:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    182c:	f10b 36ff 	add.w	r6, fp, #4294967295
	} while (num);
    1830:	d20a      	bcs.n	1848 <cbvprintf+0x350>
	return -i;
    1832:	f1cb 0601 	rsb	r6, fp, #1
			data = buf + sizeof(buf) - data_len;
    1836:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    183a:	e79a      	b.n	1772 <cbvprintf+0x27a>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    183c:	f8df a118 	ldr.w	sl, [pc, #280]	; 1958 <CONFIG_USB_DEVICE_VID+0x43>
    1840:	e7da      	b.n	17f8 <cbvprintf+0x300>
	prefix = "";
    1842:	f8df a108 	ldr.w	sl, [pc, #264]	; 194c <CONFIG_USB_DEVICE_VID+0x37>
    1846:	e7d8      	b.n	17fa <cbvprintf+0x302>
		buftop[--i] = c + '0';
    1848:	46b3      	mov	fp, r6
		num /= base;
    184a:	460a      	mov	r2, r1
    184c:	4603      	mov	r3, r0
    184e:	e7dc      	b.n	180a <cbvprintf+0x312>
			data = va_arg(ap, char *);
    1850:	f855 bb04 	ldr.w	fp, [r5], #4
			data_len = strlen(data);
    1854:	4658      	mov	r0, fp
    1856:	f009 f90a 	bl	aa6e <strlen>
			if (precision >= 0 && data_len > precision) {
    185a:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    185c:	4606      	mov	r6, r0
			if (precision >= 0 && data_len > precision) {
    185e:	db02      	blt.n	1866 <cbvprintf+0x36e>
    1860:	42b8      	cmp	r0, r7
    1862:	bfa8      	it	ge
    1864:	463e      	movge	r6, r7
	prefix = "";
    1866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 194c <CONFIG_USB_DEVICE_VID+0x37>
			precision = 0;
    186a:	2700      	movs	r7, #0
    186c:	e78c      	b.n	1788 <cbvprintf+0x290>
			buf[0] = c;
    186e:	f855 3b04 	ldr.w	r3, [r5], #4
    1872:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1876:	3c01      	subs	r4, #1
		precision -= data_len;
    1878:	f04f 33ff 	mov.w	r3, #4294967295
			data_len = 1;
    187c:	2601      	movs	r6, #1
			data = buf;
    187e:	f10d 0b18 	add.w	fp, sp, #24
    1882:	e79c      	b.n	17be <cbvprintf+0x2c6>
    1884:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1886:	9901      	ldr	r1, [sp, #4]
    1888:	2020      	movs	r0, #32
    188a:	47c8      	blx	r9
    188c:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    188e:	3f01      	subs	r7, #1
    1890:	d5f8      	bpl.n	1884 <cbvprintf+0x38c>
    1892:	1e62      	subs	r2, r4, #1
    1894:	1c50      	adds	r0, r2, #1
    1896:	bfac      	ite	ge
    1898:	4621      	movge	r1, r4
    189a:	2100      	movlt	r1, #0
    189c:	f1c4 0400 	rsb	r4, r4, #0
    18a0:	bfb8      	it	lt
    18a2:	2400      	movlt	r4, #0
    18a4:	4488      	add	r8, r1
    18a6:	4414      	add	r4, r2
    18a8:	4657      	mov	r7, sl
    18aa:	e006      	b.n	18ba <cbvprintf+0x3c2>
    18ac:	9304      	str	r3, [sp, #16]
    18ae:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    18b0:	9901      	ldr	r1, [sp, #4]
    18b2:	47c8      	blx	r9
    18b4:	9a02      	ldr	r2, [sp, #8]
    18b6:	9b04      	ldr	r3, [sp, #16]
    18b8:	4617      	mov	r7, r2
		while (*prefix) {
    18ba:	463a      	mov	r2, r7
    18bc:	f812 0b01 	ldrb.w	r0, [r2], #1
    18c0:	2800      	cmp	r0, #0
    18c2:	d1f3      	bne.n	18ac <cbvprintf+0x3b4>
    18c4:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    18c6:	3a01      	subs	r2, #1
    18c8:	d51a      	bpl.n	1900 <cbvprintf+0x408>
    18ca:	1e5a      	subs	r2, r3, #1
    18cc:	3201      	adds	r2, #1
    18ce:	bfb8      	it	lt
    18d0:	2300      	movlt	r3, #0
    18d2:	eba3 0a0a 	sub.w	sl, r3, sl
    18d6:	4633      	mov	r3, r6
			OUTC('0');
		}
		while (--data_len >= 0) {
    18d8:	3b01      	subs	r3, #1
    18da:	d519      	bpl.n	1910 <cbvprintf+0x418>
    18dc:	1e73      	subs	r3, r6, #1
    18de:	3301      	adds	r3, #1
    18e0:	bfb8      	it	lt
    18e2:	2600      	movlt	r6, #0
    18e4:	4456      	add	r6, sl
    18e6:	4446      	add	r6, r8
    18e8:	46a0      	mov	r8, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    18ea:	f1b8 0801 	subs.w	r8, r8, #1
    18ee:	d516      	bpl.n	191e <CONFIG_USB_DEVICE_VID+0x9>
    18f0:	1e63      	subs	r3, r4, #1
    18f2:	3301      	adds	r3, #1
    18f4:	bfb8      	it	lt
    18f6:	2400      	movlt	r4, #0
    18f8:	4434      	add	r4, r6
    18fa:	eb04 0807 	add.w	r8, r4, r7
    18fe:	e605      	b.n	150c <cbvprintf+0x14>
    1900:	9204      	str	r2, [sp, #16]
    1902:	9302      	str	r3, [sp, #8]
			OUTC('0');
    1904:	9901      	ldr	r1, [sp, #4]
    1906:	2030      	movs	r0, #48	; 0x30
    1908:	47c8      	blx	r9
    190a:	9a04      	ldr	r2, [sp, #16]
    190c:	9b02      	ldr	r3, [sp, #8]
    190e:	e7da      	b.n	18c6 <cbvprintf+0x3ce>
    1910:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1912:	9901      	ldr	r1, [sp, #4]
    1914:	f81b 0b01 	ldrb.w	r0, [fp], #1
    1918:	47c8      	blx	r9
    191a:	9b02      	ldr	r3, [sp, #8]
    191c:	e7dc      	b.n	18d8 <cbvprintf+0x3e0>
			OUTC(' ');
    191e:	9901      	ldr	r1, [sp, #4]
    1920:	2020      	movs	r0, #32
    1922:	47c8      	blx	r9
    1924:	e7e1      	b.n	18ea <cbvprintf+0x3f2>
				padding_mode = PAD_ZERO;
    1926:	2201      	movs	r2, #1
    1928:	e6c7      	b.n	16ba <cbvprintf+0x1c2>
				precision = va_arg(ap, int);
    192a:	4617      	mov	r7, r2
    192c:	e655      	b.n	15da <cbvprintf+0xe2>
    192e:	4614      	mov	r4, r2
    1930:	e653      	b.n	15da <cbvprintf+0xe2>
				length_mod = 'L';
    1932:	234c      	movs	r3, #76	; 0x4c
    1934:	e651      	b.n	15da <cbvprintf+0xe2>
		}

		goto start;
	}
}
    1936:	4640      	mov	r0, r8
    1938:	b00d      	add	sp, #52	; 0x34
    193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    193e:	bf00      	nop
    1940:	0000dd9a 	.word	0x0000dd9a
    1944:	0000dd98 	.word	0x0000dd98
    1948:	0000dd9c 	.word	0x0000dd9c
    194c:	0000ddd2 	.word	0x0000ddd2
    1950:	0000dda4 	.word	0x0000dda4
    1954:	0000dd9e 	.word	0x0000dd9e
    1958:	0000dda1 	.word	0x0000dda1

0000195c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    195c:	b508      	push	{r3, lr}
	__asm__ volatile(
    195e:	f04f 0220 	mov.w	r2, #32
    1962:	f3ef 8311 	mrs	r3, BASEPRI
    1966:	f382 8812 	msr	BASEPRI_MAX, r2
    196a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    196e:	f002 fa43 	bl	3df8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1972:	4803      	ldr	r0, [pc, #12]	; (1980 <sys_reboot+0x24>)
    1974:	f008 f864 	bl	9a40 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1978:	f001 fea8 	bl	36cc <arch_cpu_idle>
    197c:	e7fc      	b.n	1978 <sys_reboot+0x1c>
    197e:	bf00      	nop
    1980:	0000ddaa 	.word	0x0000ddaa

00001984 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1984:	4b0c      	ldr	r3, [pc, #48]	; (19b8 <class_handler+0x34>)
{
    1986:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1988:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    198a:	4e0c      	ldr	r6, [pc, #48]	; (19bc <class_handler+0x38>)
    198c:	4b0c      	ldr	r3, [pc, #48]	; (19c0 <class_handler+0x3c>)
    198e:	42b3      	cmp	r3, r6
    1990:	d303      	bcc.n	199a <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1992:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1996:	bcf0      	pop	{r4, r5, r6, r7}
    1998:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    199a:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    199c:	42bd      	cmp	r5, r7
    199e:	d309      	bcc.n	19b4 <class_handler+0x30>
		if (iface->class_handler &&
    19a0:	691c      	ldr	r4, [r3, #16]
    19a2:	b13c      	cbz	r4, 19b4 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    19a4:	f895 c002 	ldrb.w	ip, [r5, #2]
    19a8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    19aa:	45ac      	cmp	ip, r5
    19ac:	d102      	bne.n	19b4 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    19ae:	4623      	mov	r3, r4
}
    19b0:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    19b2:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    19b4:	3324      	adds	r3, #36	; 0x24
    19b6:	e7ea      	b.n	198e <class_handler+0xa>
    19b8:	20001374 	.word	0x20001374
    19bc:	20000400 	.word	0x20000400
    19c0:	200003dc 	.word	0x200003dc

000019c4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    19c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    19c8:	4c13      	ldr	r4, [pc, #76]	; (1a18 <custom_handler+0x54>)
    19ca:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a1c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    19ce:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1a20 <custom_handler+0x5c>
{
    19d2:	4605      	mov	r5, r0
    19d4:	460e      	mov	r6, r1
    19d6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    19d8:	4544      	cmp	r4, r8
    19da:	d303      	bcc.n	19e4 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    19dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    19e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    19e4:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    19e6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    19ea:	429a      	cmp	r2, r3
    19ec:	d312      	bcc.n	1a14 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    19ee:	69a3      	ldr	r3, [r4, #24]
    19f0:	b183      	cbz	r3, 1a14 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    19f2:	7890      	ldrb	r0, [r2, #2]
    19f4:	7929      	ldrb	r1, [r5, #4]
    19f6:	4288      	cmp	r0, r1
    19f8:	d105      	bne.n	1a06 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    19fa:	463a      	mov	r2, r7
    19fc:	4631      	mov	r1, r6
    19fe:	4628      	mov	r0, r5
}
    1a00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    1a04:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1a06:	7952      	ldrb	r2, [r2, #5]
    1a08:	2a01      	cmp	r2, #1
    1a0a:	d103      	bne.n	1a14 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    1a0c:	463a      	mov	r2, r7
    1a0e:	4631      	mov	r1, r6
    1a10:	4628      	mov	r0, r5
    1a12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a14:	3424      	adds	r4, #36	; 0x24
    1a16:	e7df      	b.n	19d8 <custom_handler+0x14>
    1a18:	200003dc 	.word	0x200003dc
    1a1c:	20000400 	.word	0x20000400
    1a20:	20001374 	.word	0x20001374

00001a24 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a28:	4c0b      	ldr	r4, [pc, #44]	; (1a58 <vendor_handler+0x34>)
    1a2a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1a5c <vendor_handler+0x38>
{
    1a2e:	4605      	mov	r5, r0
    1a30:	460e      	mov	r6, r1
    1a32:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a34:	4544      	cmp	r4, r8
    1a36:	d302      	bcc.n	1a3e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1a38:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1a3c:	e009      	b.n	1a52 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    1a3e:	6963      	ldr	r3, [r4, #20]
    1a40:	b90b      	cbnz	r3, 1a46 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a42:	3424      	adds	r4, #36	; 0x24
    1a44:	e7f6      	b.n	1a34 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1a46:	463a      	mov	r2, r7
    1a48:	4631      	mov	r1, r6
    1a4a:	4628      	mov	r0, r5
    1a4c:	4798      	blx	r3
    1a4e:	2800      	cmp	r0, #0
    1a50:	d1f7      	bne.n	1a42 <vendor_handler+0x1e>
}
    1a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a56:	bf00      	nop
    1a58:	200003dc 	.word	0x200003dc
    1a5c:	20000400 	.word	0x20000400

00001a60 <set_endpoint>:
{
    1a60:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1a62:	7883      	ldrb	r3, [r0, #2]
    1a64:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1a68:	7903      	ldrb	r3, [r0, #4]
    1a6a:	7942      	ldrb	r2, [r0, #5]
    1a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1a70:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1a74:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    1a76:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1a78:	f003 0303 	and.w	r3, r3, #3
    1a7c:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    1a80:	f002 fdd2 	bl	4628 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1a84:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1a88:	d004      	beq.n	1a94 <set_endpoint+0x34>
	} else if (ret) {
    1a8a:	b118      	cbz	r0, 1a94 <set_endpoint+0x34>
		return false;
    1a8c:	2000      	movs	r0, #0
}
    1a8e:	b003      	add	sp, #12
    1a90:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1a94:	f89d 0000 	ldrb.w	r0, [sp]
    1a98:	f002 fe4c 	bl	4734 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    1a9c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1aa0:	d001      	beq.n	1aa6 <set_endpoint+0x46>
	} else if (ret) {
    1aa2:	2800      	cmp	r0, #0
    1aa4:	d1f2      	bne.n	1a8c <set_endpoint+0x2c>
	usb_dev.configured = true;
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <set_endpoint+0x50>)
    1aa8:	2001      	movs	r0, #1
    1aaa:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    1aae:	e7ee      	b.n	1a8e <set_endpoint+0x2e>
    1ab0:	20001374 	.word	0x20001374

00001ab4 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1ab4:	4802      	ldr	r0, [pc, #8]	; (1ac0 <usb_reset_alt_setting+0xc>)
    1ab6:	2208      	movs	r2, #8
    1ab8:	2100      	movs	r1, #0
    1aba:	f009 b81d 	b.w	aaf8 <memset>
    1abe:	bf00      	nop
    1ac0:	2000142f 	.word	0x2000142f

00001ac4 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1ac4:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ac6:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <is_ep_valid.part.0+0x30>)
    1ac8:	4c0b      	ldr	r4, [pc, #44]	; (1af8 <is_ep_valid.part.0+0x34>)
    1aca:	42a3      	cmp	r3, r4
    1acc:	d301      	bcc.n	1ad2 <is_ep_valid.part.0+0xe>
	return false;
    1ace:	2000      	movs	r0, #0
}
    1ad0:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    1ad2:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ad4:	7f1e      	ldrb	r6, [r3, #28]
    1ad6:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    1ad8:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ada:	b2d5      	uxtb	r5, r2
    1adc:	42ae      	cmp	r6, r5
    1ade:	d801      	bhi.n	1ae4 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ae0:	3324      	adds	r3, #36	; 0x24
    1ae2:	e7f2      	b.n	1aca <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1ae4:	3201      	adds	r2, #1
    1ae6:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1aea:	4285      	cmp	r5, r0
    1aec:	d1f5      	bne.n	1ada <is_ep_valid.part.0+0x16>
		return true;
    1aee:	2001      	movs	r0, #1
    1af0:	e7ee      	b.n	1ad0 <is_ep_valid.part.0+0xc>
    1af2:	bf00      	nop
    1af4:	200003dc 	.word	0x200003dc
    1af8:	20000400 	.word	0x20000400

00001afc <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    1afc:	4809      	ldr	r0, [pc, #36]	; (1b24 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    1afe:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    1b00:	7803      	ldrb	r3, [r0, #0]
    1b02:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    1b06:	330a      	adds	r3, #10
    1b08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    1b0c:	b13b      	cbz	r3, 1b1e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    1b0e:	f100 0208 	add.w	r2, r0, #8
    1b12:	f100 0110 	add.w	r1, r0, #16
    1b16:	4798      	blx	r3
    1b18:	43c0      	mvns	r0, r0
    1b1a:	0fc0      	lsrs	r0, r0, #31
}
    1b1c:	bd08      	pop	{r3, pc}
		return false;
    1b1e:	4618      	mov	r0, r3
    1b20:	e7fc      	b.n	1b1c <usb_handle_request.constprop.0+0x20>
    1b22:	bf00      	nop
    1b24:	20001374 	.word	0x20001374

00001b28 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    1b28:	2804      	cmp	r0, #4
{
    1b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b2e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1bb4 <forward_status_cb+0x8c>
    1b32:	4604      	mov	r4, r0
    1b34:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    1b36:	d114      	bne.n	1b62 <forward_status_cb+0x3a>
		if (usb_dev.configured) {
    1b38:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1bb8 <forward_status_cb+0x90>
		usb_reset_alt_setting();
    1b3c:	f7ff ffba 	bl	1ab4 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    1b40:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    1b44:	b1ab      	cbz	r3, 1b72 <forward_status_cb+0x4a>
			usb_cancel_transfers();
    1b46:	f000 fd97 	bl	2678 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1b4a:	4d1c      	ldr	r5, [pc, #112]	; (1bbc <forward_status_cb+0x94>)
    1b4c:	4545      	cmp	r5, r8
    1b4e:	d223      	bcs.n	1b98 <forward_status_cb+0x70>
		ep_data = cfg_data->endpoint;
    1b50:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1b54:	2700      	movs	r7, #0
    1b56:	7f2a      	ldrb	r2, [r5, #28]
    1b58:	b2fb      	uxtb	r3, r7
    1b5a:	429a      	cmp	r2, r3
    1b5c:	d814      	bhi.n	1b88 <forward_status_cb+0x60>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1b5e:	3524      	adds	r5, #36	; 0x24
    1b60:	e7f4      	b.n	1b4c <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    1b62:	2805      	cmp	r0, #5
    1b64:	d105      	bne.n	1b72 <forward_status_cb+0x4a>
		if (usb_dev.configured) {
    1b66:	4b14      	ldr	r3, [pc, #80]	; (1bb8 <forward_status_cb+0x90>)
    1b68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    1b6c:	b10b      	cbz	r3, 1b72 <forward_status_cb+0x4a>
			usb_cancel_transfers();
    1b6e:	f000 fd83 	bl	2678 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1b72:	4d12      	ldr	r5, [pc, #72]	; (1bbc <forward_status_cb+0x94>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1b74:	4545      	cmp	r5, r8
    1b76:	d313      	bcc.n	1ba0 <forward_status_cb+0x78>
	if (usb_dev.user_status_callback) {
    1b78:	4b0f      	ldr	r3, [pc, #60]	; (1bb8 <forward_status_cb+0x90>)
    1b7a:	6a1b      	ldr	r3, [r3, #32]
    1b7c:	b1c3      	cbz	r3, 1bb0 <forward_status_cb+0x88>
		usb_dev.user_status_callback(status, param);
    1b7e:	4631      	mov	r1, r6
    1b80:	4620      	mov	r0, r4
}
    1b82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    1b86:	4718      	bx	r3
	return usb_dc_ep_disable(ep_data->ep_addr);
    1b88:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    1b8c:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    1b8e:	7918      	ldrb	r0, [r3, #4]
    1b90:	f002 fdfa 	bl	4788 <usb_dc_ep_disable>
			if (ret < 0) {
    1b94:	2800      	cmp	r0, #0
    1b96:	dade      	bge.n	1b56 <forward_status_cb+0x2e>
				usb_dev.configured = false;
    1b98:	2300      	movs	r3, #0
    1b9a:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    1b9e:	e7e8      	b.n	1b72 <forward_status_cb+0x4a>
		if (cfg_data->cb_usb_status) {
    1ba0:	68eb      	ldr	r3, [r5, #12]
    1ba2:	b11b      	cbz	r3, 1bac <forward_status_cb+0x84>
			cfg_data->cb_usb_status(cfg_data, status, param);
    1ba4:	4632      	mov	r2, r6
    1ba6:	4621      	mov	r1, r4
    1ba8:	4628      	mov	r0, r5
    1baa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1bac:	3524      	adds	r5, #36	; 0x24
    1bae:	e7e1      	b.n	1b74 <forward_status_cb+0x4c>
}
    1bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bb4:	20000400 	.word	0x20000400
    1bb8:	20001374 	.word	0x20001374
    1bbc:	200003dc 	.word	0x200003dc

00001bc0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1bc2:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1bc4:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1bc6:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1bc8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1bcc:	d007      	beq.n	1bde <usb_halt_endpoint_req.isra.0+0x1e>
    1bce:	4620      	mov	r0, r4
    1bd0:	f7ff ff78 	bl	1ac4 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1bd4:	b178      	cbz	r0, 1bf6 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    1bd6:	4b0d      	ldr	r3, [pc, #52]	; (1c0c <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1bd8:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1bdc:	b158      	cbz	r0, 1bf6 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    1bde:	4e0b      	ldr	r6, [pc, #44]	; (1c0c <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    1be0:	4620      	mov	r0, r4
		if (halt) {
    1be2:	b155      	cbz	r5, 1bfa <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    1be4:	f002 fd42 	bl	466c <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1be8:	69f3      	ldr	r3, [r6, #28]
    1bea:	b11b      	cbz	r3, 1bf4 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1bec:	f10d 0107 	add.w	r1, sp, #7
    1bf0:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1bf2:	4798      	blx	r3
		return true;
    1bf4:	2001      	movs	r0, #1
}
    1bf6:	b002      	add	sp, #8
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    1bfa:	f002 fd5f 	bl	46bc <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1bfe:	69f3      	ldr	r3, [r6, #28]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d0f7      	beq.n	1bf4 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1c04:	f10d 0107 	add.w	r1, sp, #7
    1c08:	2009      	movs	r0, #9
    1c0a:	e7f2      	b.n	1bf2 <usb_halt_endpoint_req.isra.0+0x32>
    1c0c:	20001374 	.word	0x20001374

00001c10 <usb_handle_standard_request>:
{
    1c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    1c14:	4ea4      	ldr	r6, [pc, #656]	; (1ea8 <usb_handle_standard_request+0x298>)
    1c16:	69b3      	ldr	r3, [r6, #24]
{
    1c18:	4604      	mov	r4, r0
    1c1a:	460f      	mov	r7, r1
    1c1c:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    1c1e:	b9fb      	cbnz	r3, 1c60 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    1c20:	7823      	ldrb	r3, [r4, #0]
    1c22:	f003 031f 	and.w	r3, r3, #31
    1c26:	2b01      	cmp	r3, #1
    1c28:	f000 809d 	beq.w	1d66 <usb_handle_standard_request+0x156>
    1c2c:	2b02      	cmp	r3, #2
    1c2e:	f000 8107 	beq.w	1e40 <usb_handle_standard_request+0x230>
    1c32:	bb33      	cbnz	r3, 1c82 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    1c34:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    1c38:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    1c3a:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1c3c:	2800      	cmp	r0, #0
    1c3e:	da34      	bge.n	1caa <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    1c40:	2906      	cmp	r1, #6
    1c42:	d012      	beq.n	1c6a <usb_handle_standard_request+0x5a>
    1c44:	2908      	cmp	r1, #8
    1c46:	d02b      	beq.n	1ca0 <usb_handle_standard_request+0x90>
    1c48:	b9d9      	cbnz	r1, 1c82 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    1c4a:	2301      	movs	r3, #1
    1c4c:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    1c4e:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    1c50:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    1c54:	005b      	lsls	r3, r3, #1
    1c56:	f043 0301 	orr.w	r3, r3, #1
    1c5a:	7013      	strb	r3, [r2, #0]
		*len = 2;
    1c5c:	2302      	movs	r3, #2
    1c5e:	e12c      	b.n	1eba <usb_handle_standard_request+0x2aa>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    1c60:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    1c62:	2800      	cmp	r0, #0
    1c64:	d1dc      	bne.n	1c20 <usb_handle_standard_request+0x10>
		return 0;
    1c66:	2000      	movs	r0, #0
    1c68:	e00d      	b.n	1c86 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    1c6a:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    1c6c:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    1c6e:	1f01      	subs	r1, r0, #4
    1c70:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    1c72:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    1c74:	d905      	bls.n	1c82 <usb_handle_standard_request+0x72>
    1c76:	2807      	cmp	r0, #7
    1c78:	d803      	bhi.n	1c82 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    1c7a:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    1c7c:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    1c7e:	780c      	ldrb	r4, [r1, #0]
    1c80:	b91c      	cbnz	r4, 1c8a <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    1c82:	f06f 0015 	mvn.w	r0, #21
}
    1c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    1c8a:	784e      	ldrb	r6, [r1, #1]
    1c8c:	4566      	cmp	r6, ip
    1c8e:	d103      	bne.n	1c98 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    1c90:	429a      	cmp	r2, r3
    1c92:	f000 810d 	beq.w	1eb0 <usb_handle_standard_request+0x2a0>
			cur_index++;
    1c96:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    1c98:	4421      	add	r1, r4
    1c9a:	e7f0      	b.n	1c7e <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    1c9c:	780b      	ldrb	r3, [r1, #0]
    1c9e:	e10c      	b.n	1eba <usb_handle_standard_request+0x2aa>
			data[0] = usb_dev.configuration;
    1ca0:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1ca4:	7013      	strb	r3, [r2, #0]
				*len = 1;
    1ca6:	2301      	movs	r3, #1
    1ca8:	e107      	b.n	1eba <usb_handle_standard_request+0x2aa>
		switch (setup->bRequest) {
    1caa:	3901      	subs	r1, #1
    1cac:	2908      	cmp	r1, #8
    1cae:	d8e8      	bhi.n	1c82 <usb_handle_standard_request+0x72>
    1cb0:	a301      	add	r3, pc, #4	; (adr r3, 1cb8 <usb_handle_standard_request+0xa8>)
    1cb2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    1cb6:	bf00      	nop
    1cb8:	00001d51 	.word	0x00001d51
    1cbc:	00001c83 	.word	0x00001c83
    1cc0:	00001d5f 	.word	0x00001d5f
    1cc4:	00001c83 	.word	0x00001c83
    1cc8:	00001cdd 	.word	0x00001cdd
    1ccc:	00001c83 	.word	0x00001c83
    1cd0:	00001c83 	.word	0x00001c83
    1cd4:	00001c83 	.word	0x00001c83
    1cd8:	00001ce9 	.word	0x00001ce9
			return !usb_dc_set_address(setup->wValue);
    1cdc:	78a0      	ldrb	r0, [r4, #2]
    1cde:	f002 fc91 	bl	4604 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d0bf      	beq.n	1c66 <usb_handle_standard_request+0x56>
    1ce6:	e7cc      	b.n	1c82 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    1ce8:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1cea:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    1cec:	bb63      	cbnz	r3, 1d48 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    1cee:	f7ff fee1 	bl	1ab4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    1cf2:	8863      	ldrh	r3, [r4, #2]
    1cf4:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    1cf8:	69f3      	ldr	r3, [r6, #28]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d0b3      	beq.n	1c66 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    1cfe:	496b      	ldr	r1, [pc, #428]	; (1eac <usb_handle_standard_request+0x29c>)
    1d00:	2003      	movs	r0, #3
    1d02:	4798      	blx	r3
    1d04:	e7af      	b.n	1c66 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    1d06:	786b      	ldrb	r3, [r5, #1]
    1d08:	2b04      	cmp	r3, #4
    1d0a:	d010      	beq.n	1d2e <usb_handle_standard_request+0x11e>
    1d0c:	2b05      	cmp	r3, #5
    1d0e:	d011      	beq.n	1d34 <usb_handle_standard_request+0x124>
    1d10:	2b02      	cmp	r3, #2
    1d12:	d104      	bne.n	1d1e <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    1d14:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    1d16:	8863      	ldrh	r3, [r4, #2]
				found = true;
    1d18:	42bb      	cmp	r3, r7
    1d1a:	bf08      	it	eq
    1d1c:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    1d1e:	782b      	ldrb	r3, [r5, #0]
    1d20:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    1d22:	782b      	ldrb	r3, [r5, #0]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d1ee      	bne.n	1d06 <usb_handle_standard_request+0xf6>
	if (found) {
    1d28:	2800      	cmp	r0, #0
    1d2a:	d0aa      	beq.n	1c82 <usb_handle_standard_request+0x72>
    1d2c:	e7df      	b.n	1cee <usb_handle_standard_request+0xde>
			cur_alt_setting =
    1d2e:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    1d32:	e7f4      	b.n	1d1e <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    1d34:	8863      	ldrh	r3, [r4, #2]
    1d36:	42bb      	cmp	r3, r7
    1d38:	d1f1      	bne.n	1d1e <usb_handle_standard_request+0x10e>
    1d3a:	f1b8 0f00 	cmp.w	r8, #0
    1d3e:	d1ee      	bne.n	1d1e <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    1d40:	4628      	mov	r0, r5
    1d42:	f7ff fe8d 	bl	1a60 <set_endpoint>
			break;
    1d46:	e7ea      	b.n	1d1e <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    1d48:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    1d4a:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    1d4c:	46b8      	mov	r8, r7
    1d4e:	e7e8      	b.n	1d22 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    1d50:	8863      	ldrh	r3, [r4, #2]
    1d52:	2b01      	cmp	r3, #1
    1d54:	d195      	bne.n	1c82 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    1d56:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    1d58:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    1d5c:	e783      	b.n	1c66 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    1d5e:	8863      	ldrh	r3, [r4, #2]
    1d60:	2b01      	cmp	r3, #1
    1d62:	d18e      	bne.n	1c82 <usb_handle_standard_request+0x72>
    1d64:	e7f8      	b.n	1d58 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    1d66:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1d6a:	f8d5 c000 	ldr.w	ip, [r5]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d087      	beq.n	1c82 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1d72:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    1d74:	88a3      	ldrh	r3, [r4, #4]
    1d76:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1d7a:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    1d7c:	7810      	ldrb	r0, [r2, #0]
    1d7e:	2800      	cmp	r0, #0
    1d80:	f43f af7f 	beq.w	1c82 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    1d84:	7851      	ldrb	r1, [r2, #1]
    1d86:	2902      	cmp	r1, #2
    1d88:	d104      	bne.n	1d94 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    1d8a:	f892 8004 	ldrb.w	r8, [r2, #4]
    1d8e:	45f0      	cmp	r8, lr
    1d90:	f200 8095 	bhi.w	1ebe <usb_handle_standard_request+0x2ae>
		p += p[DESC_bLength];
    1d94:	4402      	add	r2, r0
    1d96:	e7f1      	b.n	1d7c <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    1d98:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    1d9c:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    1da0:	6039      	str	r1, [r7, #0]
			return true;
    1da2:	e760      	b.n	1c66 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    1da4:	4415      	add	r5, r2
    1da6:	e096      	b.n	1ed6 <usb_handle_standard_request+0x2c6>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    1da8:	2a0b      	cmp	r2, #11
    1daa:	f47f af6a 	bne.w	1c82 <usb_handle_standard_request+0x72>
	bool ret = false;
    1dae:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    1db0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    1db4:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    1db6:	46ba      	mov	sl, r7
    1db8:	e006      	b.n	1dc8 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    1dba:	786b      	ldrb	r3, [r5, #1]
    1dbc:	2b04      	cmp	r3, #4
    1dbe:	d00f      	beq.n	1de0 <usb_handle_standard_request+0x1d0>
    1dc0:	2b05      	cmp	r3, #5
    1dc2:	d021      	beq.n	1e08 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    1dc4:	782b      	ldrb	r3, [r5, #0]
    1dc6:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    1dc8:	782b      	ldrb	r3, [r5, #0]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d1f5      	bne.n	1dba <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    1dce:	69f3      	ldr	r3, [r6, #28]
    1dd0:	b113      	cbz	r3, 1dd8 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    1dd2:	4651      	mov	r1, sl
    1dd4:	2007      	movs	r0, #7
    1dd6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    1dd8:	2f00      	cmp	r7, #0
    1dda:	f47f af44 	bne.w	1c66 <usb_handle_standard_request+0x56>
    1dde:	e750      	b.n	1c82 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1de0:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    1de4:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    1de6:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    1dea:	4598      	cmp	r8, r3
    1dec:	d1ea      	bne.n	1dc4 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    1dee:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    1df0:	4599      	cmp	r9, r3
    1df2:	d1e7      	bne.n	1dc4 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1df4:	f1b8 0f07 	cmp.w	r8, #7
    1df8:	d81f      	bhi.n	1e3a <usb_handle_standard_request+0x22a>
		usb_dev.alt_setting[iface] = alt_setting;
    1dfa:	eb06 0308 	add.w	r3, r6, r8
		return true;
    1dfe:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    1e00:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
	return true;
    1e04:	2701      	movs	r7, #1
    1e06:	e7dd      	b.n	1dc4 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    1e08:	88a3      	ldrh	r3, [r4, #4]
    1e0a:	4543      	cmp	r3, r8
    1e0c:	d1da      	bne.n	1dc4 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    1e0e:	78a3      	ldrb	r3, [r4, #2]
    1e10:	454b      	cmp	r3, r9
    1e12:	d00d      	beq.n	1e30 <usb_handle_standard_request+0x220>
		ret = reset_endpoint(ep_desc);
    1e14:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    1e16:	4638      	mov	r0, r7
    1e18:	f000 fc10 	bl	263c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    1e1c:	4638      	mov	r0, r7
    1e1e:	f002 fcb3 	bl	4788 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    1e22:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1e26:	d0ed      	beq.n	1e04 <usb_handle_standard_request+0x1f4>
	} else if (ret) {
    1e28:	fab0 f780 	clz	r7, r0
    1e2c:	097f      	lsrs	r7, r7, #5
    1e2e:	e7c9      	b.n	1dc4 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    1e30:	4628      	mov	r0, r5
    1e32:	f7ff fe15 	bl	1a60 <set_endpoint>
    1e36:	4607      	mov	r7, r0
    1e38:	e7c4      	b.n	1dc4 <usb_handle_standard_request+0x1b4>
    1e3a:	46aa      	mov	sl, r5
	return false;
    1e3c:	2700      	movs	r7, #0
    1e3e:	e7c1      	b.n	1dc4 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    1e40:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    1e44:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1e46:	2a00      	cmp	r2, #0
    1e48:	da18      	bge.n	1e7c <usb_handle_standard_request+0x26c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	f47f af19 	bne.w	1c82 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    1e50:	7924      	ldrb	r4, [r4, #4]
    1e52:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    1e54:	0663      	lsls	r3, r4, #25
    1e56:	d00a      	beq.n	1e6e <usb_handle_standard_request+0x25e>
    1e58:	4620      	mov	r0, r4
    1e5a:	f7ff fe33 	bl	1ac4 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1e5e:	2800      	cmp	r0, #0
    1e60:	f43f af0f 	beq.w	1c82 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1e64:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1e68:	2b00      	cmp	r3, #0
    1e6a:	f43f af0a 	beq.w	1c82 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    1e6e:	4629      	mov	r1, r5
    1e70:	4620      	mov	r0, r4
    1e72:	f002 fc43 	bl	46fc <usb_dc_ep_is_stalled>
		data[1] = 0U;
    1e76:	2300      	movs	r3, #0
    1e78:	706b      	strb	r3, [r5, #1]
    1e7a:	e6ef      	b.n	1c5c <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    1e7c:	2b01      	cmp	r3, #1
    1e7e:	d008      	beq.n	1e92 <usb_handle_standard_request+0x282>
    1e80:	2b03      	cmp	r3, #3
    1e82:	f47f aefe 	bne.w	1c82 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    1e86:	8863      	ldrh	r3, [r4, #2]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	f47f aefa 	bne.w	1c82 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    1e8e:	2101      	movs	r1, #1
    1e90:	e003      	b.n	1e9a <usb_handle_standard_request+0x28a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    1e92:	8861      	ldrh	r1, [r4, #2]
    1e94:	2900      	cmp	r1, #0
    1e96:	f47f aef4 	bne.w	1c82 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    1e9a:	88a0      	ldrh	r0, [r4, #4]
    1e9c:	f7ff fe90 	bl	1bc0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    1ea0:	2800      	cmp	r0, #0
    1ea2:	f47f aee0 	bne.w	1c66 <usb_handle_standard_request+0x56>
    1ea6:	e6ec      	b.n	1c82 <usb_handle_standard_request+0x72>
    1ea8:	20001374 	.word	0x20001374
    1eac:	2000142e 	.word	0x2000142e
		if (type == USB_DESC_CONFIGURATION) {
    1eb0:	2802      	cmp	r0, #2
		*data = p;
    1eb2:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    1eb4:	f47f aef2 	bne.w	1c9c <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    1eb8:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    1eba:	603b      	str	r3, [r7, #0]
		return true;
    1ebc:	e6d3      	b.n	1c66 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    1ebe:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    1ec2:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1ec4:	2800      	cmp	r0, #0
    1ec6:	f6bf af6f 	bge.w	1da8 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    1eca:	2a00      	cmp	r2, #0
    1ecc:	f43f af64 	beq.w	1d98 <usb_handle_standard_request+0x188>
    1ed0:	2a0a      	cmp	r2, #10
    1ed2:	f47f aed6 	bne.w	1c82 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    1ed6:	782a      	ldrb	r2, [r5, #0]
    1ed8:	2a00      	cmp	r2, #0
    1eda:	f43f aed2 	beq.w	1c82 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    1ede:	7869      	ldrb	r1, [r5, #1]
    1ee0:	2904      	cmp	r1, #4
    1ee2:	f47f af5f 	bne.w	1da4 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1ee6:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    1ee8:	428b      	cmp	r3, r1
    1eea:	f47f af5b 	bne.w	1da4 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1eee:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    1ef0:	bf96      	itet	ls
    1ef2:	199b      	addls	r3, r3, r6
	return 0;
    1ef4:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    1ef6:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    1efa:	f88c 3000 	strb.w	r3, [ip]
    1efe:	e6d2      	b.n	1ca6 <usb_handle_standard_request+0x96>

00001f00 <usb_disable>:
{
    1f00:	b510      	push	{r4, lr}
	if (usb_dev.enabled != true) {
    1f02:	4c06      	ldr	r4, [pc, #24]	; (1f1c <usb_disable+0x1c>)
    1f04:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1f08:	b133      	cbz	r3, 1f18 <usb_disable+0x18>
	ret = usb_dc_detach();
    1f0a:	f002 fb2f 	bl	456c <usb_dc_detach>
	if (ret < 0) {
    1f0e:	2800      	cmp	r0, #0
    1f10:	db03      	blt.n	1f1a <usb_disable+0x1a>
	usb_dev.enabled = false;
    1f12:	2300      	movs	r3, #0
    1f14:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		return 0;
    1f18:	2000      	movs	r0, #0
}
    1f1a:	bd10      	pop	{r4, pc}
    1f1c:	20001374 	.word	0x20001374

00001f20 <usb_data_to_host>:
{
    1f20:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    1f22:	4c13      	ldr	r4, [pc, #76]	; (1f70 <usb_data_to_host+0x50>)
    1f24:	7d23      	ldrb	r3, [r4, #20]
    1f26:	b9c3      	cbnz	r3, 1f5a <usb_data_to_host+0x3a>
		uint32_t chunk = usb_dev.data_buf_residue;
    1f28:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    1f2a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    1f2c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    1f2e:	ab01      	add	r3, sp, #4
    1f30:	2080      	movs	r0, #128	; 0x80
    1f32:	f008 f947 	bl	a1c4 <usb_write>
		usb_dev.data_buf += chunk;
    1f36:	9a01      	ldr	r2, [sp, #4]
    1f38:	68a3      	ldr	r3, [r4, #8]
    1f3a:	4413      	add	r3, r2
    1f3c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1f3e:	68e3      	ldr	r3, [r4, #12]
    1f40:	1a9b      	subs	r3, r3, r2
    1f42:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    1f44:	b93b      	cbnz	r3, 1f56 <usb_data_to_host+0x36>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    1f46:	6923      	ldr	r3, [r4, #16]
    1f48:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue &&
    1f4a:	429a      	cmp	r2, r3
    1f4c:	dd03      	ble.n	1f56 <usb_data_to_host+0x36>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    1f4e:	069b      	lsls	r3, r3, #26
    1f50:	d101      	bne.n	1f56 <usb_data_to_host+0x36>
				usb_dev.zlp_flag = true;
    1f52:	2301      	movs	r3, #1
    1f54:	7523      	strb	r3, [r4, #20]
}
    1f56:	b002      	add	sp, #8
    1f58:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    1f5a:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    1f5c:	461a      	mov	r2, r3
    1f5e:	4619      	mov	r1, r3
    1f60:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    1f62:	7523      	strb	r3, [r4, #20]
}
    1f64:	b002      	add	sp, #8
    1f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    1f6a:	f002 bc33 	b.w	47d4 <usb_dc_ep_write>
    1f6e:	bf00      	nop
    1f70:	20001374 	.word	0x20001374

00001f74 <usb_handle_control_transfer>:
{
    1f74:	b530      	push	{r4, r5, lr}
    1f76:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    1f78:	2300      	movs	r3, #0
{
    1f7a:	4602      	mov	r2, r0
    1f7c:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    1f7e:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    1f80:	2800      	cmp	r0, #0
    1f82:	d158      	bne.n	2036 <usb_handle_control_transfer+0xc2>
    1f84:	2900      	cmp	r1, #0
    1f86:	d135      	bne.n	1ff4 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    1f88:	2208      	movs	r2, #8
    1f8a:	460b      	mov	r3, r1
    1f8c:	eb0d 0102 	add.w	r1, sp, r2
    1f90:	f008 fdea 	bl	ab68 <usb_dc_ep_read>
    1f94:	2800      	cmp	r0, #0
    1f96:	da04      	bge.n	1fa2 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    1f98:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    1f9a:	f002 fb67 	bl	466c <usb_dc_ep_set_stall>
}
    1f9e:	b005      	add	sp, #20
    1fa0:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    1fa2:	4c2a      	ldr	r4, [pc, #168]	; (204c <usb_handle_control_transfer+0xd8>)
    1fa4:	9a02      	ldr	r2, [sp, #8]
    1fa6:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    1fa8:	9a03      	ldr	r2, [sp, #12]
    1faa:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    1fac:	f104 0238 	add.w	r2, r4, #56	; 0x38
    1fb0:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    1fb2:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    1fb6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    1fba:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    1fbc:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    1fbe:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    1fc2:	db0a      	blt.n	1fda <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    1fc4:	2b80      	cmp	r3, #128	; 0x80
    1fc6:	d904      	bls.n	1fd2 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    1fc8:	2080      	movs	r0, #128	; 0x80
    1fca:	f002 fb4f 	bl	466c <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    1fce:	2000      	movs	r0, #0
    1fd0:	e7e3      	b.n	1f9a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    1fd2:	b113      	cbz	r3, 1fda <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    1fd4:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    1fd8:	e7e1      	b.n	1f9e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    1fda:	f7ff fd8f 	bl	1afc <usb_handle_request.constprop.0>
    1fde:	2800      	cmp	r0, #0
    1fe0:	d0da      	beq.n	1f98 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    1fe2:	88e2      	ldrh	r2, [r4, #6]
    1fe4:	6923      	ldr	r3, [r4, #16]
    1fe6:	429a      	cmp	r2, r3
    1fe8:	bfd4      	ite	le
    1fea:	60e2      	strle	r2, [r4, #12]
    1fec:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    1fee:	f7ff ff97 	bl	1f20 <usb_data_to_host>
    1ff2:	e7d4      	b.n	1f9e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    1ff4:	4c15      	ldr	r4, [pc, #84]	; (204c <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    1ff6:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    1ffa:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    1ffc:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    1ffe:	dc04      	bgt.n	200a <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2000:	f008 fdb2 	bl	ab68 <usb_dc_ep_read>
    2004:	2800      	cmp	r0, #0
    2006:	daca      	bge.n	1f9e <usb_handle_control_transfer+0x2a>
    2008:	e7c6      	b.n	1f98 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    200a:	462a      	mov	r2, r5
    200c:	f008 fdac 	bl	ab68 <usb_dc_ep_read>
    2010:	2800      	cmp	r0, #0
    2012:	dbd9      	blt.n	1fc8 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    2014:	9a01      	ldr	r2, [sp, #4]
    2016:	68a3      	ldr	r3, [r4, #8]
    2018:	4413      	add	r3, r2
    201a:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    201c:	68e3      	ldr	r3, [r4, #12]
    201e:	1a9b      	subs	r3, r3, r2
    2020:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2022:	2b00      	cmp	r3, #0
    2024:	d1bb      	bne.n	1f9e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2026:	f104 0338 	add.w	r3, r4, #56	; 0x38
    202a:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    202c:	f7ff fd66 	bl	1afc <usb_handle_request.constprop.0>
    2030:	2800      	cmp	r0, #0
    2032:	d1dc      	bne.n	1fee <usb_handle_control_transfer+0x7a>
    2034:	e7b0      	b.n	1f98 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2036:	2880      	cmp	r0, #128	; 0x80
    2038:	d1b1      	bne.n	1f9e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    203a:	4b04      	ldr	r3, [pc, #16]	; (204c <usb_handle_control_transfer+0xd8>)
    203c:	68da      	ldr	r2, [r3, #12]
    203e:	2a00      	cmp	r2, #0
    2040:	d1d5      	bne.n	1fee <usb_handle_control_transfer+0x7a>
    2042:	7d1b      	ldrb	r3, [r3, #20]
    2044:	2b00      	cmp	r3, #0
    2046:	d1d2      	bne.n	1fee <usb_handle_control_transfer+0x7a>
    2048:	e7a9      	b.n	1f9e <usb_handle_control_transfer+0x2a>
    204a:	bf00      	nop
    204c:	20001374 	.word	0x20001374

00002050 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2050:	4b05      	ldr	r3, [pc, #20]	; (2068 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    2052:	4a06      	ldr	r2, [pc, #24]	; (206c <usb_set_config+0x1c>)
    2054:	629a      	str	r2, [r3, #40]	; 0x28
    2056:	4a06      	ldr	r2, [pc, #24]	; (2070 <usb_set_config+0x20>)
    2058:	62da      	str	r2, [r3, #44]	; 0x2c
    205a:	4a06      	ldr	r2, [pc, #24]	; (2074 <usb_set_config+0x24>)
    205c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    205e:	4a06      	ldr	r2, [pc, #24]	; (2078 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2060:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    2062:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    2064:	2000      	movs	r0, #0
    2066:	4770      	bx	lr
    2068:	20001374 	.word	0x20001374
    206c:	00001c11 	.word	0x00001c11
    2070:	00001985 	.word	0x00001985
    2074:	00001a25 	.word	0x00001a25
    2078:	000019c5 	.word	0x000019c5

0000207c <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    207c:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    207e:	4b07      	ldr	r3, [pc, #28]	; (209c <usb_device_init+0x20>)
    2080:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    2084:	b923      	cbnz	r3, 2090 <usb_device_init+0x14>
		return 0;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    2086:	f000 f8c5 	bl	2214 <usb_get_device_descriptor>
	if (!device_descriptor) {
    208a:	b118      	cbz	r0, 2094 <usb_device_init+0x18>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    208c:	f7ff ffe0 	bl	2050 <usb_set_config>
		return 0;
    2090:	2000      	movs	r0, #0

	return 0;
}
    2092:	bd08      	pop	{r3, pc}
		return -1;
    2094:	f04f 30ff 	mov.w	r0, #4294967295
    2098:	e7fb      	b.n	2092 <usb_device_init+0x16>
    209a:	bf00      	nop
    209c:	20001374 	.word	0x20001374

000020a0 <usb_enable>:
{
    20a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    20a4:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    20a6:	4d34      	ldr	r5, [pc, #208]	; (2178 <usb_enable+0xd8>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    20a8:	4834      	ldr	r0, [pc, #208]	; (217c <usb_enable+0xdc>)
    20aa:	f04f 32ff 	mov.w	r2, #4294967295
    20ae:	f04f 33ff 	mov.w	r3, #4294967295
    20b2:	f006 f81d 	bl	80f0 <z_impl_k_mutex_lock>
    20b6:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    20ba:	2e00      	cmp	r6, #0
    20bc:	d13e      	bne.n	213c <usb_enable+0x9c>
	usb_dev.status_callback = cb;
    20be:	4830      	ldr	r0, [pc, #192]	; (2180 <usb_enable+0xe0>)
	usb_dev.user_status_callback = status_cb;
    20c0:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    20c2:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    20c4:	f002 fca0 	bl	4a08 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    20c8:	f002 fa12 	bl	44f0 <usb_dc_attach>
	if (ret < 0) {
    20cc:	1e04      	subs	r4, r0, #0
    20ce:	db36      	blt.n	213e <usb_enable+0x9e>
	ret = usb_transfer_init();
    20d0:	f000 faf6 	bl	26c0 <usb_transfer_init>
	if (ret < 0) {
    20d4:	1e04      	subs	r4, r0, #0
    20d6:	db32      	blt.n	213e <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    20d8:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    20da:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    20dc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    20e0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    20e4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    20e8:	f002 fa9e 	bl	4628 <usb_dc_ep_configure>
	if (ret < 0) {
    20ec:	1e04      	subs	r4, r0, #0
    20ee:	db26      	blt.n	213e <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    20f0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    20f2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    20f4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    20f8:	f002 fa96 	bl	4628 <usb_dc_ep_configure>
	if (ret < 0) {
    20fc:	1e04      	subs	r4, r0, #0
    20fe:	db1e      	blt.n	213e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2100:	4920      	ldr	r1, [pc, #128]	; (2184 <usb_enable+0xe4>)
    2102:	4630      	mov	r0, r6
    2104:	f002 fc6c 	bl	49e0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2108:	1e04      	subs	r4, r0, #0
    210a:	db18      	blt.n	213e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    210c:	491d      	ldr	r1, [pc, #116]	; (2184 <usb_enable+0xe4>)
    210e:	4638      	mov	r0, r7
    2110:	f002 fc66 	bl	49e0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2114:	1e04      	subs	r4, r0, #0
    2116:	db12      	blt.n	213e <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2118:	4c1b      	ldr	r4, [pc, #108]	; (2188 <usb_enable+0xe8>)
    211a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 218c <usb_enable+0xec>
    211e:	4544      	cmp	r4, r8
    2120:	d314      	bcc.n	214c <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2122:	2000      	movs	r0, #0
    2124:	f002 fb06 	bl	4734 <usb_dc_ep_enable>
	if (ret < 0) {
    2128:	1e04      	subs	r4, r0, #0
    212a:	db08      	blt.n	213e <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    212c:	2080      	movs	r0, #128	; 0x80
    212e:	f002 fb01 	bl	4734 <usb_dc_ep_enable>
	if (ret < 0) {
    2132:	1e04      	subs	r4, r0, #0
    2134:	db03      	blt.n	213e <usb_enable+0x9e>
	usb_dev.enabled = true;
    2136:	2301      	movs	r3, #1
    2138:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		ret = 0;
    213c:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    213e:	480f      	ldr	r0, [pc, #60]	; (217c <usb_enable+0xdc>)
    2140:	f006 f84e 	bl	81e0 <z_impl_k_mutex_unlock>
}
    2144:	4620      	mov	r0, r4
    2146:	b002      	add	sp, #8
    2148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    214c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    214e:	2600      	movs	r6, #0
    2150:	7f22      	ldrb	r2, [r4, #28]
    2152:	b2f3      	uxtb	r3, r6
    2154:	429a      	cmp	r2, r3
    2156:	d801      	bhi.n	215c <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2158:	3424      	adds	r4, #36	; 0x24
    215a:	e7e0      	b.n	211e <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    215c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2160:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2164:	7910      	ldrb	r0, [r2, #4]
    2166:	f002 fc3b 	bl	49e0 <usb_dc_ep_set_callback>
    216a:	3601      	adds	r6, #1
    216c:	2800      	cmp	r0, #0
    216e:	d0ef      	beq.n	2150 <usb_enable+0xb0>
    2170:	f04f 34ff 	mov.w	r4, #4294967295
    2174:	e7e3      	b.n	213e <usb_enable+0x9e>
    2176:	bf00      	nop
    2178:	20001374 	.word	0x20001374
    217c:	200002f8 	.word	0x200002f8
    2180:	00001b29 	.word	0x00001b29
    2184:	00001f75 	.word	0x00001f75
    2188:	200003dc 	.word	0x200003dc
    218c:	20000400 	.word	0x20000400

00002190 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2190:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2192:	4b1e      	ldr	r3, [pc, #120]	; (220c <usb_update_sn_string_descriptor+0x7c>)
{
    2194:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2196:	aa05      	add	r2, sp, #20
    2198:	f103 0510 	add.w	r5, r3, #16
    219c:	6818      	ldr	r0, [r3, #0]
    219e:	6859      	ldr	r1, [r3, #4]
    21a0:	4614      	mov	r4, r2
    21a2:	c403      	stmia	r4!, {r0, r1}
    21a4:	3308      	adds	r3, #8
    21a6:	42ab      	cmp	r3, r5
    21a8:	4622      	mov	r2, r4
    21aa:	d1f7      	bne.n	219c <usb_update_sn_string_descriptor+0xc>
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    21b0:	2210      	movs	r2, #16
    21b2:	2100      	movs	r1, #0
    21b4:	a801      	add	r0, sp, #4
    21b6:	f008 fc9f 	bl	aaf8 <memset>
	memset(sn, 0, sizeof(sn));
    21ba:	2212      	movs	r2, #18
    21bc:	2100      	movs	r1, #0
    21be:	4814      	ldr	r0, [pc, #80]	; (2210 <usb_update_sn_string_descriptor+0x80>)
    21c0:	f008 fc9a 	bl	aaf8 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    21c4:	2110      	movs	r1, #16
    21c6:	a801      	add	r0, sp, #4
    21c8:	f008 fdbf 	bl	ad4a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    21cc:	2800      	cmp	r0, #0
    21ce:	dd1a      	ble.n	2206 <usb_update_sn_string_descriptor+0x76>
		skip = MAX(0, hwlen - usblen);
    21d0:	3808      	subs	r0, #8
    21d2:	aa01      	add	r2, sp, #4
    21d4:	490e      	ldr	r1, [pc, #56]	; (2210 <usb_update_sn_string_descriptor+0x80>)
    21d6:	2800      	cmp	r0, #0
    21d8:	bfa8      	it	ge
    21da:	1812      	addge	r2, r2, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    21dc:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    21de:	f812 3b01 	ldrb.w	r3, [r2], #1
    21e2:	ac0a      	add	r4, sp, #40	; 0x28
    21e4:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    21e8:	f003 030f 	and.w	r3, r3, #15
    21ec:	3328      	adds	r3, #40	; 0x28
    21ee:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    21f0:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    21f2:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    21f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    21fa:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    21fc:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    21fe:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    2200:	f101 0102 	add.w	r1, r1, #2
    2204:	d1eb      	bne.n	21de <usb_update_sn_string_descriptor+0x4e>
		}
	}

	return sn;
}
    2206:	4802      	ldr	r0, [pc, #8]	; (2210 <usb_update_sn_string_descriptor+0x80>)
    2208:	b00b      	add	sp, #44	; 0x2c
    220a:	bd30      	pop	{r4, r5, pc}
    220c:	0000ddd3 	.word	0x0000ddd3
    2210:	200043aa 	.word	0x200043aa

00002214 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2218:	4c64      	ldr	r4, [pc, #400]	; (23ac <usb_get_device_descriptor+0x198>)
    221a:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
    221c:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    221e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2222:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
    2224:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2226:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
    2228:	7823      	ldrb	r3, [r4, #0]
    222a:	b92b      	cbnz	r3, 2238 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
    222c:	4b60      	ldr	r3, [pc, #384]	; (23b0 <usb_get_device_descriptor+0x19c>)
    222e:	3402      	adds	r4, #2
    2230:	429c      	cmp	r4, r3
    2232:	d1f3      	bne.n	221c <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2234:	485d      	ldr	r0, [pc, #372]	; (23ac <usb_get_device_descriptor+0x198>)
    2236:	e01c      	b.n	2272 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
    2238:	7863      	ldrb	r3, [r4, #1]
    223a:	2b05      	cmp	r3, #5
    223c:	d805      	bhi.n	224a <usb_get_device_descriptor+0x36>
    223e:	e8df f003 	tbb	[pc, r3]
    2242:	047b      	.short	0x047b
    2244:	25077b03 	.word	0x25077b03
    2248:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    224a:	7823      	ldrb	r3, [r4, #0]
    224c:	441c      	add	r4, r3
    224e:	e7eb      	b.n	2228 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    2250:	78e3      	ldrb	r3, [r4, #3]
    2252:	2b00      	cmp	r3, #0
    2254:	d1f9      	bne.n	224a <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
    2256:	78a3      	ldrb	r3, [r4, #2]
    2258:	b173      	cbz	r3, 2278 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
    225a:	f109 0901 	add.w	r9, r9, #1
    225e:	fa5f f989 	uxtb.w	r9, r9
			break;
    2262:	e7f2      	b.n	224a <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
    2264:	686a      	ldr	r2, [r5, #4]
    2266:	4294      	cmp	r4, r2
    2268:	d009      	beq.n	227e <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    226a:	3524      	adds	r5, #36	; 0x24
    226c:	429d      	cmp	r5, r3
    226e:	d3f9      	bcc.n	2264 <usb_get_device_descriptor+0x50>
		return NULL;
    2270:	2000      	movs	r0, #0
}
    2272:	b005      	add	sp, #20
    2274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2278:	4d4e      	ldr	r5, [pc, #312]	; (23b4 <usb_get_device_descriptor+0x1a0>)
    227a:	4b4f      	ldr	r3, [pc, #316]	; (23b8 <usb_get_device_descriptor+0x1a4>)
    227c:	e7f6      	b.n	226c <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
    227e:	68ab      	ldr	r3, [r5, #8]
    2280:	2b00      	cmp	r3, #0
    2282:	d0ea      	beq.n	225a <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
    2284:	4649      	mov	r1, r9
    2286:	4620      	mov	r0, r4
    2288:	4798      	blx	r3
    228a:	e7e6      	b.n	225a <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
    228c:	2d00      	cmp	r5, #0
    228e:	d0ef      	beq.n	2270 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2290:	2300      	movs	r3, #0
    2292:	2101      	movs	r1, #1
    2294:	7f2a      	ldrb	r2, [r5, #28]
    2296:	4293      	cmp	r3, r2
    2298:	d2ea      	bcs.n	2270 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    229a:	6a2a      	ldr	r2, [r5, #32]
    229c:	78a7      	ldrb	r7, [r4, #2]
    229e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    22a2:	7910      	ldrb	r0, [r2, #4]
    22a4:	4287      	cmp	r7, r0
    22a6:	d001      	beq.n	22ac <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    22a8:	3301      	adds	r3, #1
    22aa:	e7f3      	b.n	2294 <usb_get_device_descriptor+0x80>
    22ac:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    22ae:	78e0      	ldrb	r0, [r4, #3]
    22b0:	f000 0003 	and.w	r0, r0, #3
    22b4:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    22b8:	7920      	ldrb	r0, [r4, #4]
    22ba:	f894 c005 	ldrb.w	ip, [r4, #5]
    22be:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    22c2:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    22c6:	f994 0002 	ldrsb.w	r0, [r4, #2]
    22ca:	2800      	cmp	r0, #0
    22cc:	fa5f f887 	uxtb.w	r8, r7
    22d0:	da27      	bge.n	2322 <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    22d2:	f107 0010 	add.w	r0, r7, #16
    22d6:	fa01 f000 	lsl.w	r0, r1, r0
    22da:	ea10 0f0b 	tst.w	r0, fp
    22de:	d127      	bne.n	2330 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    22e0:	f048 0080 	orr.w	r0, r8, #128	; 0x80
    22e4:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    22e8:	a802      	add	r0, sp, #8
    22ea:	e9cd 3200 	strd	r3, r2, [sp]
    22ee:	f008 fc23 	bl	ab38 <usb_dc_ep_check_cap>
    22f2:	e9dd 3200 	ldrd	r3, r2, [sp]
    22f6:	2101      	movs	r1, #1
    22f8:	b9d0      	cbnz	r0, 2330 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    22fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    22fe:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2300:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2304:	bf18      	it	ne
    2306:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    230a:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    230c:	bf18      	it	ne
    230e:	fa5f f888 	uxtbne.w	r8, r8
    2312:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    2314:	bf0c      	ite	eq
    2316:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    2318:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
    231c:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
    2320:	e793      	b.n	224a <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
    2322:	fa01 f007 	lsl.w	r0, r1, r7
    2326:	ea10 0f0b 	tst.w	r0, fp
    232a:	d101      	bne.n	2330 <usb_get_device_descriptor+0x11c>
    232c:	4640      	mov	r0, r8
    232e:	e7d9      	b.n	22e4 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2330:	3701      	adds	r7, #1
    2332:	2f10      	cmp	r7, #16
    2334:	d1bb      	bne.n	22ae <usb_get_device_descriptor+0x9a>
    2336:	e7b7      	b.n	22a8 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2338:	2e03      	cmp	r6, #3
    233a:	d11d      	bne.n	2378 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    233c:	f7ff ff28 	bl	2190 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2340:	4607      	mov	r7, r0
    2342:	b168      	cbz	r0, 2360 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
    2344:	f008 fb93 	bl	aa6e <strlen>
	if (!runtime_sn_len) {
    2348:	4680      	mov	r8, r0
    234a:	b148      	cbz	r0, 2360 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    234c:	481b      	ldr	r0, [pc, #108]	; (23bc <usb_get_device_descriptor+0x1a8>)
    234e:	f008 fb8e 	bl	aa6e <strlen>
	if (runtime_sn_len != default_sn_len) {
    2352:	4580      	cmp	r8, r0
    2354:	d104      	bne.n	2360 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2356:	4642      	mov	r2, r8
    2358:	4639      	mov	r1, r7
    235a:	1ca0      	adds	r0, r4, #2
    235c:	f008 fbc1 	bl	aae2 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2360:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2362:	f06f 0102 	mvn.w	r1, #2
    2366:	18e2      	adds	r2, r4, r3
    2368:	1b09      	subs	r1, r1, r4
    236a:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    236e:	42d1      	cmn	r1, r2
    2370:	d513      	bpl.n	239a <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
    2372:	3601      	adds	r6, #1
    2374:	b2f6      	uxtb	r6, r6
			break;
    2376:	e768      	b.n	224a <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
    2378:	2e00      	cmp	r6, #0
    237a:	d1f1      	bne.n	2360 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
    237c:	f1ba 0f00 	cmp.w	sl, #0
    2380:	f43f af76 	beq.w	2270 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2384:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2388:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    238c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2390:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2394:	f88a 9004 	strb.w	r9, [sl, #4]
    2398:	e7eb      	b.n	2372 <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
    239a:	f04f 0000 	mov.w	r0, #0
    239e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    23a2:	f813 0901 	ldrb.w	r0, [r3], #-1
    23a6:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    23aa:	e7e0      	b.n	236e <usb_get_device_descriptor+0x15a>
    23ac:	2000031c 	.word	0x2000031c
    23b0:	200003db 	.word	0x200003db
    23b4:	200003dc 	.word	0x200003dc
    23b8:	20000400 	.word	0x20000400
    23bc:	0000ddd3 	.word	0x0000ddd3

000023c0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    23c0:	b510      	push	{r4, lr}
    23c2:	4b09      	ldr	r3, [pc, #36]	; (23e8 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    23c4:	2100      	movs	r1, #0
    23c6:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    23c8:	781c      	ldrb	r4, [r3, #0]
    23ca:	4284      	cmp	r4, r0
    23cc:	d104      	bne.n	23d8 <usb_ep_get_transfer+0x18>
    23ce:	685c      	ldr	r4, [r3, #4]
    23d0:	b114      	cbz	r4, 23d8 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    23d2:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    23d6:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    23d8:	3101      	adds	r1, #1
    23da:	2904      	cmp	r1, #4
    23dc:	f103 0340 	add.w	r3, r3, #64	; 0x40
    23e0:	d1f2      	bne.n	23c8 <usb_ep_get_transfer+0x8>
	return NULL;
    23e2:	2000      	movs	r0, #0
    23e4:	e7f7      	b.n	23d6 <usb_ep_get_transfer+0x16>
    23e6:	bf00      	nop
    23e8:	20001438 	.word	0x20001438

000023ec <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    23ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    23f0:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    23f4:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    23f8:	3310      	adds	r3, #16
{
    23fa:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    23fc:	d110      	bne.n	2420 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    23fe:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2400:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2404:	0799      	lsls	r1, r3, #30
    2406:	d53c      	bpl.n	2482 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2408:	bb02      	cbnz	r2, 244c <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    240a:	f013 0304 	ands.w	r3, r3, #4
    240e:	d104      	bne.n	241a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2410:	461a      	mov	r2, r3
    2412:	4619      	mov	r1, r3
    2414:	4630      	mov	r0, r6
    2416:	f007 fed5 	bl	a1c4 <usb_write>
			}
			trans->status = 0;
    241a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    241c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2420:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2424:	3310      	adds	r3, #16
    2426:	d00e      	beq.n	2446 <usb_transfer_work+0x5a>
    2428:	f854 5c18 	ldr.w	r5, [r4, #-24]
    242c:	b15d      	cbz	r5, 2446 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    242e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2432:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2436:	f00a fd56 	bl	cee6 <k_is_in_isr>
    243a:	2800      	cmp	r0, #0
    243c:	d04c      	beq.n	24d8 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    243e:	482e      	ldr	r0, [pc, #184]	; (24f8 <usb_transfer_work+0x10c>)
    2440:	4621      	mov	r1, r4
    2442:	f00a fe16 	bl	d072 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    2446:	b002      	add	sp, #8
    2448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    244c:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2450:	ab01      	add	r3, sp, #4
    2452:	4630      	mov	r0, r6
    2454:	f007 feb6 	bl	a1c4 <usb_write>
		if (ret) {
    2458:	b110      	cbz	r0, 2460 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    245a:	f06f 0315 	mvn.w	r3, #21
    245e:	e7dd      	b.n	241c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    2460:	9a01      	ldr	r2, [sp, #4]
    2462:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2466:	4413      	add	r3, r2
    2468:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    246c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2470:	1a9b      	subs	r3, r3, r2
    2472:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2476:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    247a:	4413      	add	r3, r2
    247c:	f844 3c1c 	str.w	r3, [r4, #-28]
    2480:	e7ce      	b.n	2420 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2482:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2486:	ab01      	add	r3, sp, #4
    2488:	4630      	mov	r0, r6
    248a:	f002 fa1f 	bl	48cc <usb_dc_ep_read_wait>
		if (ret) {
    248e:	2800      	cmp	r0, #0
    2490:	d1e3      	bne.n	245a <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2492:	9d01      	ldr	r5, [sp, #4]
    2494:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2498:	442b      	add	r3, r5
    249a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    249e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    24a2:	1b5b      	subs	r3, r3, r5
    24a4:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    24a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    24ac:	442b      	add	r3, r5
    24ae:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    24b2:	2d00      	cmp	r5, #0
    24b4:	d0b1      	beq.n	241a <usb_transfer_work+0x2e>
    24b6:	4630      	mov	r0, r6
    24b8:	f002 faac 	bl	4a14 <usb_dc_ep_mps>
    24bc:	fbb5 f3f0 	udiv	r3, r5, r0
    24c0:	fb03 5510 	mls	r5, r3, r0, r5
    24c4:	2d00      	cmp	r5, #0
    24c6:	d1a8      	bne.n	241a <usb_transfer_work+0x2e>
    24c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d0a4      	beq.n	241a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    24d0:	4630      	mov	r0, r6
    24d2:	f002 fa43 	bl	495c <usb_dc_ep_read_continue>
    24d6:	e7a3      	b.n	2420 <usb_transfer_work+0x34>
		trans->cb = NULL;
    24d8:	f844 0c18 	str.w	r0, [r4, #-24]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    24dc:	f1a4 0010 	sub.w	r0, r4, #16
    24e0:	f005 fef4 	bl	82cc <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    24e4:	f854 3c28 	ldr.w	r3, [r4, #-40]
    24e8:	338c      	adds	r3, #140	; 0x8c
    24ea:	d0ac      	beq.n	2446 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    24ec:	4642      	mov	r2, r8
    24ee:	4639      	mov	r1, r7
    24f0:	4630      	mov	r0, r6
    24f2:	47a8      	blx	r5
    24f4:	e7a7      	b.n	2446 <usb_transfer_work+0x5a>
    24f6:	bf00      	nop
    24f8:	20000400 	.word	0x20000400

000024fc <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    24fc:	1e4b      	subs	r3, r1, #1
    24fe:	2b01      	cmp	r3, #1
{
    2500:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2502:	4606      	mov	r6, r0
    2504:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2506:	d80f      	bhi.n	2528 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2508:	f7ff ff5a 	bl	23c0 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    250c:	4604      	mov	r4, r0
    250e:	b968      	cbnz	r0, 252c <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2510:	2d01      	cmp	r5, #1
    2512:	d109      	bne.n	2528 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2514:	ab01      	add	r3, sp, #4
    2516:	2201      	movs	r2, #1
    2518:	f10d 0103 	add.w	r1, sp, #3
    251c:	4630      	mov	r0, r6
    251e:	f002 f9d5 	bl	48cc <usb_dc_ep_read_wait>
			} while (bytes);
    2522:	9b01      	ldr	r3, [sp, #4]
    2524:	2b00      	cmp	r3, #0
    2526:	d1f5      	bne.n	2514 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2528:	b002      	add	sp, #8
    252a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    252c:	f00a fcdb 	bl	cee6 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2530:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2534:	b108      	cbz	r0, 253a <usb_transfer_ep_callback+0x3e>
    2536:	2d01      	cmp	r5, #1
    2538:	d105      	bne.n	2546 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    253a:	4608      	mov	r0, r1
}
    253c:	b002      	add	sp, #8
    253e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    2542:	f7ff bf53 	b.w	23ec <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2546:	4803      	ldr	r0, [pc, #12]	; (2554 <usb_transfer_ep_callback+0x58>)
}
    2548:	b002      	add	sp, #8
    254a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    254e:	f00a bd90 	b.w	d072 <k_work_submit_to_queue>
    2552:	bf00      	nop
    2554:	20000400 	.word	0x20000400

00002558 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    255c:	4606      	mov	r6, r0
    255e:	9101      	str	r1, [sp, #4]
    2560:	4615      	mov	r5, r2
    2562:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2564:	f007 fe80 	bl	a268 <usb_transfer_is_busy>
    2568:	4604      	mov	r4, r0
    256a:	2800      	cmp	r0, #0
    256c:	d15c      	bne.n	2628 <usb_transfer+0xd0>
    256e:	f04f 0320 	mov.w	r3, #32
    2572:	f3ef 8a11 	mrs	sl, BASEPRI
    2576:	f383 8812 	msr	BASEPRI_MAX, r3
    257a:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    257e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2630 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    2582:	2200      	movs	r2, #0
    2584:	2300      	movs	r3, #0
    2586:	4658      	mov	r0, fp
    2588:	f005 fec0 	bl	830c <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    258c:	b970      	cbnz	r0, 25ac <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    258e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2634 <usb_transfer+0xdc>
    2592:	01a7      	lsls	r7, r4, #6
    2594:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    2598:	6863      	ldr	r3, [r4, #4]
    259a:	f113 0f10 	cmn.w	r3, #16
    259e:	d114      	bne.n	25ca <usb_transfer+0x72>
    25a0:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    25a2:	4658      	mov	r0, fp
    25a4:	f005 fe92 	bl	82cc <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	e006      	b.n	25ba <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    25ac:	3401      	adds	r4, #1
    25ae:	2c04      	cmp	r4, #4
    25b0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    25b4:	d1e5      	bne.n	2582 <usb_transfer+0x2a>
		ret = -ENOMEM;
    25b6:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    25ba:	f38a 8811 	msr	BASEPRI, sl
    25be:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    25c2:	4618      	mov	r0, r3
    25c4:	b003      	add	sp, #12
    25c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    25ca:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    25cc:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    25ce:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    25d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25d4:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    25d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    25d8:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    25da:	4630      	mov	r0, r6
	trans->status = -EBUSY;
    25dc:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    25e0:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    25e4:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    25e8:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    25ea:	f002 fa13 	bl	4a14 <usb_dc_ep_mps>
    25ee:	b158      	cbz	r0, 2608 <usb_transfer+0xb0>
    25f0:	4630      	mov	r0, r6
    25f2:	f002 fa0f 	bl	4a14 <usb_dc_ep_mps>
    25f6:	fbb5 f3f0 	udiv	r3, r5, r0
    25fa:	fb03 5510 	mls	r5, r3, r0, r5
    25fe:	b11d      	cbz	r5, 2608 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2600:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2602:	f043 0304 	orr.w	r3, r3, #4
    2606:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2608:	f018 0f02 	tst.w	r8, #2
    260c:	d007      	beq.n	261e <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    260e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2612:	4809      	ldr	r0, [pc, #36]	; (2638 <usb_transfer+0xe0>)
    2614:	4449      	add	r1, r9
    2616:	f00a fd2c 	bl	d072 <k_work_submit_to_queue>
	int i, key, ret = 0;
    261a:	2300      	movs	r3, #0
    261c:	e7cd      	b.n	25ba <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    261e:	4630      	mov	r0, r6
    2620:	f002 f99c 	bl	495c <usb_dc_ep_read_continue>
    2624:	4603      	mov	r3, r0
    2626:	e7c8      	b.n	25ba <usb_transfer+0x62>
		return -EBUSY;
    2628:	f06f 030f 	mvn.w	r3, #15
    262c:	e7c9      	b.n	25c2 <usb_transfer+0x6a>
    262e:	bf00      	nop
    2630:	20001454 	.word	0x20001454
    2634:	20001438 	.word	0x20001438
    2638:	20000400 	.word	0x20000400

0000263c <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    263c:	b510      	push	{r4, lr}
	__asm__ volatile(
    263e:	f04f 0320 	mov.w	r3, #32
    2642:	f3ef 8411 	mrs	r4, BASEPRI
    2646:	f383 8812 	msr	BASEPRI_MAX, r3
    264a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    264e:	f7ff feb7 	bl	23c0 <usb_ep_get_transfer>
	if (!trans) {
    2652:	b150      	cbz	r0, 266a <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2654:	6843      	ldr	r3, [r0, #4]
    2656:	3310      	adds	r3, #16
    2658:	d107      	bne.n	266a <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    265a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    265e:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2660:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2664:	4803      	ldr	r0, [pc, #12]	; (2674 <usb_cancel_transfer+0x38>)
    2666:	f00a fd04 	bl	d072 <k_work_submit_to_queue>
	__asm__ volatile(
    266a:	f384 8811 	msr	BASEPRI, r4
    266e:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2672:	bd10      	pop	{r4, pc}
    2674:	20000400 	.word	0x20000400

00002678 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	4c0f      	ldr	r4, [pc, #60]	; (26b8 <usb_cancel_transfers+0x40>)
    267c:	2504      	movs	r5, #4
	__asm__ volatile(
    267e:	f04f 0320 	mov.w	r3, #32
    2682:	f3ef 8611 	mrs	r6, BASEPRI
    2686:	f383 8812 	msr	BASEPRI_MAX, r3
    268a:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    268e:	6863      	ldr	r3, [r4, #4]
    2690:	3310      	adds	r3, #16
    2692:	d107      	bne.n	26a4 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2694:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2698:	4808      	ldr	r0, [pc, #32]	; (26bc <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    269a:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    269c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    26a0:	f00a fce7 	bl	d072 <k_work_submit_to_queue>
	__asm__ volatile(
    26a4:	f386 8811 	msr	BASEPRI, r6
    26a8:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    26ac:	3d01      	subs	r5, #1
    26ae:	f104 0440 	add.w	r4, r4, #64	; 0x40
    26b2:	d1e4      	bne.n	267e <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    26b4:	bd70      	pop	{r4, r5, r6, pc}
    26b6:	bf00      	nop
    26b8:	20001438 	.word	0x20001438
    26bc:	20000400 	.word	0x20000400

000026c0 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    26c0:	b570      	push	{r4, r5, r6, lr}
    26c2:	4c0a      	ldr	r4, [pc, #40]	; (26ec <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    26c4:	4e0a      	ldr	r6, [pc, #40]	; (26f0 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    26c6:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    26c8:	4631      	mov	r1, r6
    26ca:	4620      	mov	r0, r4
    26cc:	f00a fcc8 	bl	d060 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    26d0:	2201      	movs	r2, #1
    26d2:	f1a4 0010 	sub.w	r0, r4, #16
    26d6:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    26d8:	3501      	adds	r5, #1
    26da:	f00a fca3 	bl	d024 <z_impl_k_sem_init>
    26de:	2d04      	cmp	r5, #4
    26e0:	f104 0440 	add.w	r4, r4, #64	; 0x40
    26e4:	d1f0      	bne.n	26c8 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    26e6:	2000      	movs	r0, #0
    26e8:	bd70      	pop	{r4, r5, r6, pc}
    26ea:	bf00      	nop
    26ec:	20001464 	.word	0x20001464
    26f0:	000023ed 	.word	0x000023ed

000026f4 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	4604      	mov	r4, r0
    26f8:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    26fa:	7901      	ldrb	r1, [r0, #4]
    26fc:	4812      	ldr	r0, [pc, #72]	; (2748 <cdc_acm_class_handle_req+0x54>)
{
    26fe:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2700:	f007 fd87 	bl	a212 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    2704:	b1e8      	cbz	r0, 2742 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    2706:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    270a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    270c:	2a00      	cmp	r2, #0
    270e:	db11      	blt.n	2734 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    2710:	2b20      	cmp	r3, #32
    2712:	d004      	beq.n	271e <cdc_acm_class_handle_req+0x2a>
    2714:	2b22      	cmp	r3, #34	; 0x22
    2716:	d009      	beq.n	272c <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    2718:	f06f 0085 	mvn.w	r0, #133	; 0x85
    271c:	e005      	b.n	272a <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    271e:	6829      	ldr	r1, [r5, #0]
    2720:	2207      	movs	r2, #7
    2722:	380c      	subs	r0, #12
    2724:	f008 f9dd 	bl	aae2 <memcpy>
			return 0;
    2728:	2000      	movs	r0, #0
}
    272a:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    272c:	8863      	ldrh	r3, [r4, #2]
    272e:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    2732:	e7f9      	b.n	2728 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    2734:	2b21      	cmp	r3, #33	; 0x21
    2736:	d1ef      	bne.n	2718 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    2738:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    273a:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    273c:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    273e:	6033      	str	r3, [r6, #0]
			return 0;
    2740:	e7f2      	b.n	2728 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    2742:	f06f 0012 	mvn.w	r0, #18
    2746:	e7f0      	b.n	272a <cdc_acm_class_handle_req+0x36>
    2748:	20001538 	.word	0x20001538

0000274c <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    274c:	b508      	push	{r3, lr}
    274e:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    2750:	4803      	ldr	r0, [pc, #12]	; (2760 <cdc_acm_int_in+0x14>)
    2752:	f007 fd6f 	bl	a234 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2756:	b110      	cbz	r0, 275e <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2758:	2301      	movs	r3, #1
    275a:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    275e:	bd08      	pop	{r3, pc}
    2760:	20001538 	.word	0x20001538

00002764 <cdc_acm_irq_rx_enable>:
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2764:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    2766:	2301      	movs	r3, #1
    2768:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    276c:	680b      	ldr	r3, [r1, #0]
    276e:	b133      	cbz	r3, 277e <cdc_acm_irq_rx_enable+0x1a>
    2770:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    2774:	b11b      	cbz	r3, 277e <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2776:	4802      	ldr	r0, [pc, #8]	; (2780 <cdc_acm_irq_rx_enable+0x1c>)
    2778:	3108      	adds	r1, #8
    277a:	f00a bc7a 	b.w	d072 <k_work_submit_to_queue>
	}
}
    277e:	4770      	bx	lr
    2780:	20000400 	.word	0x20000400

00002784 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2784:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2786:	2301      	movs	r3, #1
    2788:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    278c:	680b      	ldr	r3, [r1, #0]
    278e:	b133      	cbz	r3, 279e <cdc_acm_irq_tx_enable+0x1a>
    2790:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    2794:	b11b      	cbz	r3, 279e <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2796:	4802      	ldr	r0, [pc, #8]	; (27a0 <cdc_acm_irq_tx_enable+0x1c>)
    2798:	3108      	adds	r1, #8
    279a:	f00a bc6a 	b.w	d072 <k_work_submit_to_queue>
}
    279e:	4770      	bx	lr
    27a0:	20000400 	.word	0x20000400

000027a4 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    27a4:	4a0b      	ldr	r2, [pc, #44]	; (27d4 <cdc_acm_reset_port+0x30>)
{
    27a6:	4603      	mov	r3, r0
	dev_data->configured = false;
    27a8:	2100      	movs	r1, #0
    27aa:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    27ae:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    27b0:	6810      	ldr	r0, [r2, #0]
    27b2:	6758      	str	r0, [r3, #116]	; 0x74
    27b4:	8890      	ldrh	r0, [r2, #4]
    27b6:	7992      	ldrb	r2, [r2, #6]
    27b8:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    27bc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    27c0:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    27c4:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    27c8:	2240      	movs	r2, #64	; 0x40
    27ca:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    27ce:	f008 b993 	b.w	aaf8 <memset>
    27d2:	bf00      	nop
    27d4:	0000d708 	.word	0x0000d708

000027d8 <cdc_acm_fifo_fill>:
{
    27d8:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    27da:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    27dc:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    27e0:	b170      	cbz	r0, 2800 <CONFIG_MAIN_STACK_SIZE>
    27e2:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    27e6:	b963      	cbnz	r3, 2802 <CONFIG_MAIN_STACK_SIZE+0x2>
	dev_data->tx_ready = false;
    27e8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    27ec:	6f28      	ldr	r0, [r5, #112]	; 0x70
    27ee:	f007 fc63 	bl	a0b8 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    27f2:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    27f6:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    27f8:	4803      	ldr	r0, [pc, #12]	; (2808 <CONFIG_MAIN_STACK_SIZE+0x8>)
    27fa:	f00a fc3a 	bl	d072 <k_work_submit_to_queue>
	return wrote;
    27fe:	4620      	mov	r0, r4
}
    2800:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2802:	2000      	movs	r0, #0
    2804:	e7fc      	b.n	2800 <CONFIG_MAIN_STACK_SIZE>
    2806:	bf00      	nop
    2808:	20000400 	.word	0x20000400

0000280c <cdc_acm_read_cb>:
{
    280c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    280e:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2810:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    2814:	1e0a      	subs	r2, r1, #0
{
    2816:	4605      	mov	r5, r0
	if (size <= 0) {
    2818:	dd10      	ble.n	283c <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    281a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    281c:	4631      	mov	r1, r6
    281e:	f007 fc4b 	bl	a0b8 <ring_buf_put>
	dev_data->rx_ready = true;
    2822:	2301      	movs	r3, #1
    2824:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    2828:	6823      	ldr	r3, [r4, #0]
    282a:	b13b      	cbz	r3, 283c <cdc_acm_read_cb+0x30>
    282c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    2830:	b123      	cbz	r3, 283c <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2832:	4808      	ldr	r0, [pc, #32]	; (2854 <cdc_acm_read_cb+0x48>)
    2834:	f104 0108 	add.w	r1, r4, #8
    2838:	f00a fc1b 	bl	d072 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    283c:	4b06      	ldr	r3, [pc, #24]	; (2858 <cdc_acm_read_cb+0x4c>)
    283e:	9300      	str	r3, [sp, #0]
    2840:	9401      	str	r4, [sp, #4]
    2842:	2301      	movs	r3, #1
    2844:	2240      	movs	r2, #64	; 0x40
    2846:	4631      	mov	r1, r6
    2848:	4628      	mov	r0, r5
    284a:	f7ff fe85 	bl	2558 <usb_transfer>
}
    284e:	b002      	add	sp, #8
    2850:	bd70      	pop	{r4, r5, r6, pc}
    2852:	bf00      	nop
    2854:	20000400 	.word	0x20000400
    2858:	0000280d 	.word	0x0000280d

0000285c <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    285c:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    285e:	6904      	ldr	r4, [r0, #16]
{
    2860:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2864:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    2868:	b18b      	cbz	r3, 288e <cdc_acm_poll_out+0x32>
    286a:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    286e:	b973      	cbnz	r3, 288e <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2870:	f10d 0107 	add.w	r1, sp, #7
    2874:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    2876:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    287a:	2201      	movs	r2, #1
    287c:	f007 fc1c 	bl	a0b8 <ring_buf_put>
    2880:	4601      	mov	r1, r0
    2882:	b130      	cbz	r0, 2892 <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2884:	480a      	ldr	r0, [pc, #40]	; (28b0 <cdc_acm_poll_out+0x54>)
    2886:	f104 0118 	add.w	r1, r4, #24
    288a:	f00a fbf2 	bl	d072 <k_work_submit_to_queue>
}
    288e:	b002      	add	sp, #8
    2890:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2892:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2894:	2201      	movs	r2, #1
    2896:	f007 fc74 	bl	a182 <ring_buf_get>
    289a:	2800      	cmp	r0, #0
    289c:	d0f7      	beq.n	288e <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    289e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    28a0:	2201      	movs	r2, #1
    28a2:	f10d 0107 	add.w	r1, sp, #7
    28a6:	f007 fc07 	bl	a0b8 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    28aa:	2800      	cmp	r0, #0
    28ac:	d1ea      	bne.n	2884 <cdc_acm_poll_out+0x28>
    28ae:	e7ee      	b.n	288e <cdc_acm_poll_out+0x32>
    28b0:	20000400 	.word	0x20000400

000028b4 <tx_work_handler>:
{
    28b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    28b6:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    28b8:	685b      	ldr	r3, [r3, #4]
    28ba:	6a1b      	ldr	r3, [r3, #32]
    28bc:	7d1e      	ldrb	r6, [r3, #20]
{
    28be:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    28c0:	4630      	mov	r0, r6
    28c2:	f007 fcd1 	bl	a268 <usb_transfer_is_busy>
    28c6:	b9d0      	cbnz	r0, 28fe <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    28c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    28ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    28ce:	a903      	add	r1, sp, #12
    28d0:	f007 fc11 	bl	a0f6 <ring_buf_get_claim>
	if (!len) {
    28d4:	4604      	mov	r4, r0
    28d6:	b190      	cbz	r0, 28fe <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    28d8:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    28da:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    28de:	bf08      	it	eq
    28e0:	f100 34ff 	addeq.w	r4, r0, #4294967295
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    28e4:	9301      	str	r3, [sp, #4]
    28e6:	4b07      	ldr	r3, [pc, #28]	; (2904 <tx_work_handler+0x50>)
    28e8:	9903      	ldr	r1, [sp, #12]
    28ea:	9300      	str	r3, [sp, #0]
    28ec:	4622      	mov	r2, r4
    28ee:	2302      	movs	r3, #2
    28f0:	4630      	mov	r0, r6
    28f2:	f7ff fe31 	bl	2558 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    28f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    28f8:	4621      	mov	r1, r4
    28fa:	f007 fc26 	bl	a14a <ring_buf_get_finish>
}
    28fe:	b004      	add	sp, #16
    2900:	bd70      	pop	{r4, r5, r6, pc}
    2902:	bf00      	nop
    2904:	00002909 	.word	0x00002909

00002908 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2908:	2301      	movs	r3, #1
    290a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    290e:	6813      	ldr	r3, [r2, #0]
{
    2910:	b510      	push	{r4, lr}
    2912:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2914:	b13b      	cbz	r3, 2926 <cdc_acm_write_cb+0x1e>
    2916:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    291a:	b123      	cbz	r3, 2926 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    291c:	4808      	ldr	r0, [pc, #32]	; (2940 <cdc_acm_write_cb+0x38>)
    291e:	f102 0108 	add.w	r1, r2, #8
    2922:	f00a fba6 	bl	d072 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    2926:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2928:	f007 fb80 	bl	a02c <ring_buf_is_empty>
    292c:	b930      	cbnz	r0, 293c <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    292e:	f104 0118 	add.w	r1, r4, #24
    2932:	4803      	ldr	r0, [pc, #12]	; (2940 <cdc_acm_write_cb+0x38>)
}
    2934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2938:	f00a bb9b 	b.w	d072 <k_work_submit_to_queue>
}
    293c:	bd10      	pop	{r4, pc}
    293e:	bf00      	nop
    2940:	20000400 	.word	0x20000400

00002944 <cdc_acm_dev_status_cb>:
{
    2944:	b538      	push	{r3, r4, r5, lr}
    2946:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2948:	4601      	mov	r1, r0
    294a:	4824      	ldr	r0, [pc, #144]	; (29dc <cdc_acm_dev_status_cb+0x98>)
    294c:	f007 fc52 	bl	a1f4 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    2950:	4604      	mov	r4, r0
    2952:	b380      	cbz	r0, 29b6 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2954:	4602      	mov	r2, r0
	switch (status) {
    2956:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    2958:	f852 3980 	ldr.w	r3, [r2], #-128
    295c:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    295e:	2905      	cmp	r1, #5
    2960:	d829      	bhi.n	29b6 <cdc_acm_dev_status_cb+0x72>
    2962:	e8df f001 	tbb	[pc, r1]
    2966:	2820      	.short	0x2820
    2968:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    296c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    2970:	b931      	cbnz	r1, 2980 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2972:	6a1b      	ldr	r3, [r3, #32]
    2974:	7b18      	ldrb	r0, [r3, #12]
    2976:	f7ff ff49 	bl	280c <cdc_acm_read_cb>
			dev_data->configured = true;
    297a:	2301      	movs	r3, #1
    297c:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    2980:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    2984:	b9bb      	cbnz	r3, 29b6 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    2986:	2301      	movs	r3, #1
    2988:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    298c:	f854 3c80 	ldr.w	r3, [r4, #-128]
    2990:	b18b      	cbz	r3, 29b6 <cdc_acm_dev_status_cb+0x72>
    2992:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    2996:	b173      	cbz	r3, 29b6 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2998:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
    299c:	4810      	ldr	r0, [pc, #64]	; (29e0 <cdc_acm_dev_status_cb+0x9c>)
}
    299e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    29a2:	f00a bb66 	b.w	d072 <k_work_submit_to_queue>
}
    29a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    29aa:	4610      	mov	r0, r2
    29ac:	f7ff befa 	b.w	27a4 <cdc_acm_reset_port>
		dev_data->suspended = true;
    29b0:	2301      	movs	r3, #1
    29b2:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    29b6:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    29b8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    29bc:	2900      	cmp	r1, #0
    29be:	d0fa      	beq.n	29b6 <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
    29c0:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
    29c4:	2100      	movs	r1, #0
    29c6:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    29ca:	2800      	cmp	r0, #0
    29cc:	d0f3      	beq.n	29b6 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    29ce:	6a1b      	ldr	r3, [r3, #32]
    29d0:	7b18      	ldrb	r0, [r3, #12]
}
    29d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    29d6:	f7ff bf19 	b.w	280c <cdc_acm_read_cb>
    29da:	bf00      	nop
    29dc:	20001538 	.word	0x20001538
    29e0:	20000400 	.word	0x20000400

000029e4 <cdc_acm_init>:
{
    29e4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    29e6:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    29e8:	2300      	movs	r3, #0
    29ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    29ee:	4b0c      	ldr	r3, [pc, #48]	; (2a20 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    29f0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    29f4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    29f6:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    29fa:	b969      	cbnz	r1, 2a18 <cdc_acm_init+0x34>
	list->head = node;
    29fc:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2a00:	f104 0008 	add.w	r0, r4, #8
    2a04:	4907      	ldr	r1, [pc, #28]	; (2a24 <cdc_acm_init+0x40>)
    2a06:	f00a fb2b 	bl	d060 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    2a0a:	f104 0018 	add.w	r0, r4, #24
    2a0e:	4906      	ldr	r1, [pc, #24]	; (2a28 <cdc_acm_init+0x44>)
    2a10:	f00a fb26 	bl	d060 <k_work_init>
}
    2a14:	2000      	movs	r0, #0
    2a16:	bd10      	pop	{r4, pc}
	parent->next = child;
    2a18:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2a1a:	605a      	str	r2, [r3, #4]
}
    2a1c:	e7f0      	b.n	2a00 <cdc_acm_init+0x1c>
    2a1e:	bf00      	nop
    2a20:	20001538 	.word	0x20001538
    2a24:	0000a293 	.word	0x0000a293
    2a28:	000028b5 	.word	0x000028b5

00002a2c <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    2a2c:	b530      	push	{r4, r5, lr}
	struct usb_cfg_data * const cfg = (void *)dev->config;
    2a2e:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2a30:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2a32:	4c0e      	ldr	r4, [pc, #56]	; (2a6c <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    2a34:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    2a36:	f242 00a1 	movw	r0, #8353	; 0x20a1
    2a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2a3e:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    2a42:	2300      	movs	r3, #0
    2a44:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2a48:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    2a4a:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2a4e:	7900      	ldrb	r0, [r0, #4]
    2a50:	220a      	movs	r2, #10
    2a52:	a901      	add	r1, sp, #4
    2a54:	f007 fbb6 	bl	a1c4 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2a58:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    2a5c:	b923      	cbnz	r3, 2a68 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    2a5e:	2001      	movs	r0, #1
    2a60:	f00a fc40 	bl	d2e4 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2a64:	3c01      	subs	r4, #1
    2a66:	d1f7      	bne.n	2a58 <cdc_acm_send_notification.isra.0+0x2c>
}
    2a68:	b005      	add	sp, #20
    2a6a:	bd30      	pop	{r4, r5, pc}
    2a6c:	000186a1 	.word	0x000186a1

00002a70 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    2a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    2a72:	4d09      	ldr	r5, [pc, #36]	; (2a98 <z_usb_work_q_init+0x28>)
    2a74:	4909      	ldr	r1, [pc, #36]	; (2a9c <z_usb_work_q_init+0x2c>)
    2a76:	2400      	movs	r4, #0
    2a78:	9400      	str	r4, [sp, #0]
    2a7a:	f04f 33ff 	mov.w	r3, #4294967295
    2a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2a82:	4628      	mov	r0, r5
    2a84:	f005 fd68 	bl	8558 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    2a88:	4905      	ldr	r1, [pc, #20]	; (2aa0 <z_usb_work_q_init+0x30>)
    2a8a:	4628      	mov	r0, r5
    2a8c:	f00a fa31 	bl	cef2 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    2a90:	4620      	mov	r0, r4
    2a92:	b003      	add	sp, #12
    2a94:	bd30      	pop	{r4, r5, pc}
    2a96:	bf00      	nop
    2a98:	20000400 	.word	0x20000400
    2a9c:	20004a60 	.word	0x20004a60
    2aa0:	0000ddee 	.word	0x0000ddee

00002aa4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    2aa4:	4b0d      	ldr	r3, [pc, #52]	; (2adc <flash_area_open+0x38>)
    2aa6:	681b      	ldr	r3, [r3, #0]
{
    2aa8:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    2aaa:	b1a3      	cbz	r3, 2ad6 <flash_area_open+0x32>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    2aac:	4a0c      	ldr	r2, [pc, #48]	; (2ae0 <flash_area_open+0x3c>)
    2aae:	6815      	ldr	r5, [r2, #0]
    2ab0:	2200      	movs	r2, #0
    2ab2:	42aa      	cmp	r2, r5
    2ab4:	db02      	blt.n	2abc <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    2ab6:	f06f 0001 	mvn.w	r0, #1
    2aba:	e00b      	b.n	2ad4 <flash_area_open+0x30>
		if (flash_map[i].fa_id == idx) {
    2abc:	461c      	mov	r4, r3
    2abe:	f814 6b10 	ldrb.w	r6, [r4], #16
    2ac2:	4286      	cmp	r6, r0
    2ac4:	d002      	beq.n	2acc <flash_area_open+0x28>
	for (int i = 0; i < flash_map_entries; i++) {
    2ac6:	3201      	adds	r2, #1
    2ac8:	4623      	mov	r3, r4
    2aca:	e7f2      	b.n	2ab2 <flash_area_open+0xe>
	if (area == NULL) {
    2acc:	2b00      	cmp	r3, #0
    2ace:	d0f2      	beq.n	2ab6 <flash_area_open+0x12>
	}

	*fap = area;
    2ad0:	600b      	str	r3, [r1, #0]
	return 0;
    2ad2:	2000      	movs	r0, #0
}
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
    2ad6:	f06f 000c 	mvn.w	r0, #12
    2ada:	e7fb      	b.n	2ad4 <flash_area_open+0x30>
    2adc:	200000e4 	.word	0x200000e4
    2ae0:	0000d784 	.word	0x0000d784

00002ae4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2ae4:	b570      	push	{r4, r5, r6, lr}
    2ae6:	b088      	sub	sp, #32
    2ae8:	4605      	mov	r5, r0
    2aea:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    2aec:	b2c0      	uxtb	r0, r0
    2aee:	4669      	mov	r1, sp
{
    2af0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    2af2:	f7ff ffd7 	bl	2aa4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    2af6:	2800      	cmp	r0, #0
    2af8:	db1f      	blt.n	2b3a <flash_area_get_sectors+0x56>
    2afa:	9b00      	ldr	r3, [sp, #0]
    2afc:	b1eb      	cbz	r3, 2b3a <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    2afe:	685a      	ldr	r2, [r3, #4]
    2b00:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    2b02:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
    2b04:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2b06:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
    2b08:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    2b0a:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    2b0e:	2200      	movs	r2, #0
	cb_data->status = 0;
    2b10:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    2b14:	9205      	str	r2, [sp, #20]
    2b16:	f005 f8f5 	bl	7d04 <z_impl_device_get_binding>
    2b1a:	4605      	mov	r5, r0
	flash_area_close(fa);
    2b1c:	9800      	ldr	r0, [sp, #0]
    2b1e:	f007 fc74 	bl	a40a <flash_area_close>
	if (flash_dev == NULL) {
    2b22:	b16d      	cbz	r5, 2b40 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    2b24:	4628      	mov	r0, r5
    2b26:	4908      	ldr	r1, [pc, #32]	; (2b48 <flash_area_get_sectors+0x64>)
    2b28:	aa01      	add	r2, sp, #4
    2b2a:	f008 f9a8 	bl	ae7e <flash_page_foreach>
	if (cb_data->status == 0) {
    2b2e:	9807      	ldr	r0, [sp, #28]
    2b30:	b908      	cbnz	r0, 2b36 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    2b32:	9b05      	ldr	r3, [sp, #20]
    2b34:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    2b36:	b008      	add	sp, #32
    2b38:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    2b3a:	f06f 0015 	mvn.w	r0, #21
    2b3e:	e7fa      	b.n	2b36 <flash_area_get_sectors+0x52>
		return -ENODEV;
    2b40:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2b44:	e7f7      	b.n	2b36 <flash_area_get_sectors+0x52>
    2b46:	bf00      	nop
    2b48:	0000a52d 	.word	0x0000a52d

00002b4c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2b4c:	4801      	ldr	r0, [pc, #4]	; (2b54 <nrf_cc3xx_platform_abort_init+0x8>)
    2b4e:	f006 ba8f 	b.w	9070 <nrf_cc3xx_platform_set_abort>
    2b52:	bf00      	nop
    2b54:	0000d7e8 	.word	0x0000d7e8

00002b58 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b58:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2b5a:	4604      	mov	r4, r0
    2b5c:	b918      	cbnz	r0, 2b66 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2b5e:	4b0d      	ldr	r3, [pc, #52]	; (2b94 <mutex_free_platform+0x3c>)
    2b60:	480d      	ldr	r0, [pc, #52]	; (2b98 <mutex_free_platform+0x40>)
    2b62:	685b      	ldr	r3, [r3, #4]
    2b64:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2b66:	6861      	ldr	r1, [r4, #4]
    2b68:	f031 0304 	bics.w	r3, r1, #4
    2b6c:	d00c      	beq.n	2b88 <mutex_free_platform+0x30>
    2b6e:	2908      	cmp	r1, #8
    2b70:	d00a      	beq.n	2b88 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2b72:	f011 0102 	ands.w	r1, r1, #2
    2b76:	d008      	beq.n	2b8a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2b78:	4808      	ldr	r0, [pc, #32]	; (2b9c <mutex_free_platform+0x44>)
    2b7a:	4621      	mov	r1, r4
    2b7c:	f00a f98a 	bl	ce94 <k_mem_slab_free>
        mutex->mutex = NULL;
    2b80:	2300      	movs	r3, #0
    2b82:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2b84:	2300      	movs	r3, #0
    2b86:	6063      	str	r3, [r4, #4]
}
    2b88:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2b8a:	6820      	ldr	r0, [r4, #0]
    2b8c:	2214      	movs	r2, #20
    2b8e:	f007 ffb3 	bl	aaf8 <memset>
    2b92:	e7f7      	b.n	2b84 <mutex_free_platform+0x2c>
    2b94:	20000210 	.word	0x20000210
    2b98:	0000ddf7 	.word	0x0000ddf7
    2b9c:	20001a40 	.word	0x20001a40

00002ba0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ba0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ba2:	b308      	cbz	r0, 2be8 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2ba4:	6843      	ldr	r3, [r0, #4]
    2ba6:	2b04      	cmp	r3, #4
    2ba8:	d110      	bne.n	2bcc <mutex_lock_platform+0x2c>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2baa:	2201      	movs	r2, #1
    2bac:	6803      	ldr	r3, [r0, #0]
    2bae:	f3bf 8f5b 	dmb	ish
    2bb2:	e853 1f00 	ldrex	r1, [r3]
    2bb6:	2900      	cmp	r1, #0
    2bb8:	d103      	bne.n	2bc2 <mutex_lock_platform+0x22>
    2bba:	e843 2000 	strex	r0, r2, [r3]
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d1f7      	bne.n	2bb2 <mutex_lock_platform+0x12>
    2bc2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2bc6:	d10b      	bne.n	2be0 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    2bc8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2bca:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2bcc:	b153      	cbz	r3, 2be4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2bce:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2bd0:	f04f 32ff 	mov.w	r2, #4294967295
    2bd4:	f04f 33ff 	mov.w	r3, #4294967295
    2bd8:	f005 fa8a 	bl	80f0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2bdc:	2800      	cmp	r0, #0
    2bde:	d0f3      	beq.n	2bc8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2be0:	4803      	ldr	r0, [pc, #12]	; (2bf0 <mutex_lock_platform+0x50>)
    2be2:	e7f2      	b.n	2bca <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2be4:	4803      	ldr	r0, [pc, #12]	; (2bf4 <mutex_lock_platform+0x54>)
    2be6:	e7f0      	b.n	2bca <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2be8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2bec:	e7ed      	b.n	2bca <mutex_lock_platform+0x2a>
    2bee:	bf00      	nop
    2bf0:	ffff8fe9 	.word	0xffff8fe9
    2bf4:	ffff8fea 	.word	0xffff8fea

00002bf8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2bf8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2bfa:	b1c0      	cbz	r0, 2c2e <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2bfc:	6843      	ldr	r3, [r0, #4]
    2bfe:	2b04      	cmp	r3, #4
    2c00:	d110      	bne.n	2c24 <mutex_unlock_platform+0x2c>
    2c02:	2200      	movs	r2, #0
    2c04:	6803      	ldr	r3, [r0, #0]
    2c06:	f3bf 8f5b 	dmb	ish
    2c0a:	e853 1f00 	ldrex	r1, [r3]
    2c0e:	2901      	cmp	r1, #1
    2c10:	d103      	bne.n	2c1a <mutex_unlock_platform+0x22>
    2c12:	e843 2000 	strex	r0, r2, [r3]
    2c16:	2800      	cmp	r0, #0
    2c18:	d1f7      	bne.n	2c0a <mutex_unlock_platform+0x12>
    2c1a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c1e:	d109      	bne.n	2c34 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2c20:	2000      	movs	r0, #0
    }
}
    2c22:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2c24:	b143      	cbz	r3, 2c38 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2c26:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2c28:	f005 fada 	bl	81e0 <z_impl_k_mutex_unlock>
    2c2c:	e7f8      	b.n	2c20 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2c2e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2c32:	e7f6      	b.n	2c22 <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c34:	4801      	ldr	r0, [pc, #4]	; (2c3c <mutex_unlock_platform+0x44>)
    2c36:	e7f4      	b.n	2c22 <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2c38:	4801      	ldr	r0, [pc, #4]	; (2c40 <mutex_unlock_platform+0x48>)
    2c3a:	e7f2      	b.n	2c22 <mutex_unlock_platform+0x2a>
    2c3c:	ffff8fe9 	.word	0xffff8fe9
    2c40:	ffff8fea 	.word	0xffff8fea

00002c44 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c44:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c46:	4604      	mov	r4, r0
    2c48:	b918      	cbnz	r0, 2c52 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2c4a:	4b16      	ldr	r3, [pc, #88]	; (2ca4 <mutex_init_platform+0x60>)
    2c4c:	4816      	ldr	r0, [pc, #88]	; (2ca8 <mutex_init_platform+0x64>)
    2c4e:	685b      	ldr	r3, [r3, #4]
    2c50:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2c52:	6863      	ldr	r3, [r4, #4]
    2c54:	2b04      	cmp	r3, #4
    2c56:	d023      	beq.n	2ca0 <mutex_init_platform+0x5c>
    2c58:	2b08      	cmp	r3, #8
    2c5a:	d021      	beq.n	2ca0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2c5c:	b9cb      	cbnz	r3, 2c92 <mutex_init_platform+0x4e>
    2c5e:	6823      	ldr	r3, [r4, #0]
    2c60:	b9bb      	cbnz	r3, 2c92 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2c62:	4812      	ldr	r0, [pc, #72]	; (2cac <mutex_init_platform+0x68>)
    2c64:	f04f 32ff 	mov.w	r2, #4294967295
    2c68:	f04f 33ff 	mov.w	r3, #4294967295
    2c6c:	4621      	mov	r1, r4
    2c6e:	f005 f957 	bl	7f20 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2c72:	b908      	cbnz	r0, 2c78 <mutex_init_platform+0x34>
    2c74:	6823      	ldr	r3, [r4, #0]
    2c76:	b91b      	cbnz	r3, 2c80 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2c78:	4b0a      	ldr	r3, [pc, #40]	; (2ca4 <mutex_init_platform+0x60>)
    2c7a:	480d      	ldr	r0, [pc, #52]	; (2cb0 <mutex_init_platform+0x6c>)
    2c7c:	685b      	ldr	r3, [r3, #4]
    2c7e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2c80:	6820      	ldr	r0, [r4, #0]
    2c82:	2214      	movs	r2, #20
    2c84:	2100      	movs	r1, #0
    2c86:	f007 ff37 	bl	aaf8 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2c8a:	6863      	ldr	r3, [r4, #4]
    2c8c:	f043 0302 	orr.w	r3, r3, #2
    2c90:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2c92:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2c94:	f00a f946 	bl	cf24 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2c98:	6863      	ldr	r3, [r4, #4]
    2c9a:	f043 0301 	orr.w	r3, r3, #1
    2c9e:	6063      	str	r3, [r4, #4]
}
    2ca0:	bd10      	pop	{r4, pc}
    2ca2:	bf00      	nop
    2ca4:	20000210 	.word	0x20000210
    2ca8:	0000ddf7 	.word	0x0000ddf7
    2cac:	20001a40 	.word	0x20001a40
    2cb0:	0000de1d 	.word	0x0000de1d

00002cb4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2cb4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2cb6:	4906      	ldr	r1, [pc, #24]	; (2cd0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2cb8:	4806      	ldr	r0, [pc, #24]	; (2cd4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2cba:	2340      	movs	r3, #64	; 0x40
    2cbc:	2214      	movs	r2, #20
    2cbe:	f00a f8ce 	bl	ce5e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2cc6:	4904      	ldr	r1, [pc, #16]	; (2cd8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2cc8:	4804      	ldr	r0, [pc, #16]	; (2cdc <nrf_cc3xx_platform_mutex_init+0x28>)
    2cca:	f006 ba33 	b.w	9134 <nrf_cc3xx_platform_set_mutexes>
    2cce:	bf00      	nop
    2cd0:	20001540 	.word	0x20001540
    2cd4:	20001a40 	.word	0x20001a40
    2cd8:	0000d7f0 	.word	0x0000d7f0
    2cdc:	0000d804 	.word	0x0000d804

00002ce0 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    2ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    2ce2:	4e23      	ldr	r6, [pc, #140]	; (2d70 <boot_uart_fifo_callback+0x90>)
    2ce4:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    2ce6:	6883      	ldr	r3, [r0, #8]
    2ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2cea:	b103      	cbz	r3, 2cee <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    2cec:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    2cee:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    2cf0:	6883      	ldr	r3, [r0, #8]
    2cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d132      	bne.n	2d5e <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    2cf8:	4c1e      	ldr	r4, [pc, #120]	; (2d74 <boot_uart_fifo_callback+0x94>)
	return list->head;
    2cfa:	4d1f      	ldr	r5, [pc, #124]	; (2d78 <boot_uart_fifo_callback+0x98>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    2cfc:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    2cfe:	6883      	ldr	r3, [r0, #8]
    2d00:	699b      	ldr	r3, [r3, #24]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d02e      	beq.n	2d64 <boot_uart_fifo_callback+0x84>
	return api->fifo_read(dev, rx_data, size);
    2d06:	2201      	movs	r2, #1
    2d08:	f10d 0107 	add.w	r1, sp, #7
    2d0c:	4798      	blx	r3
		if (rx != 1) {
    2d0e:	2801      	cmp	r0, #1
    2d10:	d128      	bne.n	2d64 <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    2d12:	6823      	ldr	r3, [r4, #0]
    2d14:	b943      	cbnz	r3, 2d28 <boot_uart_fifo_callback+0x48>
    2d16:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2d18:	b323      	cbz	r3, 2d64 <boot_uart_fifo_callback+0x84>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2d1a:	6869      	ldr	r1, [r5, #4]
	return node->next;
    2d1c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2d1e:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2d20:	428b      	cmp	r3, r1
	list->tail = node;
    2d22:	bf08      	it	eq
    2d24:	606a      	streq	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    2d26:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2d28:	4a14      	ldr	r2, [pc, #80]	; (2d7c <boot_uart_fifo_callback+0x9c>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    2d2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2d2e:	8811      	ldrh	r1, [r2, #0]
    2d30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2d34:	d204      	bcs.n	2d40 <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    2d36:	6823      	ldr	r3, [r4, #0]
    2d38:	440b      	add	r3, r1
    2d3a:	1c4f      	adds	r7, r1, #1
    2d3c:	8017      	strh	r7, [r2, #0]
    2d3e:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    2d40:	280a      	cmp	r0, #10
    2d42:	d1db      	bne.n	2cfc <boot_uart_fifo_callback+0x1c>
			cmd->len = cur;
    2d44:	6823      	ldr	r3, [r4, #0]
    2d46:	8811      	ldrh	r1, [r2, #0]
    2d48:	6059      	str	r1, [r3, #4]
	return list->tail;
    2d4a:	490d      	ldr	r1, [pc, #52]	; (2d80 <boot_uart_fifo_callback+0xa0>)
    2d4c:	684d      	ldr	r5, [r1, #4]
	parent->next = child;
    2d4e:	2000      	movs	r0, #0
    2d50:	6018      	str	r0, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    2d52:	b94d      	cbnz	r5, 2d68 <boot_uart_fifo_callback+0x88>
	list->head = node;
    2d54:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    2d58:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    2d5a:	6020      	str	r0, [r4, #0]
    2d5c:	e7cd      	b.n	2cfa <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    2d5e:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    2d60:	2800      	cmp	r0, #0
    2d62:	d1c9      	bne.n	2cf8 <boot_uart_fifo_callback+0x18>
		}
	}
}
    2d64:	b003      	add	sp, #12
    2d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    2d68:	602b      	str	r3, [r5, #0]
	list->tail = node;
    2d6a:	604b      	str	r3, [r1, #4]
}
    2d6c:	e7f4      	b.n	2d58 <boot_uart_fifo_callback+0x78>
    2d6e:	bf00      	nop
    2d70:	20001e84 	.word	0x20001e84
    2d74:	20001a5c 	.word	0x20001a5c
    2d78:	20001a6c 	.word	0x20001a6c
    2d7c:	20002aa8 	.word	0x20002aa8
    2d80:	20001a64 	.word	0x20001a64

00002d84 <console_out>:
	uart_poll_out(uart_dev, c);
    2d84:	4b04      	ldr	r3, [pc, #16]	; (2d98 <console_out+0x14>)
{
    2d86:	b510      	push	{r4, lr}
    2d88:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    2d8a:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    2d8c:	6883      	ldr	r3, [r0, #8]
    2d8e:	b2e1      	uxtb	r1, r4
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	4798      	blx	r3
}
    2d94:	4620      	mov	r0, r4
    2d96:	bd10      	pop	{r4, pc}
    2d98:	20001e84 	.word	0x20001e84

00002d9c <console_read>:
{
    2d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d9e:	4605      	mov	r5, r0
    2da0:	460c      	mov	r4, r1
    2da2:	4616      	mov	r6, r2
	__asm__ volatile(
    2da4:	f04f 0320 	mov.w	r3, #32
    2da8:	f3ef 8711 	mrs	r7, BASEPRI
    2dac:	f383 8812 	msr	BASEPRI_MAX, r3
    2db0:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    2db4:	481c      	ldr	r0, [pc, #112]	; (2e28 <console_read+0x8c>)
    2db6:	6803      	ldr	r3, [r0, #0]
    2db8:	b153      	cbz	r3, 2dd0 <console_read+0x34>
	return list->tail;
    2dba:	4a1c      	ldr	r2, [pc, #112]	; (2e2c <console_read+0x90>)
    2dbc:	6851      	ldr	r1, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    2dbe:	4299      	cmp	r1, r3
    2dc0:	d006      	beq.n	2dd0 <console_read+0x34>
	parent->next = child;
    2dc2:	f04f 0c00 	mov.w	ip, #0
    2dc6:	f8c3 c000 	str.w	ip, [r3]
Z_GENLIST_APPEND(slist, snode)
    2dca:	b969      	cbnz	r1, 2de8 <console_read+0x4c>
	list->head = node;
    2dcc:	e9c2 3300 	strd	r3, r3, [r2]
	return list->head;
    2dd0:	4b17      	ldr	r3, [pc, #92]	; (2e30 <console_read+0x94>)
    2dd2:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
    2dd4:	b959      	cbnz	r1, 2dee <console_read+0x52>
	__asm__ volatile(
    2dd6:	f387 8811 	msr	BASEPRI, r7
    2dda:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    2dde:	6001      	str	r1, [r0, #0]
		return 0;
    2de0:	2300      	movs	r3, #0
    2de2:	4618      	mov	r0, r3
		*newline = 0;
    2de4:	6033      	str	r3, [r6, #0]
}
    2de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    2de8:	600b      	str	r3, [r1, #0]
	list->tail = node;
    2dea:	6053      	str	r3, [r2, #4]
}
    2dec:	e7f0      	b.n	2dd0 <console_read+0x34>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2dee:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return node->next;
    2df2:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    2df4:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2df6:	4561      	cmp	r1, ip
	list->tail = node;
    2df8:	bf08      	it	eq
    2dfa:	605a      	streq	r2, [r3, #4]
    2dfc:	f387 8811 	msr	BASEPRI, r7
    2e00:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    2e04:	684b      	ldr	r3, [r1, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    2e06:	6001      	str	r1, [r0, #0]
	if (line == NULL) {
    2e08:	3108      	adds	r1, #8
    2e0a:	d0e9      	beq.n	2de0 <console_read+0x44>
	if (len > str_size - 1) {
    2e0c:	3c01      	subs	r4, #1
    2e0e:	429c      	cmp	r4, r3
    2e10:	bfa8      	it	ge
    2e12:	461c      	movge	r4, r3
	memcpy(str, line, len);
    2e14:	4622      	mov	r2, r4
    2e16:	4628      	mov	r0, r5
    2e18:	f007 fe63 	bl	aae2 <memcpy>
	str[len] = '\0';
    2e1c:	2300      	movs	r3, #0
    2e1e:	552b      	strb	r3, [r5, r4]
	return len + 1;
    2e20:	1c60      	adds	r0, r4, #1
    2e22:	2301      	movs	r3, #1
    2e24:	e7de      	b.n	2de4 <console_read+0x48>
    2e26:	bf00      	nop
    2e28:	20001a60 	.word	0x20001a60
    2e2c:	20001a6c 	.word	0x20001a6c
    2e30:	20001a64 	.word	0x20001a64

00002e34 <boot_console_init>:
	list->head = NULL;
    2e34:	4b20      	ldr	r3, [pc, #128]	; (2eb8 <boot_console_init+0x84>)
{
    2e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2e38:	2400      	movs	r4, #0
	list->tail = NULL;
    2e3a:	e9c3 4400 	strd	r4, r4, [r3]
	list->head = node;
    2e3e:	4b1f      	ldr	r3, [pc, #124]	; (2ebc <boot_console_init+0x88>)
    2e40:	4a1f      	ldr	r2, [pc, #124]	; (2ec0 <boot_console_init+0x8c>)
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
    2e42:	4d20      	ldr	r5, [pc, #128]	; (2ec4 <boot_console_init+0x90>)
    2e44:	4820      	ldr	r0, [pc, #128]	; (2ec8 <boot_console_init+0x94>)
    2e46:	6013      	str	r3, [r2, #0]
	parent->next = child;
    2e48:	f503 7102 	add.w	r1, r3, #520	; 0x208
    2e4c:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    2e50:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2e52:	6051      	str	r1, [r2, #4]
    2e54:	6028      	str	r0, [r5, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2e56:	f009 ffdd 	bl	ce14 <z_device_ready>
    2e5a:	b920      	cbnz	r0, 2e66 <boot_console_init+0x32>
#endif

	if (!device_is_ready(uart_dev)) {
		return (-1);
    2e5c:	f04f 34ff 	mov.w	r4, #4294967295
}
    2e60:	4620      	mov	r0, r4
    2e62:	b003      	add	sp, #12
    2e64:	bd30      	pop	{r4, r5, pc}
	}

#if CONFIG_BOOT_SERIAL_CDC_ACM
	int rc = usb_enable(NULL);
    2e66:	4620      	mov	r0, r4
    2e68:	f7ff f91a 	bl	20a0 <usb_enable>
	if (rc) {
    2e6c:	4604      	mov	r4, r0
    2e6e:	2800      	cmp	r0, #0
    2e70:	d1f4      	bne.n	2e5c <boot_console_init+0x28>
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    2e72:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    2e74:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2e76:	b123      	cbz	r3, 2e82 <boot_console_init+0x4e>
    2e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e7a:	b113      	cbz	r3, 2e82 <boot_console_init+0x4e>
		api->irq_callback_set(dev, cb, user_data);
    2e7c:	4913      	ldr	r1, [pc, #76]	; (2ecc <boot_console_init+0x98>)
    2e7e:	4622      	mov	r2, r4
    2e80:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    2e82:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    2e84:	6883      	ldr	r3, [r0, #8]
    2e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2e88:	b10b      	cbz	r3, 2e8e <boot_console_init+0x5a>
	return api->irq_rx_ready(dev);
    2e8a:	4798      	blx	r3
    2e8c:	b148      	cbz	r0, 2ea2 <boot_console_init+0x6e>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    2e8e:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read == NULL) {
    2e90:	6883      	ldr	r3, [r0, #8]
    2e92:	699b      	ldr	r3, [r3, #24]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d0fa      	beq.n	2e8e <boot_console_init+0x5a>
	return api->fifo_read(dev, rx_data, size);
    2e98:	2201      	movs	r2, #1
    2e9a:	f10d 0107 	add.w	r1, sp, #7
    2e9e:	4798      	blx	r3
    2ea0:	e7f4      	b.n	2e8c <boot_console_init+0x58>
			;
		}
	}

	cur = 0;
    2ea2:	4b0b      	ldr	r3, [pc, #44]	; (2ed0 <boot_console_init+0x9c>)

	uart_irq_rx_enable(uart_dev);
    2ea4:	6828      	ldr	r0, [r5, #0]
	cur = 0;
    2ea6:	2200      	movs	r2, #0
    2ea8:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    2eaa:	6883      	ldr	r3, [r0, #8]
    2eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d0d6      	beq.n	2e60 <boot_console_init+0x2c>
		api->irq_rx_enable(dev);
    2eb2:	4798      	blx	r3
	return boot_uart_fifo_init();
    2eb4:	e7d4      	b.n	2e60 <boot_console_init+0x2c>
    2eb6:	bf00      	nop
    2eb8:	20001a64 	.word	0x20001a64
    2ebc:	20001a74 	.word	0x20001a74
    2ec0:	20001a6c 	.word	0x20001a6c
    2ec4:	20001e84 	.word	0x20001e84
    2ec8:	0000d4f0 	.word	0x0000d4f0
    2ecc:	00002ce1 	.word	0x00002ce1
    2ed0:	20002aa8 	.word	0x20002aa8

00002ed4 <boot_serial_output>:
    }
}

static void
boot_serial_output(void)
{
    2ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ed8:	b0d2      	sub	sp, #328	; 0x148
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2eda:	f640 1306 	movw	r3, #2310	; 0x906
    2ede:	f8ad 300c 	strh.w	r3, [sp, #12]
    char buf[BOOT_SERIAL_OUT_MAX];
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    2ee2:	4b3b      	ldr	r3, [pc, #236]	; (2fd0 <boot_serial_output+0xfc>)

    bs_hdr->nh_op++;
    2ee4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2fd4 <boot_serial_output+0x100>
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    2ee8:	681c      	ldr	r4, [r3, #0]
    2eea:	4f3b      	ldr	r7, [pc, #236]	; (2fd8 <boot_serial_output+0x104>)
    bs_hdr->nh_op++;
    2eec:	f8d8 0000 	ldr.w	r0, [r8]
    crc = crc16_ccitt(CRC16_INITIAL_CRC, bs_hdr, sizeof(*bs_hdr));
    crc = crc16_ccitt(crc, data, len);
#endif
    crc = htons(crc);

    boot_uf->write(pkt_start, sizeof(pkt_start));
    2ef0:	4e3a      	ldr	r6, [pc, #232]	; (2fdc <boot_serial_output+0x108>)
    bs_hdr->nh_op++;
    2ef2:	7803      	ldrb	r3, [r0, #0]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    2ef4:	1be4      	subs	r4, r4, r7
    bs_hdr->nh_len = htons(len);
    2ef6:	ba62      	rev16	r2, r4
    2ef8:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2efa:	8882      	ldrh	r2, [r0, #4]
    bs_hdr->nh_op++;
    2efc:	3301      	adds	r3, #1
    2efe:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2f00:	ba52      	rev16	r2, r2
    bs_hdr->nh_flags = 0;
    2f02:	2300      	movs	r3, #0
    2f04:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2f06:	8082      	strh	r2, [r0, #4]
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2f08:	2108      	movs	r1, #8
    2f0a:	9300      	str	r3, [sp, #0]
    2f0c:	f241 0221 	movw	r2, #4129	; 0x1021
    2f10:	f006 fd4d 	bl	99ae <crc16>
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2f14:	2201      	movs	r2, #1
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2f16:	4603      	mov	r3, r0
    2f18:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2f1c:	9200      	str	r2, [sp, #0]
    2f1e:	4621      	mov	r1, r4
    2f20:	f241 0221 	movw	r2, #4129	; 0x1021
    2f24:	4638      	mov	r0, r7
    2f26:	f006 fd42 	bl	99ae <crc16>
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2f2a:	6833      	ldr	r3, [r6, #0]
    2f2c:	b2a5      	uxth	r5, r4
    crc = htons(crc);
    2f2e:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2f30:	685b      	ldr	r3, [r3, #4]
    crc = htons(crc);
    2f32:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2f36:	2102      	movs	r1, #2
    2f38:	a803      	add	r0, sp, #12

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    2f3a:	350a      	adds	r5, #10
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2f3c:	4798      	blx	r3
    totlen = htons(totlen);
    2f3e:	ba6d      	rev16	r5, r5

    memcpy(buf, &totlen, sizeof(totlen));
    2f40:	f10d 0112 	add.w	r1, sp, #18
    2f44:	2202      	movs	r2, #2
    2f46:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    2f48:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    2f4c:	f007 fdc9 	bl	aae2 <memcpy>
    totlen = sizeof(totlen);
    2f50:	2502      	movs	r5, #2
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2f52:	f8d8 1000 	ldr.w	r1, [r8]
    totlen = sizeof(totlen);
    2f56:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2f5a:	2208      	movs	r2, #8
    2f5c:	f10d 001a 	add.w	r0, sp, #26
    2f60:	f007 fdbf 	bl	aae2 <memcpy>
    totlen += sizeof(*bs_hdr);
    2f64:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2f68:	3008      	adds	r0, #8
    memcpy(&buf[totlen], data, len);
    2f6a:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    2f6c:	b280      	uxth	r0, r0
    2f6e:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    2f72:	4622      	mov	r2, r4
    2f74:	4639      	mov	r1, r7
    2f76:	4418      	add	r0, r3
    2f78:	f007 fdb3 	bl	aae2 <memcpy>
    totlen += len;
    2f7c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    2f80:	18e0      	adds	r0, r4, r3
    2f82:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2f84:	ab06      	add	r3, sp, #24
    totlen += len;
    2f86:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2f8a:	462a      	mov	r2, r5
    2f8c:	a904      	add	r1, sp, #16
    2f8e:	4418      	add	r0, r3
    2f90:	f007 fda7 	bl	aae2 <memcpy>
    totlen += sizeof(crc);
    2f94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    2f98:	442b      	add	r3, r5
    2f9a:	b29b      	uxth	r3, r3
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2f9c:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    2f9e:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2fa2:	9300      	str	r3, [sp, #0]
    2fa4:	21ad      	movs	r1, #173	; 0xad
    2fa6:	ab06      	add	r3, sp, #24
    2fa8:	a826      	add	r0, sp, #152	; 0x98
    2faa:	f7fe f861 	bl	1070 <base64_encode>
    totlen = enc_len;
    2fae:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    2fb0:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    2fb2:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    2fb6:	a826      	add	r0, sp, #152	; 0x98
    2fb8:	685b      	ldr	r3, [r3, #4]
    2fba:	b289      	uxth	r1, r1
    2fbc:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    2fbe:	6833      	ldr	r3, [r6, #0]
    2fc0:	4807      	ldr	r0, [pc, #28]	; (2fe0 <boot_serial_output+0x10c>)
    2fc2:	685b      	ldr	r3, [r3, #4]
    2fc4:	4629      	mov	r1, r5
    2fc6:	4798      	blx	r3
    BOOT_LOG_INF("TX");
}
    2fc8:	b052      	add	sp, #328	; 0x148
    2fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fce:	bf00      	nop
    2fd0:	2000010c 	.word	0x2000010c
    2fd4:	20001e94 	.word	0x20001e94
    2fd8:	200043bc 	.word	0x200043bc
    2fdc:	20001ea0 	.word	0x20001ea0
    2fe0:	0000de4a 	.word	0x0000de4a

00002fe4 <bs_rc_rsp>:
{
    2fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    map_start_encode(&cbor_state, 10);
    2fe6:	4c0e      	ldr	r4, [pc, #56]	; (3020 <bs_rc_rsp+0x3c>)
{
    2fe8:	4605      	mov	r5, r0
    map_start_encode(&cbor_state, 10);
    2fea:	210a      	movs	r1, #10
    2fec:	4620      	mov	r0, r4
    2fee:	f007 fc9b 	bl	a928 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    2ff2:	4a0c      	ldr	r2, [pc, #48]	; (3024 <bs_rc_rsp+0x40>)
    2ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
    2ff8:	466b      	mov	r3, sp
    2ffa:	e883 0003 	stmia.w	r3, {r0, r1}
    2ffe:	4619      	mov	r1, r3
    3000:	4620      	mov	r0, r4
    3002:	f007 fc82 	bl	a90a <tstrx_encode>
    uintx32_put(&cbor_state, rc_code);
    3006:	4629      	mov	r1, r5
    3008:	4620      	mov	r0, r4
    300a:	f007 fc73 	bl	a8f4 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    300e:	210a      	movs	r1, #10
    3010:	4620      	mov	r0, r4
    3012:	f007 fca1 	bl	a958 <map_end_encode>
    boot_serial_output();
    3016:	f7ff ff5d 	bl	2ed4 <boot_serial_output>
}
    301a:	b003      	add	sp, #12
    301c:	bd30      	pop	{r4, r5, pc}
    301e:	bf00      	nop
    3020:	2000010c 	.word	0x2000010c
    3024:	0000d700 	.word	0x0000d700

00003028 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    302c:	680c      	ldr	r4, [r1, #0]
    302e:	4f1a      	ldr	r7, [pc, #104]	; (3098 <boot_serial_in_dec.constprop.0+0x70>)
    3030:	4b1a      	ldr	r3, [pc, #104]	; (309c <boot_serial_in_dec.constprop.0+0x74>)
    3032:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3034:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3036:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    303a:	9000      	str	r0, [sp, #0]
    303c:	aa03      	add	r2, sp, #12
    303e:	1938      	adds	r0, r7, r4
    3040:	3101      	adds	r1, #1
    3042:	f7fe f895 	bl	1170 <base64_decode>
    if (err) {
    3046:	4604      	mov	r4, r0
    3048:	bb10      	cbnz	r0, 3090 <boot_serial_in_dec.constprop.0+0x68>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    304a:	682b      	ldr	r3, [r5, #0]
    304c:	9a03      	ldr	r2, [sp, #12]
    304e:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    3050:	2b02      	cmp	r3, #2
    *out_off += rc;
    3052:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    3054:	d918      	bls.n	3088 <boot_serial_in_dec.constprop.0+0x60>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    3056:	883e      	ldrh	r6, [r7, #0]
    3058:	ba76      	rev16	r6, r6
    305a:	b2b6      	uxth	r6, r6
    if (len != *out_off - sizeof(uint16_t)) {
    305c:	3b02      	subs	r3, #2
    305e:	429e      	cmp	r6, r3
    3060:	d112      	bne.n	3088 <boot_serial_in_dec.constprop.0+0x60>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    3062:	f04f 0801 	mov.w	r8, #1
    3066:	4603      	mov	r3, r0
    3068:	f8cd 8000 	str.w	r8, [sp]
    306c:	f241 0221 	movw	r2, #4129	; 0x1021
    3070:	4631      	mov	r1, r6
    3072:	1cb8      	adds	r0, r7, #2
    3074:	f006 fc9b 	bl	99ae <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    3078:	b930      	cbnz	r0, 3088 <boot_serial_in_dec.constprop.0+0x60>
    307a:	2e02      	cmp	r6, #2
    307c:	d904      	bls.n	3088 <boot_serial_in_dec.constprop.0+0x60>
        return 0;
    }
    *out_off -= sizeof(crc);
    307e:	682b      	ldr	r3, [r5, #0]
    3080:	1e9a      	subs	r2, r3, #2
    3082:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    3084:	54fc      	strb	r4, [r7, r3]

    return 1;
    3086:	4644      	mov	r4, r8
}
    3088:	4620      	mov	r0, r4
    308a:	b004      	add	sp, #16
    308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    3090:	f04f 34ff 	mov.w	r4, #4294967295
    3094:	e7f8      	b.n	3088 <boot_serial_in_dec.constprop.0+0x60>
    3096:	bf00      	nop
    3098:	2000443c 	.word	0x2000443c
    309c:	2000463f 	.word	0x2000463f

000030a0 <boot_serial_input>:
{
    30a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len < sizeof(*hdr) ||
    30a4:	2907      	cmp	r1, #7
{
    30a6:	b0a8      	sub	sp, #160	; 0xa0
    30a8:	4604      	mov	r4, r0
    if (len < sizeof(*hdr) ||
    30aa:	f240 80cc 	bls.w	3246 <FIH_LABEL_FIH_CALL_END_718+0xd0>
    30ae:	7802      	ldrb	r2, [r0, #0]
    30b0:	f012 05fd 	ands.w	r5, r2, #253	; 0xfd
    30b4:	f040 80c7 	bne.w	3246 <FIH_LABEL_FIH_CALL_END_718+0xd0>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    30b8:	8843      	ldrh	r3, [r0, #2]
    30ba:	ba5b      	rev16	r3, r3
    30bc:	f1a1 0608 	sub.w	r6, r1, #8
    30c0:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    30c2:	42b3      	cmp	r3, r6
    30c4:	f0c0 80bf 	bcc.w	3246 <FIH_LABEL_FIH_CALL_END_718+0xd0>
    bs_hdr = hdr;
    30c8:	4ba3      	ldr	r3, [pc, #652]	; (3358 <FIH_LABEL_FIH_CALL_END_718+0x1e2>)
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    30ca:	4fa4      	ldr	r7, [pc, #656]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    bs_hdr = hdr;
    30cc:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    30ce:	8880      	ldrh	r0, [r0, #4]
    30d0:	ba43      	rev16	r3, r0
    30d2:	80a3      	strh	r3, [r4, #4]
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    30d4:	4ba2      	ldr	r3, [pc, #648]	; (3360 <FIH_LABEL_FIH_CALL_END_718+0x1ea>)
    30d6:	603b      	str	r3, [r7, #0]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    30d8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    30dc:	f103 0380 	add.w	r3, r3, #128	; 0x80
    30e0:	60fb      	str	r3, [r7, #12]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    30e2:	f040 81d2 	bne.w	348a <FIH_LABEL_FIH_CALL_END_718+0x314>
        switch (hdr->nh_id) {
    30e6:	f894 8007 	ldrb.w	r8, [r4, #7]
    30ea:	f1b8 0f00 	cmp.w	r8, #0
    30ee:	d009      	beq.n	3104 <boot_serial_input+0x64>
    30f0:	f1b8 0f01 	cmp.w	r8, #1
    30f4:	f000 80ac 	beq.w	3250 <FIH_LABEL_FIH_CALL_END_718+0xda>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    30f8:	2008      	movs	r0, #8
}
    30fa:	b028      	add	sp, #160	; 0xa0
    30fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    3100:	f7ff bf70 	b.w	2fe4 <bs_rc_rsp>
    map_start_encode(&cbor_state, 1);
    3104:	2101      	movs	r1, #1
    3106:	4638      	mov	r0, r7
    3108:	f007 fc0e 	bl	a928 <map_start_encode>
    tstrx_put(&cbor_state, "images");
    310c:	4b95      	ldr	r3, [pc, #596]	; (3364 <FIH_LABEL_FIH_CALL_END_718+0x1ee>)
    310e:	9308      	str	r3, [sp, #32]
    3110:	a908      	add	r1, sp, #32
    3112:	2306      	movs	r3, #6
    3114:	4638      	mov	r0, r7
    3116:	9309      	str	r3, [sp, #36]	; 0x24
    3118:	f007 fbf7 	bl	a90a <tstrx_encode>
    list_start_encode(&cbor_state, 5);
    311c:	4638      	mov	r0, r7
    311e:	2105      	movs	r1, #5
    3120:	f007 fbf6 	bl	a910 <list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    3124:	4644      	mov	r4, r8
            fih_int fih_rc = FIH_FAILURE;
    3126:	4e90      	ldr	r6, [pc, #576]	; (3368 <FIH_LABEL_FIH_CALL_END_718+0x1f2>)
            if (hdr.ih_magic == IMAGE_MAGIC)
    3128:	4f90      	ldr	r7, [pc, #576]	; (336c <FIH_LABEL_FIH_CALL_END_718+0x1f6>)
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    312a:	f8df 8244 	ldr.w	r8, [pc, #580]	; 3370 <FIH_LABEL_FIH_CALL_END_718+0x1fa>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    312e:	4621      	mov	r1, r4
    3130:	2000      	movs	r0, #0
    3132:	f006 f940 	bl	93b6 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    3136:	a907      	add	r1, sp, #28
    3138:	b2c0      	uxtb	r0, r0
    313a:	f7ff fcb3 	bl	2aa4 <flash_area_open>
    313e:	4605      	mov	r5, r0
    3140:	2800      	cmp	r0, #0
    3142:	d175      	bne.n	3230 <FIH_LABEL_FIH_CALL_END_718+0xba>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    3144:	2320      	movs	r3, #32
    3146:	4601      	mov	r1, r0
    3148:	aa10      	add	r2, sp, #64	; 0x40
    314a:	9807      	ldr	r0, [sp, #28]
    314c:	f007 f95e 	bl	a40c <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    3150:	9b10      	ldr	r3, [sp, #64]	; 0x40
            fih_int fih_rc = FIH_FAILURE;
    3152:	f8d6 9000 	ldr.w	r9, [r6]
            if (hdr.ih_magic == IMAGE_MAGIC)
    3156:	42bb      	cmp	r3, r7
    3158:	d10d      	bne.n	3176 <FIH_LABEL_FIH_CALL_END_718>

0000315a <FIH_LABEL_FIH_CALL_START_694>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    315a:	2340      	movs	r3, #64	; 0x40
    315c:	9301      	str	r3, [sp, #4]
    315e:	ab18      	add	r3, sp, #96	; 0x60
    3160:	9300      	str	r3, [sp, #0]
    3162:	e9cd 5503 	strd	r5, r5, [sp, #12]
    3166:	9b07      	ldr	r3, [sp, #28]
    3168:	9502      	str	r5, [sp, #8]
    316a:	aa10      	add	r2, sp, #64	; 0x40
    316c:	4629      	mov	r1, r5
    316e:	4628      	mov	r0, r5
    3170:	f7fd f9cc 	bl	50c <bootutil_img_validate>
    3174:	4681      	mov	r9, r0

00003176 <FIH_LABEL_FIH_CALL_END_718>:
            flash_area_close(fap);
    3176:	9807      	ldr	r0, [sp, #28]
    3178:	f007 f947 	bl	a40a <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    317c:	f8d8 3000 	ldr.w	r3, [r8]
    3180:	454b      	cmp	r3, r9
    3182:	d155      	bne.n	3230 <FIH_LABEL_FIH_CALL_END_718+0xba>
            map_start_encode(&cbor_state, 20);
    3184:	2114      	movs	r1, #20
    3186:	4875      	ldr	r0, [pc, #468]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    3188:	f007 fbce 	bl	a928 <map_start_encode>
            tstrx_put(&cbor_state, "slot");
    318c:	4b79      	ldr	r3, [pc, #484]	; (3374 <FIH_LABEL_FIH_CALL_END_718+0x1fe>)
    318e:	930a      	str	r3, [sp, #40]	; 0x28
    3190:	a90a      	add	r1, sp, #40	; 0x28
    3192:	2304      	movs	r3, #4
    3194:	4871      	ldr	r0, [pc, #452]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    3196:	930b      	str	r3, [sp, #44]	; 0x2c
    3198:	f007 fbb7 	bl	a90a <tstrx_encode>
            uintx32_put(&cbor_state, slot);
    319c:	4621      	mov	r1, r4
    319e:	486f      	ldr	r0, [pc, #444]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    31a0:	f007 fba8 	bl	a8f4 <uintx32_put>
            tstrx_put(&cbor_state, "version");
    31a4:	4b74      	ldr	r3, [pc, #464]	; (3378 <FIH_LABEL_FIH_CALL_END_718+0x202>)
    31a6:	930c      	str	r3, [sp, #48]	; 0x30
    off = u32toa(dst, ver->iv_major);
    31a8:	f10d 0960 	add.w	r9, sp, #96	; 0x60
            tstrx_put(&cbor_state, "version");
    31ac:	2307      	movs	r3, #7
    31ae:	a90c      	add	r1, sp, #48	; 0x30
    31b0:	486a      	ldr	r0, [pc, #424]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    31b2:	930d      	str	r3, [sp, #52]	; 0x34
    31b4:	f007 fba9 	bl	a90a <tstrx_encode>
    off = u32toa(dst, ver->iv_major);
    31b8:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    31bc:	4648      	mov	r0, r9
    31be:	f007 f9e7 	bl	a590 <u32toa>
    dst[off++] = '.';
    31c2:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    31c6:	1c45      	adds	r5, r0, #1
    31c8:	eb0d 0003 	add.w	r0, sp, r3
    31cc:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    off += u32toa(dst + off, ver->iv_minor);
    31d0:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    31d4:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_minor);
    31d8:	eb09 0005 	add.w	r0, r9, r5
    31dc:	f007 f9d8 	bl	a590 <u32toa>
    31e0:	4428      	add	r0, r5
    dst[off++] = '.';
    31e2:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    31e6:	1c45      	adds	r5, r0, #1
    31e8:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_revision);
    31ec:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    31f0:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_revision);
    31f4:	eb09 0005 	add.w	r0, r9, r5
    31f8:	f007 f9ca 	bl	a590 <u32toa>
    31fc:	4405      	add	r5, r0
    dst[off++] = '.';
    31fe:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
    3202:	446b      	add	r3, sp
    3204:	3501      	adds	r5, #1
    off += u32toa(dst + off, ver->iv_build_num);
    3206:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    3208:	f803 ac40 	strb.w	sl, [r3, #-64]
    off += u32toa(dst + off, ver->iv_build_num);
    320c:	eb09 0005 	add.w	r0, r9, r5
    3210:	f007 f9be 	bl	a590 <u32toa>
            tstrx_put_term(&cbor_state, (char *)tmpbuf);
    3214:	4648      	mov	r0, r9
    3216:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    321a:	f007 fc28 	bl	aa6e <strlen>
    321e:	a90e      	add	r1, sp, #56	; 0x38
    3220:	900f      	str	r0, [sp, #60]	; 0x3c
    3222:	484e      	ldr	r0, [pc, #312]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    3224:	f007 fb71 	bl	a90a <tstrx_encode>
            map_end_encode(&cbor_state, 20);
    3228:	484c      	ldr	r0, [pc, #304]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    322a:	2114      	movs	r1, #20
    322c:	f007 fb94 	bl	a958 <map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    3230:	b164      	cbz	r4, 324c <FIH_LABEL_FIH_CALL_END_718+0xd6>
    list_end_encode(&cbor_state, 5);
    3232:	2105      	movs	r1, #5
    3234:	4849      	ldr	r0, [pc, #292]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    3236:	f007 fb83 	bl	a940 <list_end_encode>
    map_end_encode(&cbor_state, 1);
    323a:	2101      	movs	r1, #1
    323c:	4847      	ldr	r0, [pc, #284]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    323e:	f007 fb8b 	bl	a958 <map_end_encode>
    boot_serial_output();
    3242:	f7ff fe47 	bl	2ed4 <boot_serial_output>
}
    3246:	b028      	add	sp, #160	; 0xa0
    3248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (slot = 0; slot < 2; slot++) {
    324c:	2401      	movs	r4, #1
    324e:	e76e      	b.n	312e <boot_serial_input+0x8e>
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    3250:	ab0a      	add	r3, sp, #40	; 0x28
    3252:	aa18      	add	r2, sp, #96	; 0x60
    3254:	4631      	mov	r1, r6
    3256:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    325a:	9508      	str	r5, [sp, #32]
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    325c:	f000 fa22 	bl	36a4 <cbor_decode_Upload>
    if (!result || (len != decoded_len)) {
    3260:	2800      	cmp	r0, #0
    3262:	f000 80d1 	beq.w	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
    3266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3268:	429e      	cmp	r6, r3
    326a:	f040 80cd 	bne.w	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
    long long int data_len = UINT64_MAX;
    326e:	f04f 34ff 	mov.w	r4, #4294967295
    3272:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    3274:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3276:	462a      	mov	r2, r5
    img_num = 0;
    3278:	4628      	mov	r0, r5
    long long int data_len = UINT64_MAX;
    327a:	46a2      	mov	sl, r4
    long long int off = UINT64_MAX;
    327c:	4626      	mov	r6, r4
    327e:	46a1      	mov	r9, r4
    const uint8_t *img_data = NULL;
    3280:	46a8      	mov	r8, r5
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3282:	42ba      	cmp	r2, r7
    3284:	d151      	bne.n	332a <FIH_LABEL_FIH_CALL_END_718+0x1b4>
    if (off == UINT64_MAX || img_data == NULL) {
    3286:	f1b9 3fff 	cmp.w	r9, #4294967295
    328a:	bf08      	it	eq
    328c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    3290:	f000 80ba 	beq.w	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
    3294:	f1b8 0f00 	cmp.w	r8, #0
    3298:	f000 80b6 	beq.w	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    329c:	2100      	movs	r1, #0
    329e:	f006 f88a 	bl	93b6 <flash_area_id_from_multi_image_slot>
    32a2:	a908      	add	r1, sp, #32
    32a4:	b2c0      	uxtb	r0, r0
    32a6:	f7ff fbfd 	bl	2aa4 <flash_area_open>
    if (rc) {
    32aa:	2800      	cmp	r0, #0
    32ac:	f040 80ac 	bne.w	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
    if (off == 0) {
    32b0:	ea56 0309 	orrs.w	r3, r6, r9
    32b4:	4f31      	ldr	r7, [pc, #196]	; (337c <FIH_LABEL_FIH_CALL_END_718+0x206>)
    32b6:	d109      	bne.n	32cc <FIH_LABEL_FIH_CALL_END_718+0x156>
	return (uint32_t)fa->fa_size;
    32b8:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    32ba:	6038      	str	r0, [r7, #0]
        if (data_len > flash_area_get_size(fap)) {
    32bc:	689b      	ldr	r3, [r3, #8]
    32be:	42a3      	cmp	r3, r4
    32c0:	eb70 000a 	sbcs.w	r0, r0, sl
    32c4:	f2c0 80a0 	blt.w	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
        img_size = data_len;
    32c8:	4b2d      	ldr	r3, [pc, #180]	; (3380 <FIH_LABEL_FIH_CALL_END_718+0x20a>)
    32ca:	601c      	str	r4, [r3, #0]
    if (off != curr_off) {
    32cc:	683b      	ldr	r3, [r7, #0]
    32ce:	2400      	movs	r4, #0
    32d0:	454c      	cmp	r4, r9
    32d2:	bf08      	it	eq
    32d4:	42b3      	cmpeq	r3, r6
    32d6:	d059      	beq.n	338c <FIH_LABEL_FIH_CALL_END_718+0x216>
        rc = 0;
    32d8:	2400      	movs	r4, #0
    map_start_encode(&cbor_state, 10);
    32da:	210a      	movs	r1, #10
    32dc:	481f      	ldr	r0, [pc, #124]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    32de:	f007 fb23 	bl	a928 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    32e2:	4b28      	ldr	r3, [pc, #160]	; (3384 <FIH_LABEL_FIH_CALL_END_718+0x20e>)
    32e4:	9310      	str	r3, [sp, #64]	; 0x40
    32e6:	a910      	add	r1, sp, #64	; 0x40
    32e8:	2302      	movs	r3, #2
    32ea:	481c      	ldr	r0, [pc, #112]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    32ec:	9311      	str	r3, [sp, #68]	; 0x44
    32ee:	f007 fb0c 	bl	a90a <tstrx_encode>
    uintx32_put(&cbor_state, rc);
    32f2:	481a      	ldr	r0, [pc, #104]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    32f4:	4621      	mov	r1, r4
    32f6:	f007 fafd 	bl	a8f4 <uintx32_put>
    if (rc == 0) {
    32fa:	b964      	cbnz	r4, 3316 <FIH_LABEL_FIH_CALL_END_718+0x1a0>
        tstrx_put(&cbor_state, "off");
    32fc:	4b22      	ldr	r3, [pc, #136]	; (3388 <FIH_LABEL_FIH_CALL_END_718+0x212>)
    32fe:	930e      	str	r3, [sp, #56]	; 0x38
    3300:	a90e      	add	r1, sp, #56	; 0x38
    3302:	2303      	movs	r3, #3
    3304:	4815      	ldr	r0, [pc, #84]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    3306:	930f      	str	r3, [sp, #60]	; 0x3c
    3308:	f007 faff 	bl	a90a <tstrx_encode>
        uintx32_put(&cbor_state, curr_off);
    330c:	4b1b      	ldr	r3, [pc, #108]	; (337c <FIH_LABEL_FIH_CALL_END_718+0x206>)
    330e:	4813      	ldr	r0, [pc, #76]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    3310:	6819      	ldr	r1, [r3, #0]
    3312:	f007 faef 	bl	a8f4 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    3316:	210a      	movs	r1, #10
    3318:	4810      	ldr	r0, [pc, #64]	; (335c <FIH_LABEL_FIH_CALL_END_718+0x1e6>)
    331a:	f007 fb1d 	bl	a958 <map_end_encode>
    boot_serial_output();
    331e:	f7ff fdd9 	bl	2ed4 <boot_serial_output>
    flash_area_close(fap);
    3322:	9808      	ldr	r0, [sp, #32]
    3324:	f007 f871 	bl	a40a <flash_area_close>
}
    3328:	e78d      	b.n	3246 <FIH_LABEL_FIH_CALL_END_718+0xd0>
        switch(member->_Member_choice) {
    332a:	7a19      	ldrb	r1, [r3, #8]
    332c:	2903      	cmp	r1, #3
    332e:	d804      	bhi.n	333a <FIH_LABEL_FIH_CALL_END_718+0x1c4>
    3330:	e8df f001 	tbb	[pc, r1]
    3334:	0d090602 	.word	0x0d090602
                img_num = member->_Member_image;
    3338:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    333a:	3201      	adds	r2, #1
    333c:	330c      	adds	r3, #12
    333e:	e7a0      	b.n	3282 <FIH_LABEL_FIH_CALL_END_718+0x10c>
                slen = member->_Member_data.len;
    3340:	e9d3 8500 	ldrd	r8, r5, [r3]
                break;
    3344:	e7f9      	b.n	333a <FIH_LABEL_FIH_CALL_END_718+0x1c4>
                data_len = member->_Member_len;
    3346:	681c      	ldr	r4, [r3, #0]
    3348:	ea4f 7ae4 	mov.w	sl, r4, asr #31
                break;
    334c:	e7f5      	b.n	333a <FIH_LABEL_FIH_CALL_END_718+0x1c4>
                off = member->_Member_off;
    334e:	681e      	ldr	r6, [r3, #0]
    3350:	ea4f 79e6 	mov.w	r9, r6, asr #31
                break;
    3354:	e7f1      	b.n	333a <FIH_LABEL_FIH_CALL_END_718+0x1c4>
    3356:	bf00      	nop
    3358:	20001e94 	.word	0x20001e94
    335c:	2000010c 	.word	0x2000010c
    3360:	200043bc 	.word	0x200043bc
    3364:	0000de4d 	.word	0x0000de4d
    3368:	20000000 	.word	0x20000000
    336c:	96f3b83d 	.word	0x96f3b83d
    3370:	2000070c 	.word	0x2000070c
    3374:	0000de54 	.word	0x0000de54
    3378:	0000de59 	.word	0x0000de59
    337c:	20001e9c 	.word	0x20001e9c
    3380:	20001e98 	.word	0x20001e98
    3384:	0000de61 	.word	0x0000de61
    3388:	0000de64 	.word	0x0000de64
    if (curr_off + img_blen > img_size) {
    338c:	f8df a124 	ldr.w	sl, [pc, #292]	; 34b4 <FIH_LABEL_FIH_CALL_END_718+0x33e>
    3390:	f8da 2000 	ldr.w	r2, [sl]
    3394:	442b      	add	r3, r5
    3396:	4293      	cmp	r3, r2
    3398:	d836      	bhi.n	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
    rem_bytes = img_blen % flash_area_align(fap);
    339a:	9808      	ldr	r0, [sp, #32]
    339c:	f007 f8b4 	bl	a508 <flash_area_align>
    33a0:	fbb5 f3f0 	udiv	r3, r5, r0
    33a4:	fb03 5010 	mls	r0, r3, r0, r5
    33a8:	b2c6      	uxtb	r6, r0
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    33aa:	6838      	ldr	r0, [r7, #0]
    33ac:	f8da 3000 	ldr.w	r3, [sl]
    33b0:	1942      	adds	r2, r0, r5
    33b2:	429a      	cmp	r2, r3
    33b4:	d202      	bcs.n	33bc <FIH_LABEL_FIH_CALL_END_718+0x246>
    33b6:	b10e      	cbz	r6, 33bc <FIH_LABEL_FIH_CALL_END_718+0x246>
        img_blen -= rem_bytes;
    33b8:	1bad      	subs	r5, r5, r6
        rem_bytes = 0;
    33ba:	4626      	mov	r6, r4
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    33bc:	a90c      	add	r1, sp, #48	; 0x30
    33be:	4428      	add	r0, r5
    33c0:	f7fd f88a 	bl	4d8 <flash_area_sector_from_off>
    if (rc) {
    33c4:	4604      	mov	r4, r0
    33c6:	2800      	cmp	r0, #0
    33c8:	d187      	bne.n	32da <FIH_LABEL_FIH_CALL_END_718+0x164>
    if (off_last != flash_sector_get_off(&sector)) {
    33ca:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 34b8 <FIH_LABEL_FIH_CALL_END_718+0x342>
	return fs->fs_off;
    33ce:	990c      	ldr	r1, [sp, #48]	; 0x30
    33d0:	f8d9 3000 	ldr.w	r3, [r9]
    33d4:	4299      	cmp	r1, r3
    33d6:	d105      	bne.n	33e4 <FIH_LABEL_FIH_CALL_END_718+0x26e>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    33d8:	6839      	ldr	r1, [r7, #0]
    if (rem_bytes) {
    33da:	b96e      	cbnz	r6, 33f8 <FIH_LABEL_FIH_CALL_END_718+0x282>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    33dc:	9808      	ldr	r0, [sp, #32]
    33de:	462b      	mov	r3, r5
    33e0:	4642      	mov	r2, r8
    33e2:	e030      	b.n	3446 <FIH_LABEL_FIH_CALL_END_718+0x2d0>
        rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    33e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    33e6:	9808      	ldr	r0, [sp, #32]
        off_last = flash_sector_get_off(&sector);
    33e8:	f8c9 1000 	str.w	r1, [r9]
        rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    33ec:	f007 f85d 	bl	a4aa <flash_area_erase>
        if (rc) {
    33f0:	4604      	mov	r4, r0
    33f2:	2800      	cmp	r0, #0
    33f4:	d0f0      	beq.n	33d8 <FIH_LABEL_FIH_CALL_END_718+0x262>
    33f6:	e770      	b.n	32da <FIH_LABEL_FIH_CALL_END_718+0x164>
        if (w_size) {
    33f8:	1bac      	subs	r4, r5, r6
    33fa:	d00c      	beq.n	3416 <FIH_LABEL_FIH_CALL_END_718+0x2a0>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    33fc:	9808      	ldr	r0, [sp, #32]
    33fe:	4623      	mov	r3, r4
    3400:	4642      	mov	r2, r8
    3402:	f007 f81f 	bl	a444 <flash_area_write>
            if (rc) {
    3406:	b108      	cbz	r0, 340c <FIH_LABEL_FIH_CALL_END_718+0x296>
        rc = MGMT_ERR_EINVAL;
    3408:	2403      	movs	r4, #3
    340a:	e766      	b.n	32da <FIH_LABEL_FIH_CALL_END_718+0x164>
            curr_off += w_size;
    340c:	683b      	ldr	r3, [r7, #0]
    340e:	4423      	add	r3, r4
    3410:	603b      	str	r3, [r7, #0]
            img_data += w_size;
    3412:	44a0      	add	r8, r4
            img_blen -= w_size;
    3414:	4635      	mov	r5, r6
            memcpy(wbs_aligned, img_data, rem_bytes);
    3416:	4632      	mov	r2, r6
    3418:	4641      	mov	r1, r8
    341a:	a810      	add	r0, sp, #64	; 0x40
    341c:	f007 fb61 	bl	aae2 <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    3420:	9808      	ldr	r0, [sp, #32]
    3422:	f007 f87a 	bl	a51a <flash_area_erased_val>
    3426:	ab10      	add	r3, sp, #64	; 0x40
    3428:	4601      	mov	r1, r0
    342a:	f1c6 0208 	rsb	r2, r6, #8
    342e:	1998      	adds	r0, r3, r6
    3430:	f007 fb62 	bl	aaf8 <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    3434:	9c08      	ldr	r4, [sp, #32]
    3436:	683e      	ldr	r6, [r7, #0]
    3438:	4620      	mov	r0, r4
    343a:	f007 f865 	bl	a508 <flash_area_align>
    343e:	aa10      	add	r2, sp, #64	; 0x40
    3440:	4603      	mov	r3, r0
    3442:	4631      	mov	r1, r6
    3444:	4620      	mov	r0, r4
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    3446:	f006 fffd 	bl	a444 <flash_area_write>
    if (rc == 0) {
    344a:	2800      	cmp	r0, #0
    344c:	d1dc      	bne.n	3408 <FIH_LABEL_FIH_CALL_END_718+0x292>
        curr_off += img_blen;
    344e:	683b      	ldr	r3, [r7, #0]
    3450:	441d      	add	r5, r3
        if (curr_off == img_size) {
    3452:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_blen;
    3456:	603d      	str	r5, [r7, #0]
        if (curr_off == img_size) {
    3458:	429d      	cmp	r5, r3
    345a:	f47f af3d 	bne.w	32d8 <FIH_LABEL_FIH_CALL_END_718+0x162>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    345e:	9808      	ldr	r0, [sp, #32]
    3460:	f006 f85f 	bl	9522 <boot_status_off>
    3464:	a90c      	add	r1, sp, #48	; 0x30
    3466:	f7fd f837 	bl	4d8 <flash_area_sector_from_off>
            if (rc) {
    346a:	4604      	mov	r4, r0
    346c:	2800      	cmp	r0, #0
    346e:	f47f af34 	bne.w	32da <FIH_LABEL_FIH_CALL_END_718+0x164>
    3472:	990c      	ldr	r1, [sp, #48]	; 0x30
            if (off_last < flash_sector_get_off(&sector)) {
    3474:	f8d9 3000 	ldr.w	r3, [r9]
    3478:	4299      	cmp	r1, r3
    347a:	f67f af2d 	bls.w	32d8 <FIH_LABEL_FIH_CALL_END_718+0x162>
                rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    347e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3480:	9808      	ldr	r0, [sp, #32]
    3482:	f007 f812 	bl	a4aa <flash_area_erase>
    3486:	4604      	mov	r4, r0
                if (rc) {
    3488:	e727      	b.n	32da <FIH_LABEL_FIH_CALL_END_718+0x164>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    348a:	2800      	cmp	r0, #0
    348c:	f47f ae34 	bne.w	30f8 <boot_serial_input+0x58>
        switch (hdr->nh_id) {
    3490:	79e3      	ldrb	r3, [r4, #7]
    3492:	2b01      	cmp	r3, #1
    3494:	f43f ae31 	beq.w	30fa <boot_serial_input+0x5a>
    3498:	2b05      	cmp	r3, #5
    349a:	f47f ae2d 	bne.w	30f8 <boot_serial_input+0x58>
    bs_rc_rsp(0);
    349e:	f7ff fda1 	bl	2fe4 <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    34a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    34a6:	2100      	movs	r1, #0
    34a8:	f005 fb5e 	bl	8b68 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    34ac:	2001      	movs	r0, #1
    34ae:	f7fe fa55 	bl	195c <sys_reboot>
    34b2:	bf00      	nop
    34b4:	20001e98 	.word	0x20001e98
    34b8:	20000108 	.word	0x20000108

000034bc <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    34bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int off;
    int dec_off = 0;
    int full_line;
    int max_input;

    boot_uf = f;
    34c0:	4b25      	ldr	r3, [pc, #148]	; (3558 <boot_serial_start+0x9c>)
    34c2:	4d26      	ldr	r5, [pc, #152]	; (355c <boot_serial_start+0xa0>)
    34c4:	4e26      	ldr	r6, [pc, #152]	; (3560 <boot_serial_start+0xa4>)
    34c6:	6018      	str	r0, [r3, #0]
    int dec_off = 0;
    34c8:	2400      	movs	r4, #0
{
    34ca:	4607      	mov	r7, r0
    int dec_off = 0;
    34cc:	9400      	str	r4, [sp, #0]

    off = 0;
    while (1) {
        MCUBOOT_CPU_IDLE();
        MCUBOOT_WATCHDOG_FEED();
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    34ce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3564 <boot_serial_start+0xa8>
    34d2:	f8c5 6600 	str.w	r6, [r5, #1536]	; 0x600
    34d6:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    34da:	f8c5 6604 	str.w	r6, [r5, #1540]	; 0x604
    34de:	683b      	ldr	r3, [r7, #0]
    34e0:	f8c5 6608 	str.w	r6, [r5, #1544]	; 0x608
    34e4:	aa01      	add	r2, sp, #4
    34e6:	f8c5 660c 	str.w	r6, [r5, #1548]	; 0x60c
    34ea:	3101      	adds	r1, #1
    34ec:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
    34f0:	eb08 0004 	add.w	r0, r8, r4
    34f4:	f8c5 6614 	str.w	r6, [r5, #1556]	; 0x614
    34f8:	f8c5 6618 	str.w	r6, [r5, #1560]	; 0x618
    34fc:	f8c5 661c 	str.w	r6, [r5, #1564]	; 0x61c
    3500:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    3502:	2800      	cmp	r0, #0
    3504:	9b01      	ldr	r3, [sp, #4]
    3506:	dc01      	bgt.n	350c <boot_serial_start+0x50>
    3508:	2b00      	cmp	r3, #0
    350a:	d0e0      	beq.n	34ce <boot_serial_start+0x12>
            continue;
        }
        off += rc;
    350c:	4404      	add	r4, r0
        if (!full_line) {
    350e:	b92b      	cbnz	r3, 351c <boot_serial_start+0x60>
            if (off == max_input) {
    3510:	f240 2301 	movw	r3, #513	; 0x201
    3514:	429c      	cmp	r4, r3
    3516:	d1da      	bne.n	34ce <boot_serial_start+0x12>

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
        }
        off = 0;
    3518:	2400      	movs	r4, #0
    351a:	e7d8      	b.n	34ce <boot_serial_start+0x12>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    351c:	f898 3000 	ldrb.w	r3, [r8]
    3520:	2b06      	cmp	r3, #6
    3522:	d10a      	bne.n	353a <boot_serial_start+0x7e>
    3524:	f898 3001 	ldrb.w	r3, [r8, #1]
    3528:	2b09      	cmp	r3, #9
    352a:	d10c      	bne.n	3546 <boot_serial_start+0x8a>
            dec_off = 0;
    352c:	2300      	movs	r3, #0
    352e:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    3530:	4669      	mov	r1, sp
    3532:	1ea0      	subs	r0, r4, #2
    3534:	f7ff fd78 	bl	3028 <boot_serial_in_dec.constprop.0>
    3538:	e005      	b.n	3546 <boot_serial_start+0x8a>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    353a:	2b04      	cmp	r3, #4
    353c:	d103      	bne.n	3546 <boot_serial_start+0x8a>
    353e:	f898 3001 	ldrb.w	r3, [r8, #1]
    3542:	2b14      	cmp	r3, #20
    3544:	d0f4      	beq.n	3530 <boot_serial_start+0x74>
        if (rc == 1) {
    3546:	2801      	cmp	r0, #1
    3548:	d1e6      	bne.n	3518 <boot_serial_start+0x5c>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    354a:	9900      	ldr	r1, [sp, #0]
    354c:	4806      	ldr	r0, [pc, #24]	; (3568 <boot_serial_start+0xac>)
    354e:	3902      	subs	r1, #2
    3550:	f7ff fda6 	bl	30a0 <boot_serial_input>
    3554:	e7e0      	b.n	3518 <boot_serial_start+0x5c>
    3556:	bf00      	nop
    3558:	20001ea0 	.word	0x20001ea0
    355c:	40010000 	.word	0x40010000
    3560:	6e524635 	.word	0x6e524635
    3564:	2000463d 	.word	0x2000463d
    3568:	2000443e 	.word	0x2000443e

0000356c <decode_Upload>:
	return tmp_result;
}

static bool decode_Upload(
		cbor_state_t *state, struct Upload *result)
{
    356c:	b530      	push	{r4, r5, lr}
    356e:	b085      	sub	sp, #20
    3570:	4605      	mov	r5, r0
    3572:	460c      	mov	r4, r1
	cbor_print("%s\n", __func__);
	bool int_res;

	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    3574:	f007 f8f4 	bl	a760 <map_start_decode>
    3578:	b920      	cbnz	r0, 3584 <decode_Upload+0x18>
    357a:	2400      	movs	r4, #0

	if (!tmp_result)
		cbor_trace();

	return tmp_result;
}
    357c:	f004 0001 	and.w	r0, r4, #1
    3580:	b005      	add	sp, #20
    3582:	bd30      	pop	{r4, r5, pc}
	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    3584:	230c      	movs	r3, #12
    3586:	e9cd 4301 	strd	r4, r3, [sp, #4]
    358a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    358e:	4b06      	ldr	r3, [pc, #24]	; (35a8 <decode_Upload+0x3c>)
    3590:	9500      	str	r5, [sp, #0]
    3592:	2105      	movs	r1, #5
    3594:	2001      	movs	r0, #1
    3596:	f007 f8f3 	bl	a780 <multi_decode>
    359a:	4604      	mov	r4, r0
    359c:	4628      	mov	r0, r5
    359e:	f007 f8ed 	bl	a77c <map_end_decode>
    35a2:	2800      	cmp	r0, #0
    35a4:	d0e9      	beq.n	357a <decode_Upload+0xe>
    35a6:	e7e9      	b.n	357c <decode_Upload+0x10>
    35a8:	000035ad 	.word	0x000035ad

000035ac <decode_Member>:
{
    35ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    35ae:	4604      	mov	r4, r0
    35b0:	460d      	mov	r5, r1
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    35b2:	f007 fa0e 	bl	a9d2 <union_start_code>
    35b6:	b910      	cbnz	r0, 35be <decode_Member+0x12>
    35b8:	2000      	movs	r0, #0
}
    35ba:	b002      	add	sp, #8
    35bc:	bd70      	pop	{r4, r5, r6, pc}
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    35be:	4b34      	ldr	r3, [pc, #208]	; (3690 <decode_Member+0xe4>)
    35c0:	9300      	str	r3, [sp, #0]
    35c2:	4669      	mov	r1, sp
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    35c4:	2305      	movs	r3, #5
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    35c6:	4620      	mov	r0, r4
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    35c8:	9301      	str	r3, [sp, #4]
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    35ca:	f007 f8c6 	bl	a75a <tstrx_expect>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    35ce:	b158      	cbz	r0, 35e8 <decode_Member+0x3c>
	&& (intx32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    35d0:	4629      	mov	r1, r5
    35d2:	4620      	mov	r0, r4
    35d4:	f007 f875 	bl	a6c2 <intx32_decode>
    35d8:	b130      	cbz	r0, 35e8 <decode_Member+0x3c>
    35da:	2300      	movs	r3, #0
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    35dc:	722b      	strb	r3, [r5, #8]
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    35de:	4620      	mov	r0, r4
    35e0:	f007 f9fe 	bl	a9e0 <union_end_code>
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    35e4:	2001      	movs	r0, #1
    35e6:	e7e8      	b.n	35ba <decode_Member+0xe>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    35e8:	4620      	mov	r0, r4
    35ea:	f007 f9f5 	bl	a9d8 <union_elem_code>
    35ee:	b178      	cbz	r0, 3610 <decode_Member+0x64>
    35f0:	4b28      	ldr	r3, [pc, #160]	; (3694 <decode_Member+0xe8>)
    35f2:	9300      	str	r3, [sp, #0]
    35f4:	4669      	mov	r1, sp
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    35f6:	2304      	movs	r3, #4
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    35f8:	4620      	mov	r0, r4
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    35fa:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    35fc:	f007 f8ad 	bl	a75a <tstrx_expect>
    3600:	b130      	cbz	r0, 3610 <decode_Member+0x64>
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    3602:	4629      	mov	r1, r5
    3604:	4620      	mov	r0, r4
    3606:	f007 f8a5 	bl	a754 <bstrx_decode>
    360a:	b108      	cbz	r0, 3610 <decode_Member+0x64>
    360c:	2301      	movs	r3, #1
    360e:	e7e5      	b.n	35dc <decode_Member+0x30>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    3610:	4620      	mov	r0, r4
    3612:	f007 f9e1 	bl	a9d8 <union_elem_code>
    3616:	b178      	cbz	r0, 3638 <decode_Member+0x8c>
    3618:	4b1f      	ldr	r3, [pc, #124]	; (3698 <decode_Member+0xec>)
    361a:	9300      	str	r3, [sp, #0]
    361c:	4669      	mov	r1, sp
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    361e:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    3620:	4620      	mov	r0, r4
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    3622:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    3624:	f007 f899 	bl	a75a <tstrx_expect>
    3628:	b130      	cbz	r0, 3638 <decode_Member+0x8c>
	&& (intx32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    362a:	4629      	mov	r1, r5
    362c:	4620      	mov	r0, r4
    362e:	f007 f848 	bl	a6c2 <intx32_decode>
    3632:	b108      	cbz	r0, 3638 <decode_Member+0x8c>
    3634:	2302      	movs	r3, #2
    3636:	e7d1      	b.n	35dc <decode_Member+0x30>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    3638:	4620      	mov	r0, r4
    363a:	f007 f9cd 	bl	a9d8 <union_elem_code>
    363e:	b178      	cbz	r0, 3660 <decode_Member+0xb4>
    3640:	4b16      	ldr	r3, [pc, #88]	; (369c <decode_Member+0xf0>)
    3642:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    3644:	2603      	movs	r6, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    3646:	4669      	mov	r1, sp
    3648:	4620      	mov	r0, r4
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    364a:	9601      	str	r6, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    364c:	f007 f885 	bl	a75a <tstrx_expect>
    3650:	b130      	cbz	r0, 3660 <decode_Member+0xb4>
	&& (intx32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    3652:	4629      	mov	r1, r5
    3654:	4620      	mov	r0, r4
    3656:	f007 f834 	bl	a6c2 <intx32_decode>
    365a:	b108      	cbz	r0, 3660 <decode_Member+0xb4>
    365c:	722e      	strb	r6, [r5, #8]
    365e:	e7be      	b.n	35de <decode_Member+0x32>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3660:	4620      	mov	r0, r4
    3662:	f007 f9b9 	bl	a9d8 <union_elem_code>
    3666:	b178      	cbz	r0, 3688 <decode_Member+0xdc>
    3668:	4b0d      	ldr	r3, [pc, #52]	; (36a0 <decode_Member+0xf4>)
    366a:	9300      	str	r3, [sp, #0]
    366c:	4669      	mov	r1, sp
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    366e:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3670:	4620      	mov	r0, r4
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3672:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3674:	f007 f871 	bl	a75a <tstrx_expect>
    3678:	b130      	cbz	r0, 3688 <decode_Member+0xdc>
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    367a:	4629      	mov	r1, r5
    367c:	4620      	mov	r0, r4
    367e:	f007 f869 	bl	a754 <bstrx_decode>
    3682:	b108      	cbz	r0, 3688 <decode_Member+0xdc>
    3684:	2304      	movs	r3, #4
    3686:	e7a9      	b.n	35dc <decode_Member+0x30>
    3688:	4620      	mov	r0, r4
    368a:	f007 f9a9 	bl	a9e0 <union_end_code>
    368e:	e793      	b.n	35b8 <decode_Member+0xc>
    3690:	0000de68 	.word	0x0000de68
    3694:	0000de6e 	.word	0x0000de6e
    3698:	0000de73 	.word	0x0000de73
    369c:	0000de64 	.word	0x0000de64
    36a0:	0000de77 	.word	0x0000de77

000036a4 <cbor_decode_Upload>:

bool cbor_decode_Upload(
		const uint8_t *payload, uint32_t payload_len,
		struct Upload *result,
		uint32_t *payload_len_out)
{
    36a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return entry_function(payload, payload_len, (const void *)result,
    36a6:	f04f 0c02 	mov.w	ip, #2
    36aa:	2401      	movs	r4, #1
    36ac:	e9cd 4c01 	strd	r4, ip, [sp, #4]
    36b0:	4c02      	ldr	r4, [pc, #8]	; (36bc <cbor_decode_Upload+0x18>)
    36b2:	9400      	str	r4, [sp, #0]
    36b4:	f007 f998 	bl	a9e8 <entry_function>
		payload_len_out, (void *)decode_Upload,
		1, 2);
}
    36b8:	b004      	add	sp, #16
    36ba:	bd10      	pop	{r4, pc}
    36bc:	0000356d 	.word	0x0000356d

000036c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    36c0:	4901      	ldr	r1, [pc, #4]	; (36c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    36c2:	2210      	movs	r2, #16
	str	r2, [r1]
    36c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    36c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    36c8:	e000ed10 	.word	0xe000ed10

000036cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    36cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    36ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    36d0:	f380 8811 	msr	BASEPRI, r0
	isb
    36d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    36d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    36dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    36de:	b662      	cpsie	i
	isb
    36e0:	f3bf 8f6f 	isb	sy

	bx	lr
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop

000036e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    36e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    36ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    36ec:	f381 8811 	msr	BASEPRI, r1

	wfe
    36f0:	bf20      	wfe

	msr	BASEPRI, r0
    36f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    36f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    36f8:	4770      	bx	lr
    36fa:	bf00      	nop

000036fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    36fc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    36fe:	2800      	cmp	r0, #0
    3700:	db07      	blt.n	3712 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3702:	4a04      	ldr	r2, [pc, #16]	; (3714 <arch_irq_enable+0x18>)
    3704:	0941      	lsrs	r1, r0, #5
    3706:	2301      	movs	r3, #1
    3708:	f000 001f 	and.w	r0, r0, #31
    370c:	4083      	lsls	r3, r0
    370e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3712:	4770      	bx	lr
    3714:	e000e100 	.word	0xe000e100

00003718 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3718:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    371a:	2800      	cmp	r0, #0
    371c:	db0c      	blt.n	3738 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    371e:	0943      	lsrs	r3, r0, #5
    3720:	4906      	ldr	r1, [pc, #24]	; (373c <arch_irq_disable+0x24>)
    3722:	f000 001f 	and.w	r0, r0, #31
    3726:	3320      	adds	r3, #32
    3728:	2201      	movs	r2, #1
    372a:	4082      	lsls	r2, r0
    372c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3730:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3734:	f3bf 8f6f 	isb	sy
}
    3738:	4770      	bx	lr
    373a:	bf00      	nop
    373c:	e000e100 	.word	0xe000e100

00003740 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3740:	4b05      	ldr	r3, [pc, #20]	; (3758 <arch_irq_is_enabled+0x18>)
    3742:	0942      	lsrs	r2, r0, #5
    3744:	f000 001f 	and.w	r0, r0, #31
    3748:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    374c:	2301      	movs	r3, #1
    374e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3752:	4010      	ands	r0, r2
    3754:	4770      	bx	lr
    3756:	bf00      	nop
    3758:	e000e100 	.word	0xe000e100

0000375c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    375c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    375e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3760:	bfa8      	it	ge
    3762:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3766:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    376a:	bfb8      	it	lt
    376c:	4b06      	ldrlt	r3, [pc, #24]	; (3788 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    376e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3772:	bfac      	ite	ge
    3774:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3778:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    377c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    377e:	bfb4      	ite	lt
    3780:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3782:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3786:	4770      	bx	lr
    3788:	e000ed14 	.word	0xe000ed14

0000378c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    378c:	bf30      	wfi
    b z_SysNmiOnReset
    378e:	f7ff bffd 	b.w	378c <z_SysNmiOnReset>
    3792:	bf00      	nop

00003794 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3794:	4a0b      	ldr	r2, [pc, #44]	; (37c4 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3796:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3798:	4b0b      	ldr	r3, [pc, #44]	; (37c8 <z_arm_prep_c+0x34>)
    379a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    379e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    37a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    37a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    37ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    37b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    37b4:	f004 fb16 	bl	7de4 <z_bss_zero>
	z_data_copy();
    37b8:	f005 fa6a 	bl	8c90 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    37bc:	f000 f9b0 	bl	3b20 <z_arm_interrupt_init>
	z_cstart();
    37c0:	f004 fb1a 	bl	7df8 <z_cstart>
    37c4:	00000000 	.word	0x00000000
    37c8:	e000ed00 	.word	0xe000ed00

000037cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    37cc:	4a09      	ldr	r2, [pc, #36]	; (37f4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    37ce:	490a      	ldr	r1, [pc, #40]	; (37f8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    37d0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    37d2:	6809      	ldr	r1, [r1, #0]
    37d4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37d6:	4909      	ldr	r1, [pc, #36]	; (37fc <arch_swap+0x30>)
	_current->arch.basepri = key;
    37d8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37da:	684b      	ldr	r3, [r1, #4]
    37dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    37e0:	604b      	str	r3, [r1, #4]
    37e2:	2300      	movs	r3, #0
    37e4:	f383 8811 	msr	BASEPRI, r3
    37e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    37ec:	6893      	ldr	r3, [r2, #8]
}
    37ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop
    37f4:	20002a54 	.word	0x20002a54
    37f8:	0000daf8 	.word	0x0000daf8
    37fc:	e000ed00 	.word	0xe000ed00

00003800 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3800:	4912      	ldr	r1, [pc, #72]	; (384c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3802:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3804:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3808:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    380a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    380e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3812:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3814:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3818:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    381c:	4f0c      	ldr	r7, [pc, #48]	; (3850 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    381e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3822:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3824:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3826:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3828:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    382a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    382c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    382e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3832:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3834:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3836:	f000 fa0b 	bl	3c50 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    383a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    383e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3842:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3846:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    384a:	4770      	bx	lr
    ldr r1, =_kernel
    384c:	20002a54 	.word	0x20002a54
    ldr v4, =_SCS_ICSR
    3850:	e000ed04 	.word	0xe000ed04

00003854 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3854:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3858:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    385a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    385e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3862:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3864:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3868:	2902      	cmp	r1, #2
    beq _oops
    386a:	d0ff      	beq.n	386c <_oops>

0000386c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    386c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    386e:	f007 f8ef 	bl	aa50 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3872:	bd01      	pop	{r0, pc}

00003874 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3874:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3878:	9b00      	ldr	r3, [sp, #0]
    387a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    387e:	490a      	ldr	r1, [pc, #40]	; (38a8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3880:	9b01      	ldr	r3, [sp, #4]
    3882:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3886:	9b02      	ldr	r3, [sp, #8]
    3888:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    388c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3894:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3898:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    389c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    389e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    38a0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    38a2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    38a4:	4770      	bx	lr
    38a6:	bf00      	nop
    38a8:	00009c89 	.word	0x00009c89

000038ac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    38ac:	4a09      	ldr	r2, [pc, #36]	; (38d4 <z_check_thread_stack_fail+0x28>)
{
    38ae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    38b0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    38b2:	b170      	cbz	r0, 38d2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    38b4:	f113 0f16 	cmn.w	r3, #22
    38b8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    38ba:	d005      	beq.n	38c8 <z_check_thread_stack_fail+0x1c>
    38bc:	f1a0 0220 	sub.w	r2, r0, #32
    38c0:	429a      	cmp	r2, r3
    38c2:	d805      	bhi.n	38d0 <z_check_thread_stack_fail+0x24>
    38c4:	4283      	cmp	r3, r0
    38c6:	d203      	bcs.n	38d0 <z_check_thread_stack_fail+0x24>
		return 0;
    38c8:	4281      	cmp	r1, r0
    38ca:	bf28      	it	cs
    38cc:	2000      	movcs	r0, #0
    38ce:	4770      	bx	lr
    38d0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    38d2:	4770      	bx	lr
    38d4:	20002a54 	.word	0x20002a54

000038d8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    38d8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    38da:	4b09      	ldr	r3, [pc, #36]	; (3900 <arch_switch_to_main_thread+0x28>)
{
    38dc:	460d      	mov	r5, r1
    38de:	4614      	mov	r4, r2
	_current = main_thread;
    38e0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    38e2:	f000 f9b5 	bl	3c50 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    38e6:	4620      	mov	r0, r4
    38e8:	f385 8809 	msr	PSP, r5
    38ec:	2100      	movs	r1, #0
    38ee:	b663      	cpsie	if
    38f0:	f381 8811 	msr	BASEPRI, r1
    38f4:	f3bf 8f6f 	isb	sy
    38f8:	2200      	movs	r2, #0
    38fa:	2300      	movs	r3, #0
    38fc:	f006 f9c4 	bl	9c88 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3900:	20002a54 	.word	0x20002a54

00003904 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3904:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3906:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    390a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    390e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3912:	4904      	ldr	r1, [pc, #16]	; (3924 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3914:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3916:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3918:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    391a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    391e:	4902      	ldr	r1, [pc, #8]	; (3928 <_isr_wrapper+0x24>)
	bx r1
    3920:	4708      	bx	r1
    3922:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3924:	0000d550 	.word	0x0000d550
	ldr r1, =z_arm_int_exit
    3928:	0000392d 	.word	0x0000392d

0000392c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    392e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3930:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3932:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3934:	d003      	beq.n	393e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3936:	4903      	ldr	r1, [pc, #12]	; (3944 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    393c:	600a      	str	r2, [r1, #0]

0000393e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    393e:	4770      	bx	lr
	ldr r3, =_kernel
    3940:	20002a54 	.word	0x20002a54
	ldr r1, =_SCS_ICSR
    3944:	e000ed04 	.word	0xe000ed04

00003948 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3948:	4b0d      	ldr	r3, [pc, #52]	; (3980 <bus_fault.constprop.0+0x38>)
    394a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    394c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    394e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3950:	0592      	lsls	r2, r2, #22
    3952:	d508      	bpl.n	3966 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3954:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3958:	0412      	lsls	r2, r2, #16
    395a:	d504      	bpl.n	3966 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    395c:	b118      	cbz	r0, 3966 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    395e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3964:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    396a:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    396c:	4a04      	ldr	r2, [pc, #16]	; (3980 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    396e:	bf58      	it	pl
    3970:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3972:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3974:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3976:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    397a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    397c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    397e:	4770      	bx	lr
    3980:	e000ed00 	.word	0xe000ed00

00003984 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3984:	4b19      	ldr	r3, [pc, #100]	; (39ec <mem_manage_fault.constprop.0+0x68>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3986:	b570      	push	{r4, r5, r6, lr}
    3988:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    398a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    398e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3990:	0792      	lsls	r2, r2, #30
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3992:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3994:	d51a      	bpl.n	39cc <mem_manage_fault.constprop.0+0x48>
		uint32_t temp = SCB->MMFAR;
    3996:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    399a:	0615      	lsls	r5, r2, #24
    399c:	d516      	bpl.n	39cc <mem_manage_fault.constprop.0+0x48>
			if (from_hard_fault != 0) {
    399e:	b119      	cbz	r1, 39a8 <mem_manage_fault.constprop.0+0x24>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    39a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    39a6:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    39a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    39aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    39ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39ae:	4d0f      	ldr	r5, [pc, #60]	; (39ec <mem_manage_fault.constprop.0+0x68>)
    39b0:	f012 0f10 	tst.w	r2, #16
    39b4:	d10d      	bne.n	39d2 <mem_manage_fault.constprop.0+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    39b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    39b8:	079a      	lsls	r2, r3, #30
    39ba:	d40a      	bmi.n	39d2 <mem_manage_fault.constprop.0+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    39bc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    39be:	6aab      	ldr	r3, [r5, #40]	; 0x28
    39c0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    39c4:	62ab      	str	r3, [r5, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    39c6:	2300      	movs	r3, #0
    39c8:	7023      	strb	r3, [r4, #0]
}
    39ca:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    39cc:	f06f 0015 	mvn.w	r0, #21
    39d0:	e7ea      	b.n	39a8 <mem_manage_fault.constprop.0+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    39d2:	686b      	ldr	r3, [r5, #4]
    39d4:	051b      	lsls	r3, r3, #20
    39d6:	d5f1      	bpl.n	39bc <mem_manage_fault.constprop.0+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    39d8:	4631      	mov	r1, r6
    39da:	f7ff ff67 	bl	38ac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    39de:	2800      	cmp	r0, #0
    39e0:	d0ec      	beq.n	39bc <mem_manage_fault.constprop.0+0x38>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    39e2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    39e6:	2002      	movs	r0, #2
    39e8:	e7e9      	b.n	39be <mem_manage_fault.constprop.0+0x3a>
    39ea:	bf00      	nop
    39ec:	e000ed00 	.word	0xe000ed00

000039f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    39f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39f2:	4b41      	ldr	r3, [pc, #260]	; (3af8 <z_arm_fault+0x108>)
    39f4:	685b      	ldr	r3, [r3, #4]
{
    39f6:	b08a      	sub	sp, #40	; 0x28
    39f8:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    39fe:	2600      	movs	r6, #0
    3a00:	f386 8811 	msr	BASEPRI, r6
    3a04:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3a08:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3a0c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3a10:	d111      	bne.n	3a36 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3a12:	f002 000c 	and.w	r0, r2, #12
    3a16:	2808      	cmp	r0, #8
    3a18:	d00d      	beq.n	3a36 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3a1a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3a1c:	bf4c      	ite	mi
    3a1e:	460d      	movmi	r5, r1
			*nested_exc = true;
    3a20:	2601      	movpl	r6, #1
	*recoverable = false;
    3a22:	2200      	movs	r2, #0
	switch (fault) {
    3a24:	3b03      	subs	r3, #3
	*recoverable = false;
    3a26:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3a2a:	2b03      	cmp	r3, #3
    3a2c:	d83b      	bhi.n	3aa6 <z_arm_fault+0xb6>
    3a2e:	e8df f003 	tbb	[pc, r3]
    3a32:	5304      	.short	0x5304
    3a34:	5b57      	.short	0x5b57
		return NULL;
    3a36:	4635      	mov	r5, r6
    3a38:	e7f3      	b.n	3a22 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a3a:	4b2f      	ldr	r3, [pc, #188]	; (3af8 <z_arm_fault+0x108>)
    3a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a3e:	0791      	lsls	r1, r2, #30
    3a40:	d431      	bmi.n	3aa6 <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a44:	2a00      	cmp	r2, #0
    3a46:	db2e      	blt.n	3aa6 <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a4a:	0052      	lsls	r2, r2, #1
    3a4c:	d52b      	bpl.n	3aa6 <z_arm_fault+0xb6>
	uint16_t fault_insn = *(ret_addr - 1);
    3a4e:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3a50:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    3a54:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3a58:	4291      	cmp	r1, r2
    3a5a:	d00a      	beq.n	3a72 <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    3a5c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    3a60:	b14a      	cbz	r2, 3a76 <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    3a62:	f10d 0207 	add.w	r2, sp, #7
    3a66:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3a68:	4628      	mov	r0, r5
    3a6a:	f7ff ff8b 	bl	3984 <mem_manage_fault.constprop.0>
    3a6e:	4604      	mov	r4, r0
		break;
    3a70:	e01a      	b.n	3aa8 <z_arm_fault+0xb8>
			reason = esf->basic.r0;
    3a72:	682c      	ldr	r4, [r5, #0]
    3a74:	e018      	b.n	3aa8 <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
    3a76:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    3a7a:	b12a      	cbz	r2, 3a88 <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    3a7c:	f10d 0107 	add.w	r1, sp, #7
    3a80:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3a82:	f7ff ff61 	bl	3948 <bus_fault.constprop.0>
    3a86:	e7f2      	b.n	3a6e <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    3a88:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3a8a:	b292      	uxth	r2, r2
    3a8c:	b15a      	cbz	r2, 3aa6 <z_arm_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a9c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3aa0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3aa4:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    3aa6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3aac:	b993      	cbnz	r3, 3ad4 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3aae:	2220      	movs	r2, #32
    3ab0:	4629      	mov	r1, r5
    3ab2:	a802      	add	r0, sp, #8
    3ab4:	f007 f815 	bl	aae2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3aba:	b1be      	cbz	r6, 3aec <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3abc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3ac0:	b922      	cbnz	r2, 3acc <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3ac2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3ac6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3aca:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3acc:	a902      	add	r1, sp, #8
    3ace:	4620      	mov	r0, r4
    3ad0:	f006 ffbc 	bl	aa4c <z_arm_fatal_error>
}
    3ad4:	b00a      	add	sp, #40	; 0x28
    3ad6:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    3ad8:	f10d 0207 	add.w	r2, sp, #7
    3adc:	2100      	movs	r1, #0
    3ade:	e7c3      	b.n	3a68 <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
    3ae0:	f10d 0107 	add.w	r1, sp, #7
    3ae4:	2000      	movs	r0, #0
    3ae6:	e7cc      	b.n	3a82 <z_arm_fault+0x92>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3ae8:	4b03      	ldr	r3, [pc, #12]	; (3af8 <z_arm_fault+0x108>)
    3aea:	e7d0      	b.n	3a8e <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3aec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3af0:	f023 0301 	bic.w	r3, r3, #1
    3af4:	e7e9      	b.n	3aca <z_arm_fault+0xda>
    3af6:	bf00      	nop
    3af8:	e000ed00 	.word	0xe000ed00

00003afc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3afc:	4a02      	ldr	r2, [pc, #8]	; (3b08 <z_arm_fault_init+0xc>)
    3afe:	6953      	ldr	r3, [r2, #20]
    3b00:	f043 0310 	orr.w	r3, r3, #16
    3b04:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3b06:	4770      	bx	lr
    3b08:	e000ed00 	.word	0xe000ed00

00003b0c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3b0c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3b10:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3b14:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3b16:	4672      	mov	r2, lr
	bl z_arm_fault
    3b18:	f7ff ff6a 	bl	39f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3b1c:	bd01      	pop	{r0, pc}
    3b1e:	bf00      	nop

00003b20 <z_arm_interrupt_init>:
    3b20:	4804      	ldr	r0, [pc, #16]	; (3b34 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3b22:	2300      	movs	r3, #0
    3b24:	2120      	movs	r1, #32
    3b26:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3b28:	3301      	adds	r3, #1
    3b2a:	2b30      	cmp	r3, #48	; 0x30
    3b2c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3b30:	d1f9      	bne.n	3b26 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3b32:	4770      	bx	lr
    3b34:	e000e100 	.word	0xe000e100

00003b38 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3b38:	2000      	movs	r0, #0
    msr CONTROL, r0
    3b3a:	f380 8814 	msr	CONTROL, r0
    isb
    3b3e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3b42:	f009 fc63 	bl	d40c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3b46:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3b48:	490d      	ldr	r1, [pc, #52]	; (3b80 <__start+0x48>)
    str r0, [r1]
    3b4a:	6008      	str	r0, [r1, #0]
    dsb
    3b4c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3b50:	480c      	ldr	r0, [pc, #48]	; (3b84 <__start+0x4c>)
    msr msp, r0
    3b52:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3b56:	f000 f82b 	bl	3bb0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3b5a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3b5c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3b60:	4809      	ldr	r0, [pc, #36]	; (3b88 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3b62:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3b66:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3b68:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3b6c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3b70:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3b72:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3b74:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3b78:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3b7c:	f7ff fe0a 	bl	3794 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3b80:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3b84:	20008420 	.word	0x20008420
    ldr r0, =z_interrupt_stacks
    3b88:	200052a0 	.word	0x200052a0

00003b8c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3b8c:	4907      	ldr	r1, [pc, #28]	; (3bac <z_arm_clear_arm_mpu_config+0x20>)
    3b8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3b92:	2300      	movs	r3, #0
	int num_regions =
    3b94:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3b98:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3b9a:	4293      	cmp	r3, r2
    3b9c:	db00      	blt.n	3ba0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3b9e:	4770      	bx	lr
  MPU->RNR = rnr;
    3ba0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3ba4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3ba8:	3301      	adds	r3, #1
    3baa:	e7f6      	b.n	3b9a <z_arm_clear_arm_mpu_config+0xe>
    3bac:	e000ed00 	.word	0xe000ed00

00003bb0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3bb0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3bb2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3bb4:	2300      	movs	r3, #0
    3bb6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3bba:	f7ff ffe7 	bl	3b8c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3bbe:	4b14      	ldr	r3, [pc, #80]	; (3c10 <z_arm_init_arch_hw_at_boot+0x60>)
    3bc0:	f04f 32ff 	mov.w	r2, #4294967295
    3bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3bd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3bdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3be4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3be8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3bec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3bf0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3bf4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3bf8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3bfc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3c00:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3c04:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3c06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c0a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3c0e:	bd08      	pop	{r3, pc}
    3c10:	e000e100 	.word	0xe000e100

00003c14 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3c14:	4b06      	ldr	r3, [pc, #24]	; (3c30 <z_impl_k_thread_abort+0x1c>)
    3c16:	689b      	ldr	r3, [r3, #8]
    3c18:	4283      	cmp	r3, r0
    3c1a:	d107      	bne.n	3c2c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3c1c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3c20:	b123      	cbz	r3, 3c2c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c22:	4a04      	ldr	r2, [pc, #16]	; (3c34 <z_impl_k_thread_abort+0x20>)
    3c24:	6853      	ldr	r3, [r2, #4]
    3c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c2a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3c2c:	f004 bfcc 	b.w	8bc8 <z_thread_abort>
    3c30:	20002a54 	.word	0x20002a54
    3c34:	e000ed00 	.word	0xe000ed00

00003c38 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3c38:	4b02      	ldr	r3, [pc, #8]	; (3c44 <z_arm_configure_static_mpu_regions+0xc>)
    3c3a:	4a03      	ldr	r2, [pc, #12]	; (3c48 <z_arm_configure_static_mpu_regions+0x10>)
    3c3c:	4803      	ldr	r0, [pc, #12]	; (3c4c <z_arm_configure_static_mpu_regions+0x14>)
    3c3e:	2101      	movs	r1, #1
    3c40:	f000 b870 	b.w	3d24 <arm_core_mpu_configure_static_mpu_regions>
    3c44:	20040000 	.word	0x20040000
    3c48:	20000000 	.word	0x20000000
    3c4c:	0000d814 	.word	0x0000d814

00003c50 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3c50:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3c52:	4b05      	ldr	r3, [pc, #20]	; (3c68 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3c54:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3c56:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3c58:	4a04      	ldr	r2, [pc, #16]	; (3c6c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3c5a:	2120      	movs	r1, #32
    3c5c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3c60:	4618      	mov	r0, r3
    3c62:	2101      	movs	r1, #1
    3c64:	f000 b868 	b.w	3d38 <arm_core_mpu_configure_dynamic_mpu_regions>
    3c68:	20001ea4 	.word	0x20001ea4
    3c6c:	150b0000 	.word	0x150b0000

00003c70 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3c70:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3c72:	4e20      	ldr	r6, [pc, #128]	; (3cf4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3c74:	2500      	movs	r5, #0
    3c76:	428d      	cmp	r5, r1
    3c78:	db01      	blt.n	3c7e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3c7a:	4610      	mov	r0, r2
    3c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    3c7e:	6844      	ldr	r4, [r0, #4]
    3c80:	b374      	cbz	r4, 3ce0 <mpu_configure_regions+0x70>
		if (do_sanity_check &&
    3c82:	b153      	cbz	r3, 3c9a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3c84:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3c88:	ea14 0f0c 	tst.w	r4, ip
    3c8c:	d12f      	bne.n	3cee <mpu_configure_regions+0x7e>
		&&
    3c8e:	2c1f      	cmp	r4, #31
    3c90:	d92d      	bls.n	3cee <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
    3c92:	6807      	ldr	r7, [r0, #0]
		&&
    3c94:	ea1c 0f07 	tst.w	ip, r7
    3c98:	d129      	bne.n	3cee <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3c9a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3c9c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3c9e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3ca2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3ca6:	d91e      	bls.n	3ce6 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    3ca8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3cac:	d81d      	bhi.n	3cea <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3cae:	3c01      	subs	r4, #1
    3cb0:	fab4 f484 	clz	r4, r4
    3cb4:	f1c4 041f 	rsb	r4, r4, #31
    3cb8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3cba:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3cbe:	ea4c 0c04 	orr.w	ip, ip, r4
    3cc2:	d814      	bhi.n	3cee <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3cc4:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3cc8:	4314      	orrs	r4, r2
    3cca:	f044 0410 	orr.w	r4, r4, #16
    3cce:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3cd2:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3cd6:	f04c 0401 	orr.w	r4, ip, #1
    3cda:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    3cde:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3ce0:	3501      	adds	r5, #1
    3ce2:	300c      	adds	r0, #12
    3ce4:	e7c7      	b.n	3c76 <mpu_configure_regions+0x6>
		return REGION_32B;
    3ce6:	2408      	movs	r4, #8
    3ce8:	e7e7      	b.n	3cba <mpu_configure_regions+0x4a>
		return REGION_4G;
    3cea:	243e      	movs	r4, #62	; 0x3e
    3cec:	e7e5      	b.n	3cba <mpu_configure_regions+0x4a>
			return -EINVAL;
    3cee:	f06f 0215 	mvn.w	r2, #21
    3cf2:	e7c2      	b.n	3c7a <mpu_configure_regions+0xa>
    3cf4:	e000ed00 	.word	0xe000ed00

00003cf8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3cf8:	4b04      	ldr	r3, [pc, #16]	; (3d0c <arm_core_mpu_enable+0x14>)
    3cfa:	2205      	movs	r2, #5
    3cfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d04:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3d08:	4770      	bx	lr
    3d0a:	bf00      	nop
    3d0c:	e000ed00 	.word	0xe000ed00

00003d10 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3d10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3d14:	4b02      	ldr	r3, [pc, #8]	; (3d20 <arm_core_mpu_disable+0x10>)
    3d16:	2200      	movs	r2, #0
    3d18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3d1c:	4770      	bx	lr
    3d1e:	bf00      	nop
    3d20:	e000ed00 	.word	0xe000ed00

00003d24 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3d24:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3d26:	4c03      	ldr	r4, [pc, #12]	; (3d34 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3d28:	2301      	movs	r3, #1
    3d2a:	7822      	ldrb	r2, [r4, #0]
    3d2c:	f7ff ffa0 	bl	3c70 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3d30:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3d32:	bd10      	pop	{r4, pc}
    3d34:	2000483e 	.word	0x2000483e

00003d38 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3d38:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3d3a:	4a09      	ldr	r2, [pc, #36]	; (3d60 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3d3c:	2300      	movs	r3, #0
    3d3e:	7812      	ldrb	r2, [r2, #0]
    3d40:	f7ff ff96 	bl	3c70 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3d44:	f110 0f16 	cmn.w	r0, #22
    3d48:	d002      	beq.n	3d50 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    3d4a:	4a06      	ldr	r2, [pc, #24]	; (3d64 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3d4c:	2807      	cmp	r0, #7
    3d4e:	dd00      	ble.n	3d52 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3d50:	bd08      	pop	{r3, pc}
    3d52:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3d56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    3d5a:	3001      	adds	r0, #1
    3d5c:	e7f6      	b.n	3d4c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    3d5e:	bf00      	nop
    3d60:	2000483e 	.word	0x2000483e
    3d64:	e000ed00 	.word	0xe000ed00

00003d68 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3d68:	4914      	ldr	r1, [pc, #80]	; (3dbc <z_arm_mpu_init+0x54>)
    3d6a:	6808      	ldr	r0, [r1, #0]
    3d6c:	2808      	cmp	r0, #8
{
    3d6e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3d70:	d821      	bhi.n	3db6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3d72:	f7ff ffcd 	bl	3d10 <arm_core_mpu_disable>
    3d76:	4c12      	ldr	r4, [pc, #72]	; (3dc0 <z_arm_mpu_init+0x58>)
    3d78:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3d7a:	2200      	movs	r2, #0
    3d7c:	4290      	cmp	r0, r2
    3d7e:	f101 010c 	add.w	r1, r1, #12
    3d82:	d105      	bne.n	3d90 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3d84:	4b0f      	ldr	r3, [pc, #60]	; (3dc4 <z_arm_mpu_init+0x5c>)
    3d86:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3d88:	f7ff ffb6 	bl	3cf8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3d8c:	2000      	movs	r0, #0
}
    3d8e:	bd10      	pop	{r4, pc}
    3d90:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3d94:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3d98:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3d9c:	4313      	orrs	r3, r2
    3d9e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3da2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3daa:	f043 0301 	orr.w	r3, r3, #1
    3dae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3db2:	3201      	adds	r2, #1
    3db4:	e7e2      	b.n	3d7c <z_arm_mpu_init+0x14>
		return -1;
    3db6:	f04f 30ff 	mov.w	r0, #4294967295
    3dba:	e7e8      	b.n	3d8e <z_arm_mpu_init+0x26>
    3dbc:	0000d820 	.word	0x0000d820
    3dc0:	e000ed00 	.word	0xe000ed00
    3dc4:	2000483e 	.word	0x2000483e

00003dc8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3dc8:	f04f 0320 	mov.w	r3, #32
    3dcc:	f3ef 8211 	mrs	r2, BASEPRI
    3dd0:	f383 8812 	msr	BASEPRI_MAX, r3
    3dd4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3dd8:	4906      	ldr	r1, [pc, #24]	; (3df4 <nordicsemi_nrf52_init+0x2c>)
    3dda:	2301      	movs	r3, #1
    3ddc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3de0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3de4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3de8:	f382 8811 	msr	BASEPRI, r2
    3dec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3df0:	2000      	movs	r0, #0
    3df2:	4770      	bx	lr
    3df4:	4001e000 	.word	0x4001e000

00003df8 <sys_arch_reboot>:
    *p_gpregret = val;
    3df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dfc:	b2c0      	uxtb	r0, r0
    3dfe:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3e02:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3e06:	4905      	ldr	r1, [pc, #20]	; (3e1c <sys_arch_reboot+0x24>)
    3e08:	4b05      	ldr	r3, [pc, #20]	; (3e20 <sys_arch_reboot+0x28>)
    3e0a:	68ca      	ldr	r2, [r1, #12]
    3e0c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3e10:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3e12:	60cb      	str	r3, [r1, #12]
    3e14:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3e18:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3e1a:	e7fd      	b.n	3e18 <sys_arch_reboot+0x20>
    3e1c:	e000ed00 	.word	0xe000ed00
    3e20:	05fa0004 	.word	0x05fa0004

00003e24 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3e24:	b120      	cbz	r0, 3e30 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3e26:	4b03      	ldr	r3, [pc, #12]	; (3e34 <arch_busy_wait+0x10>)
    3e28:	0180      	lsls	r0, r0, #6
    3e2a:	f043 0301 	orr.w	r3, r3, #1
    3e2e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3e30:	4770      	bx	lr
    3e32:	bf00      	nop
    3e34:	0000d710 	.word	0x0000d710

00003e38 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3e38:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3e3a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3e3e:	d512      	bpl.n	3e66 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3e40:	2b08      	cmp	r3, #8
    3e42:	d105      	bne.n	3e50 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3e44:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3e46:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3e4a:	d506      	bpl.n	3e5a <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3e4c:	480e      	ldr	r0, [pc, #56]	; (3e88 <endpoint_ctx+0x50>)
    3e4e:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    3e50:	f010 0f78 	tst.w	r0, #120	; 0x78
    3e54:	d112      	bne.n	3e7c <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3e56:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    3e5a:	204c      	movs	r0, #76	; 0x4c
    3e5c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3e60:	4b0a      	ldr	r3, [pc, #40]	; (3e8c <endpoint_ctx+0x54>)
    3e62:	4418      	add	r0, r3
    3e64:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3e66:	2b08      	cmp	r3, #8
    3e68:	d105      	bne.n	3e76 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3e6a:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3e6c:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3e70:	d506      	bpl.n	3e80 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3e72:	4807      	ldr	r0, [pc, #28]	; (3e90 <endpoint_ctx+0x58>)
    3e74:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    3e76:	f010 0f78 	tst.w	r0, #120	; 0x78
    3e7a:	d0f6      	beq.n	3e6a <endpoint_ctx+0x32>
		return NULL;
    3e7c:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    3e7e:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3e80:	4804      	ldr	r0, [pc, #16]	; (3e94 <endpoint_ctx+0x5c>)
    3e82:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3e86:	4770      	bx	lr
    3e88:	20001ffc 	.word	0x20001ffc
    3e8c:	20001eb0 	.word	0x20001eb0
    3e90:	2000211c 	.word	0x2000211c
    3e94:	2000201c 	.word	0x2000201c

00003e98 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    3e98:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    3e9a:	4801      	ldr	r0, [pc, #4]	; (3ea0 <usbd_evt_put+0x8>)
    3e9c:	f009 b8b7 	b.w	d00e <k_queue_append>
    3ea0:	2000030c 	.word	0x2000030c

00003ea4 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3ea4:	4901      	ldr	r1, [pc, #4]	; (3eac <usbd_work_schedule+0x8>)
    3ea6:	4802      	ldr	r0, [pc, #8]	; (3eb0 <usbd_work_schedule+0xc>)
    3ea8:	f009 b8e3 	b.w	d072 <k_work_submit_to_queue>
    3eac:	20001ed8 	.word	0x20001ed8
    3eb0:	200004a0 	.word	0x200004a0

00003eb4 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    3eb4:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    3eb6:	480b      	ldr	r0, [pc, #44]	; (3ee4 <usb_init+0x30>)
    3eb8:	f002 fee4 	bl	6c84 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    3ebc:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    3ebe:	480a      	ldr	r0, [pc, #40]	; (3ee8 <usb_init+0x34>)
    3ec0:	f002 ff24 	bl	6d0c <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    3ec4:	f04f 33ff 	mov.w	r3, #4294967295
    3ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3ecc:	4907      	ldr	r1, [pc, #28]	; (3eec <usb_init+0x38>)
    3ece:	4808      	ldr	r0, [pc, #32]	; (3ef0 <usb_init+0x3c>)
    3ed0:	9400      	str	r4, [sp, #0]
    3ed2:	f004 fb41 	bl	8558 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    3ed6:	4907      	ldr	r1, [pc, #28]	; (3ef4 <usb_init+0x40>)
    3ed8:	4807      	ldr	r0, [pc, #28]	; (3ef8 <usb_init+0x44>)
    3eda:	f009 f8c1 	bl	d060 <k_work_init>

	return 0;
}
    3ede:	4620      	mov	r0, r4
    3ee0:	b002      	add	sp, #8
    3ee2:	bd10      	pop	{r4, pc}
    3ee4:	0000de8d 	.word	0x0000de8d
    3ee8:	0000d840 	.word	0x0000d840
    3eec:	20004e80 	.word	0x20004e80
    3ef0:	200004a0 	.word	0x200004a0
    3ef4:	0000420d 	.word	0x0000420d
    3ef8:	20001ed8 	.word	0x20001ed8

00003efc <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    3efc:	4802      	ldr	r0, [pc, #8]	; (3f08 <usbd_evt_get+0xc>)
    3efe:	2200      	movs	r2, #0
    3f00:	2300      	movs	r3, #0
    3f02:	f004 b9af 	b.w	8264 <z_impl_k_queue_get>
    3f06:	bf00      	nop
    3f08:	2000030c 	.word	0x2000030c

00003f0c <usbd_evt_flush>:
{
    3f0c:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3f0e:	4c05      	ldr	r4, [pc, #20]	; (3f24 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    3f10:	f7ff fff4 	bl	3efc <usbd_evt_get>
		if (ev) {
    3f14:	b120      	cbz	r0, 3f20 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3f16:	1d01      	adds	r1, r0, #4
    3f18:	4620      	mov	r0, r4
    3f1a:	f008 ffbb 	bl	ce94 <k_mem_slab_free>
	} while (ev != NULL);
    3f1e:	e7f7      	b.n	3f10 <usbd_evt_flush+0x4>
}
    3f20:	bd10      	pop	{r4, pc}
    3f22:	bf00      	nop
    3f24:	2000028c 	.word	0x2000028c

00003f28 <usbd_evt_alloc>:
{
    3f28:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3f2a:	2300      	movs	r3, #0
    3f2c:	480e      	ldr	r0, [pc, #56]	; (3f68 <usbd_evt_alloc+0x40>)
    3f2e:	2200      	movs	r2, #0
    3f30:	a901      	add	r1, sp, #4
    3f32:	f003 fff5 	bl	7f20 <k_mem_slab_alloc>
    3f36:	b190      	cbz	r0, 3f5e <usbd_evt_alloc+0x36>
		usbd_evt_flush();
    3f38:	f7ff ffe8 	bl	3f0c <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3f3c:	480a      	ldr	r0, [pc, #40]	; (3f68 <usbd_evt_alloc+0x40>)
    3f3e:	2200      	movs	r2, #0
    3f40:	2300      	movs	r3, #0
    3f42:	a901      	add	r1, sp, #4
    3f44:	f003 ffec 	bl	7f20 <k_mem_slab_alloc>
    3f48:	b938      	cbnz	r0, 3f5a <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
    3f4a:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3f4c:	2304      	movs	r3, #4
		ev->block = block;
    3f4e:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3f50:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    3f52:	f7ff ffa1 	bl	3e98 <usbd_evt_put>
		usbd_work_schedule();
    3f56:	f7ff ffa5 	bl	3ea4 <usbd_work_schedule>
		return NULL;
    3f5a:	2000      	movs	r0, #0
    3f5c:	e001      	b.n	3f62 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
    3f5e:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3f60:	6040      	str	r0, [r0, #4]
}
    3f62:	b003      	add	sp, #12
    3f64:	f85d fb04 	ldr.w	pc, [sp], #4
    3f68:	2000028c 	.word	0x2000028c

00003f6c <usbd_event_transfer_data>:
{
    3f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    3f6e:	7887      	ldrb	r7, [r0, #2]
{
    3f70:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    3f72:	4638      	mov	r0, r7
    3f74:	f7ff ff60 	bl	3e38 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3f78:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    3f7a:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3f7c:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3f7e:	d512      	bpl.n	3fa6 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    3f80:	2d00      	cmp	r5, #0
    3f82:	d143      	bne.n	400c <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3f84:	f7ff ffd0 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    3f88:	4603      	mov	r3, r0
    3f8a:	2800      	cmp	r0, #0
    3f8c:	d03e      	beq.n	400c <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
    3f8e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3f90:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    3f92:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3f94:	2203      	movs	r2, #3
    3f96:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3f98:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
    3f9a:	f7ff ff7d 	bl	3e98 <usbd_evt_put>
}
    3f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    3fa2:	f7ff bf7f 	b.w	3ea4 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    3fa6:	b14d      	cbz	r5, 3fbc <usbd_event_transfer_data+0x50>
    3fa8:	2d01      	cmp	r5, #1
    3faa:	d12f      	bne.n	400c <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3fac:	f7ff ffbc 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    3fb0:	4603      	mov	r3, r0
    3fb2:	b358      	cbz	r0, 400c <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    3fb4:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    3fb6:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3fb8:	7305      	strb	r5, [r0, #12]
    3fba:	e7ed      	b.n	3f98 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    3fbc:	f7ff ffb4 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    3fc0:	b320      	cbz	r0, 400c <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    3fc2:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3fc4:	4b12      	ldr	r3, [pc, #72]	; (4010 <usbd_event_transfer_data+0xa4>)
    3fc6:	f012 0f80 	tst.w	r2, #128	; 0x80
    3fca:	f002 0108 	and.w	r1, r2, #8
    3fce:	d011      	beq.n	3ff4 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3fd0:	b141      	cbz	r1, 3fe4 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    3fd2:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3fd6:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    3fd8:	2301      	movs	r3, #1
    3fda:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3fdc:	2302      	movs	r3, #2
    3fde:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3fe0:	6084      	str	r4, [r0, #8]
    3fe2:	e7da      	b.n	3f9a <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    3fe4:	f002 020f 	and.w	r2, r2, #15
    3fe8:	2114      	movs	r1, #20
    3fea:	fb01 3302 	mla	r3, r1, r2, r3
    3fee:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3ff2:	e7f0      	b.n	3fd6 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3ff4:	b111      	cbz	r1, 3ffc <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    3ff6:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    3ffa:	e7ec      	b.n	3fd6 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    3ffc:	f002 020f 	and.w	r2, r2, #15
    4000:	2114      	movs	r1, #20
    4002:	fb01 3302 	mla	r3, r1, r2, r3
    4006:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    400a:	e7e4      	b.n	3fd6 <usbd_event_transfer_data+0x6a>
}
    400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    400e:	bf00      	nop
    4010:	40027000 	.word	0x40027000

00004014 <usb_dc_power_event_handler>:
	switch (event) {
    4014:	2802      	cmp	r0, #2
{
    4016:	b510      	push	{r4, lr}
    4018:	d811      	bhi.n	403e <usb_dc_power_event_handler+0x2a>
    401a:	4b09      	ldr	r3, [pc, #36]	; (4040 <usb_dc_power_event_handler+0x2c>)
    401c:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    401e:	f7ff ff83 	bl	3f28 <usbd_evt_alloc>
	if (!ev) {
    4022:	b160      	cbz	r0, 403e <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    4024:	2200      	movs	r2, #0
    4026:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    4028:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    402a:	f7ff ff35 	bl	3e98 <usbd_evt_put>
	if (usbd_ctx.attached) {
    402e:	4b05      	ldr	r3, [pc, #20]	; (4044 <usb_dc_power_event_handler+0x30>)
    4030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4034:	b11b      	cbz	r3, 403e <usb_dc_power_event_handler+0x2a>
}
    4036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    403a:	f7ff bf33 	b.w	3ea4 <usbd_work_schedule>
}
    403e:	bd10      	pop	{r4, pc}
    4040:	0000de8a 	.word	0x0000de8a
    4044:	20001eb0 	.word	0x20001eb0

00004048 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4048:	b510      	push	{r4, lr}
    404a:	490e      	ldr	r1, [pc, #56]	; (4084 <hfxo_stop.constprop.0.isra.0+0x3c>)
    404c:	f3bf 8f5b 	dmb	ish
    4050:	2300      	movs	r3, #0
    4052:	e851 2f00 	ldrex	r2, [r1]
    4056:	2a01      	cmp	r2, #1
    4058:	d103      	bne.n	4062 <hfxo_stop.constprop.0.isra.0+0x1a>
    405a:	e841 3000 	strex	r0, r3, [r1]
    405e:	2800      	cmp	r0, #0
    4060:	d1f7      	bne.n	4052 <hfxo_stop.constprop.0.isra.0+0xa>
    4062:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    4066:	d10c      	bne.n	4082 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4068:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    406c:	3914      	subs	r1, #20
    406e:	4620      	mov	r0, r4
    4070:	f005 fdee 	bl	9c50 <onoff_cancel>

	if (rv == -EALREADY) {
    4074:	3078      	adds	r0, #120	; 0x78
    4076:	d104      	bne.n	4082 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    4078:	4620      	mov	r0, r4
}
    407a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    407e:	f005 bdc2 	b.w	9c06 <onoff_release>
    4082:	bd10      	pop	{r4, pc}
    4084:	20001ed0 	.word	0x20001ed0

00004088 <usbd_event_handler>:
{
    4088:	b5f0      	push	{r4, r5, r6, r7, lr}
    408a:	4606      	mov	r6, r0
    408c:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    408e:	2214      	movs	r2, #20
    4090:	2100      	movs	r1, #0
    4092:	a803      	add	r0, sp, #12
    4094:	f006 fd30 	bl	aaf8 <memset>
	switch (p_event->type) {
    4098:	7833      	ldrb	r3, [r6, #0]
    409a:	3b01      	subs	r3, #1
    409c:	2b05      	cmp	r3, #5
    409e:	d821      	bhi.n	40e4 <usbd_event_handler+0x5c>
    40a0:	e8df f003 	tbb	[pc, r3]
    40a4:	1414037a 	.word	0x1414037a
    40a8:	166a      	.short	0x166a
    40aa:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    40ac:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    40b0:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    40b2:	f7ff ff39 	bl	3f28 <usbd_evt_alloc>
		if (!ev) {
    40b6:	4603      	mov	r3, r0
    40b8:	b1a0      	cbz	r0, 40e4 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    40ba:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    40bc:	f100 0208 	add.w	r2, r0, #8
    40c0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    40c4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    40c8:	4618      	mov	r0, r3
    40ca:	e01d      	b.n	4108 <usbd_event_handler+0x80>
	switch (p_event->type) {
    40cc:	2304      	movs	r3, #4
    40ce:	e7ed      	b.n	40ac <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    40d0:	78b7      	ldrb	r7, [r6, #2]
    40d2:	4638      	mov	r0, r7
    40d4:	f7ff feb0 	bl	3e38 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    40d8:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    40da:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    40dc:	b123      	cbz	r3, 40e8 <usbd_event_handler+0x60>
    40de:	3b01      	subs	r3, #1
    40e0:	2b02      	cmp	r3, #2
    40e2:	d943      	bls.n	416c <usbd_event_handler+0xe4>
}
    40e4:	b009      	add	sp, #36	; 0x24
    40e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    40e8:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    40ea:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    40ec:	d513      	bpl.n	4116 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    40ee:	2d00      	cmp	r5, #0
    40f0:	d1f8      	bne.n	40e4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    40f2:	f7ff ff19 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    40f6:	4603      	mov	r3, r0
    40f8:	2800      	cmp	r0, #0
    40fa:	d0f3      	beq.n	40e4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    40fc:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    40fe:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    4100:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4102:	2203      	movs	r2, #3
    4104:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4106:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    4108:	f7ff fec6 	bl	3e98 <usbd_evt_put>
}
    410c:	b009      	add	sp, #36	; 0x24
    410e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    4112:	f7ff bec7 	b.w	3ea4 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    4116:	b155      	cbz	r5, 412e <usbd_event_handler+0xa6>
    4118:	2d01      	cmp	r5, #1
    411a:	d1e3      	bne.n	40e4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    411c:	f7ff ff04 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    4120:	4603      	mov	r3, r0
    4122:	2800      	cmp	r0, #0
    4124:	d0de      	beq.n	40e4 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    4126:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    4128:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    412a:	7305      	strb	r5, [r0, #12]
    412c:	e7eb      	b.n	4106 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    412e:	f7ff fefb 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    4132:	4607      	mov	r7, r0
    4134:	2800      	cmp	r0, #0
    4136:	d0d5      	beq.n	40e4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4138:	2301      	movs	r3, #1
    413a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    413c:	2302      	movs	r3, #2
    413e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4140:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    4142:	f104 010c 	add.w	r1, r4, #12
    4146:	78b0      	ldrb	r0, [r6, #2]
    4148:	f008 fe35 	bl	cdb6 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    414c:	4a13      	ldr	r2, [pc, #76]	; (419c <usbd_event_handler+0x114>)
    414e:	68e1      	ldr	r1, [r4, #12]
    4150:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4154:	428b      	cmp	r3, r1
    4156:	d906      	bls.n	4166 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4158:	1a5b      	subs	r3, r3, r1
    415a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    415e:	f003 fb3b 	bl	77d8 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4162:	4638      	mov	r0, r7
    4164:	e7d0      	b.n	4108 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    4166:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    416a:	e7fa      	b.n	4162 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    416c:	4630      	mov	r0, r6
}
    416e:	b009      	add	sp, #36	; 0x24
    4170:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    4174:	f7ff befa 	b.w	3f6c <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    4178:	a801      	add	r0, sp, #4
    417a:	f003 fb07 	bl	778c <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    417e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4182:	2b05      	cmp	r3, #5
    4184:	d104      	bne.n	4190 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    4186:	f89d 3004 	ldrb.w	r3, [sp, #4]
    418a:	f013 0f60 	tst.w	r3, #96	; 0x60
    418e:	d0a9      	beq.n	40e4 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    4190:	4b03      	ldr	r3, [pc, #12]	; (41a0 <usbd_event_handler+0x118>)
    4192:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    4194:	2401      	movs	r4, #1
    4196:	e78c      	b.n	40b2 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    4198:	2402      	movs	r4, #2
    419a:	e78a      	b.n	40b2 <usbd_event_handler+0x2a>
    419c:	20001eb0 	.word	0x20001eb0
    41a0:	2000201c 	.word	0x2000201c

000041a4 <eps_ctx_init>:
{
    41a4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    41a6:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    41a8:	f064 007f 	orn	r0, r4, #127	; 0x7f
    41ac:	b2c0      	uxtb	r0, r0
    41ae:	f7ff fe43 	bl	3e38 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    41b2:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    41b4:	f006 fca9 	bl	ab0a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    41b8:	2c08      	cmp	r4, #8
    41ba:	d1f5      	bne.n	41a8 <eps_ctx_init+0x4>
    41bc:	4d0e      	ldr	r5, [pc, #56]	; (41f8 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    41be:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    41c0:	b2e0      	uxtb	r0, r4
    41c2:	f7ff fe39 	bl	3e38 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    41c6:	6903      	ldr	r3, [r0, #16]
    41c8:	b903      	cbnz	r3, 41cc <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    41ca:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    41cc:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    41ce:	f006 fc9c 	bl	ab0a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    41d2:	2c08      	cmp	r4, #8
    41d4:	f105 0540 	add.w	r5, r5, #64	; 0x40
    41d8:	d1f2      	bne.n	41c0 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    41da:	4808      	ldr	r0, [pc, #32]	; (41fc <eps_ctx_init+0x58>)
    41dc:	f006 fc95 	bl	ab0a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    41e0:	4b07      	ldr	r3, [pc, #28]	; (4200 <eps_ctx_init+0x5c>)
    41e2:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    41e6:	b912      	cbnz	r2, 41ee <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    41e8:	4a06      	ldr	r2, [pc, #24]	; (4204 <eps_ctx_init+0x60>)
    41ea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    41ee:	4806      	ldr	r0, [pc, #24]	; (4208 <eps_ctx_init+0x64>)
    41f0:	f006 fc8b 	bl	ab0a <ep_ctx_reset>
}
    41f4:	2000      	movs	r0, #0
    41f6:	bd38      	pop	{r3, r4, r5, pc}
    41f8:	20002540 	.word	0x20002540
    41fc:	20001ffc 	.word	0x20001ffc
    4200:	20001eb0 	.word	0x20001eb0
    4204:	20002140 	.word	0x20002140
    4208:	2000211c 	.word	0x2000211c

0000420c <usbd_work_handler>:
{
    420c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    4210:	4ca7      	ldr	r4, [pc, #668]	; (44b0 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4212:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 44b4 <usbd_work_handler+0x2a8>
{
    4216:	b085      	sub	sp, #20
    4218:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    421a:	f7ff fe6f 	bl	3efc <usbd_evt_get>
    421e:	b910      	cbnz	r0, 4226 <usbd_work_handler+0x1a>
}
    4220:	b005      	add	sp, #20
    4222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    4226:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    422a:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    422c:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4230:	b93b      	cbnz	r3, 4242 <usbd_work_handler+0x36>
    4232:	2a00      	cmp	r2, #0
    4234:	f000 8088 	beq.w	4348 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4238:	489e      	ldr	r0, [pc, #632]	; (44b4 <usbd_work_handler+0x2a8>)
    423a:	4649      	mov	r1, r9
    423c:	f008 fe2a 	bl	ce94 <k_mem_slab_free>
}
    4240:	e7eb      	b.n	421a <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    4242:	2a04      	cmp	r2, #4
    4244:	d844      	bhi.n	42d0 <usbd_work_handler+0xc4>
    4246:	e8df f012 	tbh	[pc, r2, lsl #1]
    424a:	007f      	.short	0x007f
    424c:	01020005 	.word	0x01020005
    4250:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
    4254:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4256:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    4258:	2b03      	cmp	r3, #3
    425a:	d839      	bhi.n	42d0 <usbd_work_handler+0xc4>
    425c:	e8df f003 	tbb	[pc, r3]
    4260:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4264:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4266:	2208      	movs	r2, #8
    4268:	2100      	movs	r1, #0
    426a:	4630      	mov	r0, r6
    426c:	f006 fc44 	bl	aaf8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4270:	4b91      	ldr	r3, [pc, #580]	; (44b8 <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4272:	4892      	ldr	r0, [pc, #584]	; (44bc <usbd_work_handler+0x2b0>)
    4274:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4278:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    427a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    427e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4280:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4284:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4288:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    428c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    428e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4292:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4296:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    429a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    429c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    42a0:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    42a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    42a8:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    42aa:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    42ac:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    42ae:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    42b0:	f006 fc17 	bl	aae2 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    42b4:	682b      	ldr	r3, [r5, #0]
    42b6:	7a68      	ldrb	r0, [r5, #9]
    42b8:	2100      	movs	r1, #0
    42ba:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    42bc:	f996 3000 	ldrsb.w	r3, [r6]
    42c0:	2b00      	cmp	r3, #0
    42c2:	db08      	blt.n	42d6 <usbd_work_handler+0xca>
    42c4:	88f3      	ldrh	r3, [r6, #6]
    42c6:	b133      	cbz	r3, 42d6 <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    42c8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    42cc:	f003 fa84 	bl	77d8 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    42d0:	4649      	mov	r1, r9
    42d2:	4640      	mov	r0, r8
    42d4:	e7b2      	b.n	423c <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    42d6:	2300      	movs	r3, #0
    42d8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    42dc:	e7f8      	b.n	42d0 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    42de:	7f6b      	ldrb	r3, [r5, #29]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d0f5      	beq.n	42d0 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    42e4:	7f2b      	ldrb	r3, [r5, #28]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d0f2      	beq.n	42d0 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    42ea:	2600      	movs	r6, #0
    42ec:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    42ee:	f04f 32ff 	mov.w	r2, #4294967295
    42f2:	4873      	ldr	r0, [pc, #460]	; (44c0 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
    42f4:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    42f6:	f04f 33ff 	mov.w	r3, #4294967295
    42fa:	f006 fc19 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    42fe:	696b      	ldr	r3, [r5, #20]
    4300:	9301      	str	r3, [sp, #4]
    4302:	686b      	ldr	r3, [r5, #4]
    4304:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4308:	a901      	add	r1, sp, #4
    430a:	7a68      	ldrb	r0, [r5, #9]
    430c:	f003 f862 	bl	73d4 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    4310:	486b      	ldr	r0, [pc, #428]	; (44c0 <usbd_work_handler+0x2b4>)
    4312:	f006 fc0f 	bl	ab34 <k_mutex_unlock.isra.0>
    4316:	e7db      	b.n	42d0 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4318:	682b      	ldr	r3, [r5, #0]
    431a:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    431c:	7a68      	ldrb	r0, [r5, #9]
    431e:	4798      	blx	r3
		break;
    4320:	e7d6      	b.n	42d0 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4322:	7aab      	ldrb	r3, [r5, #10]
    4324:	b96b      	cbnz	r3, 4342 <usbd_work_handler+0x136>
    4326:	7feb      	ldrb	r3, [r5, #31]
    4328:	b95b      	cbnz	r3, 4342 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    432a:	4865      	ldr	r0, [pc, #404]	; (44c0 <usbd_work_handler+0x2b4>)
    432c:	f04f 32ff 	mov.w	r2, #4294967295
    4330:	f04f 33ff 	mov.w	r3, #4294967295
    4334:	f006 fbfc 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    4338:	f003 fa7e 	bl	7838 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    433c:	4860      	ldr	r0, [pc, #384]	; (44c0 <usbd_work_handler+0x2b4>)
    433e:	f006 fbf9 	bl	ab34 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4342:	682b      	ldr	r3, [r5, #0]
    4344:	2102      	movs	r1, #2
    4346:	e7e9      	b.n	431c <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    4348:	7a02      	ldrb	r2, [r0, #8]
    434a:	2a04      	cmp	r2, #4
    434c:	d8c0      	bhi.n	42d0 <usbd_work_handler+0xc4>
    434e:	e8df f002 	tbb	[pc, r2]
    4352:	0359      	.short	0x0359
    4354:	6723      	.short	0x6723
    4356:	73          	.byte	0x73
    4357:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4358:	f002 fff0 	bl	733c <nrfx_usbd_is_enabled>
    435c:	4605      	mov	r5, r0
    435e:	2800      	cmp	r0, #0
    4360:	d1b6      	bne.n	42d0 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    4362:	f002 ff1f 	bl	71a4 <nrfx_usbd_enable>
    4366:	f3bf 8f5b 	dmb	ish
    436a:	4956      	ldr	r1, [pc, #344]	; (44c4 <usbd_work_handler+0x2b8>)
    436c:	2301      	movs	r3, #1
    436e:	e851 2f00 	ldrex	r2, [r1]
    4372:	2a00      	cmp	r2, #0
    4374:	d103      	bne.n	437e <usbd_work_handler+0x172>
    4376:	e841 3000 	strex	r0, r3, [r1]
    437a:	2800      	cmp	r0, #0
    437c:	d1f7      	bne.n	436e <usbd_work_handler+0x162>
    437e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4382:	d1a5      	bne.n	42d0 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4384:	f841 5c10 	str.w	r5, [r1, #-16]
    4388:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    438c:	69e0      	ldr	r0, [r4, #28]
    438e:	6163      	str	r3, [r4, #20]
    4390:	3914      	subs	r1, #20
    4392:	f005 fbe0 	bl	9b56 <onoff_request>
    4396:	e79b      	b.n	42d0 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    4398:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    439a:	f065 007f 	orn	r0, r5, #127	; 0x7f
    439e:	b2c0      	uxtb	r0, r0
    43a0:	f7ff fd4a 	bl	3e38 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    43a4:	7a03      	ldrb	r3, [r0, #8]
    43a6:	b113      	cbz	r3, 43ae <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    43a8:	7a40      	ldrb	r0, [r0, #9]
    43aa:	f003 fc27 	bl	7bfc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    43ae:	3501      	adds	r5, #1
    43b0:	2d08      	cmp	r5, #8
    43b2:	d1f2      	bne.n	439a <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
    43b4:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    43b8:	b11b      	cbz	r3, 43c2 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    43ba:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    43be:	f003 fc1d 	bl	7bfc <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    43c2:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    43c4:	b2e8      	uxtb	r0, r5
    43c6:	f7ff fd37 	bl	3e38 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    43ca:	7a03      	ldrb	r3, [r0, #8]
    43cc:	b113      	cbz	r3, 43d4 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    43ce:	7a40      	ldrb	r0, [r0, #9]
    43d0:	f003 fc14 	bl	7bfc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    43d4:	3501      	adds	r5, #1
    43d6:	2d08      	cmp	r5, #8
    43d8:	d1f4      	bne.n	43c4 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
    43da:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    43de:	b11b      	cbz	r3, 43e8 <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    43e0:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    43e4:	f003 fc0a 	bl	7bfc <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    43e8:	2001      	movs	r0, #1
    43ea:	f002 ff81 	bl	72f0 <nrfx_usbd_start>
		ctx->ready = true;
    43ee:	2301      	movs	r3, #1
    43f0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    43f4:	6823      	ldr	r3, [r4, #0]
    43f6:	2b00      	cmp	r3, #0
    43f8:	f43f af6a 	beq.w	42d0 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    43fc:	2100      	movs	r1, #0
    43fe:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4400:	4798      	blx	r3
    4402:	e765      	b.n	42d0 <usbd_work_handler+0xc4>
		ctx->ready = false;
    4404:	2500      	movs	r5, #0
    4406:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    440a:	f003 fb85 	bl	7b18 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    440e:	f7ff fe1b 	bl	4048 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4412:	6823      	ldr	r3, [r4, #0]
    4414:	2b00      	cmp	r3, #0
    4416:	f43f af5b 	beq.w	42d0 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    441a:	4629      	mov	r1, r5
    441c:	2004      	movs	r0, #4
    441e:	e7ef      	b.n	4400 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
    4420:	2b00      	cmp	r3, #0
    4422:	f43f af55 	beq.w	42d0 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    4426:	f003 fb8f 	bl	7b48 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    442a:	6823      	ldr	r3, [r4, #0]
    442c:	2b00      	cmp	r3, #0
    442e:	f43f af4f 	beq.w	42d0 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4432:	2100      	movs	r1, #0
    4434:	2005      	movs	r0, #5
    4436:	e7e3      	b.n	4400 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
    4438:	6822      	ldr	r2, [r4, #0]
    443a:	2a00      	cmp	r2, #0
    443c:	f43f af48 	beq.w	42d0 <usbd_work_handler+0xc4>
    4440:	2b00      	cmp	r3, #0
    4442:	f43f af45 	beq.w	42d0 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4446:	2100      	movs	r1, #0
    4448:	2006      	movs	r0, #6
    444a:	4790      	blx	r2
    444c:	e740      	b.n	42d0 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    444e:	f107 0510 	add.w	r5, r7, #16
    4452:	f04f 33ff 	mov.w	r3, #4294967295
    4456:	f04f 32ff 	mov.w	r2, #4294967295
    445a:	4628      	mov	r0, r5
    445c:	f006 fb68 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4460:	f7ff fea0 	bl	41a4 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4464:	4628      	mov	r0, r5
    4466:	f006 fb65 	bl	ab34 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    446a:	f857 3c28 	ldr.w	r3, [r7, #-40]
    446e:	2b00      	cmp	r3, #0
    4470:	f43f af2e 	beq.w	42d0 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4474:	2100      	movs	r1, #0
    4476:	2001      	movs	r0, #1
    4478:	e7c2      	b.n	4400 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
    447a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    447e:	b17b      	cbz	r3, 44a0 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
    4480:	2501      	movs	r5, #1
    4482:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4486:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    448a:	f7ff fd4d 	bl	3f28 <usbd_evt_alloc>
		if (!ev) {
    448e:	b138      	cbz	r0, 44a0 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
    4490:	4a0d      	ldr	r2, [pc, #52]	; (44c8 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
    4492:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4494:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4496:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4498:	f7ff fcfe 	bl	3e98 <usbd_evt_put>
		usbd_work_schedule();
    449c:	f7ff fd02 	bl	3ea4 <usbd_work_schedule>
			if (ctx->status_cb) {
    44a0:	f857 3c28 	ldr.w	r3, [r7, #-40]
    44a4:	2b00      	cmp	r3, #0
    44a6:	f43f af13 	beq.w	42d0 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    44aa:	2100      	movs	r1, #0
    44ac:	200a      	movs	r0, #10
    44ae:	e7a7      	b.n	4400 <usbd_work_handler+0x1f4>
    44b0:	20001eb0 	.word	0x20001eb0
    44b4:	2000028c 	.word	0x2000028c
    44b8:	40027000 	.word	0x40027000
    44bc:	20001eb4 	.word	0x20001eb4
    44c0:	20001ee8 	.word	0x20001ee8
    44c4:	20001ed0 	.word	0x20001ed0
    44c8:	2000211c 	.word	0x2000211c
	nrfx_power_usbevt_disable();
    44cc:	f008 fbeb 	bl	cca6 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    44d0:	f003 fb22 	bl	7b18 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    44d4:	f002 fe5c 	bl	7190 <nrfx_usbd_uninit>
	usbd_evt_flush();
    44d8:	f7ff fd18 	bl	3f0c <usbd_evt_flush>
	ret = eps_ctx_init();
    44dc:	f7ff fe62 	bl	41a4 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    44e0:	f008 fbda 	bl	cc98 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    44e4:	4801      	ldr	r0, [pc, #4]	; (44ec <usbd_work_handler+0x2e0>)
    44e6:	f002 ff33 	bl	7350 <nrfx_usbd_init>
}
    44ea:	e6f1      	b.n	42d0 <usbd_work_handler+0xc4>
    44ec:	00004089 	.word	0x00004089

000044f0 <usb_dc_attach>:
{
    44f0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    44f2:	4d1a      	ldr	r5, [pc, #104]	; (455c <usb_dc_attach+0x6c>)
    44f4:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    44f8:	bb5c      	cbnz	r4, 4552 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    44fa:	f105 0038 	add.w	r0, r5, #56	; 0x38
    44fe:	f008 fd11 	bl	cf24 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4502:	4620      	mov	r0, r4
    4504:	f000 fb8c 	bl	4c20 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4508:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    450a:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    450c:	2101      	movs	r1, #1
    450e:	2027      	movs	r0, #39	; 0x27
    4510:	f7ff f924 	bl	375c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    4514:	4812      	ldr	r0, [pc, #72]	; (4560 <usb_dc_attach+0x70>)
    4516:	f002 ff1b 	bl	7350 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    451a:	4b12      	ldr	r3, [pc, #72]	; (4564 <usb_dc_attach+0x74>)
    451c:	4298      	cmp	r0, r3
    451e:	d11a      	bne.n	4556 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    4520:	f008 fbba 	bl	cc98 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4524:	f7ff fe3e 	bl	41a4 <eps_ctx_init>
	if (ret == 0) {
    4528:	4604      	mov	r4, r0
    452a:	b910      	cbnz	r0, 4532 <usb_dc_attach+0x42>
		ctx->attached = true;
    452c:	2301      	movs	r3, #1
    452e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4532:	4b0d      	ldr	r3, [pc, #52]	; (4568 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	b10b      	cbz	r3, 453c <usb_dc_attach+0x4c>
		usbd_work_schedule();
    4538:	f7ff fcb4 	bl	3ea4 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    453c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4540:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    4544:	07db      	lsls	r3, r3, #31
    4546:	d502      	bpl.n	454e <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4548:	2000      	movs	r0, #0
    454a:	f7ff fd63 	bl	4014 <usb_dc_power_event_handler>
}
    454e:	4620      	mov	r0, r4
    4550:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4552:	2400      	movs	r4, #0
    4554:	e7fb      	b.n	454e <usb_dc_attach+0x5e>
		return -EIO;
    4556:	f06f 0404 	mvn.w	r4, #4
    455a:	e7f8      	b.n	454e <usb_dc_attach+0x5e>
    455c:	20001eb0 	.word	0x20001eb0
    4560:	00004089 	.word	0x00004089
    4564:	0bad0000 	.word	0x0bad0000
    4568:	2000030c 	.word	0x2000030c

0000456c <usb_dc_detach>:
{
    456c:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    456e:	4821      	ldr	r0, [pc, #132]	; (45f4 <usb_dc_detach+0x88>)
    4570:	f04f 32ff 	mov.w	r2, #4294967295
    4574:	f04f 33ff 	mov.w	r3, #4294967295
    4578:	f006 fada 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
	usbd_evt_flush();
    457c:	f7ff fcc6 	bl	3f0c <usbd_evt_flush>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4580:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4582:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4586:	b2c0      	uxtb	r0, r0
    4588:	f7ff fc56 	bl	3e38 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    458c:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    458e:	2220      	movs	r2, #32
    4590:	2100      	movs	r1, #0
    4592:	f006 fab1 	bl	aaf8 <memset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4596:	2c08      	cmp	r4, #8
    4598:	d1f3      	bne.n	4582 <usb_dc_detach+0x16>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    459a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    459c:	b2e0      	uxtb	r0, r4
    459e:	f7ff fc4b 	bl	3e38 <endpoint_ctx>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    45a2:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    45a4:	2220      	movs	r2, #32
    45a6:	2100      	movs	r1, #0
    45a8:	f006 faa6 	bl	aaf8 <memset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    45ac:	2c08      	cmp	r4, #8
    45ae:	d1f5      	bne.n	459c <usb_dc_detach+0x30>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    45b0:	2220      	movs	r2, #32
    45b2:	2100      	movs	r1, #0
    45b4:	4810      	ldr	r0, [pc, #64]	; (45f8 <usb_dc_detach+0x8c>)
    45b6:	f006 fa9f 	bl	aaf8 <memset>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    45ba:	2220      	movs	r2, #32
    45bc:	2100      	movs	r1, #0
    45be:	480f      	ldr	r0, [pc, #60]	; (45fc <usb_dc_detach+0x90>)
    45c0:	f006 fa9a 	bl	aaf8 <memset>
	if (nrfx_usbd_is_enabled()) {
    45c4:	f002 feba 	bl	733c <nrfx_usbd_is_enabled>
    45c8:	b108      	cbz	r0, 45ce <usb_dc_detach+0x62>
		nrfx_usbd_disable();
    45ca:	f003 faa5 	bl	7b18 <nrfx_usbd_disable>
	if (nrfx_usbd_is_initialized()) {
    45ce:	f002 fead 	bl	732c <nrfx_usbd_is_initialized>
    45d2:	b108      	cbz	r0, 45d8 <usb_dc_detach+0x6c>
		nrfx_usbd_uninit();
    45d4:	f002 fddc 	bl	7190 <nrfx_usbd_uninit>
	(void)hfxo_stop(ctx);
    45d8:	f7ff fd36 	bl	4048 <hfxo_stop.constprop.0.isra.0>
	nrfx_power_usbevt_disable();
    45dc:	f008 fb63 	bl	cca6 <nrfx_power_usbevt_disable>
	ctx->attached = false;
    45e0:	4807      	ldr	r0, [pc, #28]	; (4600 <usb_dc_detach+0x94>)
    45e2:	2400      	movs	r4, #0
    45e4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    45e8:	3038      	adds	r0, #56	; 0x38
    45ea:	f006 faa3 	bl	ab34 <k_mutex_unlock.isra.0>
}
    45ee:	4620      	mov	r0, r4
    45f0:	bd10      	pop	{r4, pc}
    45f2:	bf00      	nop
    45f4:	20001ee8 	.word	0x20001ee8
    45f8:	20001ffc 	.word	0x20001ffc
    45fc:	2000211c 	.word	0x2000211c
    4600:	20001eb0 	.word	0x20001eb0

00004604 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4604:	4b07      	ldr	r3, [pc, #28]	; (4624 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4606:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    460a:	b13a      	cbz	r2, 461c <usb_dc_set_address+0x18>
    460c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    4610:	2b00      	cmp	r3, #0
    4612:	bf14      	ite	ne
    4614:	2000      	movne	r0, #0
    4616:	f06f 0012 	mvneq.w	r0, #18
    461a:	4770      	bx	lr
    461c:	f06f 0012 	mvn.w	r0, #18
}
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	20001eb0 	.word	0x20001eb0

00004628 <usb_dc_ep_configure>:
{
    4628:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    462a:	4b0f      	ldr	r3, [pc, #60]	; (4668 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
    462c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4630:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4632:	b1b3      	cbz	r3, 4662 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4634:	7805      	ldrb	r5, [r0, #0]
    4636:	4628      	mov	r0, r5
    4638:	f7ff fbfe 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    463c:	b910      	cbnz	r0, 4644 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    463e:	f06f 0015 	mvn.w	r0, #21
}
    4642:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4644:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4646:	7923      	ldrb	r3, [r4, #4]
    4648:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    464a:	8861      	ldrh	r1, [r4, #2]
    464c:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    464e:	072b      	lsls	r3, r5, #28
    4650:	d402      	bmi.n	4658 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4652:	1e4b      	subs	r3, r1, #1
    4654:	420b      	tst	r3, r1
    4656:	d1f2      	bne.n	463e <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4658:	4628      	mov	r0, r5
    465a:	f008 fba7 	bl	cdac <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    465e:	2000      	movs	r0, #0
    4660:	e7ef      	b.n	4642 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    4662:	f06f 0012 	mvn.w	r0, #18
    4666:	e7ec      	b.n	4642 <usb_dc_ep_configure+0x1a>
    4668:	20001eb0 	.word	0x20001eb0

0000466c <usb_dc_ep_set_stall>:
{
    466c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    466e:	4b12      	ldr	r3, [pc, #72]	; (46b8 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    4670:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4674:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4676:	b1ca      	cbz	r2, 46ac <usb_dc_ep_set_stall+0x40>
    4678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    467c:	b1b3      	cbz	r3, 46ac <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    467e:	f7ff fbdb 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    4682:	4604      	mov	r4, r0
    4684:	b1a8      	cbz	r0, 46b2 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    4686:	7a83      	ldrb	r3, [r0, #10]
    4688:	2b01      	cmp	r3, #1
    468a:	d012      	beq.n	46b2 <usb_dc_ep_set_stall+0x46>
    468c:	d907      	bls.n	469e <usb_dc_ep_set_stall+0x32>
    468e:	3b02      	subs	r3, #2
    4690:	2b01      	cmp	r3, #1
    4692:	d907      	bls.n	46a4 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4694:	6963      	ldr	r3, [r4, #20]
    4696:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    4698:	2000      	movs	r0, #0
    469a:	60e0      	str	r0, [r4, #12]
}
    469c:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    469e:	f003 f8d3 	bl	7848 <nrfx_usbd_setup_stall>
		break;
    46a2:	e7f7      	b.n	4694 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    46a4:	4628      	mov	r0, r5
    46a6:	f003 f843 	bl	7730 <nrfx_usbd_ep_stall>
		break;
    46aa:	e7f3      	b.n	4694 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    46ac:	f06f 0012 	mvn.w	r0, #18
    46b0:	e7f4      	b.n	469c <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    46b2:	f06f 0015 	mvn.w	r0, #21
    46b6:	e7f1      	b.n	469c <usb_dc_ep_set_stall+0x30>
    46b8:	20001eb0 	.word	0x20001eb0

000046bc <usb_dc_ep_clear_stall>:
{
    46bc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    46be:	4b0e      	ldr	r3, [pc, #56]	; (46f8 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    46c0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    46c4:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    46c6:	b182      	cbz	r2, 46ea <usb_dc_ep_clear_stall+0x2e>
    46c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    46cc:	b16b      	cbz	r3, 46ea <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    46ce:	f7ff fbb3 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    46d2:	b168      	cbz	r0, 46f0 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    46d4:	f015 0408 	ands.w	r4, r5, #8
    46d8:	d10a      	bne.n	46f0 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    46da:	4628      	mov	r0, r5
    46dc:	f003 f84a 	bl	7774 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    46e0:	4628      	mov	r0, r5
    46e2:	f003 fadf 	bl	7ca4 <nrfx_usbd_ep_stall_clear>
	return 0;
    46e6:	4620      	mov	r0, r4
}
    46e8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    46ea:	f06f 0012 	mvn.w	r0, #18
    46ee:	e7fb      	b.n	46e8 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    46f0:	f06f 0015 	mvn.w	r0, #21
    46f4:	e7f8      	b.n	46e8 <usb_dc_ep_clear_stall+0x2c>
    46f6:	bf00      	nop
    46f8:	20001eb0 	.word	0x20001eb0

000046fc <usb_dc_ep_is_stalled>:
{
    46fc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    46fe:	4b0c      	ldr	r3, [pc, #48]	; (4730 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4700:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4704:	4605      	mov	r5, r0
    4706:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4708:	b162      	cbz	r2, 4724 <usb_dc_ep_is_stalled+0x28>
    470a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    470e:	b14b      	cbz	r3, 4724 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4710:	f7ff fb92 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    4714:	b148      	cbz	r0, 472a <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4716:	b144      	cbz	r4, 472a <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4718:	4628      	mov	r0, r5
    471a:	f003 f811 	bl	7740 <nrfx_usbd_ep_stall_check>
    471e:	7020      	strb	r0, [r4, #0]
	return 0;
    4720:	2000      	movs	r0, #0
}
    4722:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4724:	f06f 0012 	mvn.w	r0, #18
    4728:	e7fb      	b.n	4722 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    472a:	f06f 0015 	mvn.w	r0, #21
    472e:	e7f8      	b.n	4722 <usb_dc_ep_is_stalled+0x26>
    4730:	20001eb0 	.word	0x20001eb0

00004734 <usb_dc_ep_enable>:
{
    4734:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4736:	4e13      	ldr	r6, [pc, #76]	; (4784 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4738:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    473c:	4604      	mov	r4, r0
	if (!dev_attached()) {
    473e:	b1c3      	cbz	r3, 4772 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4740:	f7ff fb7a 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    4744:	4605      	mov	r5, r0
    4746:	b1b8      	cbz	r0, 4778 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4748:	0723      	lsls	r3, r4, #28
    474a:	d405      	bmi.n	4758 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    474c:	4620      	mov	r0, r4
    474e:	f003 f811 	bl	7774 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4752:	4620      	mov	r0, r4
    4754:	f003 faa6 	bl	7ca4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4758:	7a2b      	ldrb	r3, [r5, #8]
    475a:	b983      	cbnz	r3, 477e <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    475c:	2301      	movs	r3, #1
    475e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4760:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    4764:	b90b      	cbnz	r3, 476a <usb_dc_ep_enable+0x36>
	return 0;
    4766:	2000      	movs	r0, #0
}
    4768:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    476a:	4620      	mov	r0, r4
    476c:	f003 fa46 	bl	7bfc <nrfx_usbd_ep_enable>
    4770:	e7f9      	b.n	4766 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    4772:	f06f 0012 	mvn.w	r0, #18
    4776:	e7f7      	b.n	4768 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4778:	f06f 0015 	mvn.w	r0, #21
    477c:	e7f4      	b.n	4768 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    477e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4782:	e7f1      	b.n	4768 <usb_dc_ep_enable+0x34>
    4784:	20001eb0 	.word	0x20001eb0

00004788 <usb_dc_ep_disable>:
{
    4788:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    478a:	4b11      	ldr	r3, [pc, #68]	; (47d0 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    478c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4790:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
    4792:	b19a      	cbz	r2, 47bc <usb_dc_ep_disable+0x34>
    4794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4798:	b183      	cbz	r3, 47bc <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    479a:	f7ff fb4d 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    479e:	4605      	mov	r5, r0
    47a0:	b178      	cbz	r0, 47c2 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    47a2:	7a03      	ldrb	r3, [r0, #8]
    47a4:	b183      	cbz	r3, 47c8 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    47a6:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    47a8:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    47aa:	f003 f9fb 	bl	7ba4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    47ae:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    47b0:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    47b2:	f006 f9aa 	bl	ab0a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    47b6:	722c      	strb	r4, [r5, #8]
	return 0;
    47b8:	4620      	mov	r0, r4
}
    47ba:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    47bc:	f06f 0012 	mvn.w	r0, #18
    47c0:	e7fb      	b.n	47ba <usb_dc_ep_disable+0x32>
		return -EINVAL;
    47c2:	f06f 0015 	mvn.w	r0, #21
    47c6:	e7f8      	b.n	47ba <usb_dc_ep_disable+0x32>
		return -EALREADY;
    47c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    47cc:	e7f5      	b.n	47ba <usb_dc_ep_disable+0x32>
    47ce:	bf00      	nop
    47d0:	20001eb0 	.word	0x20001eb0

000047d4 <usb_dc_ep_write>:
{
    47d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    47d8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 48c0 <usb_dc_ep_write+0xec>
{
    47dc:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    47de:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    47e2:	b085      	sub	sp, #20
    47e4:	4607      	mov	r7, r0
    47e6:	4689      	mov	r9, r1
    47e8:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    47ea:	2b00      	cmp	r3, #0
    47ec:	d061      	beq.n	48b2 <usb_dc_ep_write+0xde>
    47ee:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    47f2:	2b00      	cmp	r3, #0
    47f4:	d05d      	beq.n	48b2 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    47f6:	0603      	lsls	r3, r0, #24
    47f8:	d55e      	bpl.n	48b8 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    47fa:	f7ff fb1d 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    47fe:	4604      	mov	r4, r0
    4800:	2800      	cmp	r0, #0
    4802:	d059      	beq.n	48b8 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    4804:	7a03      	ldrb	r3, [r0, #8]
    4806:	2b00      	cmp	r3, #0
    4808:	d056      	beq.n	48b8 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    480a:	f04f 33ff 	mov.w	r3, #4294967295
    480e:	f04f 32ff 	mov.w	r2, #4294967295
    4812:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4816:	f006 f98b 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    481a:	7fa3      	ldrb	r3, [r4, #30]
    481c:	b14b      	cbz	r3, 4832 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    481e:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4822:	f006 f987 	bl	ab34 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4826:	f06f 040a 	mvn.w	r4, #10
}
    482a:	4620      	mov	r0, r4
    482c:	b005      	add	sp, #20
    482e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4832:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    4834:	b1c5      	cbz	r5, 4868 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4836:	b33b      	cbz	r3, 4888 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    4838:	2301      	movs	r3, #1
    483a:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    483c:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4840:	a901      	add	r1, sp, #4
    4842:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4844:	e9cd 9501 	strd	r9, r5, [sp, #4]
    4848:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    484c:	f002 fdc2 	bl	73d4 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4850:	4b1c      	ldr	r3, [pc, #112]	; (48c4 <usb_dc_ep_write+0xf0>)
    4852:	4298      	cmp	r0, r3
    4854:	d029      	beq.n	48aa <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    4856:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    485a:	bb1e      	cbnz	r6, 48a4 <usb_dc_ep_write+0xd0>
		result = -EIO;
    485c:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4860:	4819      	ldr	r0, [pc, #100]	; (48c8 <usb_dc_ep_write+0xf4>)
    4862:	f006 f967 	bl	ab34 <k_mutex_unlock.isra.0>
	return result;
    4866:	e7e0      	b.n	482a <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    4868:	7fe2      	ldrb	r2, [r4, #31]
    486a:	b102      	cbz	r2, 486e <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    486c:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    486e:	2b00      	cmp	r3, #0
    4870:	d1e2      	bne.n	4838 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4872:	f002 fff1 	bl	7858 <nrfx_usbd_last_setup_dir_get>
    4876:	42b8      	cmp	r0, r7
    4878:	d0de      	beq.n	4838 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    487a:	f002 ffdd 	bl	7838 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    487e:	4812      	ldr	r0, [pc, #72]	; (48c8 <usb_dc_ep_write+0xf4>)
    4880:	f006 f958 	bl	ab34 <k_mutex_unlock.isra.0>
		return 0;
    4884:	2400      	movs	r4, #0
    4886:	e7d0      	b.n	482a <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4888:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    488c:	42ab      	cmp	r3, r5
    488e:	d9f0      	bls.n	4872 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4890:	6862      	ldr	r2, [r4, #4]
    4892:	fbb5 f3f2 	udiv	r3, r5, r2
    4896:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    489a:	2b00      	cmp	r3, #0
    489c:	d1e9      	bne.n	4872 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    489e:	2301      	movs	r3, #1
    48a0:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    48a2:	e7e6      	b.n	4872 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    48a4:	f8c6 8000 	str.w	r8, [r6]
    48a8:	e7d8      	b.n	485c <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    48aa:	b106      	cbz	r6, 48ae <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    48ac:	6035      	str	r5, [r6, #0]
	int result = 0;
    48ae:	2400      	movs	r4, #0
    48b0:	e7d6      	b.n	4860 <usb_dc_ep_write+0x8c>
		return -ENODEV;
    48b2:	f06f 0412 	mvn.w	r4, #18
    48b6:	e7b8      	b.n	482a <usb_dc_ep_write+0x56>
		return -EINVAL;
    48b8:	f06f 0415 	mvn.w	r4, #21
    48bc:	e7b5      	b.n	482a <usb_dc_ep_write+0x56>
    48be:	bf00      	nop
    48c0:	20001eb0 	.word	0x20001eb0
    48c4:	0bad0000 	.word	0x0bad0000
    48c8:	20001ee8 	.word	0x20001ee8

000048cc <usb_dc_ep_read_wait>:
{
    48cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48d0:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    48d2:	4b20      	ldr	r3, [pc, #128]	; (4954 <usb_dc_ep_read_wait+0x88>)
{
    48d4:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    48d6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    48da:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    48dc:	2a00      	cmp	r2, #0
    48de:	d033      	beq.n	4948 <usb_dc_ep_read_wait+0x7c>
    48e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    48e4:	b383      	cbz	r3, 4948 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    48e6:	0603      	lsls	r3, r0, #24
    48e8:	d431      	bmi.n	494e <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    48ea:	b901      	cbnz	r1, 48ee <usb_dc_ep_read_wait+0x22>
    48ec:	bb7f      	cbnz	r7, 494e <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    48ee:	f7ff faa3 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    48f2:	4604      	mov	r4, r0
    48f4:	b358      	cbz	r0, 494e <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    48f6:	7a03      	ldrb	r3, [r0, #8]
    48f8:	b34b      	cbz	r3, 494e <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    48fa:	f04f 33ff 	mov.w	r3, #4294967295
    48fe:	4816      	ldr	r0, [pc, #88]	; (4958 <usb_dc_ep_read_wait+0x8c>)
    4900:	f04f 32ff 	mov.w	r2, #4294967295
    4904:	f006 f914 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4908:	68e3      	ldr	r3, [r4, #12]
    490a:	429f      	cmp	r7, r3
    490c:	46b8      	mov	r8, r7
    490e:	bf28      	it	cs
    4910:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    4912:	b946      	cbnz	r6, 4926 <usb_dc_ep_read_wait+0x5a>
    4914:	b93f      	cbnz	r7, 4926 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    4916:	b105      	cbz	r5, 491a <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    4918:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    491a:	480f      	ldr	r0, [pc, #60]	; (4958 <usb_dc_ep_read_wait+0x8c>)
    491c:	f006 f90a 	bl	ab34 <k_mutex_unlock.isra.0>
		return 0;
    4920:	2000      	movs	r0, #0
}
    4922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    4926:	69a1      	ldr	r1, [r4, #24]
    4928:	4642      	mov	r2, r8
    492a:	4630      	mov	r0, r6
    492c:	f006 f8d9 	bl	aae2 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    4930:	69a3      	ldr	r3, [r4, #24]
    4932:	4443      	add	r3, r8
    4934:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    4936:	68e3      	ldr	r3, [r4, #12]
    4938:	eba3 0308 	sub.w	r3, r3, r8
    493c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    493e:	2d00      	cmp	r5, #0
    4940:	d0eb      	beq.n	491a <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    4942:	f8c5 8000 	str.w	r8, [r5]
    4946:	e7e8      	b.n	491a <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    4948:	f06f 0012 	mvn.w	r0, #18
    494c:	e7e9      	b.n	4922 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    494e:	f06f 0015 	mvn.w	r0, #21
    4952:	e7e6      	b.n	4922 <usb_dc_ep_read_wait+0x56>
    4954:	20001eb0 	.word	0x20001eb0
    4958:	20001ee8 	.word	0x20001ee8

0000495c <usb_dc_ep_read_continue>:
{
    495c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    495e:	4d1e      	ldr	r5, [pc, #120]	; (49d8 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    4960:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    4964:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    4966:	b382      	cbz	r2, 49ca <usb_dc_ep_read_continue+0x6e>
    4968:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    496c:	b36a      	cbz	r2, 49ca <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    496e:	061b      	lsls	r3, r3, #24
    4970:	d42e      	bmi.n	49d0 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    4972:	f7ff fa61 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    4976:	4604      	mov	r4, r0
    4978:	b350      	cbz	r0, 49d0 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    497a:	7a03      	ldrb	r3, [r0, #8]
    497c:	b343      	cbz	r3, 49d0 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    497e:	f04f 33ff 	mov.w	r3, #4294967295
    4982:	f04f 32ff 	mov.w	r2, #4294967295
    4986:	f105 0038 	add.w	r0, r5, #56	; 0x38
    498a:	f006 f8d1 	bl	ab30 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    498e:	68e3      	ldr	r3, [r4, #12]
    4990:	b9b3      	cbnz	r3, 49c0 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    4992:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4994:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4996:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4998:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    499a:	7f63      	ldrb	r3, [r4, #29]
    499c:	b183      	cbz	r3, 49c0 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    499e:	f7ff fac3 	bl	3f28 <usbd_evt_alloc>
			if (!ev) {
    49a2:	b930      	cbnz	r0, 49b2 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    49a4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    49a8:	f006 f8c4 	bl	ab34 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    49ac:	f06f 000b 	mvn.w	r0, #11
}
    49b0:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    49b2:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    49b4:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    49b6:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    49b8:	f7ff fa6e 	bl	3e98 <usbd_evt_put>
			usbd_work_schedule();
    49bc:	f7ff fa72 	bl	3ea4 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    49c0:	4806      	ldr	r0, [pc, #24]	; (49dc <usb_dc_ep_read_continue+0x80>)
    49c2:	f006 f8b7 	bl	ab34 <k_mutex_unlock.isra.0>
	return 0;
    49c6:	2000      	movs	r0, #0
    49c8:	e7f2      	b.n	49b0 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    49ca:	f06f 0012 	mvn.w	r0, #18
    49ce:	e7ef      	b.n	49b0 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    49d0:	f06f 0015 	mvn.w	r0, #21
    49d4:	e7ec      	b.n	49b0 <usb_dc_ep_read_continue+0x54>
    49d6:	bf00      	nop
    49d8:	20001eb0 	.word	0x20001eb0
    49dc:	20001ee8 	.word	0x20001ee8

000049e0 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    49e0:	4b08      	ldr	r3, [pc, #32]	; (4a04 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    49e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    49e6:	b510      	push	{r4, lr}
    49e8:	460c      	mov	r4, r1
	if (!dev_attached()) {
    49ea:	b12b      	cbz	r3, 49f8 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    49ec:	f7ff fa24 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    49f0:	b128      	cbz	r0, 49fe <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    49f2:	6004      	str	r4, [r0, #0]
	return 0;
    49f4:	2000      	movs	r0, #0
}
    49f6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    49f8:	f06f 0012 	mvn.w	r0, #18
    49fc:	e7fb      	b.n	49f6 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    49fe:	f06f 0015 	mvn.w	r0, #21
    4a02:	e7f8      	b.n	49f6 <usb_dc_ep_set_callback+0x16>
    4a04:	20001eb0 	.word	0x20001eb0

00004a08 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4a08:	4b01      	ldr	r3, [pc, #4]	; (4a10 <usb_dc_set_status_callback+0x8>)
    4a0a:	6018      	str	r0, [r3, #0]
}
    4a0c:	4770      	bx	lr
    4a0e:	bf00      	nop
    4a10:	20001eb0 	.word	0x20001eb0

00004a14 <usb_dc_ep_mps>:
{
    4a14:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    4a16:	4b07      	ldr	r3, [pc, #28]	; (4a34 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    4a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4a1c:	b123      	cbz	r3, 4a28 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    4a1e:	f7ff fa0b 	bl	3e38 <endpoint_ctx>
	if (!ep_ctx) {
    4a22:	b120      	cbz	r0, 4a2e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    4a24:	6840      	ldr	r0, [r0, #4]
}
    4a26:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4a28:	f06f 0012 	mvn.w	r0, #18
    4a2c:	e7fb      	b.n	4a26 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    4a2e:	f06f 0015 	mvn.w	r0, #21
    4a32:	e7f8      	b.n	4a26 <usb_dc_ep_mps+0x12>
    4a34:	20001eb0 	.word	0x20001eb0

00004a38 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4a38:	4b08      	ldr	r3, [pc, #32]	; (4a5c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4a3a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4a3c:	1ac3      	subs	r3, r0, r3
{
    4a3e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4a40:	4907      	ldr	r1, [pc, #28]	; (4a60 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    4a42:	109b      	asrs	r3, r3, #2
{
    4a44:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4a46:	4359      	muls	r1, r3
    4a48:	4806      	ldr	r0, [pc, #24]	; (4a64 <onoff_stop+0x2c>)
    4a4a:	2240      	movs	r2, #64	; 0x40
    4a4c:	f006 f8b7 	bl	abbe <stop>
	notify(mgr, res);
    4a50:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4a52:	4601      	mov	r1, r0
	notify(mgr, res);
    4a54:	4620      	mov	r0, r4
}
    4a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4a5a:	4718      	bx	r3
    4a5c:	20002754 	.word	0x20002754
    4a60:	b6db6db7 	.word	0xb6db6db7
    4a64:	0000d4a8 	.word	0x0000d4a8

00004a68 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4a6a:	4c0c      	ldr	r4, [pc, #48]	; (4a9c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a6c:	4a0c      	ldr	r2, [pc, #48]	; (4aa0 <onoff_start+0x38>)
    4a6e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    4a70:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a72:	9300      	str	r3, [sp, #0]
{
    4a74:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a76:	460b      	mov	r3, r1
    4a78:	490a      	ldr	r1, [pc, #40]	; (4aa4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4a7a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a7c:	4361      	muls	r1, r4
{
    4a7e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a80:	4809      	ldr	r0, [pc, #36]	; (4aa8 <onoff_start+0x40>)
    4a82:	f006 f8c9 	bl	ac18 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4a86:	1e01      	subs	r1, r0, #0
    4a88:	da05      	bge.n	4a96 <onoff_start+0x2e>
		notify(mgr, err);
    4a8a:	4630      	mov	r0, r6
    4a8c:	462b      	mov	r3, r5
	}
}
    4a8e:	b002      	add	sp, #8
    4a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4a94:	4718      	bx	r3
}
    4a96:	b002      	add	sp, #8
    4a98:	bd70      	pop	{r4, r5, r6, pc}
    4a9a:	bf00      	nop
    4a9c:	20002754 	.word	0x20002754
    4aa0:	0000ac85 	.word	0x0000ac85
    4aa4:	b6db6db7 	.word	0xb6db6db7
    4aa8:	0000d4a8 	.word	0x0000d4a8

00004aac <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4aac:	2200      	movs	r2, #0
{
    4aae:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ab0:	2101      	movs	r1, #1
{
    4ab2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ab4:	4610      	mov	r0, r2
    4ab6:	f7fe fe51 	bl	375c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4aba:	2000      	movs	r0, #0
    4abc:	f7fe fe1e 	bl	36fc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4ac0:	480f      	ldr	r0, [pc, #60]	; (4b00 <clk_init+0x54>)
    4ac2:	f001 fcb1 	bl	6428 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4ac6:	4b0f      	ldr	r3, [pc, #60]	; (4b04 <clk_init+0x58>)
    4ac8:	4298      	cmp	r0, r3
    4aca:	d115      	bne.n	4af8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4acc:	f001 fcbc 	bl	6448 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4ad0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4ad2:	490d      	ldr	r1, [pc, #52]	; (4b08 <clk_init+0x5c>)
    4ad4:	4630      	mov	r0, r6
    4ad6:	f005 f82b 	bl	9b30 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4ada:	2800      	cmp	r0, #0
    4adc:	db0b      	blt.n	4af6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    4ade:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4ae0:	4909      	ldr	r1, [pc, #36]	; (4b08 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4ae2:	2501      	movs	r5, #1
    4ae4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4ae6:	f104 001c 	add.w	r0, r4, #28
    4aea:	f005 f821 	bl	9b30 <onoff_manager_init>
		if (err < 0) {
    4aee:	2800      	cmp	r0, #0
    4af0:	db01      	blt.n	4af6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4af2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4af4:	2000      	movs	r0, #0
}
    4af6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4af8:	f06f 0004 	mvn.w	r0, #4
    4afc:	e7fb      	b.n	4af6 <clk_init+0x4a>
    4afe:	bf00      	nop
    4b00:	00004b41 	.word	0x00004b41
    4b04:	0bad0000 	.word	0x0bad0000
    4b08:	0000d844 	.word	0x0000d844

00004b0c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4b0c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4b0e:	230c      	movs	r3, #12
    4b10:	4809      	ldr	r0, [pc, #36]	; (4b38 <clkstarted_handle.constprop.0+0x2c>)
    4b12:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4b14:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4b16:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4b18:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4b1c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4b1e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4b20:	4418      	add	r0, r3
	sub_data->cb = NULL;
    4b22:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4b24:	f006 f838 	bl	ab98 <set_on_state>
	if (callback) {
    4b28:	b12d      	cbz	r5, 4b36 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b2a:	4632      	mov	r2, r6
    4b2c:	462b      	mov	r3, r5
    4b2e:	4803      	ldr	r0, [pc, #12]	; (4b3c <clkstarted_handle.constprop.0+0x30>)
}
    4b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b34:	4718      	bx	r3
}
    4b36:	bd70      	pop	{r4, r5, r6, pc}
    4b38:	20002754 	.word	0x20002754
    4b3c:	0000d4a8 	.word	0x0000d4a8

00004b40 <clock_event_handler>:
	switch (event) {
    4b40:	b110      	cbz	r0, 4b48 <clock_event_handler+0x8>
    4b42:	2801      	cmp	r0, #1
    4b44:	d004      	beq.n	4b50 <clock_event_handler+0x10>
    4b46:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4b48:	4b03      	ldr	r3, [pc, #12]	; (4b58 <clock_event_handler+0x18>)
    4b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b4c:	075b      	lsls	r3, r3, #29
    4b4e:	d101      	bne.n	4b54 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4b50:	f7ff bfdc 	b.w	4b0c <clkstarted_handle.constprop.0>
}
    4b54:	4770      	bx	lr
    4b56:	bf00      	nop
    4b58:	20002754 	.word	0x20002754

00004b5c <generic_hfclk_start>:
{
    4b5c:	b508      	push	{r3, lr}
	__asm__ volatile(
    4b5e:	f04f 0320 	mov.w	r3, #32
    4b62:	f3ef 8111 	mrs	r1, BASEPRI
    4b66:	f383 8812 	msr	BASEPRI_MAX, r3
    4b6a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4b6e:	4a12      	ldr	r2, [pc, #72]	; (4bb8 <generic_hfclk_start+0x5c>)
    4b70:	6813      	ldr	r3, [r2, #0]
    4b72:	f043 0002 	orr.w	r0, r3, #2
    4b76:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4b78:	07da      	lsls	r2, r3, #31
    4b7a:	d408      	bmi.n	4b8e <generic_hfclk_start+0x32>
	__asm__ volatile(
    4b7c:	f381 8811 	msr	BASEPRI, r1
    4b80:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4b84:	2001      	movs	r0, #1
}
    4b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4b8a:	f007 bfe7 	b.w	cb5c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b92:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b96:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4b9a:	07d3      	lsls	r3, r2, #31
    4b9c:	d5ee      	bpl.n	4b7c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4b9e:	4807      	ldr	r0, [pc, #28]	; (4bbc <generic_hfclk_start+0x60>)
    4ba0:	f005 fffa 	bl	ab98 <set_on_state>
    4ba4:	f381 8811 	msr	BASEPRI, r1
    4ba8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4bac:	2000      	movs	r0, #0
}
    4bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4bb2:	f7ff bfab 	b.w	4b0c <clkstarted_handle.constprop.0>
    4bb6:	bf00      	nop
    4bb8:	200027a4 	.word	0x200027a4
    4bbc:	20002794 	.word	0x20002794

00004bc0 <api_blocking_start>:
{
    4bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4bc2:	2200      	movs	r2, #0
    4bc4:	2301      	movs	r3, #1
    4bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4bca:	4a09      	ldr	r2, [pc, #36]	; (4bf0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4bcc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4bd0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4bd2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4bd6:	f006 f84e 	bl	ac76 <api_start>
	if (err < 0) {
    4bda:	2800      	cmp	r0, #0
    4bdc:	db05      	blt.n	4bea <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4be2:	2300      	movs	r3, #0
    4be4:	4668      	mov	r0, sp
    4be6:	f003 fb91 	bl	830c <z_impl_k_sem_take>
}
    4bea:	b005      	add	sp, #20
    4bec:	f85d fb04 	ldr.w	pc, [sp], #4
    4bf0:	0000aca3 	.word	0x0000aca3

00004bf4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4bf4:	4b09      	ldr	r3, [pc, #36]	; (4c1c <generic_hfclk_stop+0x28>)
    4bf6:	f3bf 8f5b 	dmb	ish
    4bfa:	e853 2f00 	ldrex	r2, [r3]
    4bfe:	f022 0102 	bic.w	r1, r2, #2
    4c02:	e843 1000 	strex	r0, r1, [r3]
    4c06:	2800      	cmp	r0, #0
    4c08:	d1f7      	bne.n	4bfa <generic_hfclk_stop+0x6>
    4c0a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4c0e:	07d3      	lsls	r3, r2, #31
    4c10:	d402      	bmi.n	4c18 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4c12:	2001      	movs	r0, #1
    4c14:	f001 bc26 	b.w	6464 <nrfx_clock_stop>
}
    4c18:	4770      	bx	lr
    4c1a:	bf00      	nop
    4c1c:	200027a4 	.word	0x200027a4

00004c20 <z_nrf_clock_control_get_onoff>:
}
    4c20:	4a02      	ldr	r2, [pc, #8]	; (4c2c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    4c22:	b2c3      	uxtb	r3, r0
}
    4c24:	201c      	movs	r0, #28
    4c26:	fb03 2000 	mla	r0, r3, r0, r2
    4c2a:	4770      	bx	lr
    4c2c:	20002754 	.word	0x20002754

00004c30 <z_nrf_clock_control_lf_on>:
{
    4c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4c34:	4938      	ldr	r1, [pc, #224]	; (4d18 <z_nrf_clock_control_lf_on+0xe8>)
    4c36:	f3bf 8f5b 	dmb	ish
    4c3a:	4607      	mov	r7, r0
    4c3c:	2201      	movs	r2, #1
    4c3e:	e851 3f00 	ldrex	r3, [r1]
    4c42:	e841 2000 	strex	r0, r2, [r1]
    4c46:	2800      	cmp	r0, #0
    4c48:	d1f9      	bne.n	4c3e <z_nrf_clock_control_lf_on+0xe>
    4c4a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4c4e:	b933      	cbnz	r3, 4c5e <z_nrf_clock_control_lf_on+0x2e>
    4c50:	4932      	ldr	r1, [pc, #200]	; (4d1c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    4c52:	4833      	ldr	r0, [pc, #204]	; (4d20 <z_nrf_clock_control_lf_on+0xf0>)
    4c54:	604b      	str	r3, [r1, #4]
    4c56:	60cb      	str	r3, [r1, #12]
    4c58:	608a      	str	r2, [r1, #8]
    4c5a:	f004 ff7c 	bl	9b56 <onoff_request>
	switch (start_mode) {
    4c5e:	1e7b      	subs	r3, r7, #1
    4c60:	2b01      	cmp	r3, #1
    4c62:	d82b      	bhi.n	4cbc <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4c64:	2f01      	cmp	r7, #1
    4c66:	d107      	bne.n	4c78 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c6c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4c70:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4c74:	2b01      	cmp	r3, #1
    4c76:	d021      	beq.n	4cbc <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4c78:	f008 f935 	bl	cee6 <k_is_in_isr>
    4c7c:	4605      	mov	r5, r0
    4c7e:	b9f8      	cbnz	r0, 4cc0 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    4c80:	4b28      	ldr	r3, [pc, #160]	; (4d24 <z_nrf_clock_control_lf_on+0xf4>)
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	b1e3      	cbz	r3, 4cc0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    4c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c8a:	2202      	movs	r2, #2
    4c8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4c90:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c92:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4d28 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4c96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4c9a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4c9e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4ca2:	03d2      	lsls	r2, r2, #15
    4ca4:	d516      	bpl.n	4cd4 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4ca6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4caa:	2b01      	cmp	r3, #1
    4cac:	d001      	beq.n	4cb2 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4cae:	2f01      	cmp	r7, #1
    4cb0:	d110      	bne.n	4cd4 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    4cb2:	b35d      	cbz	r5, 4d0c <z_nrf_clock_control_lf_on+0xdc>
    4cb4:	f386 8811 	msr	BASEPRI, r6
    4cb8:	f3bf 8f6f 	isb	sy
}
    4cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4cc0:	f04f 0320 	mov.w	r3, #32
    4cc4:	f3ef 8611 	mrs	r6, BASEPRI
    4cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    4ccc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4cd0:	2501      	movs	r5, #1
    4cd2:	e7de      	b.n	4c92 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4cd4:	b1ad      	cbz	r5, 4d02 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4cd6:	4630      	mov	r0, r6
    4cd8:	f7fe fd06 	bl	36e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4cdc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d1da      	bne.n	4c9a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4ce4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4ce8:	2a00      	cmp	r2, #0
    4cea:	d0d6      	beq.n	4c9a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4cf0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4cf4:	2301      	movs	r3, #1
    4cf6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4cfa:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cfe:	60a3      	str	r3, [r4, #8]
}
    4d00:	e7cb      	b.n	4c9a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    4d02:	2100      	movs	r1, #0
    4d04:	2021      	movs	r0, #33	; 0x21
    4d06:	f003 ff2f 	bl	8b68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d0a:	e7e7      	b.n	4cdc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    4d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d10:	2202      	movs	r2, #2
    4d12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4d16:	e7d1      	b.n	4cbc <z_nrf_clock_control_lf_on+0x8c>
    4d18:	20002750 	.word	0x20002750
    4d1c:	20002740 	.word	0x20002740
    4d20:	20002770 	.word	0x20002770
    4d24:	20004886 	.word	0x20004886
    4d28:	e000e100 	.word	0xe000e100

00004d2c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4d2c:	b530      	push	{r4, r5, lr}
	return port->config;
    4d2e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4d30:	7b05      	ldrb	r5, [r0, #12]
    4d32:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4d36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
    4d3a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4d3c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4d40:	d104      	bne.n	4d4c <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
    4d42:	4620      	mov	r0, r4
    4d44:	f001 fe3a 	bl	69bc <nrfx_gpiote_trigger_disable>

		return 0;
    4d48:	2000      	movs	r0, #0
    4d4a:	e04a      	b.n	4de2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
    4d4c:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4d4e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4d52:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4d56:	d114      	bne.n	4d82 <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4d5c:	bf0c      	ite	eq
    4d5e:	2304      	moveq	r3, #4
    4d60:	2305      	movne	r3, #5
    4d62:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4d66:	2300      	movs	r3, #0
    4d68:	4619      	mov	r1, r3
    4d6a:	aa02      	add	r2, sp, #8
    4d6c:	4620      	mov	r0, r4
    4d6e:	f001 fc65 	bl	663c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4d72:	4b20      	ldr	r3, [pc, #128]	; (4df4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4d74:	4298      	cmp	r0, r3
    4d76:	d13a      	bne.n	4dee <gpio_nrfx_pin_interrupt_configure+0xc2>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
    4d78:	2101      	movs	r1, #1
    4d7a:	4620      	mov	r0, r4
    4d7c:	f001 fdd6 	bl	692c <nrfx_gpiote_trigger_enable>

	return 0;
    4d80:	e7e2      	b.n	4d48 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4d82:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4d86:	d02e      	beq.n	4de6 <gpio_nrfx_pin_interrupt_configure+0xba>
    4d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4d8c:	bf14      	ite	ne
    4d8e:	2301      	movne	r3, #1
    4d90:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4d92:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4d96:	6883      	ldr	r3, [r0, #8]
    4d98:	40cb      	lsrs	r3, r1
    4d9a:	07d9      	lsls	r1, r3, #31
    4d9c:	d4e3      	bmi.n	4d66 <gpio_nrfx_pin_interrupt_configure+0x3a>
    4d9e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4da2:	d1e0      	bne.n	4d66 <gpio_nrfx_pin_interrupt_configure+0x3a>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4da4:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    4da6:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4da8:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    4dac:	4a12      	ldr	r2, [pc, #72]	; (4df8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4dae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4db2:	bf18      	it	ne
    4db4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4dbc:	07db      	lsls	r3, r3, #31
    4dbe:	d4d2      	bmi.n	4d66 <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4dc0:	f10d 0507 	add.w	r5, sp, #7
    4dc4:	4629      	mov	r1, r5
    4dc6:	4620      	mov	r0, r4
    4dc8:	f001 fd5c 	bl	6884 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4dcc:	4b0b      	ldr	r3, [pc, #44]	; (4dfc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4dce:	4298      	cmp	r0, r3
    4dd0:	d10b      	bne.n	4dea <gpio_nrfx_pin_interrupt_configure+0xbe>
			err = nrfx_gpiote_channel_alloc(&ch);
    4dd2:	4628      	mov	r0, r5
    4dd4:	f001 fda4 	bl	6920 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4dd8:	4b06      	ldr	r3, [pc, #24]	; (4df4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4dda:	4298      	cmp	r0, r3
    4ddc:	d005      	beq.n	4dea <gpio_nrfx_pin_interrupt_configure+0xbe>
				return -ENOMEM;
    4dde:	f06f 000b 	mvn.w	r0, #11
}
    4de2:	b005      	add	sp, #20
    4de4:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4de6:	2303      	movs	r3, #3
    4de8:	e7d3      	b.n	4d92 <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
    4dea:	9503      	str	r5, [sp, #12]
    4dec:	e7bb      	b.n	4d66 <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
    4dee:	f06f 0004 	mvn.w	r0, #4
    4df2:	e7f6      	b.n	4de2 <gpio_nrfx_pin_interrupt_configure+0xb6>
    4df4:	0bad0000 	.word	0x0bad0000
    4df8:	50000300 	.word	0x50000300
    4dfc:	0bad0004 	.word	0x0bad0004

00004e00 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4e00:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4e02:	f001 fd7d 	bl	6900 <nrfx_gpiote_is_init>
    4e06:	4604      	mov	r4, r0
    4e08:	b968      	cbnz	r0, 4e26 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4e0a:	f001 fd51 	bl	68b0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4e0e:	4b08      	ldr	r3, [pc, #32]	; (4e30 <gpio_nrfx_init+0x30>)
    4e10:	4298      	cmp	r0, r3
    4e12:	d10a      	bne.n	4e2a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4e14:	4807      	ldr	r0, [pc, #28]	; (4e34 <gpio_nrfx_init+0x34>)
    4e16:	4621      	mov	r1, r4
    4e18:	f001 fd2e 	bl	6878 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4e1c:	4622      	mov	r2, r4
    4e1e:	2105      	movs	r1, #5
    4e20:	2006      	movs	r0, #6
    4e22:	f7fe fc9b 	bl	375c <z_arm_irq_priority_set>
		return 0;
    4e26:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4e28:	bd10      	pop	{r4, pc}
		return -EIO;
    4e2a:	f06f 0004 	mvn.w	r0, #4
    4e2e:	e7fb      	b.n	4e28 <gpio_nrfx_init+0x28>
    4e30:	0bad0000 	.word	0x0bad0000
    4e34:	00004e39 	.word	0x00004e39

00004e38 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e38:	0942      	lsrs	r2, r0, #5
{
    4e3a:	b570      	push	{r4, r5, r6, lr}
    4e3c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e3e:	d002      	beq.n	4e46 <nrfx_gpio_handler+0xe>
    4e40:	2a01      	cmp	r2, #1
    4e42:	d017      	beq.n	4e74 <nrfx_gpio_handler+0x3c>
}
    4e44:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e46:	4e0d      	ldr	r6, [pc, #52]	; (4e7c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4e48:	6932      	ldr	r2, [r6, #16]
    4e4a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4e4c:	2900      	cmp	r1, #0
    4e4e:	d0f9      	beq.n	4e44 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    4e50:	f003 031f 	and.w	r3, r3, #31
    4e54:	2501      	movs	r5, #1
	return node->next;
    4e56:	680c      	ldr	r4, [r1, #0]
    4e58:	409d      	lsls	r5, r3
    4e5a:	2900      	cmp	r1, #0
    4e5c:	d0f2      	beq.n	4e44 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4e5e:	688a      	ldr	r2, [r1, #8]
    4e60:	402a      	ands	r2, r5
    4e62:	d002      	beq.n	4e6a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4e64:	684b      	ldr	r3, [r1, #4]
    4e66:	4630      	mov	r0, r6
    4e68:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4e6a:	b12c      	cbz	r4, 4e78 <nrfx_gpio_handler+0x40>
    4e6c:	6823      	ldr	r3, [r4, #0]
    4e6e:	4621      	mov	r1, r4
    4e70:	461c      	mov	r4, r3
    4e72:	e7f2      	b.n	4e5a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e74:	4e02      	ldr	r6, [pc, #8]	; (4e80 <nrfx_gpio_handler+0x48>)
    4e76:	e7e7      	b.n	4e48 <nrfx_gpio_handler+0x10>
    4e78:	4623      	mov	r3, r4
    4e7a:	e7f8      	b.n	4e6e <nrfx_gpio_handler+0x36>
    4e7c:	0000d4d8 	.word	0x0000d4d8
    4e80:	0000d4c0 	.word	0x0000d4c0

00004e84 <gpio_nrfx_pin_configure>:
{
    4e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4e88:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e8a:	7b3b      	ldrb	r3, [r7, #12]
    4e8c:	f001 051f 	and.w	r5, r1, #31
{
    4e90:	b085      	sub	sp, #20
    4e92:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e94:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4e98:	4614      	mov	r4, r2
    4e9a:	b9d2      	cbnz	r2, 4ed2 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4e9c:	a902      	add	r1, sp, #8
    4e9e:	4628      	mov	r0, r5
    4ea0:	f001 fcf0 	bl	6884 <nrfx_gpiote_channel_get>
    4ea4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4ea6:	4628      	mov	r0, r5
    4ea8:	f001 fdb0 	bl	6a0c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4eac:	4b44      	ldr	r3, [pc, #272]	; (4fc0 <gpio_nrfx_pin_configure+0x13c>)
    4eae:	4298      	cmp	r0, r3
    4eb0:	d004      	beq.n	4ebc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4eb2:	f06f 0004 	mvn.w	r0, #4
}
    4eb6:	b005      	add	sp, #20
    4eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4ebc:	4284      	cmp	r4, r0
    4ebe:	d001      	beq.n	4ec4 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4ec0:	2000      	movs	r0, #0
    4ec2:	e7f8      	b.n	4eb6 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    4ec4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4ec8:	f001 fd24 	bl	6914 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4ecc:	42a0      	cmp	r0, r4
    4ece:	d0f7      	beq.n	4ec0 <gpio_nrfx_pin_configure+0x3c>
    4ed0:	e7ef      	b.n	4eb2 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4ed2:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4ed6:	f10d 0103 	add.w	r1, sp, #3
    4eda:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    4edc:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4ee0:	f001 fcd0 	bl	6884 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4ee4:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4ee6:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4ee8:	aa02      	add	r2, sp, #8
    4eea:	4649      	mov	r1, r9
    4eec:	4628      	mov	r0, r5
    4eee:	f001 fba5 	bl	663c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4ef2:	4b33      	ldr	r3, [pc, #204]	; (4fc0 <gpio_nrfx_pin_configure+0x13c>)
    4ef4:	4298      	cmp	r0, r3
    4ef6:	d002      	beq.n	4efe <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    4ef8:	f06f 0015 	mvn.w	r0, #21
    4efc:	e7db      	b.n	4eb6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4efe:	4580      	cmp	r8, r0
    4f00:	d103      	bne.n	4f0a <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    4f02:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4f06:	f001 fd05 	bl	6914 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4f0a:	05a3      	lsls	r3, r4, #22
    4f0c:	d549      	bpl.n	4fa2 <gpio_nrfx_pin_configure+0x11e>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f0e:	4b2d      	ldr	r3, [pc, #180]	; (4fc4 <gpio_nrfx_pin_configure+0x140>)
    4f10:	4a2d      	ldr	r2, [pc, #180]	; (4fc8 <gpio_nrfx_pin_configure+0x144>)
    4f12:	4023      	ands	r3, r4
    4f14:	4293      	cmp	r3, r2
    4f16:	d018      	beq.n	4f4a <gpio_nrfx_pin_configure+0xc6>
    4f18:	d80c      	bhi.n	4f34 <gpio_nrfx_pin_configure+0xb0>
    4f1a:	2b06      	cmp	r3, #6
    4f1c:	d016      	beq.n	4f4c <gpio_nrfx_pin_configure+0xc8>
    4f1e:	d804      	bhi.n	4f2a <gpio_nrfx_pin_configure+0xa6>
    4f20:	b1a3      	cbz	r3, 4f4c <gpio_nrfx_pin_configure+0xc8>
    4f22:	2b02      	cmp	r3, #2
    4f24:	d1e8      	bne.n	4ef8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    4f26:	2304      	movs	r3, #4
    4f28:	e010      	b.n	4f4c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4f2e:	d1e3      	bne.n	4ef8 <gpio_nrfx_pin_configure+0x74>
    4f30:	2301      	movs	r3, #1
    4f32:	e00b      	b.n	4f4c <gpio_nrfx_pin_configure+0xc8>
    4f34:	4a25      	ldr	r2, [pc, #148]	; (4fcc <gpio_nrfx_pin_configure+0x148>)
    4f36:	4293      	cmp	r3, r2
    4f38:	d027      	beq.n	4f8a <gpio_nrfx_pin_configure+0x106>
    4f3a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4f3e:	d026      	beq.n	4f8e <gpio_nrfx_pin_configure+0x10a>
    4f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4f44:	d1d8      	bne.n	4ef8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    4f46:	2302      	movs	r3, #2
    4f48:	e000      	b.n	4f4c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0D1;
    4f4a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4f4c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4f50:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    4f54:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    4f58:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4f5a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4f5e:	bf54      	ite	pl
    4f60:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4f64:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f66:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    4f68:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f6c:	d511      	bpl.n	4f92 <gpio_nrfx_pin_configure+0x10e>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4f6e:	687a      	ldr	r2, [r7, #4]
    4f70:	2301      	movs	r3, #1
    4f72:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4f74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4f78:	2200      	movs	r2, #0
    4f7a:	a901      	add	r1, sp, #4
    4f7c:	4628      	mov	r0, r5
    4f7e:	f001 fc0b 	bl	6798 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4f82:	4b0f      	ldr	r3, [pc, #60]	; (4fc0 <gpio_nrfx_pin_configure+0x13c>)
    4f84:	4298      	cmp	r0, r3
    4f86:	d09b      	beq.n	4ec0 <gpio_nrfx_pin_configure+0x3c>
    4f88:	e7b6      	b.n	4ef8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    4f8a:	2305      	movs	r3, #5
    4f8c:	e7de      	b.n	4f4c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    4f8e:	2303      	movs	r3, #3
    4f90:	e7dc      	b.n	4f4c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4f92:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4f94:	bf41      	itttt	mi
    4f96:	2301      	movmi	r3, #1
    4f98:	687a      	ldrmi	r2, [r7, #4]
    4f9a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4f9c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4fa0:	e7ea      	b.n	4f78 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    4fa2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4fa4:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4fa8:	bf54      	ite	pl
    4faa:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4fae:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4fb0:	461a      	mov	r2, r3
    4fb2:	a901      	add	r1, sp, #4
    4fb4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4fb6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4fba:	f001 fb3f 	bl	663c <nrfx_gpiote_input_configure>
    4fbe:	e7e0      	b.n	4f82 <gpio_nrfx_pin_configure+0xfe>
    4fc0:	0bad0000 	.word	0x0bad0000
    4fc4:	00f00006 	.word	0x00f00006
    4fc8:	00100006 	.word	0x00100006
    4fcc:	00400002 	.word	0x00400002

00004fd0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    4fd0:	4b02      	ldr	r3, [pc, #8]	; (4fdc <flash_nrf_pages_layout+0xc>)
    4fd2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    4fd4:	2301      	movs	r3, #1
    4fd6:	6013      	str	r3, [r2, #0]
}
    4fd8:	4770      	bx	lr
    4fda:	bf00      	nop
    4fdc:	200027c0 	.word	0x200027c0

00004fe0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    4fe0:	4800      	ldr	r0, [pc, #0]	; (4fe4 <flash_nrf_get_parameters+0x4>)
    4fe2:	4770      	bx	lr
    4fe4:	0000d8d4 	.word	0x0000d8d4

00004fe8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    4fe8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    4fea:	2201      	movs	r2, #1
    4fec:	4611      	mov	r1, r2
    4fee:	4806      	ldr	r0, [pc, #24]	; (5008 <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    4ff0:	4c06      	ldr	r4, [pc, #24]	; (500c <nrf_flash_init+0x24>)
    4ff2:	f008 f817 	bl	d024 <z_impl_k_sem_init>
    4ff6:	f007 fe3f 	bl	cc78 <nrfx_nvmc_flash_page_count_get>
    4ffa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    4ffc:	f007 fe38 	bl	cc70 <nrfx_nvmc_flash_page_size_get>
    5000:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    5002:	2000      	movs	r0, #0
    5004:	bd10      	pop	{r4, pc}
    5006:	bf00      	nop
    5008:	200027c8 	.word	0x200027c8
    500c:	200027c0 	.word	0x200027c0

00005010 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    5010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5014:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    5018:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    501c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    5020:	f023 031f 	bic.w	r3, r3, #31
    5024:	430b      	orrs	r3, r1
    pofcon |=
    5026:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    502a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    502e:	4b02      	ldr	r3, [pc, #8]	; (5038 <restore_pofwarn.part.0+0x28>)
    5030:	2200      	movs	r2, #0
    5032:	701a      	strb	r2, [r3, #0]
	}
}
    5034:	4770      	bx	lr
    5036:	bf00      	nop
    5038:	2000483f 	.word	0x2000483f

0000503c <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    503c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5040:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5044:	2b08      	cmp	r3, #8
    5046:	d120      	bne.n	508a <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
    5048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    504c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
    5050:	07cb      	lsls	r3, r1, #31
    5052:	d51a      	bpl.n	508a <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
    5054:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    5058:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    505c:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
    5060:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
    5062:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5066:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    506a:	b15b      	cbz	r3, 5084 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
    506c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    5070:	f023 031f 	bic.w	r3, r3, #31
    5074:	430b      	orrs	r3, r1
    pofcon |=
    5076:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    507a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
    507e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
    5082:	4770      	bx	lr
		pofcon_enabled = enabled;
    5084:	4b02      	ldr	r3, [pc, #8]	; (5090 <suspend_pofwarn+0x54>)
    5086:	2201      	movs	r2, #1
    5088:	701a      	strb	r2, [r3, #0]
		return 0;
    508a:	2000      	movs	r0, #0
}
    508c:	4770      	bx	lr
    508e:	bf00      	nop
    5090:	2000483f 	.word	0x2000483f

00005094 <flash_nrf_erase>:
{
    5094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5098:	460d      	mov	r5, r1
    509a:	4616      	mov	r6, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    509c:	f007 fde8 	bl	cc70 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    50a0:	4631      	mov	r1, r6
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    50a2:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
    50a4:	4628      	mov	r0, r5
    50a6:	f005 fe87 	bl	adb8 <is_regular_addr_valid>
    50aa:	b378      	cbz	r0, 510c <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    50ac:	fbb5 f3f7 	udiv	r3, r5, r7
    50b0:	fb07 5313 	mls	r3, r7, r3, r5
    50b4:	bb53      	cbnz	r3, 510c <flash_nrf_erase+0x78>
    50b6:	fbb6 f4f7 	udiv	r4, r6, r7
    50ba:	fb07 6414 	mls	r4, r7, r4, r6
    50be:	bb2c      	cbnz	r4, 510c <flash_nrf_erase+0x78>
		if (!n_pages) {
    50c0:	42be      	cmp	r6, r7
    50c2:	d31d      	bcc.n	5100 <flash_nrf_erase+0x6c>
	return z_impl_k_sem_take(sem, timeout);
    50c4:	f04f 32ff 	mov.w	r2, #4294967295
    50c8:	f04f 33ff 	mov.w	r3, #4294967295
    50cc:	4811      	ldr	r0, [pc, #68]	; (5114 <flash_nrf_erase+0x80>)
	if (pofcon_enabled) {
    50ce:	f8df 8048 	ldr.w	r8, [pc, #72]	; 5118 <flash_nrf_erase+0x84>
    50d2:	f003 f91b 	bl	830c <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    50d6:	f007 fdcb 	bl	cc70 <nrfx_nvmc_flash_page_size_get>
    50da:	4607      	mov	r7, r0
		if (SUSPEND_POFWARN()) {
    50dc:	f7ff ffae 	bl	503c <suspend_pofwarn>
    50e0:	4604      	mov	r4, r0
    50e2:	b980      	cbnz	r0, 5106 <flash_nrf_erase+0x72>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    50e4:	4628      	mov	r0, r5
    50e6:	f001 fd9f 	bl	6c28 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    50ea:	f898 3000 	ldrb.w	r3, [r8]
    50ee:	b10b      	cbz	r3, 50f4 <flash_nrf_erase+0x60>
    50f0:	f7ff ff8e 	bl	5010 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    50f4:	1bf6      	subs	r6, r6, r7
    50f6:	443d      	add	r5, r7
    50f8:	d1f0      	bne.n	50dc <flash_nrf_erase+0x48>
	z_impl_k_sem_give(sem);
    50fa:	4806      	ldr	r0, [pc, #24]	; (5114 <flash_nrf_erase+0x80>)
    50fc:	f003 f8e6 	bl	82cc <z_impl_k_sem_give>
}
    5100:	4620      	mov	r0, r4
    5102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ECANCELED;
    5106:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    510a:	e7f6      	b.n	50fa <flash_nrf_erase+0x66>
			return -EINVAL;
    510c:	f06f 0415 	mvn.w	r4, #21
    5110:	e7f6      	b.n	5100 <flash_nrf_erase+0x6c>
    5112:	bf00      	nop
    5114:	200027c8 	.word	0x200027c8
    5118:	2000483f 	.word	0x2000483f

0000511c <flash_nrf_write>:
{
    511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5120:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    5122:	4630      	mov	r0, r6
    5124:	4619      	mov	r1, r3
{
    5126:	4617      	mov	r7, r2
    5128:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    512a:	f005 fe45 	bl	adb8 <is_regular_addr_valid>
    512e:	b388      	cbz	r0, 5194 <flash_nrf_write+0x78>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    5130:	ea46 0504 	orr.w	r5, r6, r4
    5134:	f015 0503 	ands.w	r5, r5, #3
    5138:	d12c      	bne.n	5194 <flash_nrf_write+0x78>
	if (!len) {
    513a:	b1bc      	cbz	r4, 516c <flash_nrf_write+0x50>
	return z_impl_k_sem_take(sem, timeout);
    513c:	4817      	ldr	r0, [pc, #92]	; (519c <flash_nrf_write+0x80>)
	if (pofcon_enabled) {
    513e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 51a0 <flash_nrf_write+0x84>
    5142:	f04f 32ff 	mov.w	r2, #4294967295
    5146:	f04f 33ff 	mov.w	r3, #4294967295
    514a:	f003 f8df 	bl	830c <z_impl_k_sem_take>
static int write_op(void *context)
    514e:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    5152:	42ac      	cmp	r4, r5
    5154:	eb06 0805 	add.w	r8, r6, r5
    5158:	d10b      	bne.n	5172 <flash_nrf_write+0x56>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    515a:	4a12      	ldr	r2, [pc, #72]	; (51a4 <flash_nrf_write+0x88>)
    515c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    5160:	07db      	lsls	r3, r3, #31
    5162:	d5fb      	bpl.n	515c <flash_nrf_write+0x40>
	return FLASH_OP_DONE;
    5164:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
    5166:	480d      	ldr	r0, [pc, #52]	; (519c <flash_nrf_write+0x80>)
    5168:	f003 f8b0 	bl	82cc <z_impl_k_sem_give>
}
    516c:	4620      	mov	r0, r4
    516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (SUSPEND_POFWARN()) {
    5172:	f7ff ff63 	bl	503c <suspend_pofwarn>
    5176:	b950      	cbnz	r0, 518e <flash_nrf_write+0x72>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5178:	5979      	ldr	r1, [r7, r5]
    517a:	4640      	mov	r0, r8
    517c:	f001 fd74 	bl	6c68 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    5180:	f899 3000 	ldrb.w	r3, [r9]
    5184:	b10b      	cbz	r3, 518a <flash_nrf_write+0x6e>
    5186:	f7ff ff43 	bl	5010 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    518a:	3504      	adds	r5, #4
}
    518c:	e7e1      	b.n	5152 <flash_nrf_write+0x36>
			return -ECANCELED;
    518e:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    5192:	e7e8      	b.n	5166 <flash_nrf_write+0x4a>
		return -EINVAL;
    5194:	f06f 0415 	mvn.w	r4, #21
    5198:	e7e8      	b.n	516c <flash_nrf_write+0x50>
    519a:	bf00      	nop
    519c:	200027c8 	.word	0x200027c8
    51a0:	2000483f 	.word	0x2000483f
    51a4:	4001e000 	.word	0x4001e000

000051a8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    51a8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    51aa:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    51ae:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    51b0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    51b2:	6002      	str	r2, [r0, #0]
}
    51b4:	4802      	ldr	r0, [pc, #8]	; (51c0 <nrf_gpio_pin_port_decode+0x18>)
    51b6:	bf18      	it	ne
    51b8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    51bc:	4770      	bx	lr
    51be:	bf00      	nop
    51c0:	50000300 	.word	0x50000300

000051c4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    51c6:	794b      	ldrb	r3, [r1, #5]
    51c8:	2b01      	cmp	r3, #1
    51ca:	d026      	beq.n	521a <CONFIG_USB_DEVICE_PID+0xb>
    51cc:	2b03      	cmp	r3, #3
    51ce:	d121      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    51d0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    51d2:	798b      	ldrb	r3, [r1, #6]
    51d4:	2b03      	cmp	r3, #3
    51d6:	d11d      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    51d8:	79cc      	ldrb	r4, [r1, #7]
    51da:	b10c      	cbz	r4, 51e0 <uarte_nrfx_configure+0x1c>
    51dc:	2c01      	cmp	r4, #1
    51de:	d119      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    51e0:	790a      	ldrb	r2, [r1, #4]
    51e2:	b112      	cbz	r2, 51ea <uarte_nrfx_configure+0x26>
    51e4:	2a02      	cmp	r2, #2
    51e6:	d115      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    51e8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    51ea:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    51ec:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    51ee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    51f2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    51f4:	d065      	beq.n	52c2 <CONFIG_USB_DEVICE_PID+0xb3>
    51f6:	d82d      	bhi.n	5254 <CONFIG_USB_DEVICE_PID+0x45>
    51f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    51fc:	d064      	beq.n	52c8 <CONFIG_USB_DEVICE_PID+0xb9>
    51fe:	d816      	bhi.n	522e <CONFIG_USB_DEVICE_PID+0x1f>
    5200:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5204:	d062      	beq.n	52cc <CONFIG_USB_DEVICE_PID+0xbd>
    5206:	d80a      	bhi.n	521e <CONFIG_USB_DEVICE_PID+0xf>
    5208:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    520c:	d061      	beq.n	52d2 <CONFIG_USB_DEVICE_PID+0xc3>
    520e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    5212:	d061      	beq.n	52d8 <CONFIG_USB_DEVICE_PID+0xc9>
		return -ENOTSUP;
    5214:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5218:	e052      	b.n	52c0 <CONFIG_USB_DEVICE_PID+0xb1>
	switch (cfg->stop_bits) {
    521a:	2600      	movs	r6, #0
    521c:	e7d9      	b.n	51d2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    521e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    5222:	d05c      	beq.n	52de <CONFIG_USB_DEVICE_PID+0xcf>
    5224:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5228:	d1f4      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    522a:	4b37      	ldr	r3, [pc, #220]	; (5308 <CONFIG_USB_DEVICE_PID+0xf9>)
    522c:	e03c      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    522e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    5232:	d057      	beq.n	52e4 <CONFIG_USB_DEVICE_PID+0xd5>
    5234:	d807      	bhi.n	5246 <CONFIG_USB_DEVICE_PID+0x37>
    5236:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    523a:	d055      	beq.n	52e8 <CONFIG_USB_DEVICE_PID+0xd9>
    523c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5240:	d1e8      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5242:	4b32      	ldr	r3, [pc, #200]	; (530c <CONFIG_USB_DEVICE_PID+0xfd>)
    5244:	e030      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    5246:	f647 2712 	movw	r7, #31250	; 0x7a12
    524a:	42bb      	cmp	r3, r7
    524c:	d1e2      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    524e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5252:	e029      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    5254:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5258:	d048      	beq.n	52ec <CONFIG_USB_DEVICE_PID+0xdd>
    525a:	d813      	bhi.n	5284 <CONFIG_USB_DEVICE_PID+0x75>
    525c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5260:	d047      	beq.n	52f2 <CONFIG_USB_DEVICE_PID+0xe3>
    5262:	d809      	bhi.n	5278 <CONFIG_USB_DEVICE_PID+0x69>
    5264:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5268:	42bb      	cmp	r3, r7
    526a:	d044      	beq.n	52f6 <CONFIG_USB_DEVICE_PID+0xe7>
    526c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5270:	d1d0      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5272:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5276:	e017      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    5278:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    527c:	d1ca      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    527e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5282:	e011      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    5284:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5288:	d038      	beq.n	52fc <CONFIG_USB_DEVICE_PID+0xed>
    528a:	d808      	bhi.n	529e <CONFIG_USB_DEVICE_PID+0x8f>
    528c:	4f20      	ldr	r7, [pc, #128]	; (5310 <CONFIG_USB_DEVICE_PID+0x101>)
    528e:	42bb      	cmp	r3, r7
    5290:	d037      	beq.n	5302 <CONFIG_USB_DEVICE_PID+0xf3>
    5292:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5296:	d1bd      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5298:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    529c:	e004      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    529e:	4f1d      	ldr	r7, [pc, #116]	; (5314 <CONFIG_USB_DEVICE_PID+0x105>)
    52a0:	42bb      	cmp	r3, r7
    52a2:	d1b7      	bne.n	5214 <CONFIG_USB_DEVICE_PID+0x5>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    52a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    52a8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    52ac:	6903      	ldr	r3, [r0, #16]
    52ae:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    52b0:	4334      	orrs	r4, r6
    52b2:	4322      	orrs	r2, r4
    52b4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    52b6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    52ba:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    52be:	2000      	movs	r0, #0
}
    52c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    52c2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    52c6:	e7ef      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    52c8:	4b13      	ldr	r3, [pc, #76]	; (5318 <CONFIG_USB_DEVICE_PID+0x109>)
    52ca:	e7ed      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    52cc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    52d0:	e7ea      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = 0x00014000;
    52d2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    52d6:	e7e7      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
	switch (baudrate) {
    52d8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    52dc:	e7e4      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    52de:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    52e2:	e7e1      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    52e4:	4b0d      	ldr	r3, [pc, #52]	; (531c <CONFIG_USB_DEVICE_PID+0x10d>)
    52e6:	e7df      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    52e8:	4b0d      	ldr	r3, [pc, #52]	; (5320 <CONFIG_USB_DEVICE_PID+0x111>)
    52ea:	e7dd      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    52ec:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    52f0:	e7da      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    52f2:	4b0c      	ldr	r3, [pc, #48]	; (5324 <CONFIG_USB_DEVICE_PID+0x115>)
    52f4:	e7d8      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    52f6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    52fa:	e7d5      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    52fc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5300:	e7d2      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5302:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5306:	e7cf      	b.n	52a8 <CONFIG_USB_DEVICE_PID+0x99>
    5308:	0013b000 	.word	0x0013b000
    530c:	004ea000 	.word	0x004ea000
    5310:	0003d090 	.word	0x0003d090
    5314:	000f4240 	.word	0x000f4240
    5318:	00275000 	.word	0x00275000
    531c:	0075c000 	.word	0x0075c000
    5320:	003af000 	.word	0x003af000
    5324:	013a9000 	.word	0x013a9000

00005328 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    532a:	6906      	ldr	r6, [r0, #16]
{
    532c:	4605      	mov	r5, r0
    532e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5330:	f007 fdd9 	bl	cee6 <k_is_in_isr>
    5334:	b9b0      	cbnz	r0, 5364 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    5336:	4b20      	ldr	r3, [pc, #128]	; (53b8 <uarte_nrfx_poll_out+0x90>)
    5338:	781b      	ldrb	r3, [r3, #0]
    533a:	b19b      	cbz	r3, 5364 <uarte_nrfx_poll_out+0x3c>
{
    533c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    533e:	6868      	ldr	r0, [r5, #4]
    5340:	f005 fe9f 	bl	b082 <is_tx_ready.isra.0>
    5344:	b9f8      	cbnz	r0, 5386 <uarte_nrfx_poll_out+0x5e>
    5346:	2001      	movs	r0, #1
    5348:	f007 fc06 	bl	cb58 <nrfx_busy_wait>
    534c:	3c01      	subs	r4, #1
    534e:	d1f6      	bne.n	533e <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    5350:	2100      	movs	r1, #0
    5352:	2021      	movs	r0, #33	; 0x21
    5354:	f003 fc08 	bl	8b68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5358:	e7f0      	b.n	533c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    535a:	f384 8811 	msr	BASEPRI, r4
    535e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5362:	e7f5      	b.n	5350 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    5364:	f04f 0320 	mov.w	r3, #32
    5368:	f3ef 8411 	mrs	r4, BASEPRI
    536c:	f383 8812 	msr	BASEPRI_MAX, r3
    5370:	f3bf 8f6f 	isb	sy
	int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    5374:	6868      	ldr	r0, [r5, #4]
    5376:	f005 fe84 	bl	b082 <is_tx_ready.isra.0>
    537a:	b988      	cbnz	r0, 53a0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    537c:	f384 8811 	msr	BASEPRI, r4
    5380:	f3bf 8f6f 	isb	sy
}
    5384:	e7ee      	b.n	5364 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    5386:	f04f 0320 	mov.w	r3, #32
    538a:	f3ef 8411 	mrs	r4, BASEPRI
    538e:	f383 8812 	msr	BASEPRI_MAX, r3
    5392:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5396:	6868      	ldr	r0, [r5, #4]
    5398:	f005 fe73 	bl	b082 <is_tx_ready.isra.0>
    539c:	2800      	cmp	r0, #0
    539e:	d0dc      	beq.n	535a <uarte_nrfx_poll_out+0x32>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    53a0:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    53a2:	2201      	movs	r2, #1
	data->char_out = c;
    53a4:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    53a8:	6868      	ldr	r0, [r5, #4]
    53aa:	f005 fe4f 	bl	b04c <tx_start.isra.0>
	__asm__ volatile(
    53ae:	f384 8811 	msr	BASEPRI, r4
    53b2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    53b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53b8:	20004886 	.word	0x20004886

000053bc <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    53bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return dev->config;
    53c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return dev->data;
    53c4:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    53c6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    53ca:	2300      	movs	r3, #0
    53cc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    53d0:	6028      	str	r0, [r5, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    53d2:	6847      	ldr	r7, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    53d4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
    53d8:	f1ba 3fff 	cmp.w	sl, #4294967295
static int uarte_instance_init(const struct device *dev,
    53dc:	b085      	sub	sp, #20
    53de:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    53e0:	d014      	beq.n	540c <uarte_instance_init.constprop.0+0x50>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    53e2:	a803      	add	r0, sp, #12
    53e4:	f8cd a00c 	str.w	sl, [sp, #12]
    53e8:	f7ff fede 	bl	51a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    53ec:	9a03      	ldr	r2, [sp, #12]
    53ee:	f8cd a00c 	str.w	sl, [sp, #12]
    53f2:	2301      	movs	r3, #1
    53f4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    53f6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    53fa:	a803      	add	r0, sp, #12
    53fc:	f7ff fed4 	bl	51a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5400:	9b03      	ldr	r3, [sp, #12]
    5402:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5406:	2203      	movs	r2, #3
    5408:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    540c:	f8d7 b010 	ldr.w	fp, [r7, #16]
    5410:	f1bb 3fff 	cmp.w	fp, #4294967295
    5414:	d007      	beq.n	5426 <uarte_instance_init.constprop.0+0x6a>
			nrf_gpio_cfg_input(cfg->rx_pin,
    5416:	7f3b      	ldrb	r3, [r7, #28]
    5418:	2b00      	cmp	r3, #0
    541a:	bf14      	ite	ne
    541c:	2103      	movne	r1, #3
    541e:	2100      	moveq	r1, #0
    5420:	4658      	mov	r0, fp
    5422:	f005 fe05 	bl	b030 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5426:	f8d7 9014 	ldr.w	r9, [r7, #20]
    542a:	f1b9 3fff 	cmp.w	r9, #4294967295
    542e:	d014      	beq.n	545a <uarte_instance_init.constprop.0+0x9e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5430:	a803      	add	r0, sp, #12
    5432:	f8cd 900c 	str.w	r9, [sp, #12]
    5436:	f7ff feb7 	bl	51a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    543a:	9a03      	ldr	r2, [sp, #12]
    543c:	f8cd 900c 	str.w	r9, [sp, #12]
    5440:	2301      	movs	r3, #1
    5442:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5444:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5448:	a803      	add	r0, sp, #12
    544a:	f7ff fead 	bl	51a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    544e:	9b03      	ldr	r3, [sp, #12]
    5450:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5454:	2203      	movs	r2, #3
    5456:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    545a:	69b8      	ldr	r0, [r7, #24]
    545c:	1c43      	adds	r3, r0, #1
    545e:	d008      	beq.n	5472 <uarte_instance_init.constprop.0+0xb6>
			nrf_gpio_cfg_input(cfg->cts_pin,
    5460:	7f7b      	ldrb	r3, [r7, #29]
    5462:	9001      	str	r0, [sp, #4]
    5464:	2b00      	cmp	r3, #0
    5466:	bf14      	ite	ne
    5468:	2103      	movne	r1, #3
    546a:	2100      	moveq	r1, #0
    546c:	f005 fde0 	bl	b030 <nrf_gpio_cfg_input>
    5470:	9801      	ldr	r0, [sp, #4]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    5472:	683b      	ldr	r3, [r7, #0]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5474:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.TXD = pseltxd;
    5476:	f8c3 a50c 	str.w	sl, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    547a:	f8c3 b514 	str.w	fp, [r3, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
    547e:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    5482:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    5486:	4630      	mov	r0, r6
    5488:	f7ff fe9c 	bl	51c4 <uarte_nrfx_configure>
	if (err) {
    548c:	4606      	mov	r6, r0
    548e:	2800      	cmp	r0, #0
    5490:	d146      	bne.n	5520 <uarte_instance_init.constprop.0+0x164>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5492:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5496:	0799      	lsls	r1, r3, #30
    5498:	d519      	bpl.n	54ce <uarte_instance_init.constprop.0+0x112>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    549a:	f105 0016 	add.w	r0, r5, #22
    549e:	f001 fc8f 	bl	6dc0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    54a2:	4b23      	ldr	r3, [pc, #140]	; (5530 <uarte_instance_init.constprop.0+0x174>)
    54a4:	4298      	cmp	r0, r3
    54a6:	d13f      	bne.n	5528 <uarte_instance_init.constprop.0+0x16c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    54a8:	7da8      	ldrb	r0, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    54aa:	00c3      	lsls	r3, r0, #3
    54ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    54b0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    54b4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    54b8:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54bc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    54c0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    54c4:	4a1b      	ldr	r2, [pc, #108]	; (5534 <uarte_instance_init.constprop.0+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    54c6:	2301      	movs	r3, #1
    54c8:	4083      	lsls	r3, r0
    54ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    54ce:	2308      	movs	r3, #8
    54d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    54d4:	f898 3008 	ldrb.w	r3, [r8, #8]
    54d8:	b95b      	cbnz	r3, 54f2 <uarte_instance_init.constprop.0+0x136>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54da:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    54de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    54e2:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    54e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    54ea:	2301      	movs	r3, #1
    54ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    54f0:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    54f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    54f6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    54f8:	bf5c      	itt	pl
    54fa:	f44f 7280 	movpl.w	r2, #256	; 0x100
    54fe:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5502:	06db      	lsls	r3, r3, #27
    5504:	bf44      	itt	mi
    5506:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    550a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    550e:	3514      	adds	r5, #20
    p_reg->TXD.MAXCNT = length;
    5510:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5512:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5516:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    551a:	2301      	movs	r3, #1
    551c:	60a3      	str	r3, [r4, #8]
    551e:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5520:	4630      	mov	r0, r6
    5522:	b005      	add	sp, #20
    5524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
    5528:	f06f 0604 	mvn.w	r6, #4
    552c:	e7f8      	b.n	5520 <uarte_instance_init.constprop.0+0x164>
    552e:	bf00      	nop
    5530:	0bad0000 	.word	0x0bad0000
    5534:	4001f000 	.word	0x4001f000

00005538 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    5538:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    553a:	2301      	movs	r3, #1
    553c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    553e:	4a0e      	ldr	r2, [pc, #56]	; (5578 <compare_int_lock+0x40>)
    5540:	f3bf 8f5b 	dmb	ish
    5544:	43dc      	mvns	r4, r3
    5546:	e852 1f00 	ldrex	r1, [r2]
    554a:	ea01 0504 	and.w	r5, r1, r4
    554e:	e842 5600 	strex	r6, r5, [r2]
    5552:	2e00      	cmp	r6, #0
    5554:	d1f7      	bne.n	5546 <compare_int_lock+0xe>
    5556:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    555a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    555e:	4082      	lsls	r2, r0
    5560:	4806      	ldr	r0, [pc, #24]	; (557c <compare_int_lock+0x44>)
    5562:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5566:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    556a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    556e:	420b      	tst	r3, r1
}
    5570:	bf14      	ite	ne
    5572:	2001      	movne	r0, #1
    5574:	2000      	moveq	r0, #0
    5576:	bd70      	pop	{r4, r5, r6, pc}
    5578:	200027dc 	.word	0x200027dc
    557c:	40011000 	.word	0x40011000

00005580 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5580:	491b      	ldr	r1, [pc, #108]	; (55f0 <sys_clock_timeout_handler+0x70>)
{
    5582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5584:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5586:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    558a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    558c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5590:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5594:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5596:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    559a:	d30f      	bcc.n	55bc <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    559c:	f003 fc5a 	bl	8e54 <sys_clock_announce>
    return p_reg->CC[ch];
    55a0:	00a3      	lsls	r3, r4, #2
    55a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    55a6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    55aa:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    55ae:	4295      	cmp	r5, r2
    55b0:	d11d      	bne.n	55ee <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    55b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    55b6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    55ba:	e012      	b.n	55e2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    55bc:	4b0d      	ldr	r3, [pc, #52]	; (55f4 <sys_clock_timeout_handler+0x74>)
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	0a1a      	lsrs	r2, r3, #8
    55c2:	061b      	lsls	r3, r3, #24
    55c4:	195e      	adds	r6, r3, r5
    55c6:	4b0c      	ldr	r3, [pc, #48]	; (55f8 <sys_clock_timeout_handler+0x78>)
    55c8:	f142 0700 	adc.w	r7, r2, #0
    55cc:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    55d0:	f003 fc40 	bl	8e54 <sys_clock_announce>
    return p_reg->CC[ch];
    55d4:	4a09      	ldr	r2, [pc, #36]	; (55fc <sys_clock_timeout_handler+0x7c>)
    55d6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    55da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    55de:	429d      	cmp	r5, r3
    55e0:	d105      	bne.n	55ee <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
    55e2:	4a06      	ldr	r2, [pc, #24]	; (55fc <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    55e8:	40a3      	lsls	r3, r4
    55ea:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    55ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55f0:	20000550 	.word	0x20000550
    55f4:	200027e0 	.word	0x200027e0
    55f8:	20000558 	.word	0x20000558
    55fc:	40011000 	.word	0x40011000

00005600 <compare_int_unlock>:
	if (key) {
    5600:	b311      	cbz	r1, 5648 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5602:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    5606:	2301      	movs	r3, #1
    5608:	4a10      	ldr	r2, [pc, #64]	; (564c <compare_int_unlock+0x4c>)
    560a:	4083      	lsls	r3, r0
    560c:	e852 cf00 	ldrex	ip, [r2]
    5610:	ea4c 0c03 	orr.w	ip, ip, r3
    5614:	e842 c100 	strex	r1, ip, [r2]
    5618:	2900      	cmp	r1, #0
    561a:	d1f7      	bne.n	560c <compare_int_unlock+0xc>
    561c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5620:	4a0b      	ldr	r2, [pc, #44]	; (5650 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5626:	4083      	lsls	r3, r0
    5628:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    562c:	4b09      	ldr	r3, [pc, #36]	; (5654 <compare_int_unlock+0x54>)
    562e:	f3bf 8f5b 	dmb	ish
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5638:	40c3      	lsrs	r3, r0
    563a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    563c:	bf42      	ittt	mi
    563e:	4b06      	ldrmi	r3, [pc, #24]	; (5658 <compare_int_unlock+0x58>)
    5640:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5644:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5648:	4770      	bx	lr
    564a:	bf00      	nop
    564c:	200027dc 	.word	0x200027dc
    5650:	40011000 	.word	0x40011000
    5654:	200027d8 	.word	0x200027d8
    5658:	e000e100 	.word	0xe000e100

0000565c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    565c:	4b0d      	ldr	r3, [pc, #52]	; (5694 <z_nrf_rtc_timer_read+0x38>)
    565e:	6818      	ldr	r0, [r3, #0]
    5660:	0a01      	lsrs	r1, r0, #8
    5662:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5664:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5668:	4b0b      	ldr	r3, [pc, #44]	; (5698 <z_nrf_rtc_timer_read+0x3c>)
    566a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    566e:	1818      	adds	r0, r3, r0
    5670:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5678:	d20a      	bcs.n	5690 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    567a:	4b08      	ldr	r3, [pc, #32]	; (569c <z_nrf_rtc_timer_read+0x40>)
    567c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5680:	4290      	cmp	r0, r2
    5682:	eb71 0303 	sbcs.w	r3, r1, r3
    5686:	d203      	bcs.n	5690 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5688:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    568c:	f141 0100 	adc.w	r1, r1, #0
}
    5690:	4770      	bx	lr
    5692:	bf00      	nop
    5694:	200027e0 	.word	0x200027e0
    5698:	40011000 	.word	0x40011000
    569c:	20000558 	.word	0x20000558

000056a0 <compare_set>:
{
    56a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a4:	4614      	mov	r4, r2
    56a6:	461d      	mov	r5, r3
    56a8:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    56aa:	f7ff ff45 	bl	5538 <compare_int_lock>
    56ae:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    56b0:	f7ff ffd4 	bl	565c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    56b4:	42a0      	cmp	r0, r4
    56b6:	eb71 0305 	sbcs.w	r3, r1, r5
    56ba:	d27a      	bcs.n	57b2 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    56bc:	4b46      	ldr	r3, [pc, #280]	; (57d8 <compare_set+0x138>)
    56be:	1a20      	subs	r0, r4, r0
    56c0:	eb65 0101 	sbc.w	r1, r5, r1
    56c4:	4298      	cmp	r0, r3
    56c6:	f171 0100 	sbcs.w	r1, r1, #0
    56ca:	f080 8081 	bcs.w	57d0 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    56ce:	4b43      	ldr	r3, [pc, #268]	; (57dc <compare_set+0x13c>)
    56d0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    56d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    56d8:	429d      	cmp	r5, r3
    56da:	bf08      	it	eq
    56dc:	4294      	cmpeq	r4, r2
    56de:	d053      	beq.n	5788 <compare_set+0xe8>
    56e0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    56e4:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    56e8:	f107 0950 	add.w	r9, r7, #80	; 0x50
    56ec:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    56f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    56f4:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    56f8:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    56fc:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    5704:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5708:	4a35      	ldr	r2, [pc, #212]	; (57e0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    570a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    570e:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5710:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    5712:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5716:	eba0 000b 	sub.w	r0, r0, fp
    571a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    571e:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5722:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5724:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    5728:	d105      	bne.n	5736 <compare_set+0x96>
    572a:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    572c:	2013      	movs	r0, #19
    572e:	f007 fdd9 	bl	d2e4 <z_impl_k_busy_wait>
    5732:	4a2b      	ldr	r2, [pc, #172]	; (57e0 <compare_set+0x140>)
    5734:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5736:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    573a:	eba6 000c 	sub.w	r0, r6, ip
    573e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5742:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5746:	bf88      	it	hi
    5748:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    574a:	2000      	movs	r0, #0
    574c:	f8c9 0000 	str.w	r0, [r9]
    5750:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    5754:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5758:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    575c:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5760:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    5764:	4583      	cmp	fp, r0
    5766:	d006      	beq.n	5776 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    5768:	1a30      	subs	r0, r6, r0
    576a:	3802      	subs	r0, #2
    576c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5770:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5774:	d81b      	bhi.n	57ae <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    5776:	eba6 0608 	sub.w	r6, r6, r8
    577a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    577e:	1936      	adds	r6, r6, r4
    5780:	f145 0300 	adc.w	r3, r5, #0
    5784:	4634      	mov	r4, r6
    5786:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    5788:	4914      	ldr	r1, [pc, #80]	; (57dc <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    578a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    578c:	013b      	lsls	r3, r7, #4
    578e:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    5792:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5796:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    5798:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    579c:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    579e:	4638      	mov	r0, r7
    57a0:	9900      	ldr	r1, [sp, #0]
    57a2:	f7ff ff2d 	bl	5600 <compare_int_unlock>
}
    57a6:	4620      	mov	r0, r4
    57a8:	b003      	add	sp, #12
    57aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57ae:	4630      	mov	r0, r6
    57b0:	e7af      	b.n	5712 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    57b2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    57b4:	4a0b      	ldr	r2, [pc, #44]	; (57e4 <compare_set+0x144>)
    57b6:	f3bf 8f5b 	dmb	ish
    57ba:	40bb      	lsls	r3, r7
    57bc:	e852 0f00 	ldrex	r0, [r2]
    57c0:	4318      	orrs	r0, r3
    57c2:	e842 0100 	strex	r1, r0, [r2]
    57c6:	2900      	cmp	r1, #0
    57c8:	d1f8      	bne.n	57bc <compare_set+0x11c>
    57ca:	f3bf 8f5b 	dmb	ish
    57ce:	e7db      	b.n	5788 <compare_set+0xe8>
			return -EINVAL;
    57d0:	f06f 0415 	mvn.w	r4, #21
    57d4:	e7e3      	b.n	579e <compare_set+0xfe>
    57d6:	bf00      	nop
    57d8:	01000001 	.word	0x01000001
    57dc:	20000540 	.word	0x20000540
    57e0:	40011000 	.word	0x40011000
    57e4:	200027d8 	.word	0x200027d8

000057e8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    57e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    57ea:	4b19      	ldr	r3, [pc, #100]	; (5850 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    57ec:	4d19      	ldr	r5, [pc, #100]	; (5854 <sys_clock_driver_init+0x6c>)
    57ee:	2400      	movs	r4, #0
    57f0:	f04f 30ff 	mov.w	r0, #4294967295
    57f4:	f04f 31ff 	mov.w	r1, #4294967295
    57f8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    57fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5804:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5808:	4b13      	ldr	r3, [pc, #76]	; (5858 <sys_clock_driver_init+0x70>)
    580a:	2602      	movs	r6, #2
    580c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5810:	2101      	movs	r1, #1
    5812:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    5816:	2011      	movs	r0, #17
    5818:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    581c:	4622      	mov	r2, r4
    581e:	f7fd ff9d 	bl	375c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5822:	2011      	movs	r0, #17
    5824:	f7fd ff6a 	bl	36fc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5828:	4a0c      	ldr	r2, [pc, #48]	; (585c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    582a:	2301      	movs	r3, #1
    582c:	60ab      	str	r3, [r5, #8]
    582e:	602b      	str	r3, [r5, #0]
    5830:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5832:	4b0b      	ldr	r3, [pc, #44]	; (5860 <sys_clock_driver_init+0x78>)
    5834:	4a0b      	ldr	r2, [pc, #44]	; (5864 <sys_clock_driver_init+0x7c>)
    5836:	9300      	str	r3, [sp, #0]
    5838:	9401      	str	r4, [sp, #4]
    583a:	2300      	movs	r3, #0
    583c:	4620      	mov	r0, r4
    583e:	f7ff ff2f 	bl	56a0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5842:	4630      	mov	r0, r6
    5844:	f7ff f9f4 	bl	4c30 <z_nrf_clock_control_lf_on>

	return 0;
}
    5848:	4620      	mov	r0, r4
    584a:	b002      	add	sp, #8
    584c:	bd70      	pop	{r4, r5, r6, pc}
    584e:	bf00      	nop
    5850:	20000540 	.word	0x20000540
    5854:	40011000 	.word	0x40011000
    5858:	e000e100 	.word	0xe000e100
    585c:	200027dc 	.word	0x200027dc
    5860:	00005581 	.word	0x00005581
    5864:	007fffff 	.word	0x007fffff

00005868 <rtc_nrf_isr>:
{
    5868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    586c:	4c33      	ldr	r4, [pc, #204]	; (593c <rtc_nrf_isr+0xd4>)
    586e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5872:	079a      	lsls	r2, r3, #30
    5874:	d50b      	bpl.n	588e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5876:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    587a:	b143      	cbz	r3, 588e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    587c:	4a30      	ldr	r2, [pc, #192]	; (5940 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    587e:	2300      	movs	r3, #0
    5880:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5884:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5888:	6813      	ldr	r3, [r2, #0]
    588a:	3301      	adds	r3, #1
    588c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    588e:	f04f 0320 	mov.w	r3, #32
    5892:	f3ef 8211 	mrs	r2, BASEPRI
    5896:	f383 8812 	msr	BASEPRI_MAX, r3
    589a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    589e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    58a2:	03db      	lsls	r3, r3, #15
    58a4:	d529      	bpl.n	58fa <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58a6:	f3bf 8f5b 	dmb	ish
    58aa:	4b26      	ldr	r3, [pc, #152]	; (5944 <rtc_nrf_isr+0xdc>)
    58ac:	e853 1f00 	ldrex	r1, [r3]
    58b0:	f021 0001 	bic.w	r0, r1, #1
    58b4:	e843 0500 	strex	r5, r0, [r3]
    58b8:	2d00      	cmp	r5, #0
    58ba:	d1f7      	bne.n	58ac <rtc_nrf_isr+0x44>
    58bc:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    58c0:	b911      	cbnz	r1, 58c8 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    58c2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    58c6:	b1c3      	cbz	r3, 58fa <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    58c8:	2500      	movs	r5, #0
    58ca:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    58ce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    58d2:	f382 8811 	msr	BASEPRI, r2
    58d6:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    58da:	f7ff febf 	bl	565c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    58de:	f04f 0320 	mov.w	r3, #32
    58e2:	f3ef 8211 	mrs	r2, BASEPRI
    58e6:	f383 8812 	msr	BASEPRI_MAX, r3
    58ea:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    58ee:	4b16      	ldr	r3, [pc, #88]	; (5948 <rtc_nrf_isr+0xe0>)
    58f0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    58f4:	42b0      	cmp	r0, r6
    58f6:	41b9      	sbcs	r1, r7
    58f8:	d206      	bcs.n	5908 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    58fa:	f382 8811 	msr	BASEPRI, r2
    58fe:	f3bf 8f6f 	isb	sy
}
    5902:	b003      	add	sp, #12
    5904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5908:	f04f 38ff 	mov.w	r8, #4294967295
    590c:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    5910:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5914:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    5918:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    591a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    591e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    5922:	f382 8811 	msr	BASEPRI, r2
    5926:	f3bf 8f6f 	isb	sy
		if (handler) {
    592a:	2900      	cmp	r1, #0
    592c:	d0e9      	beq.n	5902 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    592e:	9000      	str	r0, [sp, #0]
    5930:	4632      	mov	r2, r6
    5932:	463b      	mov	r3, r7
    5934:	4628      	mov	r0, r5
    5936:	4788      	blx	r1
}
    5938:	e7e3      	b.n	5902 <rtc_nrf_isr+0x9a>
    593a:	bf00      	nop
    593c:	40011000 	.word	0x40011000
    5940:	200027e0 	.word	0x200027e0
    5944:	200027d8 	.word	0x200027d8
    5948:	20000540 	.word	0x20000540

0000594c <sys_clock_set_timeout>:
{
    594c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    594e:	4e14      	ldr	r6, [pc, #80]	; (59a0 <sys_clock_set_timeout+0x54>)
    5950:	f1b0 3fff 	cmp.w	r0, #4294967295
    5954:	bf14      	ite	ne
    5956:	4604      	movne	r4, r0
    5958:	4634      	moveq	r4, r6
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    595a:	f7ff fe7f 	bl	565c <z_nrf_rtc_timer_read>
    595e:	4b11      	ldr	r3, [pc, #68]	; (59a4 <sys_clock_set_timeout+0x58>)
    5960:	e9d3 5300 	ldrd	r5, r3, [r3]
    5964:	1b40      	subs	r0, r0, r5
	if (unannounced >= COUNTER_HALF_SPAN) {
    5966:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    596a:	d216      	bcs.n	599a <sys_clock_set_timeout+0x4e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    596c:	1e61      	subs	r1, r4, #1
    596e:	42b1      	cmp	r1, r6
    5970:	bfa8      	it	ge
    5972:	4631      	movge	r1, r6
    5974:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5978:	1c42      	adds	r2, r0, #1
    597a:	440a      	add	r2, r1
	if (cyc > MAX_CYCLES) {
    597c:	42b2      	cmp	r2, r6
    597e:	bf28      	it	cs
    5980:	4632      	movcs	r2, r6
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5982:	4909      	ldr	r1, [pc, #36]	; (59a8 <sys_clock_set_timeout+0x5c>)
    5984:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    5986:	1952      	adds	r2, r2, r5
    5988:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    598c:	9001      	str	r0, [sp, #4]
    598e:	f143 0300 	adc.w	r3, r3, #0
    5992:	f7ff fe85 	bl	56a0 <compare_set>
}
    5996:	b002      	add	sp, #8
    5998:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    599a:	2100      	movs	r1, #0
    599c:	e7ec      	b.n	5978 <sys_clock_set_timeout+0x2c>
    599e:	bf00      	nop
    59a0:	007fffff 	.word	0x007fffff
    59a4:	20000550 	.word	0x20000550
    59a8:	00005581 	.word	0x00005581

000059ac <sys_clock_elapsed>:
{
    59ac:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    59ae:	f7ff fe55 	bl	565c <z_nrf_rtc_timer_read>
    59b2:	4b02      	ldr	r3, [pc, #8]	; (59bc <sys_clock_elapsed+0x10>)
    59b4:	681b      	ldr	r3, [r3, #0]
}
    59b6:	1ac0      	subs	r0, r0, r3
    59b8:	bd08      	pop	{r3, pc}
    59ba:	bf00      	nop
    59bc:	20000550 	.word	0x20000550

000059c0 <find_free_region>:
/* Find the first unused ACL region. */
static int find_free_region(uint32_t *region_idx)
{
	static uint32_t idx;

	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    59c0:	490c      	ldr	r1, [pc, #48]	; (59f4 <find_free_region+0x34>)
{
    59c2:	b530      	push	{r4, r5, lr}
    59c4:	680b      	ldr	r3, [r1, #0]
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    59c6:	4d0c      	ldr	r5, [pc, #48]	; (59f8 <find_free_region+0x38>)
    59c8:	4602      	mov	r2, r0
	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    59ca:	2400      	movs	r4, #0
    59cc:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    59d0:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
    59d4:	b2c0      	uxtb	r0, r0
    59d6:	b918      	cbnz	r0, 59e0 <find_free_region+0x20>
    59d8:	b104      	cbz	r4, 59dc <find_free_region+0x1c>
    59da:	600b      	str	r3, [r1, #0]
			*region_idx = idx;
			return -ENOSPC;
		}
	}
	*region_idx = idx;
	return 0;
    59dc:	2000      	movs	r0, #0
    59de:	e007      	b.n	59f0 <find_free_region+0x30>
		idx++;
    59e0:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
    59e2:	2b07      	cmp	r3, #7
    59e4:	f04f 0401 	mov.w	r4, #1
    59e8:	d9f0      	bls.n	59cc <find_free_region+0xc>
    59ea:	600b      	str	r3, [r1, #0]
			return -ENOSPC;
    59ec:	f06f 001b 	mvn.w	r0, #27
			*region_idx = idx;
    59f0:	6013      	str	r3, [r2, #0]
}
    59f2:	bd30      	pop	{r4, r5, pc}
    59f4:	200027e4 	.word	0x200027e4
    59f8:	4001e000 	.word	0x4001e000

000059fc <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    59fc:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    59fe:	4a05      	ldr	r2, [pc, #20]	; (5a14 <boot_write_magic+0x18>)
{
    5a00:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    5a02:	3910      	subs	r1, #16
    5a04:	2310      	movs	r3, #16
    5a06:	f004 fd1d 	bl	a444 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    5a0a:	3800      	subs	r0, #0
    5a0c:	bf18      	it	ne
    5a0e:	2001      	movne	r0, #1
    5a10:	bd08      	pop	{r3, pc}
    5a12:	bf00      	nop
    5a14:	0000d970 	.word	0x0000d970

00005a18 <boot_read_swap_state>:
{
    5a18:	b530      	push	{r4, r5, lr}
    5a1a:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    5a1c:	6881      	ldr	r1, [r0, #8]
{
    5a1e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    5a20:	2310      	movs	r3, #16
    5a22:	aa02      	add	r2, sp, #8
    5a24:	3910      	subs	r1, #16
{
    5a26:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    5a28:	f004 fcf0 	bl	a40c <flash_area_read>
    if (rc < 0) {
    5a2c:	2800      	cmp	r0, #0
    5a2e:	da02      	bge.n	5a36 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    5a30:	2001      	movs	r0, #1
}
    5a32:	b007      	add	sp, #28
    5a34:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    5a36:	2210      	movs	r2, #16
    5a38:	a902      	add	r1, sp, #8
    5a3a:	4620      	mov	r0, r4
    5a3c:	f005 fc4f 	bl	b2de <bootutil_buffer_is_erased>
    5a40:	bba8      	cbnz	r0, 5aae <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    5a42:	491c      	ldr	r1, [pc, #112]	; (5ab4 <boot_read_swap_state+0x9c>)
    5a44:	2210      	movs	r2, #16
    5a46:	a802      	add	r0, sp, #8
    5a48:	f005 f824 	bl	aa94 <memcmp>
    return BOOT_MAGIC_BAD;
    5a4c:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    5a4e:	bf0c      	ite	eq
    5a50:	2301      	moveq	r3, #1
    5a52:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    5a54:	702b      	strb	r3, [r5, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    5a56:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5a58:	2301      	movs	r3, #1
    5a5a:	f10d 0207 	add.w	r2, sp, #7
    5a5e:	3928      	subs	r1, #40	; 0x28
    5a60:	4620      	mov	r0, r4
    5a62:	f004 fcd3 	bl	a40c <flash_area_read>
    if (rc < 0) {
    5a66:	2800      	cmp	r0, #0
    5a68:	dbe2      	blt.n	5a30 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a6e:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    5a72:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5a74:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    5a76:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    5a78:	2201      	movs	r2, #1
    5a7a:	f10d 0107 	add.w	r1, sp, #7
    5a7e:	4620      	mov	r0, r4
    5a80:	f005 fc2d 	bl	b2de <bootutil_buffer_is_erased>
    5a84:	b910      	cbnz	r0, 5a8c <boot_read_swap_state+0x74>
    5a86:	786b      	ldrb	r3, [r5, #1]
    5a88:	2b04      	cmp	r3, #4
    5a8a:	d903      	bls.n	5a94 <boot_read_swap_state+0x7c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    5a8c:	2301      	movs	r3, #1
    5a8e:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    5a90:	2300      	movs	r3, #0
    5a92:	712b      	strb	r3, [r5, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    5a94:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    5a96:	1ca9      	adds	r1, r5, #2
    5a98:	3a20      	subs	r2, #32
    5a9a:	4620      	mov	r0, r4
    5a9c:	f005 fc32 	bl	b304 <boot_read_flag>
    if (rc) {
    5aa0:	2800      	cmp	r0, #0
    5aa2:	d1c5      	bne.n	5a30 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    5aa4:	1ce9      	adds	r1, r5, #3
    5aa6:	4620      	mov	r0, r4
    5aa8:	f005 fc85 	bl	b3b6 <boot_read_image_ok>
    5aac:	e7c1      	b.n	5a32 <boot_read_swap_state+0x1a>
    5aae:	2303      	movs	r3, #3
    5ab0:	e7d0      	b.n	5a54 <boot_read_swap_state+0x3c>
    5ab2:	bf00      	nop
    5ab4:	0000d970 	.word	0x0000d970

00005ab8 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    5ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5aba:	2002      	movs	r0, #2
    5abc:	4669      	mov	r1, sp
    5abe:	f005 fc7e 	bl	b3be <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    5ac2:	bb98      	cbnz	r0, 5b2c <boot_swap_type_multi+0x74>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5ac4:	a902      	add	r1, sp, #8
    5ac6:	2005      	movs	r0, #5
    5ac8:	f005 fc79 	bl	b3be <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    5acc:	2801      	cmp	r0, #1
    5ace:	d12b      	bne.n	5b28 <boot_swap_type_multi+0x70>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    5ad0:	2303      	movs	r3, #3
    5ad2:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    5ad6:	f88d 300b 	strb.w	r3, [sp, #11]
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
    5ada:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    5ade:	f89d 6008 	ldrb.w	r6, [sp, #8]
    5ae2:	4a19      	ldr	r2, [pc, #100]	; (5b48 <boot_swap_type_multi+0x90>)
    5ae4:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    5ae6:	7810      	ldrb	r0, [r2, #0]
    5ae8:	4629      	mov	r1, r5
    5aea:	f005 fbea 	bl	b2c2 <boot_magic_compatible_check>
    5aee:	b318      	cbz	r0, 5b38 <boot_swap_type_multi+0x80>
            boot_magic_compatible_check(table->magic_secondary_slot,
    5af0:	7850      	ldrb	r0, [r2, #1]
    5af2:	4631      	mov	r1, r6
    5af4:	f005 fbe5 	bl	b2c2 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    5af8:	b1f0      	cbz	r0, 5b38 <boot_swap_type_multi+0x80>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    5afa:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    5afc:	2b04      	cmp	r3, #4
    5afe:	d003      	beq.n	5b08 <boot_swap_type_multi+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    5b00:	f89d 1003 	ldrb.w	r1, [sp, #3]
    5b04:	4299      	cmp	r1, r3
    5b06:	d117      	bne.n	5b38 <boot_swap_type_multi+0x80>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    5b08:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    5b0a:	2b04      	cmp	r3, #4
    5b0c:	d003      	beq.n	5b16 <boot_swap_type_multi+0x5e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    5b0e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    5b12:	4299      	cmp	r1, r3
    5b14:	d110      	bne.n	5b38 <boot_swap_type_multi+0x80>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    5b16:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    5b18:	2b04      	cmp	r3, #4
    5b1a:	d109      	bne.n	5b30 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
            BOOT_LOG_INF("Swap type: %s",
    5b1c:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    5b1e:	1e83      	subs	r3, r0, #2
    5b20:	2b02      	cmp	r3, #2
    5b22:	d803      	bhi.n	5b2c <boot_swap_type_multi+0x74>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    5b24:	b004      	add	sp, #16
    5b26:	bd70      	pop	{r4, r5, r6, pc}
    } else if (rc) {
    5b28:	2800      	cmp	r0, #0
    5b2a:	d0d6      	beq.n	5ada <boot_swap_type_multi+0x22>
        return BOOT_SWAP_TYPE_PANIC;
    5b2c:	20ff      	movs	r0, #255	; 0xff
    5b2e:	e7f9      	b.n	5b24 <boot_swap_type_multi+0x6c>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    5b30:	f89d 1002 	ldrb.w	r1, [sp, #2]
    5b34:	4299      	cmp	r1, r3
    5b36:	d0f1      	beq.n	5b1c <boot_swap_type_multi+0x64>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    5b38:	3401      	adds	r4, #1
    5b3a:	2c03      	cmp	r4, #3
    5b3c:	f102 0206 	add.w	r2, r2, #6
    5b40:	d1d1      	bne.n	5ae6 <boot_swap_type_multi+0x2e>
    return BOOT_SWAP_TYPE_NONE;
    5b42:	2001      	movs	r0, #1
    5b44:	e7ee      	b.n	5b24 <boot_swap_type_multi+0x6c>
    5b46:	bf00      	nop
    5b48:	0000dea9 	.word	0x0000dea9

00005b4c <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    5b4c:	6801      	ldr	r1, [r0, #0]
    5b4e:	4a0e      	ldr	r2, [pc, #56]	; (5b88 <verify_header+0x3c>)
    5b50:	4291      	cmp	r1, r2
{
    5b52:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    5b54:	d115      	bne.n	5b82 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    5b56:	69c1      	ldr	r1, [r0, #28]
    5b58:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    5b5c:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    5b60:	4291      	cmp	r1, r2
    5b62:	d10e      	bne.n	5b82 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    5b64:	6882      	ldr	r2, [r0, #8]
    5b66:	2a01      	cmp	r2, #1
    5b68:	d80b      	bhi.n	5b82 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    5b6a:	68c2      	ldr	r2, [r0, #12]
    5b6c:	b112      	cbz	r2, 5b74 <verify_header+0x28>
    5b6e:	6901      	ldr	r1, [r0, #16]
    5b70:	428a      	cmp	r2, r1
    5b72:	d006      	beq.n	5b82 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    5b74:	6958      	ldr	r0, [r3, #20]
    5b76:	b128      	cbz	r0, 5b84 <verify_header+0x38>
    5b78:	699b      	ldr	r3, [r3, #24]
    5b7a:	1a1b      	subs	r3, r3, r0
    5b7c:	4258      	negs	r0, r3
    5b7e:	4158      	adcs	r0, r3
    5b80:	4770      	bx	lr
        return( 1 );
    5b82:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    5b84:	4770      	bx	lr
    5b86:	bf00      	nop
    5b88:	ff00aa55 	.word	0xff00aa55

00005b8c <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    5b8c:	4b0d      	ldr	r3, [pc, #52]	; (5bc4 <verify_chain+0x38>)
{
    5b8e:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    5b90:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    5b92:	b1a6      	cbz	r6, 5bbe <verify_chain+0x32>
    5b94:	4630      	mov	r0, r6
    5b96:	f7ff ffd9 	bl	5b4c <verify_header>
    5b9a:	4604      	mov	r4, r0
    5b9c:	b978      	cbnz	r0, 5bbe <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    5b9e:	68f3      	ldr	r3, [r6, #12]
    5ba0:	b96b      	cbnz	r3, 5bbe <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    5ba2:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    5ba4:	b90d      	cbnz	r5, 5baa <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    5ba6:	4620      	mov	r0, r4
    5ba8:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    5baa:	4628      	mov	r0, r5
    5bac:	f7ff ffce 	bl	5b4c <verify_header>
    5bb0:	b928      	cbnz	r0, 5bbe <verify_chain+0x32>
        if( cur->prev != prv )
    5bb2:	68eb      	ldr	r3, [r5, #12]
    5bb4:	42b3      	cmp	r3, r6
    5bb6:	d102      	bne.n	5bbe <verify_chain+0x32>
        cur = cur->next;
    5bb8:	462e      	mov	r6, r5
    5bba:	692d      	ldr	r5, [r5, #16]
    5bbc:	e7f2      	b.n	5ba4 <verify_chain+0x18>
        return( 1 );
    5bbe:	2401      	movs	r4, #1
    5bc0:	e7f1      	b.n	5ba6 <verify_chain+0x1a>
    5bc2:	bf00      	nop
    5bc4:	200027e8 	.word	0x200027e8

00005bc8 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    5bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    5bcc:	4f40      	ldr	r7, [pc, #256]	; (5cd0 <buffer_alloc_calloc+0x108>)
    5bce:	683c      	ldr	r4, [r7, #0]
    5bd0:	b1d4      	cbz	r4, 5c08 <buffer_alloc_calloc+0x40>
    5bd2:	68bc      	ldr	r4, [r7, #8]
    5bd4:	b1c4      	cbz	r4, 5c08 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    5bd6:	2800      	cmp	r0, #0
    5bd8:	d04d      	beq.n	5c76 <buffer_alloc_calloc+0xae>
    5bda:	2900      	cmp	r1, #0
    5bdc:	d04b      	beq.n	5c76 <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    5bde:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    5be2:	fbb5 f0f0 	udiv	r0, r5, r0
    5be6:	4288      	cmp	r0, r1
    5be8:	d145      	bne.n	5c76 <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    5bea:	1d28      	adds	r0, r5, #4
    5bec:	d843      	bhi.n	5c76 <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    5bee:	07a9      	lsls	r1, r5, #30
    5bf0:	d00d      	beq.n	5c0e <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    5bf2:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    5bf6:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    5bf8:	68fc      	ldr	r4, [r7, #12]
    5bfa:	e003      	b.n	5c04 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    5bfc:	6863      	ldr	r3, [r4, #4]
    5bfe:	42b3      	cmp	r3, r6
    5c00:	d23b      	bcs.n	5c7a <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    5c02:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    5c04:	2c00      	cmp	r4, #0
    5c06:	d1f9      	bne.n	5bfc <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    5c08:	4620      	mov	r0, r4
    5c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c0e:	462e      	mov	r6, r5
    5c10:	e7f2      	b.n	5bf8 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    5c12:	60f8      	str	r0, [r7, #12]
    5c14:	e044      	b.n	5ca0 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    5c16:	f106 0c20 	add.w	ip, r6, #32
    5c1a:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    5c1e:	3920      	subs	r1, #32
    5c20:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    5c22:	2100      	movs	r1, #0
    new->prev = cur;
    5c24:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->magic1 = MAGIC1;
    5c28:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 5cd4 <buffer_alloc_calloc+0x10c>
    new->next = cur->next;
    5c2c:	6921      	ldr	r1, [r4, #16]
    5c2e:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    5c30:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    5c34:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 5cd8 <buffer_alloc_calloc+0x110>
    5c38:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    5c3c:	b101      	cbz	r1, 5c40 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    5c3e:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    5c40:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    5c44:	b1aa      	cbz	r2, 5c72 <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    5c46:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    5c48:	699a      	ldr	r2, [r3, #24]
    5c4a:	b102      	cbz	r2, 5c4e <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    5c4c:	6153      	str	r3, [r2, #20]
    cur->next = new;
    5c4e:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    5c50:	2300      	movs	r3, #0
    cur->next_free = NULL;
    5c52:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    5c56:	693b      	ldr	r3, [r7, #16]
    cur->alloc = 1;
    5c58:	f04f 0901 	mov.w	r9, #1
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    5c5c:	07db      	lsls	r3, r3, #31
    cur->size = len;
    5c5e:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    5c62:	d52d      	bpl.n	5cc0 <buffer_alloc_calloc+0xf8>
    5c64:	f7ff ff92 	bl	5b8c <verify_chain>
    5c68:	b350      	cbz	r0, 5cc0 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    5c6a:	4b1c      	ldr	r3, [pc, #112]	; (5cdc <buffer_alloc_calloc+0x114>)
    5c6c:	4648      	mov	r0, r9
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	e025      	b.n	5cbe <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    5c72:	60fb      	str	r3, [r7, #12]
    5c74:	e7e8      	b.n	5c48 <buffer_alloc_calloc+0x80>
        return( NULL );
    5c76:	2400      	movs	r4, #0
    5c78:	e7c6      	b.n	5c08 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    5c7a:	68a3      	ldr	r3, [r4, #8]
    5c7c:	b11b      	cbz	r3, 5c86 <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    5c7e:	4b17      	ldr	r3, [pc, #92]	; (5cdc <buffer_alloc_calloc+0x114>)
    5c80:	2001      	movs	r0, #1
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    5c86:	6861      	ldr	r1, [r4, #4]
    5c88:	1b89      	subs	r1, r1, r6
    5c8a:	2923      	cmp	r1, #35	; 0x23
            cur->prev_free->next_free = cur->next_free;
    5c8c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    5c90:	f104 0820 	add.w	r8, r4, #32
    if( cur->size - len < sizeof(memory_header) +
    5c94:	d8bf      	bhi.n	5c16 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    5c96:	2301      	movs	r3, #1
    5c98:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    5c9a:	2a00      	cmp	r2, #0
    5c9c:	d0b9      	beq.n	5c12 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    5c9e:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    5ca0:	69a3      	ldr	r3, [r4, #24]
    5ca2:	b103      	cbz	r3, 5ca6 <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    5ca4:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    5ca6:	2300      	movs	r3, #0
        cur->next_free = NULL;
    5ca8:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    5cac:	693b      	ldr	r3, [r7, #16]
    5cae:	07da      	lsls	r2, r3, #31
    5cb0:	d506      	bpl.n	5cc0 <buffer_alloc_calloc+0xf8>
    5cb2:	f7ff ff6b 	bl	5b8c <verify_chain>
    5cb6:	b118      	cbz	r0, 5cc0 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    5cb8:	4b08      	ldr	r3, [pc, #32]	; (5cdc <buffer_alloc_calloc+0x114>)
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	2001      	movs	r0, #1
        mbedtls_exit( 1 );
    5cbe:	4798      	blx	r3
    memset( ret, 0, original_len );
    5cc0:	462a      	mov	r2, r5
    5cc2:	2100      	movs	r1, #0
    5cc4:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    5cc6:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    5cc8:	f004 ff16 	bl	aaf8 <memset>
    return( ret );
    5ccc:	e79c      	b.n	5c08 <buffer_alloc_calloc+0x40>
    5cce:	bf00      	nop
    5cd0:	200027e8 	.word	0x200027e8
    5cd4:	ff00aa55 	.word	0xff00aa55
    5cd8:	ee119966 	.word	0xee119966
    5cdc:	20000178 	.word	0x20000178

00005ce0 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    5ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    5ce4:	4605      	mov	r5, r0
    5ce6:	2800      	cmp	r0, #0
    5ce8:	d07d      	beq.n	5de6 <buffer_alloc_free+0x106>
    5cea:	4f40      	ldr	r7, [pc, #256]	; (5dec <buffer_alloc_free+0x10c>)
    5cec:	683b      	ldr	r3, [r7, #0]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d079      	beq.n	5de6 <buffer_alloc_free+0x106>
    5cf2:	68ba      	ldr	r2, [r7, #8]
    5cf4:	2a00      	cmp	r2, #0
    5cf6:	d076      	beq.n	5de6 <buffer_alloc_free+0x106>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    5cf8:	4283      	cmp	r3, r0
    5cfa:	d803      	bhi.n	5d04 <buffer_alloc_free+0x24>
    5cfc:	687a      	ldr	r2, [r7, #4]
    5cfe:	4413      	add	r3, r2
    5d00:	4298      	cmp	r0, r3
    5d02:	d303      	bcc.n	5d0c <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    5d04:	4b3a      	ldr	r3, [pc, #232]	; (5df0 <buffer_alloc_free+0x110>)
    5d06:	2001      	movs	r0, #1
    5d08:	681b      	ldr	r3, [r3, #0]
    5d0a:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    5d0c:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    5d10:	4620      	mov	r0, r4
    5d12:	f7ff ff1b 	bl	5b4c <verify_header>
    5d16:	b118      	cbz	r0, 5d20 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    5d18:	4b35      	ldr	r3, [pc, #212]	; (5df0 <buffer_alloc_free+0x110>)
    5d1a:	2001      	movs	r0, #1
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	4798      	blx	r3

    if( hdr->alloc != 1 )
    5d20:	f855 3c18 	ldr.w	r3, [r5, #-24]
    5d24:	2b01      	cmp	r3, #1
    5d26:	d003      	beq.n	5d30 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    5d28:	4b31      	ldr	r3, [pc, #196]	; (5df0 <buffer_alloc_free+0x110>)
    5d2a:	2001      	movs	r0, #1
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	4798      	blx	r3
        memset( old, 0, sizeof(memory_header) );
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    5d30:	e955 6005 	ldrd	r6, r0, [r5, #-20]
    hdr->alloc = 0;
    5d34:	2300      	movs	r3, #0
    5d36:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    5d3a:	b946      	cbnz	r6, 5d4e <buffer_alloc_free+0x6e>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    5d3c:	b108      	cbz	r0, 5d42 <buffer_alloc_free+0x62>
    5d3e:	6883      	ldr	r3, [r0, #8]
    5d40:	b1eb      	cbz	r3, 5d7e <buffer_alloc_free+0x9e>
    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    {
        hdr->next_free = heap.first_free;
    5d42:	68fb      	ldr	r3, [r7, #12]
    5d44:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    5d46:	b103      	cbz	r3, 5d4a <buffer_alloc_free+0x6a>
            heap.first_free->prev_free = hdr;
    5d48:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    5d4a:	60fc      	str	r4, [r7, #12]
    5d4c:	e031      	b.n	5db2 <buffer_alloc_free+0xd2>
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    5d4e:	68b3      	ldr	r3, [r6, #8]
    5d50:	2b00      	cmp	r3, #0
    5d52:	d1f3      	bne.n	5d3c <buffer_alloc_free+0x5c>
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    5d54:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    5d58:	6873      	ldr	r3, [r6, #4]
        hdr->prev->next = hdr->next;
    5d5a:	6130      	str	r0, [r6, #16]
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    5d5c:	3220      	adds	r2, #32
    5d5e:	4413      	add	r3, r2
    5d60:	6073      	str	r3, [r6, #4]
        if( hdr->next != NULL )
    5d62:	b100      	cbz	r0, 5d66 <buffer_alloc_free+0x86>
            hdr->next->prev = hdr;
    5d64:	60c6      	str	r6, [r0, #12]
        memset( old, 0, sizeof(memory_header) );
    5d66:	2220      	movs	r2, #32
    5d68:	2100      	movs	r1, #0
    5d6a:	4620      	mov	r0, r4
    5d6c:	f004 fec4 	bl	aaf8 <memset>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    5d70:	6930      	ldr	r0, [r6, #16]
    5d72:	2800      	cmp	r0, #0
    5d74:	d033      	beq.n	5dde <buffer_alloc_free+0xfe>
    5d76:	6883      	ldr	r3, [r0, #8]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d130      	bne.n	5dde <buffer_alloc_free+0xfe>
    5d7c:	4634      	mov	r4, r6
        hdr->size += sizeof(memory_header) + hdr->next->size;
    5d7e:	6842      	ldr	r2, [r0, #4]
    5d80:	6863      	ldr	r3, [r4, #4]
    5d82:	4413      	add	r3, r2
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    5d84:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->size += sizeof(memory_header) + hdr->next->size;
    5d88:	3320      	adds	r3, #32
    5d8a:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    5d8c:	6903      	ldr	r3, [r0, #16]
    5d8e:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    5d90:	b9da      	cbnz	r2, 5dca <buffer_alloc_free+0xea>
    5d92:	bb01      	cbnz	r1, 5dd6 <buffer_alloc_free+0xf6>
        hdr->prev_free = old->prev_free;
    5d94:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    5d96:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    5d98:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    5d9a:	61a1      	str	r1, [r4, #24]
        if( hdr->prev_free != NULL )
    5d9c:	b1ea      	cbz	r2, 5dda <buffer_alloc_free+0xfa>
            hdr->prev_free->next_free = hdr;
    5d9e:	6194      	str	r4, [r2, #24]
        if( hdr->next_free != NULL )
    5da0:	69a2      	ldr	r2, [r4, #24]
    5da2:	b102      	cbz	r2, 5da6 <buffer_alloc_free+0xc6>
            hdr->next_free->prev_free = hdr;
    5da4:	6154      	str	r4, [r2, #20]
        if( hdr->next != NULL )
    5da6:	b103      	cbz	r3, 5daa <buffer_alloc_free+0xca>
            hdr->next->prev = hdr;
    5da8:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    5daa:	2220      	movs	r2, #32
    5dac:	2100      	movs	r1, #0
    5dae:	f004 fea3 	bl	aaf8 <memset>
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    5db2:	693b      	ldr	r3, [r7, #16]
    5db4:	079b      	lsls	r3, r3, #30
    5db6:	d516      	bpl.n	5de6 <buffer_alloc_free+0x106>
    5db8:	f7ff fee8 	bl	5b8c <verify_chain>
    5dbc:	b198      	cbz	r0, 5de6 <buffer_alloc_free+0x106>
        mbedtls_exit( 1 );
    5dbe:	4b0c      	ldr	r3, [pc, #48]	; (5df0 <buffer_alloc_free+0x110>)
}
    5dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    5dc4:	681b      	ldr	r3, [r3, #0]
    5dc6:	2001      	movs	r0, #1
    5dc8:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    5dca:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    5dcc:	69a1      	ldr	r1, [r4, #24]
    5dce:	2900      	cmp	r1, #0
    5dd0:	d0e0      	beq.n	5d94 <buffer_alloc_free+0xb4>
                hdr->next_free->prev_free = hdr->prev_free;
    5dd2:	614a      	str	r2, [r1, #20]
    5dd4:	e7de      	b.n	5d94 <buffer_alloc_free+0xb4>
                heap.first_free = hdr->next_free;
    5dd6:	60f9      	str	r1, [r7, #12]
    5dd8:	e7f8      	b.n	5dcc <buffer_alloc_free+0xec>
            heap.first_free = hdr;
    5dda:	60fc      	str	r4, [r7, #12]
    5ddc:	e7e0      	b.n	5da0 <buffer_alloc_free+0xc0>
    if( old == NULL )
    5dde:	2c00      	cmp	r4, #0
    5de0:	d1e7      	bne.n	5db2 <buffer_alloc_free+0xd2>
    5de2:	4634      	mov	r4, r6
    5de4:	e7ad      	b.n	5d42 <buffer_alloc_free+0x62>
}
    5de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dea:	bf00      	nop
    5dec:	200027e8 	.word	0x200027e8
    5df0:	20000178 	.word	0x20000178

00005df4 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    5df4:	b538      	push	{r3, r4, r5, lr}
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    5df6:	2214      	movs	r2, #20
{
    5df8:	460d      	mov	r5, r1
    5dfa:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    5dfc:	2100      	movs	r1, #0
    5dfe:	4812      	ldr	r0, [pc, #72]	; (5e48 <mbedtls_memory_buffer_alloc_init+0x54>)
    5e00:	f004 fe7a 	bl	aaf8 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    5e04:	4911      	ldr	r1, [pc, #68]	; (5e4c <mbedtls_memory_buffer_alloc_init+0x58>)
    5e06:	4812      	ldr	r0, [pc, #72]	; (5e50 <mbedtls_memory_buffer_alloc_init+0x5c>)
    5e08:	f000 f832 	bl	5e70 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    5e0c:	2d23      	cmp	r5, #35	; 0x23
    5e0e:	d91a      	bls.n	5e46 <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    5e10:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    5e14:	bf1f      	itttt	ne
    5e16:	3d04      	subne	r5, #4
    5e18:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    5e1a:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    5e1e:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    5e20:	462a      	mov	r2, r5
    5e22:	2100      	movs	r1, #0
    5e24:	4620      	mov	r0, r4
    5e26:	f004 fe67 	bl	aaf8 <memset>

    heap.buf = buf;
    5e2a:	4b07      	ldr	r3, [pc, #28]	; (5e48 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    5e2c:	4a09      	ldr	r2, [pc, #36]	; (5e54 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.first = (memory_header *)buf;
    5e2e:	609c      	str	r4, [r3, #8]
    heap.len = len;
    5e30:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first->magic1 = MAGIC1;
    5e34:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    5e36:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    5e3a:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    5e3c:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    5e40:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    5e42:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    5e44:	60dc      	str	r4, [r3, #12]
}
    5e46:	bd38      	pop	{r3, r4, r5, pc}
    5e48:	200027e8 	.word	0x200027e8
    5e4c:	00005ce1 	.word	0x00005ce1
    5e50:	00005bc9 	.word	0x00005bc9
    5e54:	ff00aa55 	.word	0xff00aa55

00005e58 <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    5e58:	4b01      	ldr	r3, [pc, #4]	; (5e60 <mbedtls_calloc+0x8>)
    5e5a:	681b      	ldr	r3, [r3, #0]
    5e5c:	4718      	bx	r3
    5e5e:	bf00      	nop
    5e60:	20000180 	.word	0x20000180

00005e64 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    5e64:	4b01      	ldr	r3, [pc, #4]	; (5e6c <mbedtls_free+0x8>)
    5e66:	681b      	ldr	r3, [r3, #0]
    5e68:	4718      	bx	r3
    5e6a:	bf00      	nop
    5e6c:	2000017c 	.word	0x2000017c

00005e70 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    5e70:	4b02      	ldr	r3, [pc, #8]	; (5e7c <mbedtls_platform_set_calloc_free+0xc>)
    5e72:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    5e74:	4b02      	ldr	r3, [pc, #8]	; (5e80 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    5e76:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    5e78:	6019      	str	r1, [r3, #0]
}
    5e7a:	4770      	bx	lr
    5e7c:	20000180 	.word	0x20000180
    5e80:	2000017c 	.word	0x2000017c

00005e84 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    5e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    5e86:	f100 0608 	add.w	r6, r0, #8
    5e8a:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    5e8c:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    5e8e:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    5e90:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    5e92:	f005 fe78 	bl	bb86 <mbedtls_mpi_size>
    5e96:	4287      	cmp	r7, r0
    5e98:	d14b      	bne.n	5f32 <rsa_check_context.constprop.0+0xae>
    5e9a:	6863      	ldr	r3, [r4, #4]
    5e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5ea0:	d847      	bhi.n	5f32 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    5ea2:	2100      	movs	r1, #0
    5ea4:	4630      	mov	r0, r6
    5ea6:	f005 ffcf 	bl	be48 <mbedtls_mpi_cmp_int>
    5eaa:	2800      	cmp	r0, #0
    5eac:	dd41      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    5eae:	2100      	movs	r1, #0
    5eb0:	4630      	mov	r0, r6
    5eb2:	f005 fe39 	bl	bb28 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    5eb6:	b3e0      	cbz	r0, 5f32 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    5eb8:	b945      	cbnz	r5, 5ecc <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    5eba:	4629      	mov	r1, r5
    5ebc:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    5ec0:	f005 ffc2 	bl	be48 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    5ec4:	2800      	cmp	r0, #0
    5ec6:	dd34      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    5ec8:	2000      	movs	r0, #0
}
    5eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    5ecc:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    5ed0:	2100      	movs	r1, #0
    5ed2:	4628      	mov	r0, r5
    5ed4:	f005 ffb8 	bl	be48 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    5ed8:	2800      	cmp	r0, #0
    5eda:	dd2a      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    5edc:	2100      	movs	r1, #0
    5ede:	4628      	mov	r0, r5
    5ee0:	f005 fe22 	bl	bb28 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    5ee4:	b328      	cbz	r0, 5f32 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    5ee6:	f104 0538 	add.w	r5, r4, #56	; 0x38
    5eea:	2100      	movs	r1, #0
    5eec:	4628      	mov	r0, r5
    5eee:	f005 ffab 	bl	be48 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    5ef2:	2800      	cmp	r0, #0
    5ef4:	dd1d      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    5ef6:	2100      	movs	r1, #0
    5ef8:	4628      	mov	r0, r5
    5efa:	f005 fe15 	bl	bb28 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    5efe:	b1c0      	cbz	r0, 5f32 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    5f00:	2100      	movs	r1, #0
    5f02:	f104 0014 	add.w	r0, r4, #20
    5f06:	f005 ff9f 	bl	be48 <mbedtls_mpi_cmp_int>
    5f0a:	2800      	cmp	r0, #0
    5f0c:	dd11      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    5f0e:	2100      	movs	r1, #0
    5f10:	f104 0044 	add.w	r0, r4, #68	; 0x44
    5f14:	f005 ff98 	bl	be48 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    5f18:	2800      	cmp	r0, #0
    5f1a:	dd0a      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    5f1c:	2100      	movs	r1, #0
    5f1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5f22:	f005 ff91 	bl	be48 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    5f26:	2800      	cmp	r0, #0
    5f28:	dd03      	ble.n	5f32 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    5f2a:	2100      	movs	r1, #0
    5f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    5f30:	e7c6      	b.n	5ec0 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    5f32:	4801      	ldr	r0, [pc, #4]	; (5f38 <rsa_check_context.constprop.0+0xb4>)
    5f34:	e7c9      	b.n	5eca <rsa_check_context.constprop.0+0x46>
    5f36:	bf00      	nop
    5f38:	ffffbf80 	.word	0xffffbf80

00005f3c <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    5f3c:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    5f3e:	2100      	movs	r1, #0
{
    5f40:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    5f42:	f7ff ff9f 	bl	5e84 <rsa_check_context.constprop.0>
    5f46:	4605      	mov	r5, r0
    5f48:	b110      	cbz	r0, 5f50 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    5f4a:	4d0e      	ldr	r5, [pc, #56]	; (5f84 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    5f4c:	4628      	mov	r0, r5
    5f4e:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    5f50:	f104 0608 	add.w	r6, r4, #8
    5f54:	4630      	mov	r0, r6
    5f56:	f005 fdf7 	bl	bb48 <mbedtls_mpi_bitlen>
    5f5a:	287f      	cmp	r0, #127	; 0x7f
    5f5c:	d9f5      	bls.n	5f4a <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    5f5e:	3414      	adds	r4, #20
    5f60:	4629      	mov	r1, r5
    5f62:	4620      	mov	r0, r4
    5f64:	f005 fde0 	bl	bb28 <mbedtls_mpi_get_bit>
    5f68:	2800      	cmp	r0, #0
    5f6a:	d0ee      	beq.n	5f4a <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    5f6c:	4620      	mov	r0, r4
    5f6e:	f005 fdeb 	bl	bb48 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    5f72:	2801      	cmp	r0, #1
    5f74:	d9e9      	bls.n	5f4a <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    5f76:	4631      	mov	r1, r6
    5f78:	4620      	mov	r0, r4
    5f7a:	f005 ff24 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    5f7e:	2800      	cmp	r0, #0
    5f80:	dbe4      	blt.n	5f4c <mbedtls_rsa_check_pubkey+0x10>
    5f82:	e7e2      	b.n	5f4a <mbedtls_rsa_check_pubkey+0xe>
    5f84:	ffffbe00 	.word	0xffffbe00

00005f88 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    5f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f8a:	460c      	mov	r4, r1
    5f8c:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    5f8e:	2100      	movs	r1, #0
{
    5f90:	4605      	mov	r5, r0
    5f92:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    5f94:	f7ff ff76 	bl	5e84 <rsa_check_context.constprop.0>
    5f98:	2800      	cmp	r0, #0
    5f9a:	d139      	bne.n	6010 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    5f9c:	a803      	add	r0, sp, #12
    5f9e:	f005 fce9 	bl	b974 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    5fa2:	4621      	mov	r1, r4
    5fa4:	686a      	ldr	r2, [r5, #4]
    5fa6:	a803      	add	r0, sp, #12
    5fa8:	f005 fdf3 	bl	bb92 <mbedtls_mpi_read_binary>
    5fac:	4604      	mov	r4, r0
    5fae:	b118      	cbz	r0, 5fb8 <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    5fb0:	a803      	add	r0, sp, #12
    5fb2:	f005 fce5 	bl	b980 <mbedtls_mpi_free>

    if( ret != 0 )
    5fb6:	e00c      	b.n	5fd2 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    5fb8:	f105 0408 	add.w	r4, r5, #8
    5fbc:	4621      	mov	r1, r4
    5fbe:	a803      	add	r0, sp, #12
    5fc0:	f005 ff01 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
    5fc4:	2800      	cmp	r0, #0
    5fc6:	db07      	blt.n	5fd8 <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    5fc8:	a803      	add	r0, sp, #12
    5fca:	f005 fcd9 	bl	b980 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    5fce:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    5fd2:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    5fd6:	e018      	b.n	600a <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    5fd8:	f105 0368 	add.w	r3, r5, #104	; 0x68
    5fdc:	a903      	add	r1, sp, #12
    olen = ctx->len;
    5fde:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    5fe0:	9300      	str	r3, [sp, #0]
    5fe2:	f105 0214 	add.w	r2, r5, #20
    5fe6:	4623      	mov	r3, r4
    5fe8:	4608      	mov	r0, r1
    5fea:	f006 fa46 	bl	c47a <mbedtls_mpi_exp_mod>
    5fee:	4604      	mov	r4, r0
    5ff0:	2800      	cmp	r0, #0
    5ff2:	d1dd      	bne.n	5fb0 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    5ff4:	463a      	mov	r2, r7
    5ff6:	4631      	mov	r1, r6
    5ff8:	a803      	add	r0, sp, #12
    5ffa:	f005 fdeb 	bl	bbd4 <mbedtls_mpi_write_binary>
    5ffe:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    6000:	a803      	add	r0, sp, #12
    6002:	f005 fcbd 	bl	b980 <mbedtls_mpi_free>
    if( ret != 0 )
    6006:	2c00      	cmp	r4, #0
    6008:	d1e3      	bne.n	5fd2 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    600a:	4620      	mov	r0, r4
    600c:	b007      	add	sp, #28
    600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6010:	4c00      	ldr	r4, [pc, #0]	; (6014 <mbedtls_rsa_public+0x8c>)
    6012:	e7fa      	b.n	600a <mbedtls_rsa_public+0x82>
    6014:	ffffbf80 	.word	0xffffbf80

00006018 <mbedtls_sha256_starts>:
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    6018:	4a23      	ldr	r2, [pc, #140]	; (60a8 <mbedtls_sha256_starts+0x90>)
{
    601a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
    601e:	f1b1 0800 	subs.w	r8, r1, #0
    6022:	bf18      	it	ne
    6024:	4696      	movne	lr, r2
    6026:	4a21      	ldr	r2, [pc, #132]	; (60ac <mbedtls_sha256_starts+0x94>)
    6028:	4921      	ldr	r1, [pc, #132]	; (60b0 <mbedtls_sha256_starts+0x98>)
    602a:	4f22      	ldr	r7, [pc, #136]	; (60b4 <mbedtls_sha256_starts+0x9c>)
    602c:	4e22      	ldr	r6, [pc, #136]	; (60b8 <mbedtls_sha256_starts+0xa0>)
    602e:	4d23      	ldr	r5, [pc, #140]	; (60bc <mbedtls_sha256_starts+0xa4>)
    6030:	4c23      	ldr	r4, [pc, #140]	; (60c0 <mbedtls_sha256_starts+0xa8>)
    6032:	bf18      	it	ne
    6034:	4694      	movne	ip, r2
    6036:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    603a:	bf08      	it	eq
    603c:	468e      	moveq	lr, r1
    603e:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    6042:	4920      	ldr	r1, [pc, #128]	; (60c4 <mbedtls_sha256_starts+0xac>)
    6044:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    6048:	bf08      	it	eq
    604a:	468c      	moveq	ip, r1
    604c:	491e      	ldr	r1, [pc, #120]	; (60c8 <mbedtls_sha256_starts+0xb0>)
    604e:	bf18      	it	ne
    6050:	4611      	movne	r1, r2
    6052:	4a1e      	ldr	r2, [pc, #120]	; (60cc <mbedtls_sha256_starts+0xb4>)
    6054:	bf18      	it	ne
    6056:	4617      	movne	r7, r2
    6058:	4a1d      	ldr	r2, [pc, #116]	; (60d0 <mbedtls_sha256_starts+0xb8>)
    605a:	bf18      	it	ne
    605c:	4616      	movne	r6, r2
    605e:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    6062:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    6066:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    606a:	bf18      	it	ne
    606c:	4615      	movne	r5, r2
    606e:	4a19      	ldr	r2, [pc, #100]	; (60d4 <mbedtls_sha256_starts+0xbc>)
{
    6070:	4603      	mov	r3, r0
    if( is224 == 0 )
    6072:	bf18      	it	ne
    6074:	4614      	movne	r4, r2
    6076:	4818      	ldr	r0, [pc, #96]	; (60d8 <mbedtls_sha256_starts+0xc0>)
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    6078:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
    if( is224 == 0 )
    607c:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    6080:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    6084:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    6088:	bf18      	it	ne
    608a:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    608c:	2000      	movs	r0, #0
    ctx->total[1] = 0;
    608e:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[1] = 0xBB67AE85;
    6092:	e9c3 ec02 	strd	lr, ip, [r3, #8]
        ctx->state[3] = 0xA54FF53A;
    6096:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[5] = 0x9B05688C;
    609a:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[7] = 0x5BE0CD19;
    609e:	e9c3 4208 	strd	r4, r2, [r3, #32]

    return( 0 );
}
    60a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60a6:	bf00      	nop
    60a8:	c1059ed8 	.word	0xc1059ed8
    60ac:	367cd507 	.word	0x367cd507
    60b0:	6a09e667 	.word	0x6a09e667
    60b4:	a54ff53a 	.word	0xa54ff53a
    60b8:	510e527f 	.word	0x510e527f
    60bc:	9b05688c 	.word	0x9b05688c
    60c0:	1f83d9ab 	.word	0x1f83d9ab
    60c4:	bb67ae85 	.word	0xbb67ae85
    60c8:	3c6ef372 	.word	0x3c6ef372
    60cc:	f70e5939 	.word	0xf70e5939
    60d0:	ffc00b31 	.word	0xffc00b31
    60d4:	64f98fa7 	.word	0x64f98fa7
    60d8:	befa4fa4 	.word	0xbefa4fa4

000060dc <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    60dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60e0:	b0d1      	sub	sp, #324	; 0x144
    60e2:	1d03      	adds	r3, r0, #4
    60e4:	9301      	str	r3, [sp, #4]
    60e6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    60ea:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    60ee:	9303      	str	r3, [sp, #12]
    60f0:	9b01      	ldr	r3, [sp, #4]
    60f2:	465a      	mov	r2, fp

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    60f4:	f853 0f04 	ldr.w	r0, [r3, #4]!
    60f8:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    60fc:	9803      	ldr	r0, [sp, #12]
    60fe:	4298      	cmp	r0, r3
    6100:	d1f8      	bne.n	60f4 <mbedtls_internal_sha256_process+0x18>
    6102:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    6104:	9302      	str	r3, [sp, #8]
    6106:	ad4c      	add	r5, sp, #304	; 0x130
    6108:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    610c:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    6110:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120
    6114:	9304      	str	r3, [sp, #16]
    6116:	4b42      	ldr	r3, [pc, #264]	; (6220 <mbedtls_internal_sha256_process+0x144>)
    6118:	9305      	str	r3, [sp, #20]
    611a:	aa06      	add	r2, sp, #24

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    611c:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
    6120:	f1b9 0f0f 	cmp.w	r9, #15
    6124:	d863      	bhi.n	61ee <mbedtls_internal_sha256_process+0x112>
            GET_UINT32_BE( local.W[i], data, 4 * i );
    6126:	784c      	ldrb	r4, [r1, #1]
    6128:	780b      	ldrb	r3, [r1, #0]
    612a:	0424      	lsls	r4, r4, #16
    612c:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    6130:	78cb      	ldrb	r3, [r1, #3]
    6132:	4323      	orrs	r3, r4
    6134:	788c      	ldrb	r4, [r1, #2]
    6136:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    613a:	ea4f 2af5 	mov.w	sl, r5, ror #11
    613e:	ea8c 0408 	eor.w	r4, ip, r8
    6142:	9e05      	ldr	r6, [sp, #20]
    6144:	6093      	str	r3, [r2, #8]
    6146:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    614a:	402c      	ands	r4, r5
    614c:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    6150:	ea84 040c 	eor.w	r4, r4, ip
    6154:	4454      	add	r4, sl
    6156:	f856 ab04 	ldr.w	sl, [r6], #4
    615a:	9605      	str	r6, [sp, #20]
    615c:	4454      	add	r4, sl
    615e:	4423      	add	r3, r4
    6160:	9c02      	ldr	r4, [sp, #8]
    6162:	f8cd c008 	str.w	ip, [sp, #8]
    6166:	4423      	add	r3, r4
    6168:	ea4f 3a70 	mov.w	sl, r0, ror #13
    616c:	ea40 0407 	orr.w	r4, r0, r7
    6170:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    6174:	ea04 040e 	and.w	r4, r4, lr
    6178:	ea00 0607 	and.w	r6, r0, r7
    617c:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    6180:	4334      	orrs	r4, r6
    6182:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    6184:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6188:	f8dd a010 	ldr.w	sl, [sp, #16]
    618c:	f8cd e010 	str.w	lr, [sp, #16]
    for( i = 0; i < 64; i++ )
    6190:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6194:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    6196:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    619a:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    619c:	f101 0104 	add.w	r1, r1, #4
    61a0:	d11e      	bne.n	61e0 <mbedtls_internal_sha256_process+0x104>
    61a2:	e9cd 3406 	strd	r3, r4, [sp, #24]
    61a6:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    61aa:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    61ae:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    61b2:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    61b6:	9a01      	ldr	r2, [sp, #4]
    61b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
    61bc:	9201      	str	r2, [sp, #4]
    61be:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    61c2:	4413      	add	r3, r2
    61c4:	9a01      	ldr	r2, [sp, #4]
    61c6:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    61c8:	9b03      	ldr	r3, [sp, #12]
    61ca:	4293      	cmp	r3, r2
    61cc:	d1f3      	bne.n	61b6 <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    61ce:	a806      	add	r0, sp, #24
    61d0:	f44f 7194 	mov.w	r1, #296	; 0x128
    61d4:	f002 ffde 	bl	9194 <mbedtls_platform_zeroize>

    return( 0 );
}
    61d8:	2000      	movs	r0, #0
    61da:	b051      	add	sp, #324	; 0x144
    61dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61e0:	46be      	mov	lr, r7
    61e2:	46c4      	mov	ip, r8
    61e4:	4607      	mov	r7, r0
    61e6:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    61e8:	4618      	mov	r0, r3
    61ea:	4655      	mov	r5, sl
    61ec:	e798      	b.n	6120 <mbedtls_internal_sha256_process+0x44>
            R( i );
    61ee:	6813      	ldr	r3, [r2, #0]
    61f0:	f852 4c38 	ldr.w	r4, [r2, #-56]
    61f4:	f852 6c34 	ldr.w	r6, [r2, #-52]
    61f8:	ea4f 4af3 	mov.w	sl, r3, ror #19
    61fc:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    6200:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    6204:	f852 3c14 	ldr.w	r3, [r2, #-20]
    6208:	4423      	add	r3, r4
    620a:	f852 4c34 	ldr.w	r4, [r2, #-52]
    620e:	ea4f 44b4 	mov.w	r4, r4, ror #18
    6212:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    6216:	4453      	add	r3, sl
    6218:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    621c:	4423      	add	r3, r4
    621e:	e78c      	b.n	613a <mbedtls_internal_sha256_process+0x5e>
    6220:	0000d980 	.word	0x0000d980

00006224 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6228:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    622c:	2a08      	cmp	r2, #8
    622e:	d106      	bne.n	623e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6230:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    6234:	2b05      	cmp	r3, #5
    6236:	d802      	bhi.n	623e <nrf52_errata_103+0x1a>
    6238:	4a02      	ldr	r2, [pc, #8]	; (6244 <nrf52_errata_103+0x20>)
    623a:	5cd0      	ldrb	r0, [r2, r3]
    623c:	4770      	bx	lr
                        return false;
    623e:	2000      	movs	r0, #0
}
    6240:	4770      	bx	lr
    6242:	bf00      	nop
    6244:	0000dec1 	.word	0x0000dec1

00006248 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    6248:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    624a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    624e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6252:	2a08      	cmp	r2, #8
    6254:	d14e      	bne.n	62f4 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    6256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    625a:	2100      	movs	r1, #0
    625c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6260:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6264:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6268:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    626c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    6270:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6274:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    6278:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    627c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    6280:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6284:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    6288:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    628c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    6290:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6294:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6298:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    629c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    62a0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    62a4:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    62a8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    62ac:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    62b0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    62b4:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    62b8:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    62bc:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    62c0:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    62c4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    62c8:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    62cc:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    62d0:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    62d4:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    62d8:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    62dc:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    62e0:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    62e4:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    62e8:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    62ec:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    62f0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    62f4:	f7ff ff96 	bl	6224 <nrf52_errata_103>
    62f8:	b118      	cbz	r0, 6302 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    62fa:	4b25      	ldr	r3, [pc, #148]	; (6390 <SystemInit+0x148>)
    62fc:	4a25      	ldr	r2, [pc, #148]	; (6394 <SystemInit+0x14c>)
    62fe:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6302:	f7ff ff8f 	bl	6224 <nrf52_errata_103>
    6306:	b118      	cbz	r0, 6310 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6308:	4b23      	ldr	r3, [pc, #140]	; (6398 <SystemInit+0x150>)
    630a:	22fb      	movs	r2, #251	; 0xfb
    630c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6310:	f7ff ff88 	bl	6224 <nrf52_errata_103>
    6314:	b170      	cbz	r0, 6334 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    6316:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    631a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    631e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    6322:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    6326:	f022 020f 	bic.w	r2, r2, #15
    632a:	f003 030f 	and.w	r3, r3, #15
    632e:	4313      	orrs	r3, r2
    6330:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6334:	f7ff ff76 	bl	6224 <nrf52_errata_103>
    6338:	b120      	cbz	r0, 6344 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    633a:	4b18      	ldr	r3, [pc, #96]	; (639c <SystemInit+0x154>)
    633c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6340:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6348:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    634c:	2b08      	cmp	r3, #8
    634e:	d11a      	bne.n	6386 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6354:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6358:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    635a:	bf44      	itt	mi
    635c:	f06f 0201 	mvnmi.w	r2, #1
    6360:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6364:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6368:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    636c:	2b05      	cmp	r3, #5
    636e:	d802      	bhi.n	6376 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6370:	4a0b      	ldr	r2, [pc, #44]	; (63a0 <SystemInit+0x158>)
    6372:	5cd3      	ldrb	r3, [r2, r3]
    6374:	b13b      	cbz	r3, 6386 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6376:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    637a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    637e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6382:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6386:	4b07      	ldr	r3, [pc, #28]	; (63a4 <SystemInit+0x15c>)
    6388:	4a07      	ldr	r2, [pc, #28]	; (63a8 <SystemInit+0x160>)
    638a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    638c:	bd08      	pop	{r3, pc}
    638e:	bf00      	nop
    6390:	40005000 	.word	0x40005000
    6394:	00038148 	.word	0x00038148
    6398:	4000f000 	.word	0x4000f000
    639c:	40029000 	.word	0x40029000
    63a0:	0000debb 	.word	0x0000debb
    63a4:	20000184 	.word	0x20000184
    63a8:	03d09000 	.word	0x03d09000

000063ac <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    63ac:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    63ae:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    63b0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    63b2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    63b6:	fab2 f382 	clz	r3, r2
    63ba:	f1c3 031f 	rsb	r3, r3, #31
        new_mask = prev_mask & ~NRFX_BIT(idx);
    63be:	fa05 f403 	lsl.w	r4, r5, r3
    63c2:	ea22 0404 	bic.w	r4, r2, r4
    63c6:	e850 6f00 	ldrex	r6, [r0]
    63ca:	4296      	cmp	r6, r2
    63cc:	d104      	bne.n	63d8 <nrfx_flag32_alloc+0x2c>
    63ce:	e840 4c00 	strex	ip, r4, [r0]
    63d2:	f1bc 0f00 	cmp.w	ip, #0
    63d6:	d1f6      	bne.n	63c6 <nrfx_flag32_alloc+0x1a>
    63d8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    63dc:	d1e8      	bne.n	63b0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    63de:	4801      	ldr	r0, [pc, #4]	; (63e4 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
    63e0:	700b      	strb	r3, [r1, #0]
}
    63e2:	bd70      	pop	{r4, r5, r6, pc}
    63e4:	0bad0000 	.word	0x0bad0000

000063e8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    63e8:	6803      	ldr	r3, [r0, #0]
    63ea:	40cb      	lsrs	r3, r1
    63ec:	07db      	lsls	r3, r3, #31
{
    63ee:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    63f0:	d414      	bmi.n	641c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    63f2:	2301      	movs	r3, #1
    63f4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    63f6:	6802      	ldr	r2, [r0, #0]
    63f8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    63fc:	ea43 0102 	orr.w	r1, r3, r2
    6400:	e850 4f00 	ldrex	r4, [r0]
    6404:	4294      	cmp	r4, r2
    6406:	d104      	bne.n	6412 <nrfx_flag32_free+0x2a>
    6408:	e840 1c00 	strex	ip, r1, [r0]
    640c:	f1bc 0f00 	cmp.w	ip, #0
    6410:	d1f6      	bne.n	6400 <nrfx_flag32_free+0x18>
    6412:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6416:	d1ee      	bne.n	63f6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    6418:	4801      	ldr	r0, [pc, #4]	; (6420 <nrfx_flag32_free+0x38>)
}
    641a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    641c:	4801      	ldr	r0, [pc, #4]	; (6424 <nrfx_flag32_free+0x3c>)
    641e:	e7fc      	b.n	641a <nrfx_flag32_free+0x32>
    6420:	0bad0000 	.word	0x0bad0000
    6424:	0bad0004 	.word	0x0bad0004

00006428 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6428:	4b04      	ldr	r3, [pc, #16]	; (643c <nrfx_clock_init+0x14>)
    642a:	791a      	ldrb	r2, [r3, #4]
    642c:	b922      	cbnz	r2, 6438 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    642e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6430:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6432:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6434:	4802      	ldr	r0, [pc, #8]	; (6440 <nrfx_clock_init+0x18>)
    6436:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6438:	4802      	ldr	r0, [pc, #8]	; (6444 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    643a:	4770      	bx	lr
    643c:	200027fc 	.word	0x200027fc
    6440:	0bad0000 	.word	0x0bad0000
    6444:	0bad000c 	.word	0x0bad000c

00006448 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    6448:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    644a:	2000      	movs	r0, #0
    644c:	f7fd f978 	bl	3740 <arch_irq_is_enabled>
    6450:	b908      	cbnz	r0, 6456 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6452:	f7fd f953 	bl	36fc <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    6456:	4b02      	ldr	r3, [pc, #8]	; (6460 <nrfx_clock_enable+0x18>)
    6458:	2201      	movs	r2, #1
    645a:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    645c:	bd08      	pop	{r3, pc}
    645e:	bf00      	nop
    6460:	20004880 	.word	0x20004880

00006464 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6464:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6466:	b110      	cbz	r0, 646e <nrfx_clock_stop+0xa>
    6468:	2801      	cmp	r0, #1
    646a:	d017      	beq.n	649c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    646c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    646e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6472:	2302      	movs	r3, #2
    6474:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6478:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    647c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6480:	2301      	movs	r3, #1
    6482:	60e3      	str	r3, [r4, #12]
    6484:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6488:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    648c:	03db      	lsls	r3, r3, #15
    648e:	d5ed      	bpl.n	646c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    6490:	2001      	movs	r0, #1
    6492:	f006 fb61 	bl	cb58 <nrfx_busy_wait>
    6496:	3d01      	subs	r5, #1
    6498:	d1f6      	bne.n	6488 <nrfx_clock_stop+0x24>
    649a:	e7e7      	b.n	646c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    649c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64a0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    64a2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    64aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64ae:	6060      	str	r0, [r4, #4]
    64b0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    64b4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    64b8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    64bc:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    64be:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    64c2:	d505      	bpl.n	64d0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    64c4:	b123      	cbz	r3, 64d0 <nrfx_clock_stop+0x6c>
    64c6:	2001      	movs	r0, #1
    64c8:	f006 fb46 	bl	cb58 <nrfx_busy_wait>
    64cc:	3d01      	subs	r5, #1
    64ce:	d1f1      	bne.n	64b4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    64d0:	4b01      	ldr	r3, [pc, #4]	; (64d8 <nrfx_clock_stop+0x74>)
    64d2:	2200      	movs	r2, #0
    64d4:	715a      	strb	r2, [r3, #5]
    64d6:	e7c9      	b.n	646c <nrfx_clock_stop+0x8>
    64d8:	200027fc 	.word	0x200027fc

000064dc <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    64dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    64e0:	b510      	push	{r4, lr}
    64e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    64e6:	b16a      	cbz	r2, 6504 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64e8:	2200      	movs	r2, #0
    64ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    64ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    64f2:	2201      	movs	r2, #1
    64f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    64f8:	4b11      	ldr	r3, [pc, #68]	; (6540 <nrfx_clock_irq_handler+0x64>)
    64fa:	7958      	ldrb	r0, [r3, #5]
    64fc:	b910      	cbnz	r0, 6504 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    64fe:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6500:	681b      	ldr	r3, [r3, #0]
    6502:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6508:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    650c:	b172      	cbz	r2, 652c <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    650e:	2200      	movs	r2, #0
    6510:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6514:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6518:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    651c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6520:	0792      	lsls	r2, r2, #30
    6522:	d104      	bne.n	652e <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6524:	2201      	movs	r2, #1
    6526:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    652a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    652c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    652e:	2202      	movs	r2, #2
    6530:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6534:	4b02      	ldr	r3, [pc, #8]	; (6540 <nrfx_clock_irq_handler+0x64>)
}
    6536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    653a:	681b      	ldr	r3, [r3, #0]
    653c:	2001      	movs	r0, #1
    653e:	4718      	bx	r3
    6540:	200027fc 	.word	0x200027fc

00006544 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6544:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6546:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    654a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    654c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    654e:	6002      	str	r2, [r0, #0]
}
    6550:	4802      	ldr	r0, [pc, #8]	; (655c <nrf_gpio_pin_port_decode+0x18>)
    6552:	bf18      	it	ne
    6554:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6558:	4770      	bx	lr
    655a:	bf00      	nop
    655c:	50000300 	.word	0x50000300

00006560 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6560:	4b03      	ldr	r3, [pc, #12]	; (6570 <pin_in_use_by_te+0x10>)
    6562:	3008      	adds	r0, #8
    6564:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6568:	f3c0 1040 	ubfx	r0, r0, #5, #1
    656c:	4770      	bx	lr
    656e:	bf00      	nop
    6570:	20000188 	.word	0x20000188

00006574 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6574:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6576:	f100 0308 	add.w	r3, r0, #8
    657a:	4c0c      	ldr	r4, [pc, #48]	; (65ac <call_handler+0x38>)
    657c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6580:	05da      	lsls	r2, r3, #23
{
    6582:	4605      	mov	r5, r0
    6584:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6586:	d507      	bpl.n	6598 <call_handler+0x24>
    6588:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    658c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6590:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6594:	6852      	ldr	r2, [r2, #4]
    6596:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6598:	68a3      	ldr	r3, [r4, #8]
    659a:	b12b      	cbz	r3, 65a8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    659c:	68e2      	ldr	r2, [r4, #12]
    659e:	4631      	mov	r1, r6
    65a0:	4628      	mov	r0, r5
    }
}
    65a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    65a6:	4718      	bx	r3
}
    65a8:	bd70      	pop	{r4, r5, r6, pc}
    65aa:	bf00      	nop
    65ac:	20000188 	.word	0x20000188

000065b0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    65b0:	4a12      	ldr	r2, [pc, #72]	; (65fc <release_handler+0x4c>)
    65b2:	3008      	adds	r0, #8
{
    65b4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    65b6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    65ba:	05d9      	lsls	r1, r3, #23
    65bc:	d51b      	bpl.n	65f6 <release_handler+0x46>
    65be:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    65c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    65c6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    65ca:	f102 040e 	add.w	r4, r2, #14
    65ce:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    65d0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    65d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    65d8:	d003      	beq.n	65e2 <release_handler+0x32>
    65da:	f3c3 2343 	ubfx	r3, r3, #9, #4
    65de:	4299      	cmp	r1, r3
    65e0:	d009      	beq.n	65f6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    65e2:	3001      	adds	r0, #1
    65e4:	2830      	cmp	r0, #48	; 0x30
    65e6:	d1f3      	bne.n	65d0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    65e8:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    65ea:	4805      	ldr	r0, [pc, #20]	; (6600 <release_handler+0x50>)
}
    65ec:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    65ee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    65f2:	f7ff bef9 	b.w	63e8 <nrfx_flag32_free>
}
    65f6:	bc10      	pop	{r4}
    65f8:	4770      	bx	lr
    65fa:	bf00      	nop
    65fc:	20000188 	.word	0x20000188
    6600:	200001fc 	.word	0x200001fc

00006604 <pin_handler_trigger_uninit>:
{
    6604:	b538      	push	{r3, r4, r5, lr}
    6606:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6608:	f7ff ffaa 	bl	6560 <pin_in_use_by_te>
    660c:	4c09      	ldr	r4, [pc, #36]	; (6634 <pin_handler_trigger_uninit+0x30>)
    660e:	f102 0508 	add.w	r5, r2, #8
    6612:	b140      	cbz	r0, 6626 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6614:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6618:	4907      	ldr	r1, [pc, #28]	; (6638 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    661a:	0b5b      	lsrs	r3, r3, #13
    661c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6620:	2000      	movs	r0, #0
    6622:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6626:	4610      	mov	r0, r2
    6628:	f7ff ffc2 	bl	65b0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    662c:	2300      	movs	r3, #0
    662e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6632:	bd38      	pop	{r3, r4, r5, pc}
    6634:	20000188 	.word	0x20000188
    6638:	40006000 	.word	0x40006000

0000663c <nrfx_gpiote_input_configure>:
{
    663c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6640:	4604      	mov	r4, r0
    6642:	b085      	sub	sp, #20
    6644:	4690      	mov	r8, r2
    6646:	461d      	mov	r5, r3
    if (p_input_config)
    6648:	b1f1      	cbz	r1, 6688 <nrfx_gpiote_input_configure+0x4c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    664a:	4f4e      	ldr	r7, [pc, #312]	; (6784 <nrfx_gpiote_input_configure+0x148>)
    664c:	f100 0908 	add.w	r9, r0, #8
    6650:	f837 6019 	ldrh.w	r6, [r7, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6654:	07b3      	lsls	r3, r6, #30
    6656:	d502      	bpl.n	665e <nrfx_gpiote_input_configure+0x22>
    6658:	f7ff ff82 	bl	6560 <pin_in_use_by_te>
    665c:	bb18      	cbnz	r0, 66a6 <nrfx_gpiote_input_configure+0x6a>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    665e:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6660:	f026 0602 	bic.w	r6, r6, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6664:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6668:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    666c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6670:	f10d 020f 	add.w	r2, sp, #15
    6674:	460b      	mov	r3, r1
    6676:	4620      	mov	r0, r4
    6678:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    667c:	f046 0601 	orr.w	r6, r6, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6680:	f006 fa98 	bl	cbb4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6684:	f827 6019 	strh.w	r6, [r7, r9, lsl #1]
    if (p_trigger_config)
    6688:	f1b8 0f00 	cmp.w	r8, #0
    668c:	d026      	beq.n	66dc <nrfx_gpiote_input_configure+0xa0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    668e:	4b3d      	ldr	r3, [pc, #244]	; (6784 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6690:	f898 7000 	ldrb.w	r7, [r8]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6694:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6698:	f104 0608 	add.w	r6, r4, #8
    669c:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    66a0:	0788      	lsls	r0, r1, #30
    66a2:	d502      	bpl.n	66aa <nrfx_gpiote_input_configure+0x6e>
            if (use_evt)
    66a4:	b192      	cbz	r2, 66cc <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
    66a6:	4838      	ldr	r0, [pc, #224]	; (6788 <nrfx_gpiote_input_configure+0x14c>)
    66a8:	e01a      	b.n	66e0 <nrfx_gpiote_input_configure+0xa4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    66aa:	f021 0120 	bic.w	r1, r1, #32
    66ae:	04c9      	lsls	r1, r1, #19
    66b0:	0cc9      	lsrs	r1, r1, #19
    66b2:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    66b6:	b14a      	cbz	r2, 66cc <nrfx_gpiote_input_configure+0x90>
                if (!edge)
    66b8:	2f03      	cmp	r7, #3
    66ba:	d8f4      	bhi.n	66a6 <nrfx_gpiote_input_configure+0x6a>
                uint8_t ch = *p_trigger_config->p_in_channel;
    66bc:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    66c0:	b98f      	cbnz	r7, 66e6 <nrfx_gpiote_input_configure+0xaa>
    66c2:	4a32      	ldr	r2, [pc, #200]	; (678c <nrfx_gpiote_input_configure+0x150>)
    66c4:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    66c8:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    66cc:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    66d0:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    66d4:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    66d8:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    66dc:	bb4d      	cbnz	r5, 6732 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    66de:	482c      	ldr	r0, [pc, #176]	; (6790 <nrfx_gpiote_input_configure+0x154>)
}
    66e0:	b005      	add	sp, #20
    66e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    66e6:	ea4f 028c 	mov.w	r2, ip, lsl #2
    66ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    66ee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    66f2:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    66f6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    66fa:	f020 0003 	bic.w	r0, r0, #3
    66fe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6702:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6706:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    670a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    670e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6712:	0220      	lsls	r0, r4, #8
    6714:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6718:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    671c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    6720:	ea40 000e 	orr.w	r0, r0, lr
    6724:	f041 0120 	orr.w	r1, r1, #32
    6728:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    672c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6730:	e7cc      	b.n	66cc <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6732:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6736:	4620      	mov	r0, r4
    6738:	f7ff ff3a 	bl	65b0 <release_handler>
    if (!handler)
    673c:	2e00      	cmp	r6, #0
    673e:	d0ce      	beq.n	66de <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6740:	4d10      	ldr	r5, [pc, #64]	; (6784 <nrfx_gpiote_input_configure+0x148>)
    6742:	e9d5 2300 	ldrd	r2, r3, [r5]
    6746:	4296      	cmp	r6, r2
    6748:	d101      	bne.n	674e <nrfx_gpiote_input_configure+0x112>
    674a:	429f      	cmp	r7, r3
    674c:	d018      	beq.n	6780 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    674e:	4811      	ldr	r0, [pc, #68]	; (6794 <nrfx_gpiote_input_configure+0x158>)
    6750:	f10d 010f 	add.w	r1, sp, #15
    6754:	f7ff fe2a 	bl	63ac <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6758:	4b0d      	ldr	r3, [pc, #52]	; (6790 <nrfx_gpiote_input_configure+0x154>)
    675a:	4298      	cmp	r0, r3
    675c:	d1c0      	bne.n	66e0 <nrfx_gpiote_input_configure+0xa4>
        handler_id = (int32_t)id;
    675e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6762:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6766:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    676a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    676c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    676e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6772:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    677a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    677e:	e7ae      	b.n	66de <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6780:	2200      	movs	r2, #0
    6782:	e7ee      	b.n	6762 <nrfx_gpiote_input_configure+0x126>
    6784:	20000188 	.word	0x20000188
    6788:	0bad0004 	.word	0x0bad0004
    678c:	40006000 	.word	0x40006000
    6790:	0bad0000 	.word	0x0bad0000
    6794:	200001fc 	.word	0x200001fc

00006798 <nrfx_gpiote_output_configure>:
{
    6798:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    679c:	4604      	mov	r4, r0
    679e:	4615      	mov	r5, r2
    if (p_config)
    67a0:	b309      	cbz	r1, 67e6 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    67a2:	4f32      	ldr	r7, [pc, #200]	; (686c <nrfx_gpiote_output_configure+0xd4>)
    67a4:	f100 0808 	add.w	r8, r0, #8
    67a8:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    67ac:	07b2      	lsls	r2, r6, #30
    67ae:	d403      	bmi.n	67b8 <nrfx_gpiote_output_configure+0x20>
    67b0:	f7ff fed6 	bl	6560 <pin_in_use_by_te>
    67b4:	2800      	cmp	r0, #0
    67b6:	d157      	bne.n	6868 <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    67b8:	f016 0f1c 	tst.w	r6, #28
    67bc:	d002      	beq.n	67c4 <nrfx_gpiote_output_configure+0x2c>
    67be:	784b      	ldrb	r3, [r1, #1]
    67c0:	2b01      	cmp	r3, #1
    67c2:	d051      	beq.n	6868 <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    67c4:	2301      	movs	r3, #1
    67c6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    67ca:	2300      	movs	r3, #0
    67cc:	e9cd 1300 	strd	r1, r3, [sp]
    67d0:	1c4a      	adds	r2, r1, #1
    67d2:	1c8b      	adds	r3, r1, #2
    67d4:	4620      	mov	r0, r4
    67d6:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    67da:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    67de:	f006 f9e9 	bl	cbb4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    67e2:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
    67e6:	b91d      	cbnz	r5, 67f0 <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
    67e8:	4821      	ldr	r0, [pc, #132]	; (6870 <nrfx_gpiote_output_configure+0xd8>)
}
    67ea:	b004      	add	sp, #16
    67ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    67f0:	4e1e      	ldr	r6, [pc, #120]	; (686c <nrfx_gpiote_output_configure+0xd4>)
    67f2:	f104 0708 	add.w	r7, r4, #8
    67f6:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    67fa:	0783      	lsls	r3, r0, #30
    67fc:	d534      	bpl.n	6868 <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
    67fe:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    6802:	4661      	mov	r1, ip
    6804:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6806:	f020 0020 	bic.w	r0, r0, #32
    680a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    680e:	04c0      	lsls	r0, r0, #19
    6810:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6814:	0cc0      	lsrs	r0, r0, #19
    6816:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    681a:	2300      	movs	r3, #0
    681c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6820:	786a      	ldrb	r2, [r5, #1]
    6822:	2a00      	cmp	r2, #0
    6824:	d0e0      	beq.n	67e8 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6826:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    682a:	78ad      	ldrb	r5, [r5, #2]
    682c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6830:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6834:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6838:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    683c:	0223      	lsls	r3, r4, #8
    683e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6842:	0412      	lsls	r2, r2, #16
    6844:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6848:	ea43 030e 	orr.w	r3, r3, lr
    684c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    684e:	052a      	lsls	r2, r5, #20
    6850:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6854:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6858:	4313      	orrs	r3, r2
    685a:	f040 0020 	orr.w	r0, r0, #32
    685e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6862:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6866:	e7bf      	b.n	67e8 <nrfx_gpiote_output_configure+0x50>
{
    6868:	4802      	ldr	r0, [pc, #8]	; (6874 <nrfx_gpiote_output_configure+0xdc>)
    686a:	e7be      	b.n	67ea <nrfx_gpiote_output_configure+0x52>
    686c:	20000188 	.word	0x20000188
    6870:	0bad0000 	.word	0x0bad0000
    6874:	0bad0004 	.word	0x0bad0004

00006878 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6878:	4b01      	ldr	r3, [pc, #4]	; (6880 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    687a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    687e:	4770      	bx	lr
    6880:	20000188 	.word	0x20000188

00006884 <nrfx_gpiote_channel_get>:
{
    6884:	b508      	push	{r3, lr}
    6886:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6888:	f7ff fe6a 	bl	6560 <pin_in_use_by_te>
    688c:	b138      	cbz	r0, 689e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    688e:	4b05      	ldr	r3, [pc, #20]	; (68a4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6890:	4805      	ldr	r0, [pc, #20]	; (68a8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6892:	3208      	adds	r2, #8
    6894:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6898:	0b5b      	lsrs	r3, r3, #13
    689a:	700b      	strb	r3, [r1, #0]
}
    689c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    689e:	4803      	ldr	r0, [pc, #12]	; (68ac <nrfx_gpiote_channel_get+0x28>)
    68a0:	e7fc      	b.n	689c <nrfx_gpiote_channel_get+0x18>
    68a2:	bf00      	nop
    68a4:	20000188 	.word	0x20000188
    68a8:	0bad0000 	.word	0x0bad0000
    68ac:	0bad0004 	.word	0x0bad0004

000068b0 <nrfx_gpiote_init>:
{
    68b0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    68b2:	4c0f      	ldr	r4, [pc, #60]	; (68f0 <nrfx_gpiote_init+0x40>)
    68b4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    68b8:	b9bd      	cbnz	r5, 68ea <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    68ba:	2260      	movs	r2, #96	; 0x60
    68bc:	4629      	mov	r1, r5
    68be:	f104 0010 	add.w	r0, r4, #16
    68c2:	f004 f919 	bl	aaf8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    68c6:	2006      	movs	r0, #6
    68c8:	f7fc ff18 	bl	36fc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    68cc:	4b09      	ldr	r3, [pc, #36]	; (68f4 <nrfx_gpiote_init+0x44>)
    return err_code;
    68ce:	480a      	ldr	r0, [pc, #40]	; (68f8 <nrfx_gpiote_init+0x48>)
    68d0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    68d4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    68d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    68dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    68e0:	2301      	movs	r3, #1
    68e2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    68e6:	6763      	str	r3, [r4, #116]	; 0x74
}
    68e8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    68ea:	4804      	ldr	r0, [pc, #16]	; (68fc <nrfx_gpiote_init+0x4c>)
    68ec:	e7fc      	b.n	68e8 <nrfx_gpiote_init+0x38>
    68ee:	bf00      	nop
    68f0:	20000188 	.word	0x20000188
    68f4:	40006000 	.word	0x40006000
    68f8:	0bad0000 	.word	0x0bad0000
    68fc:	0bad0005 	.word	0x0bad0005

00006900 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6900:	4b03      	ldr	r3, [pc, #12]	; (6910 <nrfx_gpiote_is_init+0x10>)
    6902:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6906:	3800      	subs	r0, #0
    6908:	bf18      	it	ne
    690a:	2001      	movne	r0, #1
    690c:	4770      	bx	lr
    690e:	bf00      	nop
    6910:	20000188 	.word	0x20000188

00006914 <nrfx_gpiote_channel_free>:
{
    6914:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6916:	4801      	ldr	r0, [pc, #4]	; (691c <nrfx_gpiote_channel_free+0x8>)
    6918:	f7ff bd66 	b.w	63e8 <nrfx_flag32_free>
    691c:	200001f8 	.word	0x200001f8

00006920 <nrfx_gpiote_channel_alloc>:
{
    6920:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6922:	4801      	ldr	r0, [pc, #4]	; (6928 <nrfx_gpiote_channel_alloc+0x8>)
    6924:	f7ff bd42 	b.w	63ac <nrfx_flag32_alloc>
    6928:	200001f8 	.word	0x200001f8

0000692c <nrfx_gpiote_trigger_enable>:
{
    692c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    692e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6930:	f7ff fe16 	bl	6560 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6934:	f104 0208 	add.w	r2, r4, #8
    6938:	4b1e      	ldr	r3, [pc, #120]	; (69b4 <nrfx_gpiote_trigger_enable+0x88>)
    693a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    693e:	b1e8      	cbz	r0, 697c <nrfx_gpiote_trigger_enable+0x50>
    6940:	f013 0502 	ands.w	r5, r3, #2
    6944:	d11a      	bne.n	697c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6946:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6948:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    694a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    694e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6952:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6956:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    695a:	6005      	str	r5, [r0, #0]
    695c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    695e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6962:	f040 0001 	orr.w	r0, r0, #1
    6966:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    696a:	b129      	cbz	r1, 6978 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    696c:	2201      	movs	r2, #1
    696e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6972:	4a11      	ldr	r2, [pc, #68]	; (69b8 <nrfx_gpiote_trigger_enable+0x8c>)
    6974:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6978:	b003      	add	sp, #12
    697a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    697c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6980:	2b04      	cmp	r3, #4
    6982:	d012      	beq.n	69aa <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6984:	2b05      	cmp	r3, #5
    6986:	d012      	beq.n	69ae <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6988:	a801      	add	r0, sp, #4
    698a:	9401      	str	r4, [sp, #4]
    698c:	f7ff fdda 	bl	6544 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6990:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6992:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6996:	40d9      	lsrs	r1, r3
    6998:	f001 0101 	and.w	r1, r1, #1
    699c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    699e:	4620      	mov	r0, r4
}
    69a0:	b003      	add	sp, #12
    69a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    69a6:	f006 b94e 	b.w	cc46 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    69aa:	2103      	movs	r1, #3
    69ac:	e7f7      	b.n	699e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    69ae:	2102      	movs	r1, #2
    69b0:	e7f5      	b.n	699e <nrfx_gpiote_trigger_enable+0x72>
    69b2:	bf00      	nop
    69b4:	20000188 	.word	0x20000188
    69b8:	40006000 	.word	0x40006000

000069bc <nrfx_gpiote_trigger_disable>:
{
    69bc:	b508      	push	{r3, lr}
    69be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    69c0:	f7ff fdce 	bl	6560 <pin_in_use_by_te>
    69c4:	b1c0      	cbz	r0, 69f8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    69c6:	f102 0108 	add.w	r1, r2, #8
    69ca:	4b0e      	ldr	r3, [pc, #56]	; (6a04 <nrfx_gpiote_trigger_disable+0x48>)
    69cc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    69d0:	0799      	lsls	r1, r3, #30
    69d2:	d411      	bmi.n	69f8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    69d4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    69d6:	2201      	movs	r2, #1
    69d8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    69da:	009b      	lsls	r3, r3, #2
    69dc:	490a      	ldr	r1, [pc, #40]	; (6a08 <nrfx_gpiote_trigger_disable+0x4c>)
    69de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    69e6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    69ea:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    69ee:	f022 0203 	bic.w	r2, r2, #3
    69f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    69f6:	bd08      	pop	{r3, pc}
    69f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    69fc:	2100      	movs	r1, #0
    69fe:	4610      	mov	r0, r2
    6a00:	f006 b921 	b.w	cc46 <nrf_gpio_cfg_sense_set>
    6a04:	20000188 	.word	0x20000188
    6a08:	40006000 	.word	0x40006000

00006a0c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6a0c:	4b0e      	ldr	r3, [pc, #56]	; (6a48 <nrfx_gpiote_pin_uninit+0x3c>)
    6a0e:	f100 0208 	add.w	r2, r0, #8
{
    6a12:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6a14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6a18:	07db      	lsls	r3, r3, #31
{
    6a1a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6a1c:	d511      	bpl.n	6a42 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6a1e:	f7ff ffcd 	bl	69bc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6a22:	4620      	mov	r0, r4
    6a24:	f7ff fdee 	bl	6604 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a28:	a801      	add	r0, sp, #4
    6a2a:	9401      	str	r4, [sp, #4]
    6a2c:	f7ff fd8a 	bl	6544 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6a30:	9b01      	ldr	r3, [sp, #4]
    6a32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6a36:	2202      	movs	r2, #2
    6a38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6a3c:	4803      	ldr	r0, [pc, #12]	; (6a4c <nrfx_gpiote_pin_uninit+0x40>)
}
    6a3e:	b002      	add	sp, #8
    6a40:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6a42:	4803      	ldr	r0, [pc, #12]	; (6a50 <nrfx_gpiote_pin_uninit+0x44>)
    6a44:	e7fb      	b.n	6a3e <nrfx_gpiote_pin_uninit+0x32>
    6a46:	bf00      	nop
    6a48:	20000188 	.word	0x20000188
    6a4c:	0bad0000 	.word	0x0bad0000
    6a50:	0bad0004 	.word	0x0bad0004

00006a54 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a58:	4b68      	ldr	r3, [pc, #416]	; (6bfc <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    6a5a:	4869      	ldr	r0, [pc, #420]	; (6c00 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6a5c:	4969      	ldr	r1, [pc, #420]	; (6c04 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    6a5e:	2600      	movs	r6, #0
{
    6a60:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6a62:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6a64:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a66:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6a68:	b135      	cbz	r5, 6a78 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6a6a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6a6e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6a70:	bf1e      	ittt	ne
    6a72:	601c      	strne	r4, [r3, #0]
    6a74:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6a76:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6a78:	3304      	adds	r3, #4
    6a7a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6a7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6a80:	d1f1      	bne.n	6a66 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a82:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6c00 <nrfx_gpiote_irq_handler+0x1ac>
    6a86:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	f000 8099 	beq.w	6bc2 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    6a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6a94:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6a98:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6a9a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6a9e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    6aa2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6aa4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6aa8:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6aac:	f10d 0a10 	add.w	sl, sp, #16
    6ab0:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6ab4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6ab6:	f04f 0b01 	mov.w	fp, #1
    6aba:	e049      	b.n	6b50 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    6abc:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6abe:	4a52      	ldr	r2, [pc, #328]	; (6c08 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6ac0:	fa94 f4a4 	rbit	r4, r4
    6ac4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6ac8:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6aca:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6acc:	f104 0308 	add.w	r3, r4, #8
    6ad0:	9403      	str	r4, [sp, #12]
    6ad2:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6ad6:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    6ada:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6ade:	fa0b f202 	lsl.w	r2, fp, r2
    6ae2:	ea23 0302 	bic.w	r3, r3, r2
    6ae6:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6aea:	a803      	add	r0, sp, #12
    6aec:	f7ff fd2a 	bl	6544 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6af0:	9b03      	ldr	r3, [sp, #12]
    6af2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6af6:	08b9      	lsrs	r1, r7, #2
    6af8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6afc:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    6b00:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6b02:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6b04:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6b08:	d52c      	bpl.n	6b64 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    6b0a:	4620      	mov	r0, r4
    6b0c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6b0e:	b2dd      	uxtb	r5, r3
    6b10:	f7ff fd30 	bl	6574 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b14:	a803      	add	r0, sp, #12
    6b16:	9403      	str	r4, [sp, #12]
    6b18:	f7ff fd14 	bl	6544 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6b1c:	9b03      	ldr	r3, [sp, #12]
    6b1e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6b22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6b26:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6b2a:	429d      	cmp	r5, r3
    6b2c:	d107      	bne.n	6b3e <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6b2e:	2100      	movs	r1, #0
    6b30:	4620      	mov	r0, r4
    6b32:	f006 f888 	bl	cc46 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6b36:	4629      	mov	r1, r5
    6b38:	4620      	mov	r0, r4
    6b3a:	f006 f884 	bl	cc46 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b3e:	a803      	add	r0, sp, #12
    6b40:	9403      	str	r4, [sp, #12]
    6b42:	f7ff fcff 	bl	6544 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6b46:	9b03      	ldr	r3, [sp, #12]
    6b48:	fa0b f303 	lsl.w	r3, fp, r3
    6b4c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6b50:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    6b54:	2c00      	cmp	r4, #0
    6b56:	d1b1      	bne.n	6abc <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6b58:	f1b8 0f00 	cmp.w	r8, #0
    6b5c:	d11d      	bne.n	6b9a <nrfx_gpiote_irq_handler+0x146>
    6b5e:	f04f 0801 	mov.w	r8, #1
    6b62:	e7a5      	b.n	6ab0 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b64:	2b02      	cmp	r3, #2
    6b66:	d10c      	bne.n	6b82 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6b68:	2103      	movs	r1, #3
    6b6a:	4620      	mov	r0, r4
    6b6c:	f006 f86b 	bl	cc46 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6b70:	f005 0305 	and.w	r3, r5, #5
    6b74:	2b01      	cmp	r3, #1
    6b76:	d1e2      	bne.n	6b3e <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    6b78:	4639      	mov	r1, r7
    6b7a:	4620      	mov	r0, r4
    6b7c:	f7ff fcfa 	bl	6574 <call_handler>
    6b80:	e7dd      	b.n	6b3e <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6b82:	2102      	movs	r1, #2
    6b84:	4620      	mov	r0, r4
    6b86:	9301      	str	r3, [sp, #4]
    6b88:	f006 f85d 	bl	cc46 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6b8c:	2d03      	cmp	r5, #3
    6b8e:	d0f3      	beq.n	6b78 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6b90:	9b01      	ldr	r3, [sp, #4]
    6b92:	2b03      	cmp	r3, #3
    6b94:	d1d3      	bne.n	6b3e <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6b96:	2d02      	cmp	r5, #2
    6b98:	e7ed      	b.n	6b76 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    6b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b9e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    6ba2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    6ba6:	4919      	ldr	r1, [pc, #100]	; (6c0c <nrfx_gpiote_irq_handler+0x1b8>)
    6ba8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    6bac:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6bae:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6bb2:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6bb6:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6bb8:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6bba:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    6bbe:	f47f af73 	bne.w	6aa8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    6bc2:	2401      	movs	r4, #1
    while (mask)
    6bc4:	b916      	cbnz	r6, 6bcc <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6bc6:	b007      	add	sp, #28
    6bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6bcc:	fa96 f3a6 	rbit	r3, r6
    6bd0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6bd4:	fa04 f203 	lsl.w	r2, r4, r3
    6bd8:	009b      	lsls	r3, r3, #2
    6bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6bde:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6be2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6be6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6bea:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6bee:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6bf2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6bf6:	f7ff fcbd 	bl	6574 <call_handler>
    6bfa:	e7e3      	b.n	6bc4 <nrfx_gpiote_irq_handler+0x170>
    6bfc:	40006100 	.word	0x40006100
    6c00:	40006000 	.word	0x40006000
    6c04:	40006120 	.word	0x40006120
    6c08:	20000188 	.word	0x20000188
    6c0c:	50000300 	.word	0x50000300

00006c10 <nvmc_word_write>:
    6c10:	4a04      	ldr	r2, [pc, #16]	; (6c24 <nvmc_word_write+0x14>)
    6c12:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    6c16:	07db      	lsls	r3, r3, #31
    6c18:	d5fb      	bpl.n	6c12 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    6c1a:	6001      	str	r1, [r0, #0]
    6c1c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    6c20:	4770      	bx	lr
    6c22:	bf00      	nop
    6c24:	4001e000 	.word	0x4001e000

00006c28 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    6c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6c2c:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    6c2e:	fbb0 f3f2 	udiv	r3, r0, r2
    6c32:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    6c36:	b973      	cbnz	r3, 6c56 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    6c38:	4b08      	ldr	r3, [pc, #32]	; (6c5c <nrfx_nvmc_page_erase+0x34>)
    6c3a:	2202      	movs	r2, #2
    6c3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    6c40:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    6c44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    6c48:	07d2      	lsls	r2, r2, #31
    6c4a:	d5fb      	bpl.n	6c44 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    6c4c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    6c4e:	4804      	ldr	r0, [pc, #16]	; (6c60 <nrfx_nvmc_page_erase+0x38>)
    6c50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    6c54:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    6c56:	4803      	ldr	r0, [pc, #12]	; (6c64 <nrfx_nvmc_page_erase+0x3c>)
}
    6c58:	4770      	bx	lr
    6c5a:	bf00      	nop
    6c5c:	4001e000 	.word	0x4001e000
    6c60:	0bad0000 	.word	0x0bad0000
    6c64:	0bad000a 	.word	0x0bad000a

00006c68 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    6c68:	b510      	push	{r4, lr}
    6c6a:	4c05      	ldr	r4, [pc, #20]	; (6c80 <nrfx_nvmc_word_write+0x18>)
    6c6c:	2301      	movs	r3, #1
    6c6e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    6c72:	f7ff ffcd 	bl	6c10 <nvmc_word_write>
    6c76:	2300      	movs	r3, #0
    6c78:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    6c7c:	bd10      	pop	{r4, pc}
    6c7e:	bf00      	nop
    6c80:	4001e000 	.word	0x4001e000

00006c84 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    6c84:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    6c86:	4c17      	ldr	r4, [pc, #92]	; (6ce4 <nrfx_power_init+0x60>)
    6c88:	7823      	ldrb	r3, [r4, #0]
    6c8a:	bb4b      	cbnz	r3, 6ce0 <nrfx_power_init+0x5c>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    6c8c:	7803      	ldrb	r3, [r0, #0]
    if (enable && nrf52_errata_197())
    6c8e:	0799      	lsls	r1, r3, #30
    6c90:	f3c3 0240 	ubfx	r2, r3, #1, #1
    6c94:	d512      	bpl.n	6cbc <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
            if (var1 == 0x08)
    6c9a:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
    6c9e:	2908      	cmp	r1, #8
    6ca0:	d10b      	bne.n	6cba <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6ca2:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
                switch(var2)
    6ca6:	2a05      	cmp	r2, #5
    6ca8:	d807      	bhi.n	6cba <nrfx_power_init+0x36>
    6caa:	490f      	ldr	r1, [pc, #60]	; (6ce8 <nrfx_power_init+0x64>)
    6cac:	5c8a      	ldrb	r2, [r1, r2]
    6cae:	b122      	cbz	r2, 6cba <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6cb4:	2101      	movs	r1, #1
    6cb6:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6cba:	2201      	movs	r2, #1
    6cbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6cc0:	f003 0301 	and.w	r3, r3, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6cc4:	f8c1 2580 	str.w	r2, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6cc8:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6cca:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
    6cce:	f7fc fd37 	bl	3740 <arch_irq_is_enabled>
    6cd2:	b908      	cbnz	r0, 6cd8 <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6cd4:	f7fc fd12 	bl	36fc <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    6cd8:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    6cda:	4804      	ldr	r0, [pc, #16]	; (6cec <nrfx_power_init+0x68>)
    m_initialized = true;
    6cdc:	7023      	strb	r3, [r4, #0]
}
    6cde:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6ce0:	4803      	ldr	r0, [pc, #12]	; (6cf0 <nrfx_power_init+0x6c>)
    6ce2:	e7fc      	b.n	6cde <nrfx_power_init+0x5a>
    6ce4:	20004881 	.word	0x20004881
    6ce8:	0000dec7 	.word	0x0000dec7
    6cec:	0bad0000 	.word	0x0bad0000
    6cf0:	0bad000c 	.word	0x0bad000c

00006cf4 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    6cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cf8:	f44f 7260 	mov.w	r2, #896	; 0x380
    6cfc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    6d00:	4b01      	ldr	r3, [pc, #4]	; (6d08 <nrfx_power_usbevt_uninit+0x14>)
    6d02:	2200      	movs	r2, #0
    6d04:	601a      	str	r2, [r3, #0]
}
    6d06:	4770      	bx	lr
    6d08:	20002804 	.word	0x20002804

00006d0c <nrfx_power_usbevt_init>:
{
    6d0c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    6d0e:	f7ff fff1 	bl	6cf4 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    6d12:	6803      	ldr	r3, [r0, #0]
    6d14:	b10b      	cbz	r3, 6d1a <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    6d16:	4a01      	ldr	r2, [pc, #4]	; (6d1c <nrfx_power_usbevt_init+0x10>)
    6d18:	6013      	str	r3, [r2, #0]
}
    6d1a:	bd08      	pop	{r3, pc}
    6d1c:	20002804 	.word	0x20002804

00006d20 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    6d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    6d24:	b510      	push	{r4, lr}
    6d26:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6d2a:	0762      	lsls	r2, r4, #29
    6d2c:	d507      	bpl.n	6d3e <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    6d2e:	f44f 7084 	mov.w	r0, #264	; 0x108
    6d32:	f005 ffa5 	bl	cc80 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6d36:	b110      	cbz	r0, 6d3e <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    6d38:	4b1e      	ldr	r3, [pc, #120]	; (6db4 <nrfx_power_irq_handler+0x94>)
    6d3a:	681b      	ldr	r3, [r3, #0]
    6d3c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6d3e:	06a3      	lsls	r3, r4, #26
    6d40:	d508      	bpl.n	6d54 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    6d42:	f44f 708a 	mov.w	r0, #276	; 0x114
    6d46:	f005 ff9b 	bl	cc80 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6d4a:	b118      	cbz	r0, 6d54 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6d4c:	4b1a      	ldr	r3, [pc, #104]	; (6db8 <nrfx_power_irq_handler+0x98>)
    6d4e:	2000      	movs	r0, #0
    6d50:	681b      	ldr	r3, [r3, #0]
    6d52:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6d54:	0660      	lsls	r0, r4, #25
    6d56:	d508      	bpl.n	6d6a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    6d58:	f44f 708c 	mov.w	r0, #280	; 0x118
    6d5c:	f005 ff90 	bl	cc80 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6d60:	b118      	cbz	r0, 6d6a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    6d62:	4b15      	ldr	r3, [pc, #84]	; (6db8 <nrfx_power_irq_handler+0x98>)
    6d64:	2001      	movs	r0, #1
    6d66:	681b      	ldr	r3, [r3, #0]
    6d68:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6d6a:	0621      	lsls	r1, r4, #24
    6d6c:	d508      	bpl.n	6d80 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    6d6e:	f44f 708e 	mov.w	r0, #284	; 0x11c
    6d72:	f005 ff85 	bl	cc80 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6d76:	b118      	cbz	r0, 6d80 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    6d78:	4b10      	ldr	r3, [pc, #64]	; (6dbc <nrfx_power_irq_handler+0x9c>)
    6d7a:	2000      	movs	r0, #0
    6d7c:	681b      	ldr	r3, [r3, #0]
    6d7e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6d80:	05e2      	lsls	r2, r4, #23
    6d82:	d508      	bpl.n	6d96 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    6d84:	f44f 7090 	mov.w	r0, #288	; 0x120
    6d88:	f005 ff7a 	bl	cc80 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6d8c:	b118      	cbz	r0, 6d96 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    6d8e:	4b0b      	ldr	r3, [pc, #44]	; (6dbc <nrfx_power_irq_handler+0x9c>)
    6d90:	2001      	movs	r0, #1
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6d96:	05a3      	lsls	r3, r4, #22
    6d98:	d50a      	bpl.n	6db0 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    6d9a:	f44f 7092 	mov.w	r0, #292	; 0x124
    6d9e:	f005 ff6f 	bl	cc80 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6da2:	b128      	cbz	r0, 6db0 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6da4:	4b05      	ldr	r3, [pc, #20]	; (6dbc <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    6da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6daa:	681b      	ldr	r3, [r3, #0]
    6dac:	2002      	movs	r0, #2
    6dae:	4718      	bx	r3
}
    6db0:	bd10      	pop	{r4, pc}
    6db2:	bf00      	nop
    6db4:	2000280c 	.word	0x2000280c
    6db8:	20002808 	.word	0x20002808
    6dbc:	20002804 	.word	0x20002804

00006dc0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6dc0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6dc2:	4801      	ldr	r0, [pc, #4]	; (6dc8 <nrfx_ppi_channel_alloc+0x8>)
    6dc4:	f7ff baf2 	b.w	63ac <nrfx_flag32_alloc>
    6dc8:	20000204 	.word	0x20000204

00006dcc <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6dd0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6dd4:	2a08      	cmp	r2, #8
    6dd6:	d106      	bne.n	6de6 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6dd8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    6ddc:	2b05      	cmp	r3, #5
    6dde:	d804      	bhi.n	6dea <nrf52_errata_187+0x1e>
    6de0:	4a03      	ldr	r2, [pc, #12]	; (6df0 <nrf52_errata_187+0x24>)
    6de2:	5cd0      	ldrb	r0, [r2, r3]
    6de4:	4770      	bx	lr
                        return false;
    6de6:	2000      	movs	r0, #0
    6de8:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6dea:	2001      	movs	r0, #1
}
    6dec:	4770      	bx	lr
    6dee:	bf00      	nop
    6df0:	0000decd 	.word	0x0000decd

00006df4 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6df4:	4b05      	ldr	r3, [pc, #20]	; (6e0c <ep_state_access+0x18>)
    6df6:	f010 0f80 	tst.w	r0, #128	; 0x80
    6dfa:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    6dfe:	bf08      	it	eq
    6e00:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    6e02:	f000 000f 	and.w	r0, r0, #15
}
    6e06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6e0a:	4770      	bx	lr
    6e0c:	200029b8 	.word	0x200029b8

00006e10 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    6e10:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    6e12:	4a07      	ldr	r2, [pc, #28]	; (6e30 <ev_usbreset_handler+0x20>)
    6e14:	2300      	movs	r3, #0
    6e16:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6e18:	4a06      	ldr	r2, [pc, #24]	; (6e34 <ev_usbreset_handler+0x24>)
    6e1a:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    6e1c:	2301      	movs	r3, #1
    6e1e:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    6e20:	4b05      	ldr	r3, [pc, #20]	; (6e38 <ev_usbreset_handler+0x28>)
    6e22:	a801      	add	r0, sp, #4
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	4798      	blx	r3
}
    6e28:	b003      	add	sp, #12
    6e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e2e:	bf00      	nop
    6e30:	20004884 	.word	0x20004884
    6e34:	20004883 	.word	0x20004883
    6e38:	20002a50 	.word	0x20002a50

00006e3c <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    6e3c:	4b19      	ldr	r3, [pc, #100]	; (6ea4 <ev_usbevent_handler+0x68>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    6e3e:	b513      	push	{r0, r1, r4, lr}
    6e40:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    6e44:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    6e48:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    6e4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6e4e:	d508      	bpl.n	6e62 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    6e50:	4b15      	ldr	r3, [pc, #84]	; (6ea8 <ev_usbevent_handler+0x6c>)
    6e52:	2201      	movs	r2, #1
    6e54:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    6e56:	2302      	movs	r3, #2
    6e58:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    6e5a:	4b14      	ldr	r3, [pc, #80]	; (6eac <ev_usbevent_handler+0x70>)
    6e5c:	a801      	add	r0, sp, #4
    6e5e:	681b      	ldr	r3, [r3, #0]
    6e60:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6e62:	05a2      	lsls	r2, r4, #22
    6e64:	d508      	bpl.n	6e78 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    6e66:	4b10      	ldr	r3, [pc, #64]	; (6ea8 <ev_usbevent_handler+0x6c>)
    6e68:	2200      	movs	r2, #0
    6e6a:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    6e6c:	2303      	movs	r3, #3
    6e6e:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    6e70:	4b0e      	ldr	r3, [pc, #56]	; (6eac <ev_usbevent_handler+0x70>)
    6e72:	a801      	add	r0, sp, #4
    6e74:	681b      	ldr	r3, [r3, #0]
    6e76:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    6e78:	0563      	lsls	r3, r4, #21
    6e7a:	d510      	bpl.n	6e9e <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    6e7c:	4b0a      	ldr	r3, [pc, #40]	; (6ea8 <ev_usbevent_handler+0x6c>)
    6e7e:	781a      	ldrb	r2, [r3, #0]
    6e80:	b16a      	cbz	r2, 6e9e <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    6e82:	2200      	movs	r2, #0
    6e84:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    6e86:	4b07      	ldr	r3, [pc, #28]	; (6ea4 <ev_usbevent_handler+0x68>)
    6e88:	2201      	movs	r2, #1
    6e8a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6e8e:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    6e92:	2304      	movs	r3, #4
    6e94:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    6e96:	4b05      	ldr	r3, [pc, #20]	; (6eac <ev_usbevent_handler+0x70>)
    6e98:	a801      	add	r0, sp, #4
    6e9a:	681b      	ldr	r3, [r3, #0]
    6e9c:	4798      	blx	r3
        }
    }
}
    6e9e:	b002      	add	sp, #8
    6ea0:	bd10      	pop	{r4, pc}
    6ea2:	bf00      	nop
    6ea4:	40027000 	.word	0x40027000
    6ea8:	20004884 	.word	0x20004884
    6eac:	20002a50 	.word	0x20002a50

00006eb0 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    6eb0:	f04f 0320 	mov.w	r3, #32
    6eb4:	f3ef 8011 	mrs	r0, BASEPRI
    6eb8:	f383 8812 	msr	BASEPRI_MAX, r3
    6ebc:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6ec0:	4b0a      	ldr	r3, [pc, #40]	; (6eec <usbd_errata_187_211_begin+0x3c>)
    6ec2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6ec6:	2203      	movs	r2, #3
    6ec8:	b961      	cbnz	r1, 6ee4 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6eca:	f249 3175 	movw	r1, #37749	; 0x9375
    6ece:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6ed2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6ed6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6eda:	f380 8811 	msr	BASEPRI, r0
    6ede:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6ee2:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6ee4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6ee8:	e7f7      	b.n	6eda <usbd_errata_187_211_begin+0x2a>
    6eea:	bf00      	nop
    6eec:	4006e000 	.word	0x4006e000

00006ef0 <usbd_errata_187_211_end>:
	__asm__ volatile(
    6ef0:	f04f 0320 	mov.w	r3, #32
    6ef4:	f3ef 8011 	mrs	r0, BASEPRI
    6ef8:	f383 8812 	msr	BASEPRI_MAX, r3
    6efc:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6f00:	4b0a      	ldr	r3, [pc, #40]	; (6f2c <usbd_errata_187_211_end+0x3c>)
    6f02:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6f06:	b961      	cbnz	r1, 6f22 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6f08:	f249 3275 	movw	r2, #37749	; 0x9375
    6f0c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6f10:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6f14:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6f18:	f380 8811 	msr	BASEPRI, r0
    6f1c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6f20:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6f22:	2200      	movs	r2, #0
    6f24:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6f28:	e7f6      	b.n	6f18 <usbd_errata_187_211_end+0x28>
    6f2a:	bf00      	nop
    6f2c:	4006e000 	.word	0x4006e000

00006f30 <nrfx_usbd_feeder_flash>:
{
    6f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f32:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6f34:	4f0b      	ldr	r7, [pc, #44]	; (6f64 <nrfx_usbd_feeder_flash+0x34>)
{
    6f36:	460c      	mov	r4, r1
    6f38:	429a      	cmp	r2, r3
    6f3a:	bf28      	it	cs
    6f3c:	461a      	movcs	r2, r3
    6f3e:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6f40:	6809      	ldr	r1, [r1, #0]
    6f42:	4638      	mov	r0, r7
    6f44:	4615      	mov	r5, r2
    6f46:	f003 fdcc 	bl	aae2 <memcpy>
    p_transfer->size -= tx_size;
    6f4a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    6f4c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    6f4e:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    6f50:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    6f54:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    6f56:	6060      	str	r0, [r4, #4]
}
    6f58:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    6f5a:	6023      	str	r3, [r4, #0]
}
    6f5c:	bf18      	it	ne
    6f5e:	2001      	movne	r0, #1
    6f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f62:	bf00      	nop
    6f64:	20002810 	.word	0x20002810

00006f68 <nrfx_usbd_feeder_flash_zlp>:
    if (tx_size > ep_size)
    6f68:	684b      	ldr	r3, [r1, #4]
    6f6a:	429a      	cmp	r2, r3
    6f6c:	bf28      	it	cs
    6f6e:	461a      	movcs	r2, r3
{
    6f70:	b570      	push	{r4, r5, r6, lr}
    6f72:	4606      	mov	r6, r0
    6f74:	460d      	mov	r5, r1
    6f76:	4614      	mov	r4, r2
    if (tx_size != 0)
    6f78:	b182      	cbz	r2, 6f9c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6f7a:	6809      	ldr	r1, [r1, #0]
    6f7c:	4808      	ldr	r0, [pc, #32]	; (6fa0 <nrfx_usbd_feeder_flash_zlp+0x38>)
    6f7e:	f003 fdb0 	bl	aae2 <memcpy>
        p_next->p_data.tx = p_buffer;
    6f82:	4b07      	ldr	r3, [pc, #28]	; (6fa0 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    6f84:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    6f88:	686b      	ldr	r3, [r5, #4]
    6f8a:	1b1b      	subs	r3, r3, r4
    6f8c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    6f8e:	682b      	ldr	r3, [r5, #0]
}
    6f90:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    6f92:	4423      	add	r3, r4
    6f94:	602b      	str	r3, [r5, #0]
}
    6f96:	bf18      	it	ne
    6f98:	2001      	movne	r0, #1
    6f9a:	bd70      	pop	{r4, r5, r6, pc}
    6f9c:	4613      	mov	r3, r2
    6f9e:	e7f1      	b.n	6f84 <nrfx_usbd_feeder_flash_zlp+0x1c>
    6fa0:	20002810 	.word	0x20002810

00006fa4 <ev_sof_handler>:
{
    6fa4:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    6fa6:	2300      	movs	r3, #0
    6fa8:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    6fac:	4b0b      	ldr	r3, [pc, #44]	; (6fdc <ev_sof_handler+0x38>)
    6fae:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    6fb2:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    6fb6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    6fba:	4a09      	ldr	r2, [pc, #36]	; (6fe0 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    6fbc:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    6fbe:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    6fc0:	bf14      	ite	ne
    6fc2:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    6fc6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    6fca:	430b      	orrs	r3, r1
    6fcc:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    6fce:	4b05      	ldr	r3, [pc, #20]	; (6fe4 <ev_sof_handler+0x40>)
    6fd0:	a801      	add	r0, sp, #4
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	4798      	blx	r3
}
    6fd6:	b003      	add	sp, #12
    6fd8:	f85d fb04 	ldr.w	pc, [sp], #4
    6fdc:	40027000 	.word	0x40027000
    6fe0:	20002a4c 	.word	0x20002a4c
    6fe4:	20002a50 	.word	0x20002a50

00006fe8 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6fe8:	4b06      	ldr	r3, [pc, #24]	; (7004 <atomic_and.constprop.0.isra.0+0x1c>)
    6fea:	f3bf 8f5b 	dmb	ish
    6fee:	e853 1f00 	ldrex	r1, [r3]
    6ff2:	4001      	ands	r1, r0
    6ff4:	e843 1200 	strex	r2, r1, [r3]
    6ff8:	2a00      	cmp	r2, #0
    6ffa:	d1f8      	bne.n	6fee <atomic_and.constprop.0.isra.0+0x6>
    6ffc:	f3bf 8f5b 	dmb	ish
}
    7000:	4770      	bx	lr
    7002:	bf00      	nop
    7004:	20002a48 	.word	0x20002a48

00007008 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    700c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7010:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7012:	bf02      	ittt	eq
    7014:	4b03      	ldreq	r3, [pc, #12]	; (7024 <usbd_dma_pending_clear+0x1c>)
    7016:	2200      	moveq	r2, #0
    7018:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    701c:	4b02      	ldr	r3, [pc, #8]	; (7028 <usbd_dma_pending_clear+0x20>)
    701e:	2200      	movs	r2, #0
    7020:	701a      	strb	r2, [r3, #0]
}
    7022:	4770      	bx	lr
    7024:	40027000 	.word	0x40027000
    7028:	20004882 	.word	0x20004882

0000702c <nrf_usbd_ep0in_dma_handler>:
{
    702c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    702e:	f7ff ffeb 	bl	7008 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7032:	4b08      	ldr	r3, [pc, #32]	; (7054 <nrf_usbd_ep0in_dma_handler+0x28>)
    7034:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    7038:	2a03      	cmp	r2, #3
    703a:	d105      	bne.n	7048 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    703c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7040:	f06f 0001 	mvn.w	r0, #1
    7044:	f7ff bfd0 	b.w	6fe8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    704c:	2b00      	cmp	r3, #0
    704e:	d0f5      	beq.n	703c <nrf_usbd_ep0in_dma_handler+0x10>
}
    7050:	bd08      	pop	{r3, pc}
    7052:	bf00      	nop
    7054:	20002928 	.word	0x20002928

00007058 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    7058:	2201      	movs	r2, #1
{
    705a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    705c:	fa02 f501 	lsl.w	r5, r2, r1
    7060:	491c      	ldr	r1, [pc, #112]	; (70d4 <usbd_ep_data_handler+0x7c>)
    7062:	4e1d      	ldr	r6, [pc, #116]	; (70d8 <usbd_ep_data_handler+0x80>)
    7064:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7066:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    706a:	ea43 0305 	orr.w	r3, r3, r5
{
    706e:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    7070:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7072:	d024      	beq.n	70be <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7074:	f000 020f 	and.w	r2, r0, #15
    7078:	4b18      	ldr	r3, [pc, #96]	; (70dc <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    707a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    707e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7082:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7086:	681a      	ldr	r2, [r3, #0]
    if (ret)
    7088:	b132      	cbz	r2, 7098 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    708a:	2200      	movs	r2, #0
    708c:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    708e:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7090:	681b      	ldr	r3, [r3, #0]
    7092:	d011      	beq.n	70b8 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    7094:	f005 fe5b 	bl	cd4e <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7098:	6833      	ldr	r3, [r6, #0]
    709a:	402b      	ands	r3, r5
    709c:	d10a      	bne.n	70b4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    709e:	2206      	movs	r2, #6
    70a0:	f88d 2004 	strb.w	r2, [sp, #4]
    70a4:	f88d 4006 	strb.w	r4, [sp, #6]
    70a8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    70ac:	4b0c      	ldr	r3, [pc, #48]	; (70e0 <usbd_ep_data_handler+0x88>)
    70ae:	a801      	add	r0, sp, #4
    70b0:	681b      	ldr	r3, [r3, #0]
    70b2:	4798      	blx	r3
}
    70b4:	b002      	add	sp, #8
    70b6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    70b8:	f7ff ffb8 	bl	702c <nrf_usbd_ep0in_dma_handler>
    70bc:	e7ec      	b.n	7098 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    70be:	6833      	ldr	r3, [r6, #0]
    70c0:	421d      	tst	r5, r3
    70c2:	d1f7      	bne.n	70b4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    70c4:	2306      	movs	r3, #6
    70c6:	f88d 3004 	strb.w	r3, [sp, #4]
    70ca:	f88d 0006 	strb.w	r0, [sp, #6]
    70ce:	f88d 2007 	strb.w	r2, [sp, #7]
    70d2:	e7eb      	b.n	70ac <usbd_ep_data_handler+0x54>
    70d4:	20002a4c 	.word	0x20002a4c
    70d8:	20002a48 	.word	0x20002a48
    70dc:	0000db96 	.word	0x0000db96
    70e0:	20002a50 	.word	0x20002a50

000070e4 <ev_setup_data_handler>:
{
    70e4:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    70e6:	4b05      	ldr	r3, [pc, #20]	; (70fc <ev_setup_data_handler+0x18>)
    70e8:	781a      	ldrb	r2, [r3, #0]
    70ea:	4610      	mov	r0, r2
    70ec:	f005 fe26 	bl	cd3c <ep2bit>
}
    70f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    70f4:	4601      	mov	r1, r0
    70f6:	4610      	mov	r0, r2
    70f8:	f7ff bfae 	b.w	7058 <usbd_ep_data_handler>
    70fc:	20004883 	.word	0x20004883

00007100 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7100:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    7102:	f7ff ff81 	bl	7008 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7106:	4b0c      	ldr	r3, [pc, #48]	; (7138 <ev_dma_epout8_handler+0x38>)
    7108:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    710c:	2a03      	cmp	r2, #3
    710e:	d010      	beq.n	7132 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    7110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    7114:	b96b      	cbnz	r3, 7132 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7116:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    711a:	f7ff ff65 	bl	6fe8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    711e:	2306      	movs	r3, #6
    7120:	f88d 3004 	strb.w	r3, [sp, #4]
    7124:	2308      	movs	r3, #8
    7126:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    712a:	4b04      	ldr	r3, [pc, #16]	; (713c <ev_dma_epout8_handler+0x3c>)
    712c:	a801      	add	r0, sp, #4
    712e:	681b      	ldr	r3, [r3, #0]
    7130:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7132:	b003      	add	sp, #12
    7134:	f85d fb04 	ldr.w	pc, [sp], #4
    7138:	20002928 	.word	0x20002928
    713c:	20002a50 	.word	0x20002a50

00007140 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7140:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    7142:	f7ff ff61 	bl	7008 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7146:	4b10      	ldr	r3, [pc, #64]	; (7188 <ev_dma_epin8_handler+0x48>)
    7148:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    714c:	2a03      	cmp	r2, #3
    714e:	d106      	bne.n	715e <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7150:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7154:	b003      	add	sp, #12
    7156:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    715a:	f7ff bf45 	b.w	6fe8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    715e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    7162:	b96b      	cbnz	r3, 7180 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7164:	f46f 7080 	mvn.w	r0, #256	; 0x100
    7168:	f7ff ff3e 	bl	6fe8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    716c:	2306      	movs	r3, #6
    716e:	f88d 3004 	strb.w	r3, [sp, #4]
    7172:	2388      	movs	r3, #136	; 0x88
    7174:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7178:	4b04      	ldr	r3, [pc, #16]	; (718c <ev_dma_epin8_handler+0x4c>)
    717a:	a801      	add	r0, sp, #4
    717c:	681b      	ldr	r3, [r3, #0]
    717e:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7180:	b003      	add	sp, #12
    7182:	f85d fb04 	ldr.w	pc, [sp], #4
    7186:	bf00      	nop
    7188:	20002928 	.word	0x20002928
    718c:	20002a50 	.word	0x20002a50

00007190 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    7190:	4a02      	ldr	r2, [pc, #8]	; (719c <nrfx_usbd_uninit+0xc>)
    7192:	2300      	movs	r3, #0
    7194:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    7196:	4a02      	ldr	r2, [pc, #8]	; (71a0 <nrfx_usbd_uninit+0x10>)
    7198:	7013      	strb	r3, [r2, #0]
    return;
}
    719a:	4770      	bx	lr
    719c:	20002a50 	.word	0x20002a50
    71a0:	20004885 	.word	0x20004885

000071a4 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    71a4:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    71a6:	4b4c      	ldr	r3, [pc, #304]	; (72d8 <nrfx_usbd_enable+0x134>)
    71a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    71ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    71b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    71b4:	f7ff fe0a 	bl	6dcc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    71b8:	b108      	cbz	r0, 71be <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    71ba:	f7ff fe79 	bl	6eb0 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    71be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    71c2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    71c6:	2b08      	cmp	r3, #8
    71c8:	d119      	bne.n	71fe <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    71ca:	f04f 0320 	mov.w	r3, #32
    71ce:	f3ef 8011 	mrs	r0, BASEPRI
    71d2:	f383 8812 	msr	BASEPRI_MAX, r3
    71d6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    71da:	4b40      	ldr	r3, [pc, #256]	; (72dc <nrfx_usbd_enable+0x138>)
    71dc:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    71e0:	22c0      	movs	r2, #192	; 0xc0
    71e2:	2900      	cmp	r1, #0
    71e4:	d170      	bne.n	72c8 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    71e6:	f249 3175 	movw	r1, #37749	; 0x9375
    71ea:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    71ee:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    71f2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    71f6:	f380 8811 	msr	BASEPRI, r0
    71fa:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    71fe:	4b36      	ldr	r3, [pc, #216]	; (72d8 <nrfx_usbd_enable+0x134>)
    7200:	2201      	movs	r2, #1
    7202:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7206:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    720a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    720e:	0512      	lsls	r2, r2, #20
    7210:	d5fb      	bpl.n	720a <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    7212:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7216:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    721a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    721e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7222:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7226:	2b08      	cmp	r3, #8
    7228:	d118      	bne.n	725c <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    722a:	f04f 0320 	mov.w	r3, #32
    722e:	f3ef 8011 	mrs	r0, BASEPRI
    7232:	f383 8812 	msr	BASEPRI_MAX, r3
    7236:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    723a:	4b28      	ldr	r3, [pc, #160]	; (72dc <nrfx_usbd_enable+0x138>)
    723c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7240:	2900      	cmp	r1, #0
    7242:	d144      	bne.n	72ce <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7244:	f249 3275 	movw	r2, #37749	; 0x9375
    7248:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    724c:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7250:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7254:	f380 8811 	msr	BASEPRI, r0
    7258:	f3bf 8f6f 	isb	sy
    725c:	f7ff fdb6 	bl	6dcc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    7260:	b130      	cbz	r0, 7270 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    7262:	f7ff fe45 	bl	6ef0 <usbd_errata_187_211_end>
    7266:	f7ff fdb1 	bl	6dcc <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    726a:	b108      	cbz	r0, 7270 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    726c:	f7ff fe20 	bl	6eb0 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7270:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7274:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7278:	2b08      	cmp	r3, #8
    727a:	4b17      	ldr	r3, [pc, #92]	; (72d8 <nrfx_usbd_enable+0x134>)
    727c:	d10a      	bne.n	7294 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    727e:	f240 72e3 	movw	r2, #2019	; 0x7e3
    7282:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    7286:	2240      	movs	r2, #64	; 0x40
    7288:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    728c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    7290:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7294:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    7296:	2280      	movs	r2, #128	; 0x80
    7298:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    729c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    72a0:	4b0f      	ldr	r3, [pc, #60]	; (72e0 <nrfx_usbd_enable+0x13c>)
    72a2:	f240 12ff 	movw	r2, #511	; 0x1ff
    72a6:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    72a8:	4b0e      	ldr	r3, [pc, #56]	; (72e4 <nrfx_usbd_enable+0x140>)
    72aa:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    72ac:	f7ff feac 	bl	7008 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    72b0:	4b0d      	ldr	r3, [pc, #52]	; (72e8 <nrfx_usbd_enable+0x144>)
    72b2:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    72b4:	4b0d      	ldr	r3, [pc, #52]	; (72ec <nrfx_usbd_enable+0x148>)
    72b6:	2202      	movs	r2, #2
    72b8:	701a      	strb	r2, [r3, #0]
    72ba:	f7ff fd87 	bl	6dcc <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    72be:	b150      	cbz	r0, 72d6 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    72c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    72c4:	f7ff be14 	b.w	6ef0 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    72c8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    72cc:	e793      	b.n	71f6 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    72ce:	2200      	movs	r2, #0
    72d0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    72d4:	e7be      	b.n	7254 <nrfx_usbd_enable+0xb0>
}
    72d6:	bd08      	pop	{r3, pc}
    72d8:	40027000 	.word	0x40027000
    72dc:	4006e000 	.word	0x4006e000
    72e0:	20002a4c 	.word	0x20002a4c
    72e4:	20002a48 	.word	0x20002a48
    72e8:	20004883 	.word	0x20004883
    72ec:	20004885 	.word	0x20004885

000072f0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    72f0:	4b0a      	ldr	r3, [pc, #40]	; (731c <nrfx_usbd_start+0x2c>)
    72f2:	2200      	movs	r2, #0
{
    72f4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    72f6:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    72f8:	4a09      	ldr	r2, [pc, #36]	; (7320 <nrfx_usbd_start+0x30>)
    72fa:	4b0a      	ldr	r3, [pc, #40]	; (7324 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    72fc:	4c0a      	ldr	r4, [pc, #40]	; (7328 <nrfx_usbd_start+0x38>)
    72fe:	2800      	cmp	r0, #0
    7300:	bf08      	it	eq
    7302:	4613      	moveq	r3, r2
    7304:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    7308:	2027      	movs	r0, #39	; 0x27
    730a:	f7fc f9f7 	bl	36fc <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    730e:	2301      	movs	r3, #1
    7310:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    7314:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    7318:	bd10      	pop	{r4, pc}
    731a:	bf00      	nop
    731c:	20004884 	.word	0x20004884
    7320:	01c01407 	.word	0x01c01407
    7324:	01e01407 	.word	0x01e01407
    7328:	40027000 	.word	0x40027000

0000732c <nrfx_usbd_is_initialized>:
    }
}

bool nrfx_usbd_is_initialized(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
    732c:	4b02      	ldr	r3, [pc, #8]	; (7338 <nrfx_usbd_is_initialized+0xc>)
    732e:	7818      	ldrb	r0, [r3, #0]
}
    7330:	3800      	subs	r0, #0
    7332:	bf18      	it	ne
    7334:	2001      	movne	r0, #1
    7336:	4770      	bx	lr
    7338:	20004885 	.word	0x20004885

0000733c <nrfx_usbd_is_enabled>:

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    733c:	4b03      	ldr	r3, [pc, #12]	; (734c <nrfx_usbd_is_enabled+0x10>)
    733e:	7818      	ldrb	r0, [r3, #0]
}
    7340:	2801      	cmp	r0, #1
    7342:	bf94      	ite	ls
    7344:	2000      	movls	r0, #0
    7346:	2001      	movhi	r0, #1
    7348:	4770      	bx	lr
    734a:	bf00      	nop
    734c:	20004885 	.word	0x20004885

00007350 <nrfx_usbd_init>:
{
    7350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    7352:	4b1c      	ldr	r3, [pc, #112]	; (73c4 <nrfx_usbd_init+0x74>)
    7354:	781c      	ldrb	r4, [r3, #0]
    7356:	bb94      	cbnz	r4, 73be <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    7358:	4a1b      	ldr	r2, [pc, #108]	; (73c8 <nrfx_usbd_init+0x78>)
    735a:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    735c:	2201      	movs	r2, #1
    735e:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7360:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7364:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7366:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    736a:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    736e:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7370:	bf14      	ite	ne
    7372:	4639      	movne	r1, r7
    7374:	2140      	moveq	r1, #64	; 0x40
    7376:	4628      	mov	r0, r5
    7378:	f005 fd18 	bl	cdac <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    737c:	4628      	mov	r0, r5
    737e:	f7ff fd39 	bl	6df4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7382:	3401      	adds	r4, #1
    7384:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7386:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    7388:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    738a:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    738c:	d1eb      	bne.n	7366 <nrfx_usbd_init+0x16>
    738e:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7390:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7394:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7396:	f014 0f08 	tst.w	r4, #8
    739a:	b2e6      	uxtb	r6, r4
    739c:	bf14      	ite	ne
    739e:	4639      	movne	r1, r7
    73a0:	2140      	moveq	r1, #64	; 0x40
    73a2:	4630      	mov	r0, r6
    73a4:	f005 fd02 	bl	cdac <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    73a8:	4630      	mov	r0, r6
    73aa:	f7ff fd23 	bl	6df4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    73ae:	3401      	adds	r4, #1
    73b0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    73b2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    73b4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    73b6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    73b8:	d1ed      	bne.n	7396 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    73ba:	4804      	ldr	r0, [pc, #16]	; (73cc <nrfx_usbd_init+0x7c>)
}
    73bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    73be:	4804      	ldr	r0, [pc, #16]	; (73d0 <nrfx_usbd_init+0x80>)
    73c0:	e7fc      	b.n	73bc <nrfx_usbd_init+0x6c>
    73c2:	bf00      	nop
    73c4:	20004885 	.word	0x20004885
    73c8:	20002a50 	.word	0x20002a50
    73cc:	0bad0000 	.word	0x0bad0000
    73d0:	0bad0005 	.word	0x0bad0005

000073d4 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    73d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73d8:	4604      	mov	r4, r0
	__asm__ volatile(
    73da:	f04f 0320 	mov.w	r3, #32
    73de:	f3ef 8811 	mrs	r8, BASEPRI
    73e2:	f383 8812 	msr	BASEPRI_MAX, r3
    73e6:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    73ea:	f010 0a0f 	ands.w	sl, r0, #15
    73ee:	d103      	bne.n	73f8 <nrfx_usbd_ep_transfer+0x24>
    73f0:	4b27      	ldr	r3, [pc, #156]	; (7490 <nrfx_usbd_ep_transfer+0xbc>)
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	4283      	cmp	r3, r0
    73f6:	d146      	bne.n	7486 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    73f8:	4b26      	ldr	r3, [pc, #152]	; (7494 <nrfx_usbd_ep_transfer+0xc0>)
    73fa:	4e27      	ldr	r6, [pc, #156]	; (7498 <nrfx_usbd_ep_transfer+0xc4>)
    73fc:	681a      	ldr	r2, [r3, #0]
    73fe:	6837      	ldr	r7, [r6, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    7400:	4620      	mov	r0, r4
    7402:	f005 fc9b 	bl	cd3c <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7406:	43d2      	mvns	r2, r2
    7408:	b292      	uxth	r2, r2
    740a:	f04f 0901 	mov.w	r9, #1
    740e:	433a      	orrs	r2, r7
    7410:	fa09 f900 	lsl.w	r9, r9, r0
    7414:	ea12 0f09 	tst.w	r2, r9
    7418:	d137      	bne.n	748a <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    741a:	4620      	mov	r0, r4
    741c:	f7ff fcea 	bl	6df4 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7420:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    7422:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7424:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7426:	fb03 f30a 	mul.w	r3, r3, sl
        if (NRF_USBD_EPIN_CHECK(ep))
    742a:	d528      	bpl.n	747e <nrfx_usbd_ep_transfer+0xaa>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    742c:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    742e:	6888      	ldr	r0, [r1, #8]
    7430:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7434:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7438:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    743c:	d11c      	bne.n	7478 <nrfx_usbd_ep_transfer+0xa4>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    743e:	4a17      	ldr	r2, [pc, #92]	; (749c <nrfx_usbd_ep_transfer+0xc8>)
    7440:	4c17      	ldr	r4, [pc, #92]	; (74a0 <nrfx_usbd_ep_transfer+0xcc>)
    7442:	2800      	cmp	r0, #0
    7444:	bf08      	it	eq
    7446:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7448:	4816      	ldr	r0, [pc, #88]	; (74a4 <nrfx_usbd_ep_transfer+0xd0>)
    744a:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    744c:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    744e:	c907      	ldmia	r1, {r0, r1, r2}
    7450:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    7454:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    7456:	2300      	movs	r3, #0
    7458:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    745a:	73ab      	strb	r3, [r5, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    745c:	4b12      	ldr	r3, [pc, #72]	; (74a8 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    745e:	4813      	ldr	r0, [pc, #76]	; (74ac <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7460:	ea49 0707 	orr.w	r7, r9, r7
    7464:	2280      	movs	r2, #128	; 0x80
    7466:	6037      	str	r7, [r6, #0]
    7468:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    746c:	f388 8811 	msr	BASEPRI, r8
    7470:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    7474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7478:	4a0d      	ldr	r2, [pc, #52]	; (74b0 <nrfx_usbd_ep_transfer+0xdc>)
    747a:	4c0e      	ldr	r4, [pc, #56]	; (74b4 <nrfx_usbd_ep_transfer+0xe0>)
    747c:	e7e1      	b.n	7442 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    747e:	4a0e      	ldr	r2, [pc, #56]	; (74b8 <nrfx_usbd_ep_transfer+0xe4>)
    7480:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    7482:	4a0e      	ldr	r2, [pc, #56]	; (74bc <nrfx_usbd_ep_transfer+0xe8>)
    7484:	e7e2      	b.n	744c <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    7486:	480e      	ldr	r0, [pc, #56]	; (74c0 <nrfx_usbd_ep_transfer+0xec>)
    7488:	e7f0      	b.n	746c <nrfx_usbd_ep_transfer+0x98>
        ret = NRFX_ERROR_BUSY;
    748a:	480e      	ldr	r0, [pc, #56]	; (74c4 <nrfx_usbd_ep_transfer+0xf0>)
    748c:	e7ee      	b.n	746c <nrfx_usbd_ep_transfer+0x98>
    748e:	bf00      	nop
    7490:	20004883 	.word	0x20004883
    7494:	20002a4c 	.word	0x20002a4c
    7498:	20002a48 	.word	0x20002a48
    749c:	0000cd13 	.word	0x0000cd13
    74a0:	0000ccf1 	.word	0x0000ccf1
    74a4:	200028bc 	.word	0x200028bc
    74a8:	e000e100 	.word	0xe000e100
    74ac:	0bad0000 	.word	0x0bad0000
    74b0:	00006f69 	.word	0x00006f69
    74b4:	00006f31 	.word	0x00006f31
    74b8:	20002850 	.word	0x20002850
    74bc:	0000ccc3 	.word	0x0000ccc3
    74c0:	0bad000a 	.word	0x0bad000a
    74c4:	0bad000b 	.word	0x0bad000b

000074c8 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    74c8:	f010 0f08 	tst.w	r0, #8
    74cc:	4b07      	ldr	r3, [pc, #28]	; (74ec <nrfx_usbd_epout_size_get+0x24>)
    74ce:	d006      	beq.n	74de <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    74d0:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    74d4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    74d8:	bf18      	it	ne
    74da:	2000      	movne	r0, #0
    74dc:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    74de:	f000 000f 	and.w	r0, r0, #15
    74e2:	f500 7094 	add.w	r0, r0, #296	; 0x128
    74e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    74ea:	4770      	bx	lr
    74ec:	40027000 	.word	0x40027000

000074f0 <usbd_dmareq_process>:
{
    74f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    74f4:	4e5d      	ldr	r6, [pc, #372]	; (766c <usbd_dmareq_process+0x17c>)
    74f6:	7833      	ldrb	r3, [r6, #0]
{
    74f8:	b085      	sub	sp, #20
    if (!m_dma_pending)
    74fa:	2b00      	cmp	r3, #0
    74fc:	f040 8087 	bne.w	760e <usbd_dmareq_process+0x11e>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    7500:	f8df 816c 	ldr.w	r8, [pc, #364]	; 7670 <usbd_dmareq_process+0x180>
    7504:	4d5b      	ldr	r5, [pc, #364]	; (7674 <usbd_dmareq_process+0x184>)
    7506:	f8d8 4000 	ldr.w	r4, [r8]
    750a:	682b      	ldr	r3, [r5, #0]
    750c:	401c      	ands	r4, r3
    750e:	d07e      	beq.n	760e <usbd_dmareq_process+0x11e>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    7510:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    7514:	bf14      	ite	ne
    7516:	fa93 f4a3 	rbitne	r4, r3
    751a:	fa94 f4a4 	rbiteq	r4, r4
    751e:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7522:	f04f 0901 	mov.w	r9, #1
    7526:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    752a:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    752c:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7530:	d91b      	bls.n	756a <usbd_dmareq_process+0x7a>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    7532:	3c10      	subs	r4, #16
    7534:	fa4f fa84 	sxtb.w	sl, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7538:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    753a:	4620      	mov	r0, r4
    753c:	f7ff fc5a 	bl	6df4 <ep_state_access>
    7540:	4683      	mov	fp, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7542:	4620      	mov	r0, r4
    7544:	f7ff ffc0 	bl	74c8 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    7548:	f8bb 200c 	ldrh.w	r2, [fp, #12]
    754c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7550:	f8db c000 	ldr.w	ip, [fp]
    7554:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7556:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    7558:	a802      	add	r0, sp, #8
    755a:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    755c:	9a02      	ldr	r2, [sp, #8]
    755e:	2a00      	cmp	r2, #0
    7560:	d158      	bne.n	7614 <usbd_dmareq_process+0x124>
                if (!continue_transfer)
    7562:	b990      	cbnz	r0, 758a <usbd_dmareq_process+0x9a>
                    p_state->handler.consumer = NULL;
    7564:	f8cb 0000 	str.w	r0, [fp]
    7568:	e00f      	b.n	758a <usbd_dmareq_process+0x9a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    756a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    756e:	4620      	mov	r0, r4
    7570:	f7ff fc40 	bl	6df4 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    7574:	6803      	ldr	r3, [r0, #0]
    7576:	8982      	ldrh	r2, [r0, #12]
    7578:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    757a:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.feeder(
    757c:	a802      	add	r0, sp, #8
    757e:	4798      	blx	r3
                if (!continue_transfer)
    7580:	b908      	cbnz	r0, 7586 <usbd_dmareq_process+0x96>
                    p_state->handler.feeder = NULL;
    7582:	f8cb 0000 	str.w	r0, [fp]
            if (NRF_USBD_EPIN_CHECK(ep))
    7586:	fa4f fa84 	sxtb.w	sl, r4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    758a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    758e:	f004 0008 	and.w	r0, r4, #8
            if (var1 == 0x08)
    7592:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7596:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    7598:	bf02      	ittt	eq
    759a:	4b37      	ldreq	r3, [pc, #220]	; (7678 <usbd_dmareq_process+0x188>)
    759c:	2282      	moveq	r2, #130	; 0x82
    759e:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    75a2:	2301      	movs	r3, #1
    75a4:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    75a6:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    75a8:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    75aa:	9902      	ldr	r1, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    75ac:	ea03 0309 	and.w	r3, r3, r9
    75b0:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    75b2:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    75b6:	f1ba 0f00 	cmp.w	sl, #0
    75ba:	4413      	add	r3, r2
    75bc:	f8cb 3008 	str.w	r3, [fp, #8]
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    75c0:	f004 040f 	and.w	r4, r4, #15
    75c4:	4b2c      	ldr	r3, [pc, #176]	; (7678 <usbd_dmareq_process+0x188>)
    if (NRF_USBD_EPIN_CHECK(ep))
    75c6:	da42      	bge.n	764e <usbd_dmareq_process+0x15e>
        if (NRF_USBD_EPISO_CHECK(ep))
    75c8:	2800      	cmp	r0, #0
    75ca:	d038      	beq.n	763e <usbd_dmareq_process+0x14e>
            p_reg->ISOIN.PTR    = ptr;
    75cc:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    75d0:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    75d4:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    75d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    75da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    75de:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    75e2:	2201      	movs	r2, #1
    75e4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    75e6:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    75e8:	4a24      	ldr	r2, [pc, #144]	; (767c <usbd_dmareq_process+0x18c>)
    75ea:	4b25      	ldr	r3, [pc, #148]	; (7680 <usbd_dmareq_process+0x190>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    75ec:	4922      	ldr	r1, [pc, #136]	; (7678 <usbd_dmareq_process+0x188>)
    75ee:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    75f2:	bf38      	it	cc
    75f4:	4613      	movcc	r3, r2
    75f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    75fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    75fe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7602:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    7604:	b91a      	cbnz	r2, 760e <usbd_dmareq_process+0x11e>
    7606:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    760a:	2a00      	cmp	r2, #0
    760c:	d0f9      	beq.n	7602 <usbd_dmareq_process+0x112>
}
    760e:	b005      	add	sp, #20
    7610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                else if (transfer.size < rx_size)
    7614:	9a03      	ldr	r2, [sp, #12]
    7616:	4297      	cmp	r7, r2
    7618:	d9a3      	bls.n	7562 <usbd_dmareq_process+0x72>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    761a:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    761c:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    761e:	f88b 700e 	strb.w	r7, [fp, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7622:	f7ff fce1 	bl	6fe8 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7626:	2306      	movs	r3, #6
    7628:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    762c:	4b15      	ldr	r3, [pc, #84]	; (7684 <usbd_dmareq_process+0x194>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    762e:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    7632:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7634:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    7638:	a801      	add	r0, sp, #4
    763a:	4798      	blx	r3
                    continue;
    763c:	e763      	b.n	7506 <usbd_dmareq_process+0x16>
            p_reg->EPIN[epnr].PTR    = ptr;
    763e:	2014      	movs	r0, #20
    7640:	fb00 3304 	mla	r3, r0, r4, r3
    7644:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    7648:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    764c:	e7c2      	b.n	75d4 <usbd_dmareq_process+0xe4>
        if (NRF_USBD_EPISO_CHECK(ep))
    764e:	b128      	cbz	r0, 765c <usbd_dmareq_process+0x16c>
            p_reg->ISOOUT.PTR    = ptr;
    7650:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    7654:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    7658:	2328      	movs	r3, #40	; 0x28
    765a:	e7bc      	b.n	75d6 <usbd_dmareq_process+0xe6>
            p_reg->EPOUT[epnr].PTR    = ptr;
    765c:	2014      	movs	r0, #20
    765e:	fb00 3304 	mla	r3, r0, r4, r3
    7662:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    7666:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    766a:	e7f5      	b.n	7658 <usbd_dmareq_process+0x168>
    766c:	20004882 	.word	0x20004882
    7670:	20002a48 	.word	0x20002a48
    7674:	20002a4c 	.word	0x20002a4c
    7678:	40027000 	.word	0x40027000
    767c:	0000db84 	.word	0x0000db84
    7680:	0000db96 	.word	0x0000db96
    7684:	20002a50 	.word	0x20002a50

00007688 <ev_epdata_handler>:
{
    7688:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    768a:	4b0f      	ldr	r3, [pc, #60]	; (76c8 <ev_epdata_handler+0x40>)
    768c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    7690:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    7694:	2501      	movs	r5, #1
    while (dataepstatus)
    7696:	b91c      	cbnz	r4, 76a0 <ev_epdata_handler+0x18>
}
    7698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    769c:	f7ff bf28 	b.w	74f0 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    76a0:	fa94 f3a4 	rbit	r3, r4
    76a4:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    76a8:	2b0f      	cmp	r3, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    76aa:	bfc8      	it	gt
    76ac:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    76b0:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    76b2:	bfd4      	ite	le
    76b4:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    76b8:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    76ba:	fa05 f303 	lsl.w	r3, r5, r3
    76be:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    76c2:	f7ff fcc9 	bl	7058 <usbd_ep_data_handler>
    76c6:	e7e6      	b.n	7696 <ev_epdata_handler+0xe>
    76c8:	40027000 	.word	0x40027000

000076cc <nrf_usbd_epout_dma_handler>:
{
    76cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    76ce:	f7ff fc9b 	bl	7008 <usbd_dma_pending_clear>
{
    76d2:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    76d4:	f7ff fb8e 	bl	6df4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    76d8:	7b83      	ldrb	r3, [r0, #14]
    76da:	2b03      	cmp	r3, #3
    76dc:	d10d      	bne.n	76fa <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    76de:	4620      	mov	r0, r4
    76e0:	f005 fb2c 	bl	cd3c <ep2bit>
    76e4:	2301      	movs	r3, #1
    76e6:	fa03 f000 	lsl.w	r0, r3, r0
    76ea:	43c0      	mvns	r0, r0
    76ec:	f7ff fc7c 	bl	6fe8 <atomic_and.constprop.0.isra.0>
}
    76f0:	b003      	add	sp, #12
    76f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    76f6:	f7ff befb 	b.w	74f0 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    76fa:	6805      	ldr	r5, [r0, #0]
    76fc:	2d00      	cmp	r5, #0
    76fe:	d1f7      	bne.n	76f0 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7700:	4620      	mov	r0, r4
    7702:	f005 fb1b 	bl	cd3c <ep2bit>
    7706:	2301      	movs	r3, #1
    7708:	fa03 f000 	lsl.w	r0, r3, r0
    770c:	43c0      	mvns	r0, r0
    770e:	f7ff fc6b 	bl	6fe8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7712:	2306      	movs	r3, #6
    7714:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7718:	4b04      	ldr	r3, [pc, #16]	; (772c <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    771a:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    771e:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7720:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    7724:	a801      	add	r0, sp, #4
    7726:	4798      	blx	r3
    7728:	e7e2      	b.n	76f0 <nrf_usbd_epout_dma_handler+0x24>
    772a:	bf00      	nop
    772c:	20002a50 	.word	0x20002a50

00007730 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    7730:	4b02      	ldr	r3, [pc, #8]	; (773c <nrfx_usbd_ep_stall+0xc>)
    7732:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7736:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    773a:	4770      	bx	lr
    773c:	40027000 	.word	0x40027000

00007740 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7740:	0702      	lsls	r2, r0, #28
    7742:	d413      	bmi.n	776c <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    7744:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7748:	f010 0f80 	tst.w	r0, #128	; 0x80
    774c:	4a08      	ldr	r2, [pc, #32]	; (7770 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    774e:	bf0b      	itete	eq
    7750:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    7754:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    7758:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    775c:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    7760:	bf08      	it	eq
    7762:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    7764:	1e43      	subs	r3, r0, #1
    7766:	4258      	negs	r0, r3
    7768:	4158      	adcs	r0, r3
    776a:	4770      	bx	lr
        return false;
    776c:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    776e:	4770      	bx	lr
    7770:	40027000 	.word	0x40027000

00007774 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    7774:	4b04      	ldr	r3, [pc, #16]	; (7788 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    7776:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    777a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    777e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    7782:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    7786:	4770      	bx	lr
    7788:	40027000 	.word	0x40027000

0000778c <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    778c:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    778e:	2208      	movs	r2, #8
    7790:	2100      	movs	r1, #0
{
    7792:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7794:	f003 f9b0 	bl	aaf8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7798:	4b0e      	ldr	r3, [pc, #56]	; (77d4 <nrfx_usbd_setup_get+0x48>)
    779a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    779e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    77a0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    77a4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    77a6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    77aa:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    77ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    77b2:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    77b4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    77b8:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    77bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    77c0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    77c2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    77c6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    77ca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    77ce:	80e3      	strh	r3, [r4, #6]
}
    77d0:	bd10      	pop	{r4, pc}
    77d2:	bf00      	nop
    77d4:	40027000 	.word	0x40027000

000077d8 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    77d8:	4b02      	ldr	r3, [pc, #8]	; (77e4 <nrfx_usbd_setup_data_clear+0xc>)
    77da:	2201      	movs	r2, #1
    77dc:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    77de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    77e0:	4770      	bx	lr
    77e2:	bf00      	nop
    77e4:	40027000 	.word	0x40027000

000077e8 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    77e8:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    77ea:	f7ff fc0d 	bl	7008 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    77ee:	4b10      	ldr	r3, [pc, #64]	; (7830 <ev_dma_epout0_handler+0x48>)
    77f0:	7b9a      	ldrb	r2, [r3, #14]
    77f2:	2a03      	cmp	r2, #3
    77f4:	d106      	bne.n	7804 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    77f6:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    77fa:	b002      	add	sp, #8
    77fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7800:	f7ff bbf2 	b.w	6fe8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    7804:	681c      	ldr	r4, [r3, #0]
    7806:	b974      	cbnz	r4, 7826 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7808:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    780c:	f7ff fbec 	bl	6fe8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7810:	2306      	movs	r3, #6
    7812:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7816:	4b07      	ldr	r3, [pc, #28]	; (7834 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7818:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    781c:	681b      	ldr	r3, [r3, #0]
    781e:	a801      	add	r0, sp, #4
    7820:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7822:	b002      	add	sp, #8
    7824:	bd10      	pop	{r4, pc}
    7826:	b002      	add	sp, #8
    7828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    782c:	f7ff bfd4 	b.w	77d8 <nrfx_usbd_setup_data_clear>
    7830:	20002928 	.word	0x20002928
    7834:	20002a50 	.word	0x20002a50

00007838 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7838:	4b02      	ldr	r3, [pc, #8]	; (7844 <nrfx_usbd_setup_clear+0xc>)
    783a:	2201      	movs	r2, #1
    783c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    783e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    7840:	4770      	bx	lr
    7842:	bf00      	nop
    7844:	40027000 	.word	0x40027000

00007848 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7848:	4b02      	ldr	r3, [pc, #8]	; (7854 <nrfx_usbd_setup_stall+0xc>)
    784a:	2201      	movs	r2, #1
    784c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    784e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    7850:	4770      	bx	lr
    7852:	bf00      	nop
    7854:	40027000 	.word	0x40027000

00007858 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    7858:	4b01      	ldr	r3, [pc, #4]	; (7860 <nrfx_usbd_last_setup_dir_get+0x8>)
    785a:	7818      	ldrb	r0, [r3, #0]
    785c:	4770      	bx	lr
    785e:	bf00      	nop
    7860:	20004883 	.word	0x20004883

00007864 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    7864:	b510      	push	{r4, lr}
    7866:	4602      	mov	r2, r0
	__asm__ volatile(
    7868:	f04f 0320 	mov.w	r3, #32
    786c:	f3ef 8411 	mrs	r4, BASEPRI
    7870:	f383 8812 	msr	BASEPRI_MAX, r3
    7874:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    7878:	f005 fa60 	bl	cd3c <ep2bit>
    787c:	490d      	ldr	r1, [pc, #52]	; (78b4 <nrfx_usbd_transfer_out_drop+0x50>)
    787e:	2301      	movs	r3, #1
    7880:	fa03 f000 	lsl.w	r0, r3, r0
    7884:	680b      	ldr	r3, [r1, #0]
    7886:	ea23 0300 	bic.w	r3, r3, r0
    788a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    788c:	f012 0108 	ands.w	r1, r2, #8
    7890:	d10a      	bne.n	78a8 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    7892:	f002 030f 	and.w	r3, r2, #15
    7896:	009b      	lsls	r3, r3, #2
    7898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    789c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    78a0:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    78a4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    78a8:	f384 8811 	msr	BASEPRI, r4
    78ac:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    78b0:	bd10      	pop	{r4, pc}
    78b2:	bf00      	nop
    78b4:	20002a4c 	.word	0x20002a4c

000078b8 <usbd_ep_abort>:
{
    78b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78ba:	4601      	mov	r1, r0
	__asm__ volatile(
    78bc:	f04f 0320 	mov.w	r3, #32
    78c0:	f3ef 8511 	mrs	r5, BASEPRI
    78c4:	f383 8812 	msr	BASEPRI_MAX, r3
    78c8:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    78cc:	f7ff fa92 	bl	6df4 <ep_state_access>
    78d0:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    78d2:	4608      	mov	r0, r1
    78d4:	f005 fa32 	bl	cd3c <ep2bit>
    78d8:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    78da:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    78de:	fa02 f200 	lsl.w	r2, r2, r0
    78e2:	482e      	ldr	r0, [pc, #184]	; (799c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    78e4:	d118      	bne.n	7918 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    78e6:	6803      	ldr	r3, [r0, #0]
    78e8:	ea32 0403 	bics.w	r4, r2, r3
    78ec:	d00a      	beq.n	7904 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    78ee:	4608      	mov	r0, r1
    78f0:	f7ff ffb8 	bl	7864 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    78f4:	2303      	movs	r3, #3
    78f6:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    78f8:	f385 8811 	msr	BASEPRI, r5
    78fc:	f3bf 8f6f 	isb	sy
}
    7900:	b003      	add	sp, #12
    7902:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_ready &= ~(1U << ep2bit(ep));
    7904:	4926      	ldr	r1, [pc, #152]	; (79a0 <usbd_ep_abort+0xe8>)
            p_state->handler.consumer = NULL;
    7906:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7908:	ea23 0302 	bic.w	r3, r3, r2
    790c:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    790e:	680b      	ldr	r3, [r1, #0]
    7910:	ea23 0302 	bic.w	r3, r3, r2
    7914:	600b      	str	r3, [r1, #0]
    7916:	e7ed      	b.n	78f4 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7918:	070b      	lsls	r3, r1, #28
    791a:	d415      	bmi.n	7948 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    791c:	2980      	cmp	r1, #128	; 0x80
    791e:	4b21      	ldr	r3, [pc, #132]	; (79a4 <usbd_ep_abort+0xec>)
    7920:	d02f      	beq.n	7982 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    7922:	f001 040f 	and.w	r4, r1, #15
    7926:	f204 34da 	addw	r4, r4, #986	; 0x3da
    792a:	0064      	lsls	r4, r4, #1
    792c:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7930:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7934:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7938:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    793a:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    793e:	433c      	orrs	r4, r7
    7940:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7944:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7948:	4f15      	ldr	r7, [pc, #84]	; (79a0 <usbd_ep_abort+0xe8>)
    794a:	6804      	ldr	r4, [r0, #0]
    794c:	683b      	ldr	r3, [r7, #0]
    794e:	ea64 0c03 	orn	ip, r4, r3
    7952:	ea1c 0f02 	tst.w	ip, r2
    7956:	d0cf      	beq.n	78f8 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7958:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    795a:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    795e:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    7960:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7962:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    7964:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7966:	2303      	movs	r3, #3
    7968:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    796a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    796e:	4b0e      	ldr	r3, [pc, #56]	; (79a8 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7970:	f88d 1006 	strb.w	r1, [sp, #6]
    7974:	2206      	movs	r2, #6
            m_event_handler(&evt);
    7976:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7978:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    797c:	a801      	add	r0, sp, #4
    797e:	4798      	blx	r3
    7980:	e7ba      	b.n	78f8 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7982:	f240 74b4 	movw	r4, #1972	; 0x7b4
    7986:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    798a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    798e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7992:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7994:	f044 0404 	orr.w	r4, r4, #4
    7998:	e7d1      	b.n	793e <usbd_ep_abort+0x86>
    799a:	bf00      	nop
    799c:	20002a48 	.word	0x20002a48
    79a0:	20002a4c 	.word	0x20002a4c
    79a4:	40027000 	.word	0x40027000
    79a8:	20002a50 	.word	0x20002a50

000079ac <ev_setup_handler>:
{
    79ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    79ae:	4b14      	ldr	r3, [pc, #80]	; (7a00 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    79b0:	4c14      	ldr	r4, [pc, #80]	; (7a04 <ev_setup_handler+0x58>)
    79b2:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    79b6:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    79b8:	4e13      	ldr	r6, [pc, #76]	; (7a08 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    79ba:	43da      	mvns	r2, r3
    79bc:	4b13      	ldr	r3, [pc, #76]	; (7a0c <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    79be:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    79c0:	681b      	ldr	r3, [r3, #0]
    79c2:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    79c4:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    79c6:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    79c8:	f005 f9b8 	bl	cd3c <ep2bit>
    79cc:	2301      	movs	r3, #1
    79ce:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    79d0:	4213      	tst	r3, r2
    79d2:	d002      	beq.n	79da <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    79d4:	4608      	mov	r0, r1
    79d6:	f7ff ff6f 	bl	78b8 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    79da:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    79de:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    79e2:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    79e4:	f7ff fb00 	bl	6fe8 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    79e8:	6823      	ldr	r3, [r4, #0]
    79ea:	f043 0301 	orr.w	r3, r3, #1
    79ee:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    79f0:	2305      	movs	r3, #5
    79f2:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    79f4:	4b06      	ldr	r3, [pc, #24]	; (7a10 <ev_setup_handler+0x64>)
    79f6:	a801      	add	r0, sp, #4
    79f8:	681b      	ldr	r3, [r3, #0]
    79fa:	4798      	blx	r3
}
    79fc:	b002      	add	sp, #8
    79fe:	bd70      	pop	{r4, r5, r6, pc}
    7a00:	40027000 	.word	0x40027000
    7a04:	20002a4c 	.word	0x20002a4c
    7a08:	20004883 	.word	0x20004883
    7a0c:	20002a48 	.word	0x20002a48
    7a10:	20002a50 	.word	0x20002a50

00007a14 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    7a14:	4b1b      	ldr	r3, [pc, #108]	; (7a84 <nrfx_usbd_irq_handler+0x70>)
    7a16:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    7a1a:	2300      	movs	r3, #0
{
    7a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    7a20:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7a22:	461d      	mov	r5, r3
    while (to_process)
    7a24:	b970      	cbnz	r0, 7a44 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    7a26:	4f18      	ldr	r7, [pc, #96]	; (7a88 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    7a28:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    7a2c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    7a30:	f04f 0801 	mov.w	r8, #1
    while (active)
    7a34:	b9bc      	cbnz	r4, 7a66 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    7a36:	f7ff fd5b 	bl	74f0 <usbd_dmareq_process>
    if (setup_active)
    7a3a:	b306      	cbz	r6, 7a7e <nrfx_usbd_irq_handler+0x6a>
}
    7a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    7a40:	f7ff bfb4 	b.w	79ac <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    7a44:	fa90 f2a0 	rbit	r2, r0
    7a48:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7a4c:	490f      	ldr	r1, [pc, #60]	; (7a8c <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    7a4e:	0096      	lsls	r6, r2, #2
    7a50:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    7a52:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7a56:	680e      	ldr	r6, [r1, #0]
    if (ret)
    7a58:	b116      	cbz	r6, 7a60 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7a5a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7a5c:	6809      	ldr	r1, [r1, #0]
    7a5e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    7a60:	ea20 0002 	bic.w	r0, r0, r2
    7a64:	e7de      	b.n	7a24 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    7a66:	fa94 f5a4 	rbit	r5, r4
    7a6a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    7a6e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    7a72:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    7a76:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    7a78:	ea24 0405 	bic.w	r4, r4, r5
    7a7c:	e7da      	b.n	7a34 <nrfx_usbd_irq_handler+0x20>
}
    7a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a82:	bf00      	nop
    7a84:	40027000 	.word	0x40027000
    7a88:	0000da80 	.word	0x0000da80
    7a8c:	40027100 	.word	0x40027100

00007a90 <usbd_ep_abort_all>:
{
    7a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    7a92:	4e10      	ldr	r6, [pc, #64]	; (7ad4 <usbd_ep_abort_all+0x44>)
    7a94:	4b10      	ldr	r3, [pc, #64]	; (7ad8 <usbd_ep_abort_all+0x48>)
    7a96:	6834      	ldr	r4, [r6, #0]
    7a98:	681b      	ldr	r3, [r3, #0]
    7a9a:	0c24      	lsrs	r4, r4, #16
    7a9c:	0424      	lsls	r4, r4, #16
    7a9e:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    7aa0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    7aa2:	b91c      	cbnz	r4, 7aac <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7aa4:	f240 13ff 	movw	r3, #511	; 0x1ff
    7aa8:	6033      	str	r3, [r6, #0]
}
    7aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7aac:	fa94 f5a4 	rbit	r5, r4
    7ab0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7ab4:	2d0f      	cmp	r5, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    7ab6:	bfc6      	itte	gt
    7ab8:	f1a5 0010 	subgt.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7abc:	b2c0      	uxtbgt	r0, r0
    7abe:	f045 0080 	orrle.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    7ac2:	0703      	lsls	r3, r0, #28
    7ac4:	d401      	bmi.n	7aca <usbd_ep_abort_all+0x3a>
            usbd_ep_abort(bit2ep(bitpos));
    7ac6:	f7ff fef7 	bl	78b8 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    7aca:	fa07 f505 	lsl.w	r5, r7, r5
    7ace:	ea24 0405 	bic.w	r4, r4, r5
    7ad2:	e7e6      	b.n	7aa2 <usbd_ep_abort_all+0x12>
    7ad4:	20002a4c 	.word	0x20002a4c
    7ad8:	20002a48 	.word	0x20002a48

00007adc <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7adc:	4b0c      	ldr	r3, [pc, #48]	; (7b10 <nrfx_usbd_stop+0x34>)
    7ade:	2280      	movs	r2, #128	; 0x80
{
    7ae0:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    7ae2:	2027      	movs	r0, #39	; 0x27
    7ae4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    7ae8:	f7fb fe2a 	bl	3740 <arch_irq_is_enabled>
    7aec:	b170      	cbz	r0, 7b0c <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    7aee:	4c09      	ldr	r4, [pc, #36]	; (7b14 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    7af0:	f7ff ffce 	bl	7a90 <usbd_ep_abort_all>
    7af4:	2300      	movs	r3, #0
    7af6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    7afa:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    7afc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    7b00:	f7fb fe0a 	bl	3718 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7b04:	f04f 33ff 	mov.w	r3, #4294967295
    7b08:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    7b0c:	bd10      	pop	{r4, pc}
    7b0e:	bf00      	nop
    7b10:	e000e100 	.word	0xe000e100
    7b14:	40027000 	.word	0x40027000

00007b18 <nrfx_usbd_disable>:
{
    7b18:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    7b1a:	f7ff ffdf 	bl	7adc <nrfx_usbd_stop>
    return p_reg->INTENSET;
    7b1e:	4b08      	ldr	r3, [pc, #32]	; (7b40 <nrfx_usbd_disable+0x28>)
    7b20:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    7b24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    7b28:	2200      	movs	r2, #0
    7b2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7b2e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    7b32:	f7ff fa69 	bl	7008 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7b36:	4b03      	ldr	r3, [pc, #12]	; (7b44 <nrfx_usbd_disable+0x2c>)
    7b38:	2201      	movs	r2, #1
    7b3a:	701a      	strb	r2, [r3, #0]
}
    7b3c:	bd08      	pop	{r3, pc}
    7b3e:	bf00      	nop
    7b40:	40027000 	.word	0x40027000
    7b44:	20004885 	.word	0x20004885

00007b48 <nrfx_usbd_suspend>:
{
    7b48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7b4a:	f04f 0320 	mov.w	r3, #32
    7b4e:	f3ef 8511 	mrs	r5, BASEPRI
    7b52:	f383 8812 	msr	BASEPRI_MAX, r3
    7b56:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    7b5a:	4b10      	ldr	r3, [pc, #64]	; (7b9c <nrfx_usbd_suspend+0x54>)
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7b62:	b1a3      	cbz	r3, 7b8e <nrfx_usbd_suspend+0x46>
        usbd_ep_abort_all();
    7b64:	f7ff ff94 	bl	7a90 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    7b68:	4b0d      	ldr	r3, [pc, #52]	; (7ba0 <nrfx_usbd_suspend+0x58>)
    7b6a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    7b6e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    7b72:	d10c      	bne.n	7b8e <nrfx_usbd_suspend+0x46>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    7b74:	2101      	movs	r1, #1
    7b76:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7b7a:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    7b7e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7b82:	0589      	lsls	r1, r1, #22
    7b84:	d504      	bpl.n	7b90 <nrfx_usbd_suspend+0x48>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    7b86:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7b8a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    7b8e:	2400      	movs	r4, #0
	__asm__ volatile(
    7b90:	f385 8811 	msr	BASEPRI, r5
    7b94:	f3bf 8f6f 	isb	sy
}
    7b98:	4620      	mov	r0, r4
    7b9a:	bd38      	pop	{r3, r4, r5, pc}
    7b9c:	20004884 	.word	0x20004884
    7ba0:	40027000 	.word	0x40027000

00007ba4 <nrfx_usbd_ep_disable>:
{
    7ba4:	b510      	push	{r4, lr}
    7ba6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    7ba8:	f7ff fe86 	bl	78b8 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7bac:	4a10      	ldr	r2, [pc, #64]	; (7bf0 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    7bae:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7bb2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    7bb6:	f04f 0301 	mov.w	r3, #1
    7bba:	bf14      	ite	ne
    7bbc:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7bc0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    7bc4:	fa03 f300 	lsl.w	r3, r3, r0
    7bc8:	ea6f 0303 	mvn.w	r3, r3
    7bcc:	bf15      	itete	ne
    7bce:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7bd0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    7bd2:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7bd6:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7bda:	bf14      	ite	ne
    7bdc:	4b05      	ldrne	r3, [pc, #20]	; (7bf4 <nrfx_usbd_ep_disable+0x50>)
    7bde:	4b06      	ldreq	r3, [pc, #24]	; (7bf8 <nrfx_usbd_ep_disable+0x54>)
    7be0:	5c1a      	ldrb	r2, [r3, r0]
    7be2:	2301      	movs	r3, #1
    7be4:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    7be6:	4a02      	ldr	r2, [pc, #8]	; (7bf0 <nrfx_usbd_ep_disable+0x4c>)
    7be8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7bec:	bd10      	pop	{r4, pc}
    7bee:	bf00      	nop
    7bf0:	40027000 	.word	0x40027000
    7bf4:	0000dedc 	.word	0x0000dedc
    7bf8:	0000ded3 	.word	0x0000ded3

00007bfc <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7bfc:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    7c00:	b570      	push	{r4, r5, r6, lr}
    7c02:	4924      	ldr	r1, [pc, #144]	; (7c94 <nrfx_usbd_ep_enable+0x98>)
    7c04:	4604      	mov	r4, r0
    7c06:	f000 030f 	and.w	r3, r0, #15
    7c0a:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7c0e:	d012      	beq.n	7c36 <nrfx_usbd_ep_enable+0x3a>
    7c10:	4a21      	ldr	r2, [pc, #132]	; (7c98 <nrfx_usbd_ep_enable+0x9c>)
    7c12:	5cd2      	ldrb	r2, [r2, r3]
    7c14:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    7c18:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    7c1c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    7c20:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7c22:	07d0      	lsls	r0, r2, #31
    7c24:	d406      	bmi.n	7c34 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    7c26:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    7c2a:	fa05 f303 	lsl.w	r3, r5, r3
    7c2e:	4313      	orrs	r3, r2
    7c30:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    7c34:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7c36:	4a19      	ldr	r2, [pc, #100]	; (7c9c <nrfx_usbd_ep_enable+0xa0>)
    7c38:	5cd2      	ldrb	r2, [r2, r3]
    7c3a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    7c3e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7c42:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    7c46:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7c48:	07d2      	lsls	r2, r2, #31
    7c4a:	d4f3      	bmi.n	7c34 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    7c4c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    7c50:	fa05 f203 	lsl.w	r2, r5, r3
    7c54:	4332      	orrs	r2, r6
    7c56:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	d0ea      	beq.n	7c34 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    7c5e:	0703      	lsls	r3, r0, #28
    7c60:	d4e8      	bmi.n	7c34 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    7c62:	f04f 0320 	mov.w	r3, #32
    7c66:	f3ef 8611 	mrs	r6, BASEPRI
    7c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    7c6e:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    7c72:	f7ff fdf7 	bl	7864 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7c76:	4620      	mov	r0, r4
    7c78:	f005 f860 	bl	cd3c <ep2bit>
    7c7c:	4a08      	ldr	r2, [pc, #32]	; (7ca0 <nrfx_usbd_ep_enable+0xa4>)
    7c7e:	6813      	ldr	r3, [r2, #0]
    7c80:	fa05 f000 	lsl.w	r0, r5, r0
    7c84:	ea23 0300 	bic.w	r3, r3, r0
    7c88:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    7c8a:	f386 8811 	msr	BASEPRI, r6
    7c8e:	f3bf 8f6f 	isb	sy
}
    7c92:	e7cf      	b.n	7c34 <nrfx_usbd_ep_enable+0x38>
    7c94:	40027000 	.word	0x40027000
    7c98:	0000dedc 	.word	0x0000dedc
    7c9c:	0000ded3 	.word	0x0000ded3
    7ca0:	20002a48 	.word	0x20002a48

00007ca4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7ca4:	0603      	lsls	r3, r0, #24
{
    7ca6:	b510      	push	{r4, lr}
    7ca8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7caa:	d405      	bmi.n	7cb8 <nrfx_usbd_ep_stall_clear+0x14>
    7cac:	f7ff fd48 	bl	7740 <nrfx_usbd_ep_stall_check>
    7cb0:	b110      	cbz	r0, 7cb8 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    7cb2:	4620      	mov	r0, r4
    7cb4:	f7ff fdd6 	bl	7864 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    7cb8:	4b01      	ldr	r3, [pc, #4]	; (7cc0 <nrfx_usbd_ep_stall_clear+0x1c>)
    7cba:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    7cbe:	bd10      	pop	{r4, pc}
    7cc0:	40027000 	.word	0x40027000

00007cc4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7cc4:	4b0e      	ldr	r3, [pc, #56]	; (7d00 <z_sys_init_run_level+0x3c>)
{
    7cc6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7cc8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7ccc:	3001      	adds	r0, #1
    7cce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7cd2:	42a6      	cmp	r6, r4
    7cd4:	d800      	bhi.n	7cd8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    7cd6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    7cd8:	e9d4 3500 	ldrd	r3, r5, [r4]
    7cdc:	4628      	mov	r0, r5
    7cde:	4798      	blx	r3
		if (dev != NULL) {
    7ce0:	b165      	cbz	r5, 7cfc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    7ce2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    7ce4:	b130      	cbz	r0, 7cf4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7ce6:	2800      	cmp	r0, #0
    7ce8:	bfb8      	it	lt
    7cea:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    7cec:	28ff      	cmp	r0, #255	; 0xff
    7cee:	bfa8      	it	ge
    7cf0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    7cf2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7cf4:	785a      	ldrb	r2, [r3, #1]
    7cf6:	f042 0201 	orr.w	r2, r2, #1
    7cfa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7cfc:	3408      	adds	r4, #8
    7cfe:	e7e8      	b.n	7cd2 <z_sys_init_run_level+0xe>
    7d00:	0000dae4 	.word	0x0000dae4

00007d04 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7d04:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7d06:	4605      	mov	r5, r0
    7d08:	b910      	cbnz	r0, 7d10 <z_impl_device_get_binding+0xc>
		return NULL;
    7d0a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    7d0c:	4620      	mov	r0, r4
    7d0e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7d10:	7803      	ldrb	r3, [r0, #0]
    7d12:	2b00      	cmp	r3, #0
    7d14:	d0f9      	beq.n	7d0a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d16:	4c0e      	ldr	r4, [pc, #56]	; (7d50 <z_impl_device_get_binding+0x4c>)
    7d18:	4e0e      	ldr	r6, [pc, #56]	; (7d54 <z_impl_device_get_binding+0x50>)
    7d1a:	42b4      	cmp	r4, r6
    7d1c:	d108      	bne.n	7d30 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d1e:	4c0c      	ldr	r4, [pc, #48]	; (7d50 <z_impl_device_get_binding+0x4c>)
    7d20:	42b4      	cmp	r4, r6
    7d22:	d0f2      	beq.n	7d0a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7d24:	4620      	mov	r0, r4
    7d26:	f005 f875 	bl	ce14 <z_device_ready>
    7d2a:	b950      	cbnz	r0, 7d42 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d2c:	3418      	adds	r4, #24
    7d2e:	e7f7      	b.n	7d20 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    7d30:	4620      	mov	r0, r4
    7d32:	f005 f86f 	bl	ce14 <z_device_ready>
    7d36:	b110      	cbz	r0, 7d3e <z_impl_device_get_binding+0x3a>
    7d38:	6823      	ldr	r3, [r4, #0]
    7d3a:	42ab      	cmp	r3, r5
    7d3c:	d0e6      	beq.n	7d0c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d3e:	3418      	adds	r4, #24
    7d40:	e7eb      	b.n	7d1a <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7d42:	6821      	ldr	r1, [r4, #0]
    7d44:	4628      	mov	r0, r5
    7d46:	f002 fe99 	bl	aa7c <strcmp>
    7d4a:	2800      	cmp	r0, #0
    7d4c:	d1ee      	bne.n	7d2c <z_impl_device_get_binding+0x28>
    7d4e:	e7dd      	b.n	7d0c <z_impl_device_get_binding+0x8>
    7d50:	0000d4a8 	.word	0x0000d4a8
    7d54:	0000d550 	.word	0x0000d550

00007d58 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7d58:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    7d5a:	2300      	movs	r3, #0
{
    7d5c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    7d5e:	2201      	movs	r2, #1
    7d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
    7d64:	220f      	movs	r2, #15
    7d66:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7d6a:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    7d6c:	4c0c      	ldr	r4, [pc, #48]	; (7da0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7d6e:	4b0d      	ldr	r3, [pc, #52]	; (7da4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    7d70:	490d      	ldr	r1, [pc, #52]	; (7da8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7d72:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    7d74:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7d78:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    7d7c:	f44f 75b0 	mov.w	r5, #352	; 0x160
    7d80:	9300      	str	r3, [sp, #0]
    7d82:	fb05 1100 	mla	r1, r5, r0, r1
    7d86:	4b09      	ldr	r3, [pc, #36]	; (7dac <init_idle_thread+0x54>)
    7d88:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7d8c:	4620      	mov	r0, r4
    7d8e:	f000 f8f5 	bl	7f7c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7d92:	7b63      	ldrb	r3, [r4, #13]
    7d94:	f023 0304 	bic.w	r3, r3, #4
    7d98:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7d9a:	b007      	add	sp, #28
    7d9c:	bd30      	pop	{r4, r5, pc}
    7d9e:	bf00      	nop
    7da0:	20000560 	.word	0x20000560
    7da4:	20002a54 	.word	0x20002a54
    7da8:	20005ac0 	.word	0x20005ac0
    7dac:	0000cefd 	.word	0x0000cefd

00007db0 <bg_thread_main>:
{
    7db0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    7db2:	4b0a      	ldr	r3, [pc, #40]	; (7ddc <bg_thread_main+0x2c>)
    7db4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7db6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7db8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7dba:	f7ff ff83 	bl	7cc4 <z_sys_init_run_level>
	boot_banner();
    7dbe:	f005 fabe 	bl	d33e <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7dc2:	2003      	movs	r0, #3
    7dc4:	f7ff ff7e 	bl	7cc4 <z_sys_init_run_level>
	z_init_static_threads();
    7dc8:	f000 f936 	bl	8038 <z_init_static_threads>
	main();
    7dcc:	f7f8 fb02 	bl	3d4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7dd0:	4a03      	ldr	r2, [pc, #12]	; (7de0 <bg_thread_main+0x30>)
    7dd2:	7b13      	ldrb	r3, [r2, #12]
    7dd4:	f023 0301 	bic.w	r3, r3, #1
    7dd8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7dda:	bd08      	pop	{r3, pc}
    7ddc:	20004886 	.word	0x20004886
    7de0:	200005e0 	.word	0x200005e0

00007de4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7de4:	4802      	ldr	r0, [pc, #8]	; (7df0 <z_bss_zero+0xc>)
    7de6:	4a03      	ldr	r2, [pc, #12]	; (7df4 <z_bss_zero+0x10>)
    7de8:	2100      	movs	r1, #0
    7dea:	1a12      	subs	r2, r2, r0
    7dec:	f002 be84 	b.w	aaf8 <memset>
    7df0:	20000400 	.word	0x20000400
    7df4:	20004a44 	.word	0x20004a44

00007df8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7df8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7dfa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 7ebc <z_cstart+0xc4>
    7dfe:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7e00:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7e04:	4d2e      	ldr	r5, [pc, #184]	; (7ec0 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7e06:	4e2f      	ldr	r6, [pc, #188]	; (7ec4 <z_cstart+0xcc>)
    7e08:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7e0a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7ec8 <z_cstart+0xd0>
    7e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7e12:	2400      	movs	r4, #0
    7e14:	616b      	str	r3, [r5, #20]
    7e16:	23e0      	movs	r3, #224	; 0xe0
    7e18:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7e1c:	77ec      	strb	r4, [r5, #31]
    7e1e:	762c      	strb	r4, [r5, #24]
    7e20:	766c      	strb	r4, [r5, #25]
    7e22:	76ac      	strb	r4, [r5, #26]
    7e24:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7e28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7e2a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7e2e:	626b      	str	r3, [r5, #36]	; 0x24
    7e30:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7e34:	f7fb fe62 	bl	3afc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7e38:	f7fb fc42 	bl	36c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7e3c:	f04f 33ff 	mov.w	r3, #4294967295
    7e40:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7e42:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7e44:	f7fb ff90 	bl	3d68 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7e48:	f7fb fef6 	bl	3c38 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7e4c:	f240 1301 	movw	r3, #257	; 0x101
    7e50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    7e54:	ab06      	add	r3, sp, #24
    7e56:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7e58:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7e5c:	f004 ffd9 	bl	ce12 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7e60:	4620      	mov	r0, r4
    7e62:	f7ff ff2f 	bl	7cc4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7e66:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    7e68:	4d18      	ldr	r5, [pc, #96]	; (7ecc <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7e6a:	f7ff ff2b 	bl	7cc4 <z_sys_init_run_level>
	z_sched_init();
    7e6e:	f000 fde9 	bl	8a44 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7e72:	4b17      	ldr	r3, [pc, #92]	; (7ed0 <z_cstart+0xd8>)
    7e74:	9305      	str	r3, [sp, #20]
    7e76:	2301      	movs	r3, #1
    7e78:	4916      	ldr	r1, [pc, #88]	; (7ed4 <z_cstart+0xdc>)
    7e7a:	9400      	str	r4, [sp, #0]
    7e7c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7e80:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    7e84:	464b      	mov	r3, r9
    7e86:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7e8a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    7e8c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7e8e:	f000 f875 	bl	7f7c <z_setup_new_thread>
    7e92:	7b6a      	ldrb	r2, [r5, #13]
    7e94:	4607      	mov	r7, r0
    7e96:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7e9a:	4628      	mov	r0, r5
    7e9c:	736a      	strb	r2, [r5, #13]
    7e9e:	f005 f962 	bl	d166 <z_ready_thread>
		init_idle_thread(i);
    7ea2:	4620      	mov	r0, r4
    7ea4:	f7ff ff58 	bl	7d58 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7ea8:	4b0b      	ldr	r3, [pc, #44]	; (7ed8 <z_cstart+0xe0>)
    7eaa:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7eac:	464a      	mov	r2, r9
    7eae:	4639      	mov	r1, r7
    7eb0:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    7eb2:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    7eb4:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7eb8:	f7fb fd0e 	bl	38d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7ebc:	20005ac0 	.word	0x20005ac0
    7ec0:	e000ed00 	.word	0xe000ed00
    7ec4:	20002a54 	.word	0x20002a54
    7ec8:	00007db1 	.word	0x00007db1
    7ecc:	200005e0 	.word	0x200005e0
    7ed0:	0000dee5 	.word	0x0000dee5
    7ed4:	20005c20 	.word	0x20005c20
    7ed8:	20000560 	.word	0x20000560

00007edc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    7edc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7ede:	4b0e      	ldr	r3, [pc, #56]	; (7f18 <init_mem_slab_module+0x3c>)
    7ee0:	4c0e      	ldr	r4, [pc, #56]	; (7f1c <init_mem_slab_module+0x40>)
    7ee2:	42a3      	cmp	r3, r4
    7ee4:	d301      	bcc.n	7eea <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    7ee6:	2000      	movs	r0, #0
	return rc;
}
    7ee8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7eea:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    7eee:	ea41 0200 	orr.w	r2, r1, r0
    7ef2:	f012 0203 	ands.w	r2, r2, #3
    7ef6:	d10b      	bne.n	7f10 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    7ef8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    7efa:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7efc:	42aa      	cmp	r2, r5
    7efe:	d101      	bne.n	7f04 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7f00:	331c      	adds	r3, #28
    7f02:	e7ee      	b.n	7ee2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    7f04:	695e      	ldr	r6, [r3, #20]
    7f06:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f08:	3201      	adds	r2, #1
		slab->free_list = p;
    7f0a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    7f0c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    7f0e:	e7f5      	b.n	7efc <init_mem_slab_module+0x20>
	return rc;
    7f10:	f06f 0015 	mvn.w	r0, #21
    7f14:	e7e8      	b.n	7ee8 <init_mem_slab_module+0xc>
    7f16:	bf00      	nop
    7f18:	2000028c 	.word	0x2000028c
    7f1c:	200002a8 	.word	0x200002a8

00007f20 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7f22:	460c      	mov	r4, r1
	__asm__ volatile(
    7f24:	f04f 0520 	mov.w	r5, #32
    7f28:	f3ef 8111 	mrs	r1, BASEPRI
    7f2c:	f385 8812 	msr	BASEPRI_MAX, r5
    7f30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7f34:	6945      	ldr	r5, [r0, #20]
    7f36:	b15d      	cbz	r5, 7f50 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    7f38:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    7f3a:	682b      	ldr	r3, [r5, #0]
    7f3c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    7f3e:	6983      	ldr	r3, [r0, #24]
    7f40:	3301      	adds	r3, #1
    7f42:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7f44:	2000      	movs	r0, #0
	__asm__ volatile(
    7f46:	f381 8811 	msr	BASEPRI, r1
    7f4a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    7f4e:	e011      	b.n	7f74 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7f50:	ea52 0603 	orrs.w	r6, r2, r3
    7f54:	d103      	bne.n	7f5e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    7f56:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    7f58:	f06f 000b 	mvn.w	r0, #11
    7f5c:	e7f3      	b.n	7f46 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7f5e:	e9cd 2300 	strd	r2, r3, [sp]
    7f62:	4602      	mov	r2, r0
    7f64:	3008      	adds	r0, #8
    7f66:	f000 fc81 	bl	886c <z_pend_curr>
		if (result == 0) {
    7f6a:	b918      	cbnz	r0, 7f74 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    7f6c:	4b02      	ldr	r3, [pc, #8]	; (7f78 <k_mem_slab_alloc+0x58>)
    7f6e:	689b      	ldr	r3, [r3, #8]
    7f70:	695b      	ldr	r3, [r3, #20]
    7f72:	6023      	str	r3, [r4, #0]
}
    7f74:	b002      	add	sp, #8
    7f76:	bd70      	pop	{r4, r5, r6, pc}
    7f78:	20002a54 	.word	0x20002a54

00007f7c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7f7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7f80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7f82:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7f84:	2604      	movs	r6, #4
    7f86:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7f88:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7f8a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7f8c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    7f90:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7f92:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7f94:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    7f9a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7f9c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7fa0:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7fa2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7fa6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    7faa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    7fac:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    7fae:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7fb0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fb4:	9202      	str	r2, [sp, #8]
    7fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7fb8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7fba:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7fbe:	9200      	str	r2, [sp, #0]
    7fc0:	4642      	mov	r2, r8
{
    7fc2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fc4:	f7fb fc56 	bl	3874 <arch_new_thread>
	if (!_current) {
    7fc8:	4b04      	ldr	r3, [pc, #16]	; (7fdc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    7fca:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    7fcc:	689b      	ldr	r3, [r3, #8]
    7fce:	b103      	cbz	r3, 7fd2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    7fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7fd2:	6723      	str	r3, [r4, #112]	; 0x70
}
    7fd4:	4640      	mov	r0, r8
    7fd6:	b004      	add	sp, #16
    7fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fdc:	20002a54 	.word	0x20002a54

00007fe0 <z_impl_k_thread_create>:
{
    7fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fe2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7fe4:	2500      	movs	r5, #0
    7fe6:	9505      	str	r5, [sp, #20]
    7fe8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    7fea:	9504      	str	r5, [sp, #16]
    7fec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    7fee:	9503      	str	r5, [sp, #12]
    7ff0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7ff2:	9502      	str	r5, [sp, #8]
{
    7ff4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7ff8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7ffa:	9501      	str	r5, [sp, #4]
    7ffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7ffe:	9500      	str	r5, [sp, #0]
{
    8000:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8002:	f7ff ffbb 	bl	7f7c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8006:	f1b6 3fff 	cmp.w	r6, #4294967295
    800a:	bf08      	it	eq
    800c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    8010:	d005      	beq.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8012:	ea56 0307 	orrs.w	r3, r6, r7
    8016:	d105      	bne.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
	z_sched_start(thread);
    8018:	4620      	mov	r0, r4
    801a:	f000 fc93 	bl	8944 <z_sched_start>
}
    801e:	4620      	mov	r0, r4
    8020:	b007      	add	sp, #28
    8022:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8024:	4903      	ldr	r1, [pc, #12]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8026:	463a      	mov	r2, r7
    8028:	4633      	mov	r3, r6
    802a:	f104 0018 	add.w	r0, r4, #24
    802e:	f000 fe97 	bl	8d60 <z_add_timeout>
    8032:	e7f4      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8034:	0000d0d1 	.word	0x0000d0d1

00008038 <z_init_static_threads>:
{
    8038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    803c:	4c29      	ldr	r4, [pc, #164]	; (80e4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    803e:	4d2a      	ldr	r5, [pc, #168]	; (80e8 <z_init_static_threads+0xb0>)
{
    8040:	b087      	sub	sp, #28
    8042:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    8044:	42ae      	cmp	r6, r5
    8046:	f104 0430 	add.w	r4, r4, #48	; 0x30
    804a:	d30f      	bcc.n	806c <z_init_static_threads+0x34>
	k_sched_lock();
    804c:	f000 fcca 	bl	89e4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8050:	4c24      	ldr	r4, [pc, #144]	; (80e4 <z_init_static_threads+0xac>)
    8052:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80ec <z_init_static_threads+0xb4>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    8056:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    805a:	f240 37e7 	movw	r7, #999	; 0x3e7
    805e:	42ac      	cmp	r4, r5
    8060:	d320      	bcc.n	80a4 <z_init_static_threads+0x6c>
}
    8062:	b007      	add	sp, #28
    8064:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    8068:	f000 bcd0 	b.w	8a0c <k_sched_unlock>
		z_setup_new_thread(
    806c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8070:	9305      	str	r3, [sp, #20]
    8072:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8076:	9304      	str	r3, [sp, #16]
    8078:	f854 3c14 	ldr.w	r3, [r4, #-20]
    807c:	9303      	str	r3, [sp, #12]
    807e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8082:	9302      	str	r3, [sp, #8]
    8084:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8088:	9301      	str	r3, [sp, #4]
    808a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    808e:	9300      	str	r3, [sp, #0]
    8090:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    8094:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    8098:	f7ff ff70 	bl	7f7c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    809c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    80a0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    80a2:	e7ce      	b.n	8042 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    80a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80a6:	1c5a      	adds	r2, r3, #1
    80a8:	d00d      	beq.n	80c6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    80aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    80ae:	2100      	movs	r1, #0
    80b0:	4638      	mov	r0, r7
    80b2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    80b6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    80ba:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    80be:	d104      	bne.n	80ca <z_init_static_threads+0x92>
	z_sched_start(thread);
    80c0:	4640      	mov	r0, r8
    80c2:	f000 fc3f 	bl	8944 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    80c6:	3430      	adds	r4, #48	; 0x30
    80c8:	e7c9      	b.n	805e <z_init_static_threads+0x26>
    80ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80ce:	2300      	movs	r3, #0
    80d0:	f7f8 f816 	bl	100 <__aeabi_uldivmod>
    80d4:	4602      	mov	r2, r0
    80d6:	460b      	mov	r3, r1
    80d8:	f108 0018 	add.w	r0, r8, #24
    80dc:	4649      	mov	r1, r9
    80de:	f000 fe3f 	bl	8d60 <z_add_timeout>
    80e2:	e7f0      	b.n	80c6 <z_init_static_threads+0x8e>
    80e4:	2000028c 	.word	0x2000028c
    80e8:	2000028c 	.word	0x2000028c
    80ec:	0000d0d1 	.word	0x0000d0d1

000080f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    80f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    80f4:	4604      	mov	r4, r0
    80f6:	4617      	mov	r7, r2
    80f8:	461e      	mov	r6, r3
	__asm__ volatile(
    80fa:	f04f 0320 	mov.w	r3, #32
    80fe:	f3ef 8811 	mrs	r8, BASEPRI
    8102:	f383 8812 	msr	BASEPRI_MAX, r3
    8106:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    810a:	68c3      	ldr	r3, [r0, #12]
    810c:	4a32      	ldr	r2, [pc, #200]	; (81d8 <z_impl_k_mutex_lock+0xe8>)
    810e:	b17b      	cbz	r3, 8130 <z_impl_k_mutex_lock+0x40>
    8110:	6880      	ldr	r0, [r0, #8]
    8112:	6891      	ldr	r1, [r2, #8]
    8114:	4288      	cmp	r0, r1
    8116:	d019      	beq.n	814c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8118:	ea57 0306 	orrs.w	r3, r7, r6
    811c:	d118      	bne.n	8150 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    811e:	f388 8811 	msr	BASEPRI, r8
    8122:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8126:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    812a:	b002      	add	sp, #8
    812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8130:	6891      	ldr	r1, [r2, #8]
    8132:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8136:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    8138:	3301      	adds	r3, #1
    813a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    813c:	6893      	ldr	r3, [r2, #8]
    813e:	60a3      	str	r3, [r4, #8]
    8140:	f388 8811 	msr	BASEPRI, r8
    8144:	f3bf 8f6f 	isb	sy
		return 0;
    8148:	2000      	movs	r0, #0
    814a:	e7ee      	b.n	812a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    814c:	6921      	ldr	r1, [r4, #16]
    814e:	e7f2      	b.n	8136 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8150:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8154:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    8158:	4299      	cmp	r1, r3
    815a:	bfa8      	it	ge
    815c:	4619      	movge	r1, r3
    815e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    8162:	4291      	cmp	r1, r2
    8164:	bfb8      	it	lt
    8166:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8168:	428b      	cmp	r3, r1
    816a:	dd2e      	ble.n	81ca <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    816c:	f004 fed2 	bl	cf14 <adjust_owner_prio.isra.0>
    8170:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8172:	e9cd 7600 	strd	r7, r6, [sp]
    8176:	4819      	ldr	r0, [pc, #100]	; (81dc <z_impl_k_mutex_lock+0xec>)
    8178:	4622      	mov	r2, r4
    817a:	4641      	mov	r1, r8
    817c:	f000 fb76 	bl	886c <z_pend_curr>
	if (got_mutex == 0) {
    8180:	2800      	cmp	r0, #0
    8182:	d0e1      	beq.n	8148 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    8184:	f04f 0320 	mov.w	r3, #32
    8188:	f3ef 8611 	mrs	r6, BASEPRI
    818c:	f383 8812 	msr	BASEPRI_MAX, r3
    8190:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8194:	6823      	ldr	r3, [r4, #0]
    8196:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8198:	429c      	cmp	r4, r3
    819a:	d00a      	beq.n	81b2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    819c:	b14b      	cbz	r3, 81b2 <z_impl_k_mutex_lock+0xc2>
    819e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    81a2:	4299      	cmp	r1, r3
    81a4:	bfa8      	it	ge
    81a6:	4619      	movge	r1, r3
    81a8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    81ac:	4299      	cmp	r1, r3
    81ae:	bfb8      	it	lt
    81b0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    81b2:	68a0      	ldr	r0, [r4, #8]
    81b4:	f004 feae 	bl	cf14 <adjust_owner_prio.isra.0>
    81b8:	b948      	cbnz	r0, 81ce <z_impl_k_mutex_lock+0xde>
    81ba:	b945      	cbnz	r5, 81ce <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
    81bc:	f386 8811 	msr	BASEPRI, r6
    81c0:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    81c4:	f06f 000a 	mvn.w	r0, #10
    81c8:	e7af      	b.n	812a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    81ca:	2500      	movs	r5, #0
    81cc:	e7d1      	b.n	8172 <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
    81ce:	4803      	ldr	r0, [pc, #12]	; (81dc <z_impl_k_mutex_lock+0xec>)
    81d0:	4631      	mov	r1, r6
    81d2:	f000 fba5 	bl	8920 <z_reschedule>
    81d6:	e7f5      	b.n	81c4 <z_impl_k_mutex_lock+0xd4>
    81d8:	20002a54 	.word	0x20002a54
    81dc:	20004887 	.word	0x20004887

000081e0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    81e0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    81e2:	6883      	ldr	r3, [r0, #8]
{
    81e4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    81e6:	2b00      	cmp	r3, #0
    81e8:	d032      	beq.n	8250 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    81ea:	4a1c      	ldr	r2, [pc, #112]	; (825c <z_impl_k_mutex_unlock+0x7c>)
    81ec:	6892      	ldr	r2, [r2, #8]
    81ee:	4293      	cmp	r3, r2
    81f0:	d131      	bne.n	8256 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    81f2:	7bda      	ldrb	r2, [r3, #15]
    81f4:	3a01      	subs	r2, #1
    81f6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    81f8:	68c3      	ldr	r3, [r0, #12]
    81fa:	2b01      	cmp	r3, #1
    81fc:	d905      	bls.n	820a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    81fe:	3b01      	subs	r3, #1
    8200:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8202:	f000 fc03 	bl	8a0c <k_sched_unlock>

	return 0;
    8206:	2000      	movs	r0, #0
}
    8208:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    820a:	f04f 0320 	mov.w	r3, #32
    820e:	f3ef 8511 	mrs	r5, BASEPRI
    8212:	f383 8812 	msr	BASEPRI_MAX, r3
    8216:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    821a:	6901      	ldr	r1, [r0, #16]
    821c:	6880      	ldr	r0, [r0, #8]
    821e:	f004 fe79 	bl	cf14 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8222:	4620      	mov	r0, r4
    8224:	f004 ffaf 	bl	d186 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8228:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    822a:	b158      	cbz	r0, 8244 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    822c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8230:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8232:	2200      	movs	r2, #0
    8234:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    8236:	f004 ff96 	bl	d166 <z_ready_thread>
		z_reschedule(&lock, key);
    823a:	4809      	ldr	r0, [pc, #36]	; (8260 <z_impl_k_mutex_unlock+0x80>)
    823c:	4629      	mov	r1, r5
    823e:	f000 fb6f 	bl	8920 <z_reschedule>
    8242:	e7de      	b.n	8202 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    8244:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8246:	f385 8811 	msr	BASEPRI, r5
    824a:	f3bf 8f6f 	isb	sy
    824e:	e7d8      	b.n	8202 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8250:	f06f 0015 	mvn.w	r0, #21
    8254:	e7d8      	b.n	8208 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    8256:	f04f 30ff 	mov.w	r0, #4294967295
    825a:	e7d5      	b.n	8208 <z_impl_k_mutex_unlock+0x28>
    825c:	20002a54 	.word	0x20002a54
    8260:	20004887 	.word	0x20004887

00008264 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8264:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8266:	4611      	mov	r1, r2
	__asm__ volatile(
    8268:	f04f 0220 	mov.w	r2, #32
    826c:	f3ef 8511 	mrs	r5, BASEPRI
    8270:	f382 8812 	msr	BASEPRI_MAX, r2
    8274:	f3bf 8f6f 	isb	sy
    8278:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    827a:	b19c      	cbz	r4, 82a4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    827c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    827e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8280:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8284:	4294      	cmp	r4, r2
	list->head = node;
    8286:	6003      	str	r3, [r0, #0]
	list->tail = node;
    8288:	bf08      	it	eq
    828a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    828c:	2101      	movs	r1, #1
    828e:	4620      	mov	r0, r4
    8290:	f004 feb1 	bl	cff6 <z_queue_node_peek>
    8294:	4604      	mov	r4, r0
	__asm__ volatile(
    8296:	f385 8811 	msr	BASEPRI, r5
    829a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    829e:	4620      	mov	r0, r4
    82a0:	b003      	add	sp, #12
    82a2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    82a4:	ea51 0203 	orrs.w	r2, r1, r3
    82a8:	d0f5      	beq.n	8296 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    82aa:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    82ae:	e9cd 1300 	strd	r1, r3, [sp]
    82b2:	4610      	mov	r0, r2
    82b4:	4629      	mov	r1, r5
    82b6:	f000 fad9 	bl	886c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    82ba:	2800      	cmp	r0, #0
    82bc:	d1ef      	bne.n	829e <z_impl_k_queue_get+0x3a>
    82be:	4b02      	ldr	r3, [pc, #8]	; (82c8 <z_impl_k_queue_get+0x64>)
    82c0:	689b      	ldr	r3, [r3, #8]
    82c2:	695c      	ldr	r4, [r3, #20]
    82c4:	e7eb      	b.n	829e <z_impl_k_queue_get+0x3a>
    82c6:	bf00      	nop
    82c8:	20002a54 	.word	0x20002a54

000082cc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    82cc:	b538      	push	{r3, r4, r5, lr}
    82ce:	4604      	mov	r4, r0
	__asm__ volatile(
    82d0:	f04f 0320 	mov.w	r3, #32
    82d4:	f3ef 8511 	mrs	r5, BASEPRI
    82d8:	f383 8812 	msr	BASEPRI_MAX, r3
    82dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    82e0:	f004 ff51 	bl	d186 <z_unpend_first_thread>

	if (thread != NULL) {
    82e4:	b148      	cbz	r0, 82fa <z_impl_k_sem_give+0x2e>
    82e6:	2200      	movs	r2, #0
    82e8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    82ea:	f004 ff3c 	bl	d166 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    82ee:	4629      	mov	r1, r5
    82f0:	4805      	ldr	r0, [pc, #20]	; (8308 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    82f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    82f6:	f000 bb13 	b.w	8920 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    82fa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    82fe:	429a      	cmp	r2, r3
    8300:	bf18      	it	ne
    8302:	3301      	addne	r3, #1
    8304:	60a3      	str	r3, [r4, #8]
}
    8306:	e7f2      	b.n	82ee <z_impl_k_sem_give+0x22>
    8308:	20004887 	.word	0x20004887

0000830c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    830c:	b513      	push	{r0, r1, r4, lr}
    830e:	f04f 0420 	mov.w	r4, #32
    8312:	f3ef 8111 	mrs	r1, BASEPRI
    8316:	f384 8812 	msr	BASEPRI_MAX, r4
    831a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    831e:	6884      	ldr	r4, [r0, #8]
    8320:	b144      	cbz	r4, 8334 <z_impl_k_sem_take+0x28>
		sem->count--;
    8322:	3c01      	subs	r4, #1
    8324:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    8326:	f381 8811 	msr	BASEPRI, r1
    832a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    832e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8330:	b002      	add	sp, #8
    8332:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8334:	ea52 0403 	orrs.w	r4, r2, r3
    8338:	d106      	bne.n	8348 <z_impl_k_sem_take+0x3c>
    833a:	f381 8811 	msr	BASEPRI, r1
    833e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8342:	f06f 000f 	mvn.w	r0, #15
    8346:	e7f3      	b.n	8330 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8348:	e9cd 2300 	strd	r2, r3, [sp]
    834c:	4602      	mov	r2, r0
    834e:	4802      	ldr	r0, [pc, #8]	; (8358 <z_impl_k_sem_take+0x4c>)
    8350:	f000 fa8c 	bl	886c <z_pend_curr>
	return ret;
    8354:	e7ec      	b.n	8330 <z_impl_k_sem_take+0x24>
    8356:	bf00      	nop
    8358:	20004887 	.word	0x20004887

0000835c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    8360:	f8df 913c 	ldr.w	r9, [pc, #316]	; 84a0 <work_queue_main+0x144>
    8364:	b085      	sub	sp, #20
    8366:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8368:	f04f 36ff 	mov.w	r6, #4294967295
    836c:	f04f 37ff 	mov.w	r7, #4294967295
	__asm__ volatile(
    8370:	f04f 0320 	mov.w	r3, #32
    8374:	f3ef 8811 	mrs	r8, BASEPRI
    8378:	f383 8812 	msr	BASEPRI_MAX, r3
    837c:	f3bf 8f6f 	isb	sy
    8380:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
    8384:	b98d      	cbnz	r5, 83aa <work_queue_main+0x4e>
		} else if (flag_test_and_clear(&queue->flags,
    8386:	2102      	movs	r1, #2
    8388:	f104 0098 	add.w	r0, r4, #152	; 0x98
    838c:	f004 fe56 	bl	d03c <flag_test_and_clear>
    8390:	2800      	cmp	r0, #0
    8392:	d143      	bne.n	841c <work_queue_main+0xc0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8394:	2300      	movs	r3, #0
    8396:	e9cd 6700 	strd	r6, r7, [sp]
    839a:	9302      	str	r3, [sp, #8]
    839c:	f104 0288 	add.w	r2, r4, #136	; 0x88
    83a0:	4641      	mov	r1, r8
    83a2:	4840      	ldr	r0, [pc, #256]	; (84a4 <work_queue_main+0x148>)
    83a4:	f000 fc62 	bl	8c6c <z_sched_wait>
			continue;
    83a8:	e7e2      	b.n	8370 <work_queue_main+0x14>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    83aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    83ae:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    83b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    83b4:	4295      	cmp	r5, r2
	list->tail = node;
    83b6:	bf08      	it	eq
    83b8:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    83bc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    83c0:	f043 0302 	orr.w	r3, r3, #2
    83c4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    83c8:	68eb      	ldr	r3, [r5, #12]
    83ca:	f023 0304 	bic.w	r3, r3, #4
    83ce:	f043 0301 	orr.w	r3, r3, #1
    83d2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    83d4:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    83d6:	f388 8811 	msr	BASEPRI, r8
    83da:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    83de:	4628      	mov	r0, r5
    83e0:	4798      	blx	r3
	__asm__ volatile(
    83e2:	f04f 0320 	mov.w	r3, #32
    83e6:	f3ef 8b11 	mrs	fp, BASEPRI
    83ea:	f383 8812 	msr	BASEPRI_MAX, r3
    83ee:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    83f2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    83f4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    83f6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    83fa:	d419      	bmi.n	8430 <work_queue_main+0xd4>
	*flagp &= ~BIT(bit);
    83fc:	60ea      	str	r2, [r5, #12]
    83fe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8402:	f023 0302 	bic.w	r3, r3, #2
    8406:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    840a:	f38b 8811 	msr	BASEPRI, fp
    840e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    8412:	05db      	lsls	r3, r3, #23
    8414:	d4ac      	bmi.n	8370 <work_queue_main+0x14>
	z_impl_k_yield();
    8416:	f000 fb21 	bl	8a5c <z_impl_k_yield>
}
    841a:	e7a9      	b.n	8370 <work_queue_main+0x14>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    841c:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8420:	2200      	movs	r2, #0
    8422:	2101      	movs	r1, #1
    8424:	4628      	mov	r0, r5
    8426:	f004 ff04 	bl	d232 <z_sched_wake>
    842a:	2800      	cmp	r0, #0
    842c:	d1f8      	bne.n	8420 <work_queue_main+0xc4>
    842e:	e7b1      	b.n	8394 <work_queue_main+0x38>
	*flagp &= ~BIT(bit);
    8430:	f023 0303 	bic.w	r3, r3, #3
    8434:	60eb      	str	r3, [r5, #12]
	return list->head;
    8436:	f8d9 3000 	ldr.w	r3, [r9]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    843a:	2b00      	cmp	r3, #0
    843c:	d0df      	beq.n	83fe <work_queue_main+0xa2>
	return node->next;
    843e:	f04f 0800 	mov.w	r8, #0
    8442:	f8d3 a000 	ldr.w	sl, [r3]
	parent->next = child;
    8446:	4641      	mov	r1, r8
    8448:	2b00      	cmp	r3, #0
    844a:	d0d8      	beq.n	83fe <work_queue_main+0xa2>
		if (wc->work == work) {
    844c:	685a      	ldr	r2, [r3, #4]
    844e:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    8450:	4618      	mov	r0, r3
		if (wc->work == work) {
    8452:	d112      	bne.n	847a <work_queue_main+0x11e>
	return node->next;
    8454:	681a      	ldr	r2, [r3, #0]
	return list->tail;
    8456:	f8d9 0004 	ldr.w	r0, [r9, #4]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    845a:	f1b8 0f00 	cmp.w	r8, #0
    845e:	d115      	bne.n	848c <work_queue_main+0x130>
    8460:	4283      	cmp	r3, r0
	list->head = node;
    8462:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    8466:	d101      	bne.n	846c <work_queue_main+0x110>
	list->tail = node;
    8468:	f8c9 2004 	str.w	r2, [r9, #4]
	parent->next = child;
    846c:	4618      	mov	r0, r3
    846e:	f840 1b08 	str.w	r1, [r0], #8
	z_impl_k_sem_give(sem);
    8472:	f7ff ff2b 	bl	82cc <z_impl_k_sem_give>
}
    8476:	4640      	mov	r0, r8
    8478:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    847a:	f1ba 0f00 	cmp.w	sl, #0
    847e:	d00c      	beq.n	849a <work_queue_main+0x13e>
	return node->next;
    8480:	f8da 2000 	ldr.w	r2, [sl]
    8484:	4653      	mov	r3, sl
    8486:	4680      	mov	r8, r0
    8488:	4692      	mov	sl, r2
    848a:	e7dd      	b.n	8448 <work_queue_main+0xec>
Z_GENLIST_REMOVE(slist, snode)
    848c:	4283      	cmp	r3, r0
	parent->next = child;
    848e:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    8492:	bf08      	it	eq
    8494:	f8c9 8004 	streq.w	r8, [r9, #4]
}
    8498:	e7e8      	b.n	846c <work_queue_main+0x110>
    849a:	4652      	mov	r2, sl
    849c:	e7f2      	b.n	8484 <work_queue_main+0x128>
    849e:	bf00      	nop
    84a0:	20002a78 	.word	0x20002a78
    84a4:	20004887 	.word	0x20004887

000084a8 <submit_to_queue_locked>:
{
    84a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    84aa:	68c3      	ldr	r3, [r0, #12]
{
    84ac:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    84ae:	0799      	lsls	r1, r3, #30
{
    84b0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    84b2:	f3c3 0640 	ubfx	r6, r3, #1, #1
    84b6:	d42b      	bmi.n	8510 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    84b8:	075a      	lsls	r2, r3, #29
    84ba:	d419      	bmi.n	84f0 <submit_to_queue_locked+0x48>
		if (*queuep == NULL) {
    84bc:	683a      	ldr	r2, [r7, #0]
    84be:	b90a      	cbnz	r2, 84c4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    84c0:	6882      	ldr	r2, [r0, #8]
    84c2:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    84c4:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    84c6:	bf44      	itt	mi
    84c8:	68a3      	ldrmi	r3, [r4, #8]
    84ca:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    84cc:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    84ce:	bf4c      	ite	mi
    84d0:	2602      	movmi	r6, #2
		ret = 1;
    84d2:	2601      	movpl	r6, #1
	if (queue == NULL) {
    84d4:	2d00      	cmp	r5, #0
    84d6:	d03a      	beq.n	854e <submit_to_queue_locked+0xa6>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    84d8:	4b1e      	ldr	r3, [pc, #120]	; (8554 <submit_to_queue_locked+0xac>)
    84da:	689b      	ldr	r3, [r3, #8]
    84dc:	42ab      	cmp	r3, r5
    84de:	d00a      	beq.n	84f6 <submit_to_queue_locked+0x4e>
	return (*flagp & BIT(bit)) != 0U;
    84e0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    84e4:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    84e6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    84ea:	d414      	bmi.n	8516 <submit_to_queue_locked+0x6e>
		ret = -EBUSY;
    84ec:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    84f0:	2300      	movs	r3, #0
    84f2:	603b      	str	r3, [r7, #0]
	return ret;
    84f4:	e025      	b.n	8542 <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    84f6:	f004 fcf6 	bl	cee6 <k_is_in_isr>
    84fa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    84fe:	2800      	cmp	r0, #0
    8500:	d1f0      	bne.n	84e4 <submit_to_queue_locked+0x3c>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8502:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    8504:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8508:	d5f0      	bpl.n	84ec <submit_to_queue_locked+0x44>
	} else if (plugged && !draining) {
    850a:	b152      	cbz	r2, 8522 <submit_to_queue_locked+0x7a>
    850c:	075b      	lsls	r3, r3, #29
    850e:	d408      	bmi.n	8522 <submit_to_queue_locked+0x7a>
		ret = -EBUSY;
    8510:	f06f 060f 	mvn.w	r6, #15
    8514:	e7ec      	b.n	84f0 <submit_to_queue_locked+0x48>
	} else if (draining && !chained) {
    8516:	2a00      	cmp	r2, #0
    8518:	d1fa      	bne.n	8510 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
    851a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    851e:	2b00      	cmp	r3, #0
    8520:	d1f6      	bne.n	8510 <submit_to_queue_locked+0x68>
	parent->next = child;
    8522:	2300      	movs	r3, #0
    8524:	6023      	str	r3, [r4, #0]
	return list->tail;
    8526:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    852a:	b963      	cbnz	r3, 8546 <submit_to_queue_locked+0x9e>
	list->head = node;
    852c:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    8530:	4628      	mov	r0, r5
    8532:	f004 fd8e 	bl	d052 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    8536:	68e3      	ldr	r3, [r4, #12]
    8538:	f043 0304 	orr.w	r3, r3, #4
    853c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    853e:	683b      	ldr	r3, [r7, #0]
    8540:	60a3      	str	r3, [r4, #8]
}
    8542:	4630      	mov	r0, r6
    8544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    8546:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8548:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    854c:	e7f0      	b.n	8530 <submit_to_queue_locked+0x88>
		return -EINVAL;
    854e:	f06f 0615 	mvn.w	r6, #21
    8552:	e7cd      	b.n	84f0 <submit_to_queue_locked+0x48>
    8554:	20002a54 	.word	0x20002a54

00008558 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8558:	b5f0      	push	{r4, r5, r6, r7, lr}
    855a:	b089      	sub	sp, #36	; 0x24
    855c:	4604      	mov	r4, r0
	list->head = NULL;
    855e:	2000      	movs	r0, #0
	list->tail = NULL;
    8560:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    8564:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8566:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    856a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    856e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    8572:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8576:	b31d      	cbz	r5, 85c0 <k_work_queue_start+0x68>
    8578:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    857a:	2800      	cmp	r0, #0
    857c:	f240 1001 	movw	r0, #257	; 0x101
    8580:	bf08      	it	eq
    8582:	2001      	moveq	r0, #1
	*flagp = flags;
    8584:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8588:	2000      	movs	r0, #0
    858a:	f04f 36ff 	mov.w	r6, #4294967295
    858e:	f04f 37ff 	mov.w	r7, #4294967295
    8592:	e9cd 3003 	strd	r3, r0, [sp, #12]
    8596:	e9cd 0001 	strd	r0, r0, [sp, #4]
    859a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    859e:	4b09      	ldr	r3, [pc, #36]	; (85c4 <k_work_queue_start+0x6c>)
    85a0:	9400      	str	r4, [sp, #0]
    85a2:	4620      	mov	r0, r4
    85a4:	f7ff fd1c 	bl	7fe0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    85a8:	b125      	cbz	r5, 85b4 <k_work_queue_start+0x5c>
    85aa:	6829      	ldr	r1, [r5, #0]
    85ac:	b111      	cbz	r1, 85b4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    85ae:	4620      	mov	r0, r4
    85b0:	f004 fc9f 	bl	cef2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    85b4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    85b6:	b009      	add	sp, #36	; 0x24
    85b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    85bc:	f004 bc9c 	b.w	cef8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    85c0:	2001      	movs	r0, #1
    85c2:	e7df      	b.n	8584 <k_work_queue_start+0x2c>
    85c4:	0000835d 	.word	0x0000835d

000085c8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    85c8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    85ca:	4c08      	ldr	r4, [pc, #32]	; (85ec <z_reset_time_slice+0x24>)
    85cc:	6823      	ldr	r3, [r4, #0]
    85ce:	b15b      	cbz	r3, 85e8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    85d0:	f7fd f9ec 	bl	59ac <sys_clock_elapsed>
    85d4:	4603      	mov	r3, r0
    85d6:	6820      	ldr	r0, [r4, #0]
    85d8:	4a05      	ldr	r2, [pc, #20]	; (85f0 <z_reset_time_slice+0x28>)
    85da:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    85dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    85e0:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    85e2:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    85e4:	f004 be5e 	b.w	d2a4 <z_set_timeout_expiry>
}
    85e8:	bd10      	pop	{r4, pc}
    85ea:	bf00      	nop
    85ec:	20002a88 	.word	0x20002a88
    85f0:	20002a54 	.word	0x20002a54

000085f4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    85f4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    85f6:	4d0c      	ldr	r5, [pc, #48]	; (8628 <update_cache+0x34>)
    85f8:	462b      	mov	r3, r5
    85fa:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85fe:	429c      	cmp	r4, r3
    8600:	d000      	beq.n	8604 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8602:	b904      	cbnz	r4, 8606 <update_cache+0x12>
    8604:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    8606:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8608:	b938      	cbnz	r0, 861a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    860a:	7b5a      	ldrb	r2, [r3, #13]
    860c:	06d2      	lsls	r2, r2, #27
    860e:	d104      	bne.n	861a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8610:	69a2      	ldr	r2, [r4, #24]
    8612:	b912      	cbnz	r2, 861a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    8614:	89da      	ldrh	r2, [r3, #14]
    8616:	2a7f      	cmp	r2, #127	; 0x7f
    8618:	d804      	bhi.n	8624 <update_cache+0x30>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    861a:	429c      	cmp	r4, r3
    861c:	d001      	beq.n	8622 <update_cache+0x2e>
			z_reset_time_slice();
    861e:	f7ff ffd3 	bl	85c8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    8622:	4623      	mov	r3, r4
    8624:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    8626:	bd38      	pop	{r3, r4, r5, pc}
    8628:	20002a54 	.word	0x20002a54

0000862c <move_thread_to_end_of_prio_q>:
{
    862c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    862e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8632:	7b43      	ldrb	r3, [r0, #13]
    8634:	2a00      	cmp	r2, #0
{
    8636:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8638:	da04      	bge.n	8644 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    863a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    863e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8640:	f004 fd34 	bl	d0ac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8644:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    8646:	4a15      	ldr	r2, [pc, #84]	; (869c <move_thread_to_end_of_prio_q+0x70>)
    8648:	f063 037f 	orn	r3, r3, #127	; 0x7f
    864c:	4610      	mov	r0, r2
    864e:	734b      	strb	r3, [r1, #13]
    8650:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8654:	6a15      	ldr	r5, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8656:	4283      	cmp	r3, r0
    8658:	bf08      	it	eq
    865a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    865c:	b923      	cbnz	r3, 8668 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    865e:	e9c1 0500 	strd	r0, r5, [r1]

	tail->next = node;
    8662:	6029      	str	r1, [r5, #0]
	list->tail = node;
    8664:	6211      	str	r1, [r2, #32]
}
    8666:	e00d      	b.n	8684 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
    8668:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    866c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    8670:	42a6      	cmp	r6, r4
    8672:	d00f      	beq.n	8694 <move_thread_to_end_of_prio_q+0x68>
		return b2 - b1;
    8674:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8676:	2c00      	cmp	r4, #0
    8678:	dd0c      	ble.n	8694 <move_thread_to_end_of_prio_q+0x68>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    867a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    867c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8680:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8682:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    8684:	6890      	ldr	r0, [r2, #8]
    8686:	1a43      	subs	r3, r0, r1
    8688:	4258      	negs	r0, r3
}
    868a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    868e:	4158      	adcs	r0, r3
    8690:	f7ff bfb0 	b.w	85f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8694:	429d      	cmp	r5, r3
    8696:	d0e2      	beq.n	865e <move_thread_to_end_of_prio_q+0x32>
    8698:	681b      	ldr	r3, [r3, #0]
    869a:	e7df      	b.n	865c <move_thread_to_end_of_prio_q+0x30>
    869c:	20002a54 	.word	0x20002a54

000086a0 <ready_thread>:
{
    86a0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    86a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    86a6:	7b42      	ldrb	r2, [r0, #13]
    86a8:	2b00      	cmp	r3, #0
    86aa:	db2a      	blt.n	8702 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    86ac:	06d3      	lsls	r3, r2, #27
    86ae:	d128      	bne.n	8702 <ready_thread+0x62>
	return node->next != NULL;
    86b0:	6983      	ldr	r3, [r0, #24]
    86b2:	bb33      	cbnz	r3, 8702 <ready_thread+0x62>
	return list->head == list;
    86b4:	4c14      	ldr	r4, [pc, #80]	; (8708 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    86b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    86ba:	7342      	strb	r2, [r0, #13]
    86bc:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
    86be:	6a25      	ldr	r5, [r4, #32]
	return list->head == list;
    86c0:	f852 1f1c 	ldr.w	r1, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86c4:	4291      	cmp	r1, r2
    86c6:	bf18      	it	ne
    86c8:	460b      	movne	r3, r1
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    86ca:	b923      	cbnz	r3, 86d6 <ready_thread+0x36>
	node->prev = tail;
    86cc:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    86d0:	6028      	str	r0, [r5, #0]
	list->tail = node;
    86d2:	6220      	str	r0, [r4, #32]
}
    86d4:	e00d      	b.n	86f2 <ready_thread+0x52>
	int32_t b1 = thread_1->base.prio;
    86d6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    86da:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    86de:	428e      	cmp	r6, r1
    86e0:	d00b      	beq.n	86fa <ready_thread+0x5a>
		return b2 - b1;
    86e2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    86e4:	2900      	cmp	r1, #0
    86e6:	dd08      	ble.n	86fa <ready_thread+0x5a>
	sys_dnode_t *const prev = successor->prev;
    86e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    86ea:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    86ee:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    86f0:	6058      	str	r0, [r3, #4]
}
    86f2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    86f4:	2000      	movs	r0, #0
    86f6:	f7ff bf7d 	b.w	85f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    86fa:	42ab      	cmp	r3, r5
    86fc:	d0e6      	beq.n	86cc <ready_thread+0x2c>
    86fe:	681b      	ldr	r3, [r3, #0]
    8700:	e7e3      	b.n	86ca <ready_thread+0x2a>
}
    8702:	bc70      	pop	{r4, r5, r6}
    8704:	4770      	bx	lr
    8706:	bf00      	nop
    8708:	20002a54 	.word	0x20002a54

0000870c <unready_thread>:
{
    870c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    870e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8712:	7b43      	ldrb	r3, [r0, #13]
    8714:	2a00      	cmp	r2, #0
{
    8716:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8718:	da04      	bge.n	8724 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    871a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    871e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8720:	f004 fcc4 	bl	d0ac <sys_dlist_remove>
	update_cache(thread == _current);
    8724:	4b04      	ldr	r3, [pc, #16]	; (8738 <unready_thread+0x2c>)
    8726:	6898      	ldr	r0, [r3, #8]
    8728:	1a43      	subs	r3, r0, r1
    872a:	4258      	negs	r0, r3
    872c:	4158      	adcs	r0, r3
}
    872e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8732:	f7ff bf5f 	b.w	85f4 <update_cache>
    8736:	bf00      	nop
    8738:	20002a54 	.word	0x20002a54

0000873c <pend>:
{
    873c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8740:	4606      	mov	r6, r0
    8742:	4615      	mov	r5, r2
    8744:	461c      	mov	r4, r3
	__asm__ volatile(
    8746:	f04f 0320 	mov.w	r3, #32
    874a:	f3ef 8711 	mrs	r7, BASEPRI
    874e:	f383 8812 	msr	BASEPRI_MAX, r3
    8752:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    8756:	f004 fcdd 	bl	d114 <add_to_waitq_locked>
	__asm__ volatile(
    875a:	f387 8811 	msr	BASEPRI, r7
    875e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8762:	f1b4 3fff 	cmp.w	r4, #4294967295
    8766:	bf08      	it	eq
    8768:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    876c:	d008      	beq.n	8780 <pend+0x44>
    876e:	462a      	mov	r2, r5
    8770:	4623      	mov	r3, r4
    8772:	f106 0018 	add.w	r0, r6, #24
    8776:	4903      	ldr	r1, [pc, #12]	; (8784 <pend+0x48>)
}
    8778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    877c:	f000 baf0 	b.w	8d60 <z_add_timeout>
    8780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8784:	0000d0d1 	.word	0x0000d0d1

00008788 <k_sched_time_slice_set>:
{
    8788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    878c:	4604      	mov	r4, r0
    878e:	460d      	mov	r5, r1
	__asm__ volatile(
    8790:	f04f 0320 	mov.w	r3, #32
    8794:	f3ef 8811 	mrs	r8, BASEPRI
    8798:	f383 8812 	msr	BASEPRI_MAX, r3
    879c:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    87a0:	2600      	movs	r6, #0
    87a2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    87a6:	f240 30e7 	movw	r0, #999	; 0x3e7
    87aa:	4631      	mov	r1, r6
    87ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    87b0:	2300      	movs	r3, #0
    87b2:	fbe4 0107 	umlal	r0, r1, r4, r7
    87b6:	f7f7 fca3 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    87ba:	42b4      	cmp	r4, r6
    87bc:	dd02      	ble.n	87c4 <k_sched_time_slice_set+0x3c>
			slice_time = MAX(2, slice_time);
    87be:	2802      	cmp	r0, #2
    87c0:	bfb8      	it	lt
    87c2:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
    87c4:	4b06      	ldr	r3, [pc, #24]	; (87e0 <k_sched_time_slice_set+0x58>)
    87c6:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
    87c8:	4b06      	ldr	r3, [pc, #24]	; (87e4 <k_sched_time_slice_set+0x5c>)
    87ca:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    87cc:	4b06      	ldr	r3, [pc, #24]	; (87e8 <k_sched_time_slice_set+0x60>)
    87ce:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    87d0:	f7ff fefa 	bl	85c8 <z_reset_time_slice>
	__asm__ volatile(
    87d4:	f388 8811 	msr	BASEPRI, r8
    87d8:	f3bf 8f6f 	isb	sy
}
    87dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87e0:	20002a54 	.word	0x20002a54
    87e4:	20002a88 	.word	0x20002a88
    87e8:	20002a84 	.word	0x20002a84

000087ec <z_time_slice>:
{
    87ec:	b538      	push	{r3, r4, r5, lr}
    87ee:	4601      	mov	r1, r0
	__asm__ volatile(
    87f0:	f04f 0320 	mov.w	r3, #32
    87f4:	f3ef 8411 	mrs	r4, BASEPRI
    87f8:	f383 8812 	msr	BASEPRI_MAX, r3
    87fc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8800:	4b15      	ldr	r3, [pc, #84]	; (8858 <z_time_slice+0x6c>)
    8802:	4a16      	ldr	r2, [pc, #88]	; (885c <z_time_slice+0x70>)
    8804:	6898      	ldr	r0, [r3, #8]
    8806:	6815      	ldr	r5, [r2, #0]
    8808:	42a8      	cmp	r0, r5
    880a:	d106      	bne.n	881a <z_time_slice+0x2e>
			z_reset_time_slice();
    880c:	f7ff fedc 	bl	85c8 <z_reset_time_slice>
	__asm__ volatile(
    8810:	f384 8811 	msr	BASEPRI, r4
    8814:	f3bf 8f6f 	isb	sy
}
    8818:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    881a:	2500      	movs	r5, #0
    881c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    881e:	4a10      	ldr	r2, [pc, #64]	; (8860 <z_time_slice+0x74>)
    8820:	6812      	ldr	r2, [r2, #0]
    8822:	b1ba      	cbz	r2, 8854 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    8824:	89c2      	ldrh	r2, [r0, #14]
    8826:	2a7f      	cmp	r2, #127	; 0x7f
    8828:	d814      	bhi.n	8854 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    882a:	7b42      	ldrb	r2, [r0, #13]
    882c:	06d2      	lsls	r2, r2, #27
    882e:	d111      	bne.n	8854 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8830:	4a0c      	ldr	r2, [pc, #48]	; (8864 <z_time_slice+0x78>)
    8832:	f990 500e 	ldrsb.w	r5, [r0, #14]
    8836:	6812      	ldr	r2, [r2, #0]
    8838:	4295      	cmp	r5, r2
    883a:	db0b      	blt.n	8854 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    883c:	4a0a      	ldr	r2, [pc, #40]	; (8868 <z_time_slice+0x7c>)
    883e:	4290      	cmp	r0, r2
    8840:	d008      	beq.n	8854 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    8842:	691a      	ldr	r2, [r3, #16]
    8844:	428a      	cmp	r2, r1
    8846:	dc02      	bgt.n	884e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    8848:	f7ff fef0 	bl	862c <move_thread_to_end_of_prio_q>
    884c:	e7de      	b.n	880c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    884e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    8850:	611a      	str	r2, [r3, #16]
    8852:	e7dd      	b.n	8810 <z_time_slice+0x24>
    8854:	2200      	movs	r2, #0
    8856:	e7fb      	b.n	8850 <z_time_slice+0x64>
    8858:	20002a54 	.word	0x20002a54
    885c:	20002a80 	.word	0x20002a80
    8860:	20002a88 	.word	0x20002a88
    8864:	20002a84 	.word	0x20002a84
    8868:	20000560 	.word	0x20000560

0000886c <z_pend_curr>:
{
    886c:	b510      	push	{r4, lr}
	pending_current = _current;
    886e:	4b07      	ldr	r3, [pc, #28]	; (888c <z_pend_curr+0x20>)
    8870:	6898      	ldr	r0, [r3, #8]
    8872:	4b07      	ldr	r3, [pc, #28]	; (8890 <z_pend_curr+0x24>)
{
    8874:	460c      	mov	r4, r1
	pending_current = _current;
    8876:	6018      	str	r0, [r3, #0]
{
    8878:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    887a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    887e:	f7ff ff5d 	bl	873c <pend>
	ret = arch_swap(key);
    8882:	4620      	mov	r0, r4
}
    8884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8888:	f7fa bfa0 	b.w	37cc <arch_swap>
    888c:	20002a54 	.word	0x20002a54
    8890:	20002a80 	.word	0x20002a80

00008894 <z_set_prio>:
{
    8894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8896:	4604      	mov	r4, r0
	__asm__ volatile(
    8898:	f04f 0320 	mov.w	r3, #32
    889c:	f3ef 8611 	mrs	r6, BASEPRI
    88a0:	f383 8812 	msr	BASEPRI_MAX, r3
    88a4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    88a8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    88aa:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    88ac:	b249      	sxtb	r1, r1
    88ae:	d119      	bne.n	88e4 <z_set_prio+0x50>
	return node->next != NULL;
    88b0:	6985      	ldr	r5, [r0, #24]
    88b2:	b9bd      	cbnz	r5, 88e4 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    88b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88b8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    88ba:	f004 fbf7 	bl	d0ac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    88be:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    88c0:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    88c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88c6:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    88c8:	4814      	ldr	r0, [pc, #80]	; (891c <z_set_prio+0x88>)
    88ca:	4603      	mov	r3, r0
	return (node == list->tail) ? NULL : node->next;
    88cc:	6a07      	ldr	r7, [r0, #32]
	return list->head == list;
    88ce:	f853 2f1c 	ldr.w	r2, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88d2:	429a      	cmp	r2, r3
    88d4:	bf18      	it	ne
    88d6:	4615      	movne	r5, r2
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    88d8:	b95d      	cbnz	r5, 88f2 <z_set_prio+0x5e>
	node->prev = tail;
    88da:	e9c4 3700 	strd	r3, r7, [r4]
	tail->next = node;
    88de:	603c      	str	r4, [r7, #0]
	list->tail = node;
    88e0:	6204      	str	r4, [r0, #32]
}
    88e2:	e012      	b.n	890a <z_set_prio+0x76>
			thread->base.prio = prio;
    88e4:	73a1      	strb	r1, [r4, #14]
    88e6:	2000      	movs	r0, #0
	__asm__ volatile(
    88e8:	f386 8811 	msr	BASEPRI, r6
    88ec:	f3bf 8f6f 	isb	sy
}
    88f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    88f2:	f995 200e 	ldrsb.w	r2, [r5, #14]
	if (b1 != b2) {
    88f6:	4291      	cmp	r1, r2
    88f8:	d00c      	beq.n	8914 <z_set_prio+0x80>
		return b2 - b1;
    88fa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    88fc:	2a00      	cmp	r2, #0
    88fe:	dd09      	ble.n	8914 <z_set_prio+0x80>
	sys_dnode_t *const prev = successor->prev;
    8900:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    8902:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    8906:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8908:	606c      	str	r4, [r5, #4]
			update_cache(1);
    890a:	2001      	movs	r0, #1
    890c:	f7ff fe72 	bl	85f4 <update_cache>
    8910:	2001      	movs	r0, #1
    8912:	e7e9      	b.n	88e8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    8914:	42af      	cmp	r7, r5
    8916:	d0e0      	beq.n	88da <z_set_prio+0x46>
    8918:	682d      	ldr	r5, [r5, #0]
    891a:	e7dd      	b.n	88d8 <z_set_prio+0x44>
    891c:	20002a54 	.word	0x20002a54

00008920 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8920:	b949      	cbnz	r1, 8936 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8922:	f3ef 8005 	mrs	r0, IPSR
    8926:	b930      	cbnz	r0, 8936 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8928:	4b05      	ldr	r3, [pc, #20]	; (8940 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    892a:	699a      	ldr	r2, [r3, #24]
    892c:	689b      	ldr	r3, [r3, #8]
    892e:	429a      	cmp	r2, r3
    8930:	d001      	beq.n	8936 <z_reschedule+0x16>
    8932:	f7fa bf4b 	b.w	37cc <arch_swap>
    8936:	f381 8811 	msr	BASEPRI, r1
    893a:	f3bf 8f6f 	isb	sy
}
    893e:	4770      	bx	lr
    8940:	20002a54 	.word	0x20002a54

00008944 <z_sched_start>:
{
    8944:	b510      	push	{r4, lr}
	__asm__ volatile(
    8946:	f04f 0220 	mov.w	r2, #32
    894a:	f3ef 8411 	mrs	r4, BASEPRI
    894e:	f382 8812 	msr	BASEPRI_MAX, r2
    8952:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8956:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    8958:	0751      	lsls	r1, r2, #29
    895a:	d404      	bmi.n	8966 <z_sched_start+0x22>
	__asm__ volatile(
    895c:	f384 8811 	msr	BASEPRI, r4
    8960:	f3bf 8f6f 	isb	sy
}
    8964:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8966:	f022 0204 	bic.w	r2, r2, #4
    896a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    896c:	f7ff fe98 	bl	86a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8970:	4621      	mov	r1, r4
    8972:	4802      	ldr	r0, [pc, #8]	; (897c <z_sched_start+0x38>)
}
    8974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    8978:	f7ff bfd2 	b.w	8920 <z_reschedule>
    897c:	20004887 	.word	0x20004887

00008980 <z_impl_k_thread_suspend>:
{
    8980:	b570      	push	{r4, r5, r6, lr}
    8982:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8984:	3018      	adds	r0, #24
    8986:	f004 fc77 	bl	d278 <z_abort_timeout>
	__asm__ volatile(
    898a:	f04f 0320 	mov.w	r3, #32
    898e:	f3ef 8611 	mrs	r6, BASEPRI
    8992:	f383 8812 	msr	BASEPRI_MAX, r3
    8996:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    899a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    899e:	7b63      	ldrb	r3, [r4, #13]
    89a0:	2a00      	cmp	r2, #0
    89a2:	da05      	bge.n	89b0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    89a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    89a8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    89aa:	4620      	mov	r0, r4
    89ac:	f004 fb7e 	bl	d0ac <sys_dlist_remove>
		update_cache(thread == _current);
    89b0:	4d0b      	ldr	r5, [pc, #44]	; (89e0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    89b2:	7b63      	ldrb	r3, [r4, #13]
    89b4:	68a8      	ldr	r0, [r5, #8]
    89b6:	f043 0310 	orr.w	r3, r3, #16
    89ba:	7363      	strb	r3, [r4, #13]
    89bc:	1b03      	subs	r3, r0, r4
    89be:	4258      	negs	r0, r3
    89c0:	4158      	adcs	r0, r3
    89c2:	f7ff fe17 	bl	85f4 <update_cache>
	__asm__ volatile(
    89c6:	f386 8811 	msr	BASEPRI, r6
    89ca:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    89ce:	68ab      	ldr	r3, [r5, #8]
    89d0:	42a3      	cmp	r3, r4
    89d2:	d103      	bne.n	89dc <z_impl_k_thread_suspend+0x5c>
}
    89d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    89d8:	f004 bc11 	b.w	d1fe <z_reschedule_unlocked>
}
    89dc:	bd70      	pop	{r4, r5, r6, pc}
    89de:	bf00      	nop
    89e0:	20002a54 	.word	0x20002a54

000089e4 <k_sched_lock>:
	__asm__ volatile(
    89e4:	f04f 0320 	mov.w	r3, #32
    89e8:	f3ef 8111 	mrs	r1, BASEPRI
    89ec:	f383 8812 	msr	BASEPRI_MAX, r3
    89f0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    89f4:	4b04      	ldr	r3, [pc, #16]	; (8a08 <k_sched_lock+0x24>)
    89f6:	689a      	ldr	r2, [r3, #8]
    89f8:	7bd3      	ldrb	r3, [r2, #15]
    89fa:	3b01      	subs	r3, #1
    89fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    89fe:	f381 8811 	msr	BASEPRI, r1
    8a02:	f3bf 8f6f 	isb	sy
}
    8a06:	4770      	bx	lr
    8a08:	20002a54 	.word	0x20002a54

00008a0c <k_sched_unlock>:
{
    8a0c:	b510      	push	{r4, lr}
	__asm__ volatile(
    8a0e:	f04f 0320 	mov.w	r3, #32
    8a12:	f3ef 8411 	mrs	r4, BASEPRI
    8a16:	f383 8812 	msr	BASEPRI_MAX, r3
    8a1a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    8a1e:	4b08      	ldr	r3, [pc, #32]	; (8a40 <k_sched_unlock+0x34>)
    8a20:	689a      	ldr	r2, [r3, #8]
    8a22:	7bd3      	ldrb	r3, [r2, #15]
    8a24:	3301      	adds	r3, #1
    8a26:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8a28:	2000      	movs	r0, #0
    8a2a:	f7ff fde3 	bl	85f4 <update_cache>
	__asm__ volatile(
    8a2e:	f384 8811 	msr	BASEPRI, r4
    8a32:	f3bf 8f6f 	isb	sy
}
    8a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    8a3a:	f004 bbe0 	b.w	d1fe <z_reschedule_unlocked>
    8a3e:	bf00      	nop
    8a40:	20002a54 	.word	0x20002a54

00008a44 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8a44:	4b04      	ldr	r3, [pc, #16]	; (8a58 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8a46:	2100      	movs	r1, #0
    8a48:	f103 021c 	add.w	r2, r3, #28
    8a4c:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
    8a4e:	e9c3 2207 	strd	r2, r2, [r3, #28]
    8a52:	f7ff be99 	b.w	8788 <k_sched_time_slice_set>
    8a56:	bf00      	nop
    8a58:	20002a54 	.word	0x20002a54

00008a5c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    8a5e:	f04f 0320 	mov.w	r3, #32
    8a62:	f3ef 8611 	mrs	r6, BASEPRI
    8a66:	f383 8812 	msr	BASEPRI_MAX, r3
    8a6a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8a6e:	4919      	ldr	r1, [pc, #100]	; (8ad4 <z_impl_k_yield+0x78>)
    8a70:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a72:	7b43      	ldrb	r3, [r0, #13]
    8a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8a78:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8a7a:	f004 fb17 	bl	d0ac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8a7e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    8a80:	460a      	mov	r2, r1
    8a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8a86:	7343      	strb	r3, [r0, #13]
    8a88:	f852 3f1c 	ldr.w	r3, [r2, #28]!
	return (node == list->tail) ? NULL : node->next;
    8a8c:	6a0d      	ldr	r5, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a8e:	4293      	cmp	r3, r2
    8a90:	bf08      	it	eq
    8a92:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a94:	b923      	cbnz	r3, 8aa0 <z_impl_k_yield+0x44>
	node->prev = tail;
    8a96:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    8a9a:	6028      	str	r0, [r5, #0]
	list->tail = node;
    8a9c:	6208      	str	r0, [r1, #32]
}
    8a9e:	e00d      	b.n	8abc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    8aa0:	f990 700e 	ldrsb.w	r7, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8aa4:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    8aa8:	42a7      	cmp	r7, r4
    8aaa:	d00f      	beq.n	8acc <z_impl_k_yield+0x70>
		return b2 - b1;
    8aac:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    8aae:	2c00      	cmp	r4, #0
    8ab0:	dd0c      	ble.n	8acc <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    8ab2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8ab4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8ab8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8aba:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
    8abc:	2001      	movs	r0, #1
    8abe:	f7ff fd99 	bl	85f4 <update_cache>
    8ac2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    8ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8ac8:	f7fa be80 	b.w	37cc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8acc:	42ab      	cmp	r3, r5
    8ace:	d0e2      	beq.n	8a96 <z_impl_k_yield+0x3a>
    8ad0:	681b      	ldr	r3, [r3, #0]
    8ad2:	e7df      	b.n	8a94 <z_impl_k_yield+0x38>
    8ad4:	20002a54 	.word	0x20002a54

00008ad8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8ad8:	ea50 0301 	orrs.w	r3, r0, r1
{
    8adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ae0:	4605      	mov	r5, r0
    8ae2:	460e      	mov	r6, r1
	if (ticks == 0) {
    8ae4:	d103      	bne.n	8aee <z_tick_sleep+0x16>
	z_impl_k_yield();
    8ae6:	f7ff ffb9 	bl	8a5c <z_impl_k_yield>
		k_yield();
		return 0;
    8aea:	2000      	movs	r0, #0
    8aec:	e033      	b.n	8b56 <z_tick_sleep+0x7e>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8aee:	f06f 0401 	mvn.w	r4, #1
    8af2:	1a24      	subs	r4, r4, r0
    8af4:	f04f 33ff 	mov.w	r3, #4294967295
    8af8:	eb63 0301 	sbc.w	r3, r3, r1
    8afc:	2c01      	cmp	r4, #1
    8afe:	f173 0300 	sbcs.w	r3, r3, #0
    8b02:	da02      	bge.n	8b0a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8b04:	f004 fbea 	bl	d2dc <sys_clock_tick_get_32>
    8b08:	1944      	adds	r4, r0, r5
    8b0a:	f04f 0320 	mov.w	r3, #32
    8b0e:	f3ef 8811 	mrs	r8, BASEPRI
    8b12:	f383 8812 	msr	BASEPRI_MAX, r3
    8b16:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8b1a:	4f10      	ldr	r7, [pc, #64]	; (8b5c <z_tick_sleep+0x84>)
    8b1c:	4b10      	ldr	r3, [pc, #64]	; (8b60 <z_tick_sleep+0x88>)
    8b1e:	68b8      	ldr	r0, [r7, #8]
    8b20:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8b22:	f7ff fdf3 	bl	870c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8b26:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8b28:	490e      	ldr	r1, [pc, #56]	; (8b64 <z_tick_sleep+0x8c>)
    8b2a:	462a      	mov	r2, r5
    8b2c:	4633      	mov	r3, r6
    8b2e:	3018      	adds	r0, #24
    8b30:	f000 f916 	bl	8d60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8b34:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8b36:	7b53      	ldrb	r3, [r2, #13]
    8b38:	f043 0310 	orr.w	r3, r3, #16
    8b3c:	7353      	strb	r3, [r2, #13]
    8b3e:	4640      	mov	r0, r8
    8b40:	f7fa fe44 	bl	37cc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8b44:	f004 fbca 	bl	d2dc <sys_clock_tick_get_32>
    8b48:	1a20      	subs	r0, r4, r0
    8b4a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8b4e:	2801      	cmp	r0, #1
    8b50:	f173 0300 	sbcs.w	r3, r3, #0
    8b54:	dbc9      	blt.n	8aea <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    8b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b5a:	bf00      	nop
    8b5c:	20002a54 	.word	0x20002a54
    8b60:	20002a80 	.word	0x20002a80
    8b64:	0000d0d1 	.word	0x0000d0d1

00008b68 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b68:	f1b1 3fff 	cmp.w	r1, #4294967295
    8b6c:	bf08      	it	eq
    8b6e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    8b72:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b74:	d106      	bne.n	8b84 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8b76:	4b08      	ldr	r3, [pc, #32]	; (8b98 <z_impl_k_sleep+0x30>)
    8b78:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8b7a:	f7ff ff01 	bl	8980 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8b7e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8b82:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8b84:	f7ff ffa8 	bl	8ad8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    8b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8b8c:	fb80 0303 	smull	r0, r3, r0, r3
    8b90:	0bc0      	lsrs	r0, r0, #15
    8b92:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8b96:	e7f4      	b.n	8b82 <z_impl_k_sleep+0x1a>
    8b98:	20002a54 	.word	0x20002a54

00008b9c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8b9c:	4b01      	ldr	r3, [pc, #4]	; (8ba4 <z_impl_z_current_get+0x8>)
    8b9e:	6898      	ldr	r0, [r3, #8]
    8ba0:	4770      	bx	lr
    8ba2:	bf00      	nop
    8ba4:	20002a54 	.word	0x20002a54

00008ba8 <z_impl_k_is_preempt_thread>:
    8ba8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8bac:	b93b      	cbnz	r3, 8bbe <z_impl_k_is_preempt_thread+0x16>
    8bae:	4b05      	ldr	r3, [pc, #20]	; (8bc4 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8bb0:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    8bb2:	89d8      	ldrh	r0, [r3, #14]
    8bb4:	287f      	cmp	r0, #127	; 0x7f
    8bb6:	bf8c      	ite	hi
    8bb8:	2000      	movhi	r0, #0
    8bba:	2001      	movls	r0, #1
    8bbc:	4770      	bx	lr
    8bbe:	2000      	movs	r0, #0
}
    8bc0:	4770      	bx	lr
    8bc2:	bf00      	nop
    8bc4:	20002a54 	.word	0x20002a54

00008bc8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bcc:	4604      	mov	r4, r0
    8bce:	f04f 0320 	mov.w	r3, #32
    8bd2:	f3ef 8611 	mrs	r6, BASEPRI
    8bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    8bda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8bde:	7b43      	ldrb	r3, [r0, #13]
    8be0:	071a      	lsls	r2, r3, #28
    8be2:	d505      	bpl.n	8bf0 <z_thread_abort+0x28>
	__asm__ volatile(
    8be4:	f386 8811 	msr	BASEPRI, r6
    8be8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8bf0:	f023 0220 	bic.w	r2, r3, #32
    8bf4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8bf8:	09d2      	lsrs	r2, r2, #7
    8bfa:	d120      	bne.n	8c3e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8bfc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8bfe:	68a3      	ldr	r3, [r4, #8]
    8c00:	b113      	cbz	r3, 8c08 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    8c02:	4620      	mov	r0, r4
    8c04:	f004 fa5a 	bl	d0bc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8c08:	f104 0018 	add.w	r0, r4, #24
    8c0c:	f004 fb34 	bl	d278 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8c10:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8c14:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8c18:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c1a:	42bd      	cmp	r5, r7
    8c1c:	d000      	beq.n	8c20 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8c1e:	b9b5      	cbnz	r5, 8c4e <z_thread_abort+0x86>
		update_cache(1);
    8c20:	2001      	movs	r0, #1
    8c22:	f7ff fce7 	bl	85f4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8c26:	4b10      	ldr	r3, [pc, #64]	; (8c68 <z_thread_abort+0xa0>)
    8c28:	689b      	ldr	r3, [r3, #8]
    8c2a:	42a3      	cmp	r3, r4
    8c2c:	d1da      	bne.n	8be4 <z_thread_abort+0x1c>
    8c2e:	f3ef 8305 	mrs	r3, IPSR
    8c32:	2b00      	cmp	r3, #0
    8c34:	d1d6      	bne.n	8be4 <z_thread_abort+0x1c>
    8c36:	4630      	mov	r0, r6
    8c38:	f7fa fdc8 	bl	37cc <arch_swap>
	return ret;
    8c3c:	e7d2      	b.n	8be4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c3e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8c42:	f043 0308 	orr.w	r3, r3, #8
    8c46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8c48:	f004 fa30 	bl	d0ac <sys_dlist_remove>
}
    8c4c:	e7d7      	b.n	8bfe <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8c4e:	4628      	mov	r0, r5
    8c50:	f004 fa34 	bl	d0bc <unpend_thread_no_timeout>
    8c54:	f105 0018 	add.w	r0, r5, #24
    8c58:	f004 fb0e 	bl	d278 <z_abort_timeout>
    8c5c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8c60:	4628      	mov	r0, r5
    8c62:	f7ff fd1d 	bl	86a0 <ready_thread>
    8c66:	e7d7      	b.n	8c18 <z_thread_abort+0x50>
    8c68:	20002a54 	.word	0x20002a54

00008c6c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8c6c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8c6e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8c72:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8c74:	e9cd 6700 	strd	r6, r7, [sp]
    8c78:	f7ff fdf8 	bl	886c <z_pend_curr>

	if (data != NULL) {
    8c7c:	b11c      	cbz	r4, 8c86 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    8c7e:	4b03      	ldr	r3, [pc, #12]	; (8c8c <z_sched_wait+0x20>)
    8c80:	689b      	ldr	r3, [r3, #8]
    8c82:	695b      	ldr	r3, [r3, #20]
    8c84:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8c86:	b002      	add	sp, #8
    8c88:	bdd0      	pop	{r4, r6, r7, pc}
    8c8a:	bf00      	nop
    8c8c:	20002a54 	.word	0x20002a54

00008c90 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8c90:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    8c92:	4806      	ldr	r0, [pc, #24]	; (8cac <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    8c94:	4a06      	ldr	r2, [pc, #24]	; (8cb0 <z_data_copy+0x20>)
    8c96:	4907      	ldr	r1, [pc, #28]	; (8cb4 <z_data_copy+0x24>)
    8c98:	1a12      	subs	r2, r2, r0
    8c9a:	f001 ff22 	bl	aae2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8c9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8ca2:	4a05      	ldr	r2, [pc, #20]	; (8cb8 <z_data_copy+0x28>)
    8ca4:	4905      	ldr	r1, [pc, #20]	; (8cbc <z_data_copy+0x2c>)
    8ca6:	4806      	ldr	r0, [pc, #24]	; (8cc0 <z_data_copy+0x30>)
    8ca8:	f001 bf1b 	b.w	aae2 <memcpy>
    8cac:	20000000 	.word	0x20000000
    8cb0:	20000400 	.word	0x20000400
    8cb4:	0000def4 	.word	0x0000def4
    8cb8:	00000000 	.word	0x00000000
    8cbc:	0000def4 	.word	0x0000def4
    8cc0:	20000000 	.word	0x20000000

00008cc4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8cc4:	4b03      	ldr	r3, [pc, #12]	; (8cd4 <elapsed+0x10>)
    8cc6:	681b      	ldr	r3, [r3, #0]
    8cc8:	b90b      	cbnz	r3, 8cce <elapsed+0xa>
    8cca:	f7fc be6f 	b.w	59ac <sys_clock_elapsed>
}
    8cce:	2000      	movs	r0, #0
    8cd0:	4770      	bx	lr
    8cd2:	bf00      	nop
    8cd4:	20002a8c 	.word	0x20002a8c

00008cd8 <next_timeout>:
	return list->head == list;
    8cd8:	4b12      	ldr	r3, [pc, #72]	; (8d24 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
    8cda:	b510      	push	{r4, lr}
    8cdc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8cde:	429c      	cmp	r4, r3
    8ce0:	d104      	bne.n	8cec <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8ce2:	f7ff ffef 	bl	8cc4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8ce6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8cea:	e012      	b.n	8d12 <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
    8cec:	f7ff ffea 	bl	8cc4 <elapsed>
    8cf0:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
    8cf2:	2c00      	cmp	r4, #0
    8cf4:	d0f7      	beq.n	8ce6 <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8cf6:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    8cfa:	1a40      	subs	r0, r0, r1
    8cfc:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    8d00:	2801      	cmp	r0, #1
    8d02:	f173 0200 	sbcs.w	r2, r3, #0
    8d06:	db0b      	blt.n	8d20 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8d08:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    8d0c:	f173 0300 	sbcs.w	r3, r3, #0
    8d10:	dae9      	bge.n	8ce6 <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8d12:	4b05      	ldr	r3, [pc, #20]	; (8d28 <next_timeout+0x50>)
    8d14:	691b      	ldr	r3, [r3, #16]
    8d16:	b113      	cbz	r3, 8d1e <next_timeout+0x46>
    8d18:	4298      	cmp	r0, r3
    8d1a:	bfa8      	it	ge
    8d1c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8d1e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    8d20:	2000      	movs	r0, #0
    8d22:	e7f6      	b.n	8d12 <next_timeout+0x3a>
    8d24:	20000208 	.word	0x20000208
    8d28:	20002a54 	.word	0x20002a54

00008d2c <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    8d2c:	4a0b      	ldr	r2, [pc, #44]	; (8d5c <remove_timeout+0x30>)
    8d2e:	6803      	ldr	r3, [r0, #0]
    8d30:	6852      	ldr	r2, [r2, #4]
    8d32:	4290      	cmp	r0, r2
{
    8d34:	b530      	push	{r4, r5, lr}
    8d36:	d009      	beq.n	8d4c <remove_timeout+0x20>
	if (next(t) != NULL) {
    8d38:	b143      	cbz	r3, 8d4c <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    8d3a:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8d3e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8d42:	1912      	adds	r2, r2, r4
    8d44:	eb41 0105 	adc.w	r1, r1, r5
    8d48:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8d4c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    8d4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8d50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8d52:	2300      	movs	r3, #0
	node->prev = NULL;
    8d54:	e9c0 3300 	strd	r3, r3, [r0]
}
    8d58:	bd30      	pop	{r4, r5, pc}
    8d5a:	bf00      	nop
    8d5c:	20000208 	.word	0x20000208

00008d60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d60:	f1b3 3fff 	cmp.w	r3, #4294967295
    8d64:	bf08      	it	eq
    8d66:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    8d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d6c:	4604      	mov	r4, r0
    8d6e:	461d      	mov	r5, r3
    8d70:	4617      	mov	r7, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d72:	d05e      	beq.n	8e32 <z_add_timeout+0xd2>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8d74:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    8d76:	f04f 0320 	mov.w	r3, #32
    8d7a:	f3ef 8611 	mrs	r6, BASEPRI
    8d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    8d82:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8d86:	f06f 0301 	mvn.w	r3, #1
    8d8a:	1bda      	subs	r2, r3, r7
    8d8c:	f04f 3eff 	mov.w	lr, #4294967295
    8d90:	eb6e 0205 	sbc.w	r2, lr, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8d94:	2a00      	cmp	r2, #0
    8d96:	db1e      	blt.n	8dd6 <z_add_timeout+0x76>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8d98:	492b      	ldr	r1, [pc, #172]	; (8e48 <z_add_timeout+0xe8>)
    8d9a:	e9d1 2000 	ldrd	r2, r0, [r1]
    8d9e:	1a9b      	subs	r3, r3, r2
    8da0:	eb6e 0000 	sbc.w	r0, lr, r0
    8da4:	1bda      	subs	r2, r3, r7
    8da6:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    8daa:	2a01      	cmp	r2, #1
    8dac:	f170 0300 	sbcs.w	r3, r0, #0
    8db0:	da01      	bge.n	8db6 <z_add_timeout+0x56>
    8db2:	2201      	movs	r2, #1
    8db4:	2000      	movs	r0, #0
    8db6:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
    8dba:	4a24      	ldr	r2, [pc, #144]	; (8e4c <z_add_timeout+0xec>)
    8dbc:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    8dbe:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8dc2:	4293      	cmp	r3, r2
    8dc4:	bf08      	it	eq
    8dc6:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8dc8:	b973      	cbnz	r3, 8de8 <z_add_timeout+0x88>
	node->prev = tail;
    8dca:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    8dce:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8dd2:	6054      	str	r4, [r2, #4]
}
    8dd4:	e01a      	b.n	8e0c <z_add_timeout+0xac>
			to->dticks = timeout.ticks + 1 + elapsed();
    8dd6:	f7ff ff75 	bl	8cc4 <elapsed>
    8dda:	1c7a      	adds	r2, r7, #1
    8ddc:	f145 0500 	adc.w	r5, r5, #0
    8de0:	1812      	adds	r2, r2, r0
    8de2:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8de6:	e7e6      	b.n	8db6 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
    8de8:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    8dec:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    8df0:	4281      	cmp	r1, r0
    8df2:	eb75 0e07 	sbcs.w	lr, r5, r7
    8df6:	da1d      	bge.n	8e34 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    8df8:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    8dfa:	6859      	ldr	r1, [r3, #4]
    8dfc:	eb67 0705 	sbc.w	r7, r7, r5
    8e00:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    8e04:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    8e08:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8e0a:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8e0c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e0e:	4293      	cmp	r3, r2
    8e10:	d00b      	beq.n	8e2a <z_add_timeout+0xca>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8e12:	429c      	cmp	r4, r3
    8e14:	d109      	bne.n	8e2a <z_add_timeout+0xca>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8e16:	f7ff ff5f 	bl	8cd8 <next_timeout>

			if (next_time == 0 ||
    8e1a:	b118      	cbz	r0, 8e24 <z_add_timeout+0xc4>
			    _current_cpu->slice_ticks != next_time) {
    8e1c:	4b0c      	ldr	r3, [pc, #48]	; (8e50 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    8e1e:	691b      	ldr	r3, [r3, #16]
    8e20:	4283      	cmp	r3, r0
    8e22:	d002      	beq.n	8e2a <z_add_timeout+0xca>
				sys_clock_set_timeout(next_time, false);
    8e24:	2100      	movs	r1, #0
    8e26:	f7fc fd91 	bl	594c <sys_clock_set_timeout>
	__asm__ volatile(
    8e2a:	f386 8811 	msr	BASEPRI, r6
    8e2e:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    8e34:	1a09      	subs	r1, r1, r0
    8e36:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    8e3a:	4563      	cmp	r3, ip
    8e3c:	e9c4 1504 	strd	r1, r5, [r4, #16]
    8e40:	d0c3      	beq.n	8dca <z_add_timeout+0x6a>
    8e42:	681b      	ldr	r3, [r3, #0]
    8e44:	e7c0      	b.n	8dc8 <z_add_timeout+0x68>
    8e46:	bf00      	nop
    8e48:	20000660 	.word	0x20000660
    8e4c:	20000208 	.word	0x20000208
    8e50:	20002a54 	.word	0x20002a54

00008e54 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    8e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e58:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8e5a:	f7ff fcc7 	bl	87ec <z_time_slice>
	__asm__ volatile(
    8e5e:	f04f 0320 	mov.w	r3, #32
    8e62:	f3ef 8411 	mrs	r4, BASEPRI
    8e66:	f383 8812 	msr	BASEPRI_MAX, r3
    8e6a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8e6e:	4e24      	ldr	r6, [pc, #144]	; (8f00 <sys_clock_announce+0xac>)
	return list->head == list;
    8e70:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8f04 <sys_clock_announce+0xb0>
    8e74:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    8e76:	4d24      	ldr	r5, [pc, #144]	; (8f08 <sys_clock_announce+0xb4>)
    8e78:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8e7c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e7e:	4540      	cmp	r0, r8
		curr_tick += dt;
    8e80:	e9d5 1e00 	ldrd	r1, lr, [r5]
    8e84:	ea4f 77e2 	mov.w	r7, r2, asr #31
    8e88:	d00b      	beq.n	8ea2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8e8a:	b150      	cbz	r0, 8ea2 <sys_clock_announce+0x4e>
    8e8c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    8e90:	429a      	cmp	r2, r3
    8e92:	eb77 090c 	sbcs.w	r9, r7, ip
    8e96:	da16      	bge.n	8ec6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8e98:	1a9b      	subs	r3, r3, r2
    8e9a:	eb6c 0c07 	sbc.w	ip, ip, r7
    8e9e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    8ea2:	1851      	adds	r1, r2, r1
    8ea4:	eb4e 0707 	adc.w	r7, lr, r7
    8ea8:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
    8eac:	2500      	movs	r5, #0
    8eae:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8eb0:	f7ff ff12 	bl	8cd8 <next_timeout>
    8eb4:	4629      	mov	r1, r5
    8eb6:	f7fc fd49 	bl	594c <sys_clock_set_timeout>
	__asm__ volatile(
    8eba:	f384 8811 	msr	BASEPRI, r4
    8ebe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    8ec6:	1859      	adds	r1, r3, r1
    8ec8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    8ecc:	1ad3      	subs	r3, r2, r3
    8ece:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    8ed0:	2200      	movs	r2, #0
    8ed2:	2300      	movs	r3, #0
    8ed4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    8ed8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    8edc:	f7ff ff26 	bl	8d2c <remove_timeout>
    8ee0:	f384 8811 	msr	BASEPRI, r4
    8ee4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8ee8:	6883      	ldr	r3, [r0, #8]
    8eea:	4798      	blx	r3
	__asm__ volatile(
    8eec:	f04f 0320 	mov.w	r3, #32
    8ef0:	f3ef 8411 	mrs	r4, BASEPRI
    8ef4:	f383 8812 	msr	BASEPRI_MAX, r3
    8ef8:	f3bf 8f6f 	isb	sy
	return k;
    8efc:	e7bc      	b.n	8e78 <sys_clock_announce+0x24>
    8efe:	bf00      	nop
    8f00:	20002a8c 	.word	0x20002a8c
    8f04:	20000208 	.word	0x20000208
    8f08:	20000660 	.word	0x20000660

00008f0c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8f0c:	b510      	push	{r4, lr}
    8f0e:	f04f 0320 	mov.w	r3, #32
    8f12:	f3ef 8411 	mrs	r4, BASEPRI
    8f16:	f383 8812 	msr	BASEPRI_MAX, r3
    8f1a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8f1e:	f7fc fd45 	bl	59ac <sys_clock_elapsed>
    8f22:	4a05      	ldr	r2, [pc, #20]	; (8f38 <sys_clock_tick_get+0x2c>)
    8f24:	e9d2 3100 	ldrd	r3, r1, [r2]
    8f28:	18c0      	adds	r0, r0, r3
    8f2a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    8f2e:	f384 8811 	msr	BASEPRI, r4
    8f32:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8f36:	bd10      	pop	{r4, pc}
    8f38:	20000660 	.word	0x20000660

00008f3c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    8f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8f3e:	4606      	mov	r6, r0
    8f40:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    8f42:	f003 ffd0 	bl	cee6 <k_is_in_isr>
    8f46:	b978      	cbnz	r0, 8f68 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    8f48:	4b0b      	ldr	r3, [pc, #44]	; (8f78 <z_thread_aligned_alloc+0x3c>)
    8f4a:	689b      	ldr	r3, [r3, #8]
    8f4c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    8f4e:	b17c      	cbz	r4, 8f70 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    8f50:	1d2a      	adds	r2, r5, #4
    8f52:	d209      	bcs.n	8f68 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    8f54:	2000      	movs	r0, #0
    8f56:	2100      	movs	r1, #0
    8f58:	e9cd 0100 	strd	r0, r1, [sp]
    8f5c:	f046 0104 	orr.w	r1, r6, #4
    8f60:	4620      	mov	r0, r4
    8f62:	f004 f9f5 	bl	d350 <k_heap_aligned_alloc>
	if (mem == NULL) {
    8f66:	b908      	cbnz	r0, 8f6c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    8f68:	2400      	movs	r4, #0
	}

	return ret;
    8f6a:	e001      	b.n	8f70 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    8f6c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    8f6e:	1d04      	adds	r4, r0, #4
}
    8f70:	4620      	mov	r0, r4
    8f72:	b002      	add	sp, #8
    8f74:	bd70      	pop	{r4, r5, r6, pc}
    8f76:	bf00      	nop
    8f78:	20002a54 	.word	0x20002a54

00008f7c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8f7c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8f7e:	4c06      	ldr	r4, [pc, #24]	; (8f98 <statics_init+0x1c>)
    8f80:	4d06      	ldr	r5, [pc, #24]	; (8f9c <statics_init+0x20>)
    8f82:	42ac      	cmp	r4, r5
    8f84:	d301      	bcc.n	8f8a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8f86:	2000      	movs	r0, #0
    8f88:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8f8a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8f8e:	4620      	mov	r0, r4
    8f90:	f004 f9d6 	bl	d340 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8f94:	3414      	adds	r4, #20
    8f96:	e7f4      	b.n	8f82 <statics_init+0x6>
    8f98:	200002a8 	.word	0x200002a8
    8f9c:	200002a8 	.word	0x200002a8

00008fa0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    8fa2:	4b09      	ldr	r3, [pc, #36]	; (8fc8 <k_sys_work_q_init+0x28>)
    8fa4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8fa6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8fa8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8faa:	9300      	str	r3, [sp, #0]
    8fac:	4907      	ldr	r1, [pc, #28]	; (8fcc <k_sys_work_q_init+0x2c>)
    8fae:	4808      	ldr	r0, [pc, #32]	; (8fd0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8fb0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8fb4:	f04f 33ff 	mov.w	r3, #4294967295
    8fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8fbc:	f7ff facc 	bl	8558 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8fc0:	4620      	mov	r0, r4
    8fc2:	b004      	add	sp, #16
    8fc4:	bd10      	pop	{r4, pc}
    8fc6:	bf00      	nop
    8fc8:	0000deea 	.word	0x0000deea
    8fcc:	20008440 	.word	0x20008440
    8fd0:	20000668 	.word	0x20000668

00008fd4 <nrf_cc3xx_platform_init_no_rng>:
    8fd4:	b510      	push	{r4, lr}
    8fd6:	4c0a      	ldr	r4, [pc, #40]	; (9000 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8fd8:	6823      	ldr	r3, [r4, #0]
    8fda:	b11b      	cbz	r3, 8fe4 <nrf_cc3xx_platform_init_no_rng+0x10>
    8fdc:	2301      	movs	r3, #1
    8fde:	6023      	str	r3, [r4, #0]
    8fe0:	2000      	movs	r0, #0
    8fe2:	bd10      	pop	{r4, pc}
    8fe4:	f000 f8e0 	bl	91a8 <CC_LibInitNoRng>
    8fe8:	2800      	cmp	r0, #0
    8fea:	d0f7      	beq.n	8fdc <nrf_cc3xx_platform_init_no_rng+0x8>
    8fec:	3801      	subs	r0, #1
    8fee:	2806      	cmp	r0, #6
    8ff0:	d803      	bhi.n	8ffa <nrf_cc3xx_platform_init_no_rng+0x26>
    8ff2:	4b04      	ldr	r3, [pc, #16]	; (9004 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8ff4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8ff8:	bd10      	pop	{r4, pc}
    8ffa:	4803      	ldr	r0, [pc, #12]	; (9008 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8ffc:	bd10      	pop	{r4, pc}
    8ffe:	bf00      	nop
    9000:	20002a90 	.word	0x20002a90
    9004:	0000dafc 	.word	0x0000dafc
    9008:	ffff8ffe 	.word	0xffff8ffe

0000900c <nrf_cc3xx_platform_abort>:
    900c:	f3bf 8f4f 	dsb	sy
    9010:	4905      	ldr	r1, [pc, #20]	; (9028 <nrf_cc3xx_platform_abort+0x1c>)
    9012:	4b06      	ldr	r3, [pc, #24]	; (902c <nrf_cc3xx_platform_abort+0x20>)
    9014:	68ca      	ldr	r2, [r1, #12]
    9016:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    901a:	4313      	orrs	r3, r2
    901c:	60cb      	str	r3, [r1, #12]
    901e:	f3bf 8f4f 	dsb	sy
    9022:	bf00      	nop
    9024:	e7fd      	b.n	9022 <nrf_cc3xx_platform_abort+0x16>
    9026:	bf00      	nop
    9028:	e000ed00 	.word	0xe000ed00
    902c:	05fa0004 	.word	0x05fa0004

00009030 <CC_PalAbort>:
    9030:	b4f0      	push	{r4, r5, r6, r7}
    9032:	4f09      	ldr	r7, [pc, #36]	; (9058 <CC_PalAbort+0x28>)
    9034:	4e09      	ldr	r6, [pc, #36]	; (905c <CC_PalAbort+0x2c>)
    9036:	4c0a      	ldr	r4, [pc, #40]	; (9060 <CC_PalAbort+0x30>)
    9038:	4a0a      	ldr	r2, [pc, #40]	; (9064 <CC_PalAbort+0x34>)
    903a:	4d0b      	ldr	r5, [pc, #44]	; (9068 <CC_PalAbort+0x38>)
    903c:	490b      	ldr	r1, [pc, #44]	; (906c <CC_PalAbort+0x3c>)
    903e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    9042:	603b      	str	r3, [r7, #0]
    9044:	6852      	ldr	r2, [r2, #4]
    9046:	6033      	str	r3, [r6, #0]
    9048:	6023      	str	r3, [r4, #0]
    904a:	2400      	movs	r4, #0
    904c:	602b      	str	r3, [r5, #0]
    904e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    9052:	bcf0      	pop	{r4, r5, r6, r7}
    9054:	4710      	bx	r2
    9056:	bf00      	nop
    9058:	5002b400 	.word	0x5002b400
    905c:	5002b404 	.word	0x5002b404
    9060:	5002b408 	.word	0x5002b408
    9064:	20000210 	.word	0x20000210
    9068:	5002b40c 	.word	0x5002b40c
    906c:	5002a000 	.word	0x5002a000

00009070 <nrf_cc3xx_platform_set_abort>:
    9070:	e9d0 1200 	ldrd	r1, r2, [r0]
    9074:	4b01      	ldr	r3, [pc, #4]	; (907c <nrf_cc3xx_platform_set_abort+0xc>)
    9076:	e9c3 1200 	strd	r1, r2, [r3]
    907a:	4770      	bx	lr
    907c:	20000210 	.word	0x20000210

00009080 <mutex_free>:
    9080:	b510      	push	{r4, lr}
    9082:	4604      	mov	r4, r0
    9084:	b130      	cbz	r0, 9094 <mutex_free+0x14>
    9086:	6863      	ldr	r3, [r4, #4]
    9088:	06db      	lsls	r3, r3, #27
    908a:	d502      	bpl.n	9092 <mutex_free+0x12>
    908c:	2300      	movs	r3, #0
    908e:	6023      	str	r3, [r4, #0]
    9090:	6063      	str	r3, [r4, #4]
    9092:	bd10      	pop	{r4, pc}
    9094:	4b02      	ldr	r3, [pc, #8]	; (90a0 <mutex_free+0x20>)
    9096:	4803      	ldr	r0, [pc, #12]	; (90a4 <mutex_free+0x24>)
    9098:	685b      	ldr	r3, [r3, #4]
    909a:	4798      	blx	r3
    909c:	e7f3      	b.n	9086 <mutex_free+0x6>
    909e:	bf00      	nop
    90a0:	20000210 	.word	0x20000210
    90a4:	0000db18 	.word	0x0000db18

000090a8 <mutex_unlock>:
    90a8:	b168      	cbz	r0, 90c6 <mutex_unlock+0x1e>
    90aa:	6843      	ldr	r3, [r0, #4]
    90ac:	b13b      	cbz	r3, 90be <mutex_unlock+0x16>
    90ae:	06db      	lsls	r3, r3, #27
    90b0:	d507      	bpl.n	90c2 <mutex_unlock+0x1a>
    90b2:	f3bf 8f5f 	dmb	sy
    90b6:	2300      	movs	r3, #0
    90b8:	6003      	str	r3, [r0, #0]
    90ba:	4618      	mov	r0, r3
    90bc:	4770      	bx	lr
    90be:	4803      	ldr	r0, [pc, #12]	; (90cc <mutex_unlock+0x24>)
    90c0:	4770      	bx	lr
    90c2:	4803      	ldr	r0, [pc, #12]	; (90d0 <mutex_unlock+0x28>)
    90c4:	4770      	bx	lr
    90c6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    90ca:	4770      	bx	lr
    90cc:	ffff8fea 	.word	0xffff8fea
    90d0:	ffff8fe9 	.word	0xffff8fe9

000090d4 <mutex_init>:
    90d4:	b510      	push	{r4, lr}
    90d6:	4604      	mov	r4, r0
    90d8:	b120      	cbz	r0, 90e4 <mutex_init+0x10>
    90da:	2200      	movs	r2, #0
    90dc:	2311      	movs	r3, #17
    90de:	6022      	str	r2, [r4, #0]
    90e0:	6063      	str	r3, [r4, #4]
    90e2:	bd10      	pop	{r4, pc}
    90e4:	4801      	ldr	r0, [pc, #4]	; (90ec <mutex_init+0x18>)
    90e6:	f7ff ffa3 	bl	9030 <CC_PalAbort>
    90ea:	e7f6      	b.n	90da <mutex_init+0x6>
    90ec:	0000db40 	.word	0x0000db40

000090f0 <mutex_lock>:
    90f0:	b1c0      	cbz	r0, 9124 <mutex_lock+0x34>
    90f2:	6843      	ldr	r3, [r0, #4]
    90f4:	b1a3      	cbz	r3, 9120 <mutex_lock+0x30>
    90f6:	06db      	lsls	r3, r3, #27
    90f8:	d510      	bpl.n	911c <mutex_lock+0x2c>
    90fa:	2201      	movs	r2, #1
    90fc:	f3bf 8f5b 	dmb	ish
    9100:	e850 3f00 	ldrex	r3, [r0]
    9104:	e840 2100 	strex	r1, r2, [r0]
    9108:	2900      	cmp	r1, #0
    910a:	d1f9      	bne.n	9100 <mutex_lock+0x10>
    910c:	f3bf 8f5b 	dmb	ish
    9110:	2b01      	cmp	r3, #1
    9112:	d0f3      	beq.n	90fc <mutex_lock+0xc>
    9114:	f3bf 8f5f 	dmb	sy
    9118:	2000      	movs	r0, #0
    911a:	4770      	bx	lr
    911c:	4803      	ldr	r0, [pc, #12]	; (912c <mutex_lock+0x3c>)
    911e:	4770      	bx	lr
    9120:	4803      	ldr	r0, [pc, #12]	; (9130 <mutex_lock+0x40>)
    9122:	4770      	bx	lr
    9124:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9128:	4770      	bx	lr
    912a:	bf00      	nop
    912c:	ffff8fe9 	.word	0xffff8fe9
    9130:	ffff8fea 	.word	0xffff8fea

00009134 <nrf_cc3xx_platform_set_mutexes>:
    9134:	b570      	push	{r4, r5, r6, lr}
    9136:	e9d0 2300 	ldrd	r2, r3, [r0]
    913a:	4c13      	ldr	r4, [pc, #76]	; (9188 <nrf_cc3xx_platform_set_mutexes+0x54>)
    913c:	4d13      	ldr	r5, [pc, #76]	; (918c <nrf_cc3xx_platform_set_mutexes+0x58>)
    913e:	e9c4 2300 	strd	r2, r3, [r4]
    9142:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    9146:	e9c4 6302 	strd	r6, r3, [r4, #8]
    914a:	4b11      	ldr	r3, [pc, #68]	; (9190 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    914c:	6808      	ldr	r0, [r1, #0]
    914e:	6018      	str	r0, [r3, #0]
    9150:	6848      	ldr	r0, [r1, #4]
    9152:	6058      	str	r0, [r3, #4]
    9154:	6888      	ldr	r0, [r1, #8]
    9156:	6098      	str	r0, [r3, #8]
    9158:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    915c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    9160:	60de      	str	r6, [r3, #12]
    9162:	6118      	str	r0, [r3, #16]
    9164:	06cb      	lsls	r3, r1, #27
    9166:	d50d      	bpl.n	9184 <nrf_cc3xx_platform_set_mutexes+0x50>
    9168:	2300      	movs	r3, #0
    916a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    916e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    9172:	f505 7088 	add.w	r0, r5, #272	; 0x110
    9176:	4790      	blx	r2
    9178:	6823      	ldr	r3, [r4, #0]
    917a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    917e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9182:	4718      	bx	r3
    9184:	bd70      	pop	{r4, r5, r6, pc}
    9186:	bf00      	nop
    9188:	20000220 	.word	0x20000220
    918c:	20004888 	.word	0x20004888
    9190:	20000230 	.word	0x20000230

00009194 <mbedtls_platform_zeroize>:
    9194:	b138      	cbz	r0, 91a6 <mbedtls_platform_zeroize+0x12>
    9196:	b131      	cbz	r1, 91a6 <mbedtls_platform_zeroize+0x12>
    9198:	4401      	add	r1, r0
    919a:	2200      	movs	r2, #0
    919c:	4603      	mov	r3, r0
    919e:	3001      	adds	r0, #1
    91a0:	4288      	cmp	r0, r1
    91a2:	701a      	strb	r2, [r3, #0]
    91a4:	d1fa      	bne.n	919c <mbedtls_platform_zeroize+0x8>
    91a6:	4770      	bx	lr

000091a8 <CC_LibInitNoRng>:
    91a8:	b510      	push	{r4, lr}
    91aa:	f000 f833 	bl	9214 <CC_HalInit>
    91ae:	b120      	cbz	r0, 91ba <CC_LibInitNoRng+0x12>
    91b0:	2403      	movs	r4, #3
    91b2:	f000 f867 	bl	9284 <CC_PalTerminate>
    91b6:	4620      	mov	r0, r4
    91b8:	bd10      	pop	{r4, pc}
    91ba:	f000 f835 	bl	9228 <CC_PalInit>
    91be:	b990      	cbnz	r0, 91e6 <CC_LibInitNoRng+0x3e>
    91c0:	f000 f8b0 	bl	9324 <CC_PalPowerSaveModeSelect>
    91c4:	b990      	cbnz	r0, 91ec <CC_LibInitNoRng+0x44>
    91c6:	4b0f      	ldr	r3, [pc, #60]	; (9204 <CC_LibInitNoRng+0x5c>)
    91c8:	681b      	ldr	r3, [r3, #0]
    91ca:	0e1b      	lsrs	r3, r3, #24
    91cc:	2bf0      	cmp	r3, #240	; 0xf0
    91ce:	d108      	bne.n	91e2 <CC_LibInitNoRng+0x3a>
    91d0:	4a0d      	ldr	r2, [pc, #52]	; (9208 <CC_LibInitNoRng+0x60>)
    91d2:	4b0e      	ldr	r3, [pc, #56]	; (920c <CC_LibInitNoRng+0x64>)
    91d4:	6812      	ldr	r2, [r2, #0]
    91d6:	429a      	cmp	r2, r3
    91d8:	d00a      	beq.n	91f0 <CC_LibInitNoRng+0x48>
    91da:	2407      	movs	r4, #7
    91dc:	f000 f81c 	bl	9218 <CC_HalTerminate>
    91e0:	e7e7      	b.n	91b2 <CC_LibInitNoRng+0xa>
    91e2:	2406      	movs	r4, #6
    91e4:	e7fa      	b.n	91dc <CC_LibInitNoRng+0x34>
    91e6:	2404      	movs	r4, #4
    91e8:	4620      	mov	r0, r4
    91ea:	bd10      	pop	{r4, pc}
    91ec:	2400      	movs	r4, #0
    91ee:	e7f5      	b.n	91dc <CC_LibInitNoRng+0x34>
    91f0:	2001      	movs	r0, #1
    91f2:	f000 f897 	bl	9324 <CC_PalPowerSaveModeSelect>
    91f6:	4604      	mov	r4, r0
    91f8:	2800      	cmp	r0, #0
    91fa:	d1f7      	bne.n	91ec <CC_LibInitNoRng+0x44>
    91fc:	4b04      	ldr	r3, [pc, #16]	; (9210 <CC_LibInitNoRng+0x68>)
    91fe:	6018      	str	r0, [r3, #0]
    9200:	e7d9      	b.n	91b6 <CC_LibInitNoRng+0xe>
    9202:	bf00      	nop
    9204:	5002b928 	.word	0x5002b928
    9208:	5002ba24 	.word	0x5002ba24
    920c:	20e00000 	.word	0x20e00000
    9210:	5002ba0c 	.word	0x5002ba0c

00009214 <CC_HalInit>:
    9214:	2000      	movs	r0, #0
    9216:	4770      	bx	lr

00009218 <CC_HalTerminate>:
    9218:	2000      	movs	r0, #0
    921a:	4770      	bx	lr

0000921c <CC_HalMaskInterrupt>:
    921c:	4b01      	ldr	r3, [pc, #4]	; (9224 <CC_HalMaskInterrupt+0x8>)
    921e:	6018      	str	r0, [r3, #0]
    9220:	4770      	bx	lr
    9222:	bf00      	nop
    9224:	5002ba04 	.word	0x5002ba04

00009228 <CC_PalInit>:
    9228:	b510      	push	{r4, lr}
    922a:	4811      	ldr	r0, [pc, #68]	; (9270 <CC_PalInit+0x48>)
    922c:	f000 f848 	bl	92c0 <CC_PalMutexCreate>
    9230:	b100      	cbz	r0, 9234 <CC_PalInit+0xc>
    9232:	bd10      	pop	{r4, pc}
    9234:	480f      	ldr	r0, [pc, #60]	; (9274 <CC_PalInit+0x4c>)
    9236:	f000 f843 	bl	92c0 <CC_PalMutexCreate>
    923a:	2800      	cmp	r0, #0
    923c:	d1f9      	bne.n	9232 <CC_PalInit+0xa>
    923e:	4c0e      	ldr	r4, [pc, #56]	; (9278 <CC_PalInit+0x50>)
    9240:	4620      	mov	r0, r4
    9242:	f000 f83d 	bl	92c0 <CC_PalMutexCreate>
    9246:	2800      	cmp	r0, #0
    9248:	d1f3      	bne.n	9232 <CC_PalInit+0xa>
    924a:	4b0c      	ldr	r3, [pc, #48]	; (927c <CC_PalInit+0x54>)
    924c:	480c      	ldr	r0, [pc, #48]	; (9280 <CC_PalInit+0x58>)
    924e:	601c      	str	r4, [r3, #0]
    9250:	f000 f836 	bl	92c0 <CC_PalMutexCreate>
    9254:	4601      	mov	r1, r0
    9256:	2800      	cmp	r0, #0
    9258:	d1eb      	bne.n	9232 <CC_PalInit+0xa>
    925a:	f000 f82d 	bl	92b8 <CC_PalDmaInit>
    925e:	4604      	mov	r4, r0
    9260:	b108      	cbz	r0, 9266 <CC_PalInit+0x3e>
    9262:	4620      	mov	r0, r4
    9264:	bd10      	pop	{r4, pc}
    9266:	f000 f83f 	bl	92e8 <CC_PalPowerSaveModeInit>
    926a:	4620      	mov	r0, r4
    926c:	e7fa      	b.n	9264 <CC_PalInit+0x3c>
    926e:	bf00      	nop
    9270:	20000268 	.word	0x20000268
    9274:	2000025c 	.word	0x2000025c
    9278:	20000264 	.word	0x20000264
    927c:	2000026c 	.word	0x2000026c
    9280:	20000260 	.word	0x20000260

00009284 <CC_PalTerminate>:
    9284:	b508      	push	{r3, lr}
    9286:	4808      	ldr	r0, [pc, #32]	; (92a8 <CC_PalTerminate+0x24>)
    9288:	f000 f824 	bl	92d4 <CC_PalMutexDestroy>
    928c:	4807      	ldr	r0, [pc, #28]	; (92ac <CC_PalTerminate+0x28>)
    928e:	f000 f821 	bl	92d4 <CC_PalMutexDestroy>
    9292:	4807      	ldr	r0, [pc, #28]	; (92b0 <CC_PalTerminate+0x2c>)
    9294:	f000 f81e 	bl	92d4 <CC_PalMutexDestroy>
    9298:	4806      	ldr	r0, [pc, #24]	; (92b4 <CC_PalTerminate+0x30>)
    929a:	f000 f81b 	bl	92d4 <CC_PalMutexDestroy>
    929e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    92a2:	f000 b80b 	b.w	92bc <CC_PalDmaTerminate>
    92a6:	bf00      	nop
    92a8:	20000268 	.word	0x20000268
    92ac:	2000025c 	.word	0x2000025c
    92b0:	20000264 	.word	0x20000264
    92b4:	20000260 	.word	0x20000260

000092b8 <CC_PalDmaInit>:
    92b8:	2000      	movs	r0, #0
    92ba:	4770      	bx	lr

000092bc <CC_PalDmaTerminate>:
    92bc:	4770      	bx	lr
    92be:	bf00      	nop

000092c0 <CC_PalMutexCreate>:
    92c0:	b508      	push	{r3, lr}
    92c2:	4b03      	ldr	r3, [pc, #12]	; (92d0 <CC_PalMutexCreate+0x10>)
    92c4:	6802      	ldr	r2, [r0, #0]
    92c6:	681b      	ldr	r3, [r3, #0]
    92c8:	6810      	ldr	r0, [r2, #0]
    92ca:	4798      	blx	r3
    92cc:	2000      	movs	r0, #0
    92ce:	bd08      	pop	{r3, pc}
    92d0:	20000220 	.word	0x20000220

000092d4 <CC_PalMutexDestroy>:
    92d4:	b508      	push	{r3, lr}
    92d6:	4b03      	ldr	r3, [pc, #12]	; (92e4 <CC_PalMutexDestroy+0x10>)
    92d8:	6802      	ldr	r2, [r0, #0]
    92da:	685b      	ldr	r3, [r3, #4]
    92dc:	6810      	ldr	r0, [r2, #0]
    92de:	4798      	blx	r3
    92e0:	2000      	movs	r0, #0
    92e2:	bd08      	pop	{r3, pc}
    92e4:	20000220 	.word	0x20000220

000092e8 <CC_PalPowerSaveModeInit>:
    92e8:	b570      	push	{r4, r5, r6, lr}
    92ea:	4c09      	ldr	r4, [pc, #36]	; (9310 <CC_PalPowerSaveModeInit+0x28>)
    92ec:	4d09      	ldr	r5, [pc, #36]	; (9314 <CC_PalPowerSaveModeInit+0x2c>)
    92ee:	6920      	ldr	r0, [r4, #16]
    92f0:	68ab      	ldr	r3, [r5, #8]
    92f2:	4798      	blx	r3
    92f4:	b118      	cbz	r0, 92fe <CC_PalPowerSaveModeInit+0x16>
    92f6:	4b08      	ldr	r3, [pc, #32]	; (9318 <CC_PalPowerSaveModeInit+0x30>)
    92f8:	4808      	ldr	r0, [pc, #32]	; (931c <CC_PalPowerSaveModeInit+0x34>)
    92fa:	685b      	ldr	r3, [r3, #4]
    92fc:	4798      	blx	r3
    92fe:	4a08      	ldr	r2, [pc, #32]	; (9320 <CC_PalPowerSaveModeInit+0x38>)
    9300:	68eb      	ldr	r3, [r5, #12]
    9302:	6920      	ldr	r0, [r4, #16]
    9304:	2100      	movs	r1, #0
    9306:	6011      	str	r1, [r2, #0]
    9308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    930c:	4718      	bx	r3
    930e:	bf00      	nop
    9310:	20000230 	.word	0x20000230
    9314:	20000220 	.word	0x20000220
    9318:	20000210 	.word	0x20000210
    931c:	0000db64 	.word	0x0000db64
    9320:	20002aa4 	.word	0x20002aa4

00009324 <CC_PalPowerSaveModeSelect>:
    9324:	b570      	push	{r4, r5, r6, lr}
    9326:	4d1a      	ldr	r5, [pc, #104]	; (9390 <CC_PalPowerSaveModeSelect+0x6c>)
    9328:	4e1a      	ldr	r6, [pc, #104]	; (9394 <CC_PalPowerSaveModeSelect+0x70>)
    932a:	4604      	mov	r4, r0
    932c:	68b2      	ldr	r2, [r6, #8]
    932e:	6928      	ldr	r0, [r5, #16]
    9330:	4790      	blx	r2
    9332:	b9f0      	cbnz	r0, 9372 <CC_PalPowerSaveModeSelect+0x4e>
    9334:	b15c      	cbz	r4, 934e <CC_PalPowerSaveModeSelect+0x2a>
    9336:	4c18      	ldr	r4, [pc, #96]	; (9398 <CC_PalPowerSaveModeSelect+0x74>)
    9338:	6823      	ldr	r3, [r4, #0]
    933a:	b1ab      	cbz	r3, 9368 <CC_PalPowerSaveModeSelect+0x44>
    933c:	2b01      	cmp	r3, #1
    933e:	d01a      	beq.n	9376 <CC_PalPowerSaveModeSelect+0x52>
    9340:	3b01      	subs	r3, #1
    9342:	6023      	str	r3, [r4, #0]
    9344:	6928      	ldr	r0, [r5, #16]
    9346:	68f3      	ldr	r3, [r6, #12]
    9348:	4798      	blx	r3
    934a:	2000      	movs	r0, #0
    934c:	bd70      	pop	{r4, r5, r6, pc}
    934e:	4c12      	ldr	r4, [pc, #72]	; (9398 <CC_PalPowerSaveModeSelect+0x74>)
    9350:	6821      	ldr	r1, [r4, #0]
    9352:	b939      	cbnz	r1, 9364 <CC_PalPowerSaveModeSelect+0x40>
    9354:	4b11      	ldr	r3, [pc, #68]	; (939c <CC_PalPowerSaveModeSelect+0x78>)
    9356:	4a12      	ldr	r2, [pc, #72]	; (93a0 <CC_PalPowerSaveModeSelect+0x7c>)
    9358:	2001      	movs	r0, #1
    935a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    935e:	6813      	ldr	r3, [r2, #0]
    9360:	2b00      	cmp	r3, #0
    9362:	d1fc      	bne.n	935e <CC_PalPowerSaveModeSelect+0x3a>
    9364:	3101      	adds	r1, #1
    9366:	6021      	str	r1, [r4, #0]
    9368:	68f3      	ldr	r3, [r6, #12]
    936a:	6928      	ldr	r0, [r5, #16]
    936c:	4798      	blx	r3
    936e:	2000      	movs	r0, #0
    9370:	bd70      	pop	{r4, r5, r6, pc}
    9372:	480c      	ldr	r0, [pc, #48]	; (93a4 <CC_PalPowerSaveModeSelect+0x80>)
    9374:	bd70      	pop	{r4, r5, r6, pc}
    9376:	4a0a      	ldr	r2, [pc, #40]	; (93a0 <CC_PalPowerSaveModeSelect+0x7c>)
    9378:	6813      	ldr	r3, [r2, #0]
    937a:	2b00      	cmp	r3, #0
    937c:	d1fc      	bne.n	9378 <CC_PalPowerSaveModeSelect+0x54>
    937e:	4a07      	ldr	r2, [pc, #28]	; (939c <CC_PalPowerSaveModeSelect+0x78>)
    9380:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9384:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9388:	f7ff ff48 	bl	921c <CC_HalMaskInterrupt>
    938c:	6823      	ldr	r3, [r4, #0]
    938e:	e7d7      	b.n	9340 <CC_PalPowerSaveModeSelect+0x1c>
    9390:	20000230 	.word	0x20000230
    9394:	20000220 	.word	0x20000220
    9398:	20002aa4 	.word	0x20002aa4
    939c:	5002a000 	.word	0x5002a000
    93a0:	5002b910 	.word	0x5002b910
    93a4:	ffff8fe9 	.word	0xffff8fe9

000093a8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    93a8:	4770      	bx	lr

000093aa <flash_device_base>:
    if (fd_id != FLASH_DEVICE_ID) {
    93aa:	b908      	cbnz	r0, 93b0 <flash_device_base+0x6>
    *ret = FLASH_DEVICE_BASE;
    93ac:	6008      	str	r0, [r1, #0]
    return 0;
    93ae:	4770      	bx	lr
        return -EINVAL;
    93b0:	f06f 0015 	mvn.w	r0, #21
}
    93b4:	4770      	bx	lr

000093b6 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    93b6:	b129      	cbz	r1, 93c4 <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    93b8:	2901      	cmp	r1, #1
    93ba:	bf0c      	ite	eq
    93bc:	2005      	moveq	r0, #5
    93be:	f06f 0015 	mvnne.w	r0, #21
    93c2:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    93c4:	2002      	movs	r0, #2
}
    93c6:	4770      	bx	lr

000093c8 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    93c8:	2000      	movs	r0, #0
    93ca:	4770      	bx	lr

000093cc <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    93cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    93d0:	460e      	mov	r6, r1
    93d2:	4617      	mov	r7, r2
    93d4:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    93d6:	4604      	mov	r4, r0
    93d8:	b928      	cbnz	r0, 93e6 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    93da:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    93de:	4640      	mov	r0, r8
    93e0:	b003      	add	sp, #12
    93e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    93e6:	2900      	cmp	r1, #0
    93e8:	d0f7      	beq.n	93da <bootutil_tlv_iter_begin+0xe>
    93ea:	2a00      	cmp	r2, #0
    93ec:	d0f5      	beq.n	93da <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    93ee:	68cb      	ldr	r3, [r1, #12]
    93f0:	890d      	ldrh	r5, [r1, #8]
    93f2:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    93f4:	2304      	movs	r3, #4
    93f6:	eb0d 0203 	add.w	r2, sp, r3
    93fa:	4629      	mov	r1, r5
    93fc:	4638      	mov	r0, r7
    93fe:	f001 f805 	bl	a40c <flash_area_read>
    9402:	4680      	mov	r8, r0
    9404:	2800      	cmp	r0, #0
    9406:	d1e8      	bne.n	93da <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    9408:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    940c:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    940e:	f646 1208 	movw	r2, #26888	; 0x6908
    9412:	4291      	cmp	r1, r2
    9414:	d123      	bne.n	945e <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    9416:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    941a:	4299      	cmp	r1, r3
    941c:	d1dd      	bne.n	93da <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    941e:	2304      	movs	r3, #4
    9420:	eb0d 0203 	add.w	r2, sp, r3
    9424:	4429      	add	r1, r5
    9426:	4638      	mov	r0, r7
    9428:	f000 fff0 	bl	a40c <flash_area_read>
    942c:	2800      	cmp	r0, #0
    942e:	d1d4      	bne.n	93da <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    9430:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9434:	f646 1307 	movw	r3, #26887	; 0x6907
    9438:	429a      	cmp	r2, r3
    943a:	d1ce      	bne.n	93da <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    943c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9440:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    9442:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9444:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    9448:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    944c:	442b      	add	r3, r5
    944e:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    9450:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9452:	4413      	add	r3, r2
    it->fap = fap;
    9454:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9458:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    945a:	6125      	str	r5, [r4, #16]
    return 0;
    945c:	e7bf      	b.n	93de <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    945e:	2b00      	cmp	r3, #0
    9460:	d0e6      	beq.n	9430 <bootutil_tlv_iter_begin+0x64>
    9462:	e7ba      	b.n	93da <bootutil_tlv_iter_begin+0xe>

00009464 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    9464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9468:	460f      	mov	r7, r1
    946a:	4690      	mov	r8, r2
    946c:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    946e:	4604      	mov	r4, r0
    9470:	b920      	cbnz	r0, 947c <bootutil_tlv_iter_next+0x18>
        return -1;
    9472:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    9476:	b003      	add	sp, #12
    9478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    947c:	6803      	ldr	r3, [r0, #0]
    947e:	2b00      	cmp	r3, #0
    9480:	d0f7      	beq.n	9472 <bootutil_tlv_iter_next+0xe>
    9482:	6843      	ldr	r3, [r0, #4]
    9484:	2b00      	cmp	r3, #0
    9486:	d0f4      	beq.n	9472 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    9488:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    948c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9490:	429a      	cmp	r2, r3
    9492:	d216      	bcs.n	94c2 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    9494:	6823      	ldr	r3, [r4, #0]
    9496:	895b      	ldrh	r3, [r3, #10]
    9498:	b123      	cbz	r3, 94a4 <bootutil_tlv_iter_next+0x40>
    949a:	68e3      	ldr	r3, [r4, #12]
    949c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    949e:	bf04      	itt	eq
    94a0:	3304      	addeq	r3, #4
    94a2:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    94a4:	2304      	movs	r3, #4
    94a6:	6921      	ldr	r1, [r4, #16]
    94a8:	6860      	ldr	r0, [r4, #4]
    94aa:	eb0d 0203 	add.w	r2, sp, r3
    94ae:	f000 ffad 	bl	a40c <flash_area_read>
        if (rc) {
    94b2:	2800      	cmp	r0, #0
    94b4:	d1dd      	bne.n	9472 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    94b6:	7aa3      	ldrb	r3, [r4, #10]
    94b8:	6925      	ldr	r5, [r4, #16]
    94ba:	b123      	cbz	r3, 94c6 <bootutil_tlv_iter_next+0x62>
    94bc:	68e3      	ldr	r3, [r4, #12]
    94be:	42ab      	cmp	r3, r5
    94c0:	d801      	bhi.n	94c6 <bootutil_tlv_iter_next+0x62>
            return 1;
    94c2:	2001      	movs	r0, #1
    94c4:	e7d7      	b.n	9476 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    94c6:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    94c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    94cc:	4549      	cmp	r1, r9
    94ce:	f102 0304 	add.w	r3, r2, #4
    94d2:	d003      	beq.n	94dc <bootutil_tlv_iter_next+0x78>
    94d4:	f8bd c004 	ldrh.w	ip, [sp, #4]
    94d8:	458c      	cmp	ip, r1
    94da:	d10b      	bne.n	94f4 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    94dc:	b116      	cbz	r6, 94e4 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    94de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    94e2:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    94e4:	3504      	adds	r5, #4
    94e6:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    94e8:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    94ec:	6922      	ldr	r2, [r4, #16]
    94ee:	441a      	add	r2, r3
    94f0:	6122      	str	r2, [r4, #16]
            return 0;
    94f2:	e7c0      	b.n	9476 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    94f4:	442b      	add	r3, r5
    94f6:	6123      	str	r3, [r4, #16]
    94f8:	e7c8      	b.n	948c <bootutil_tlv_iter_next+0x28>

000094fa <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    94fa:	f001 bacb 	b.w	aa94 <memcmp>

000094fe <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    94fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
    9502:	4358      	muls	r0, r3
}
    9504:	3030      	adds	r0, #48	; 0x30
    9506:	4770      	bx	lr

00009508 <boot_status_entries>:
	return fa->fa_id;
    9508:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    950a:	2b02      	cmp	r3, #2
    950c:	d006      	beq.n	951c <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    950e:	2b05      	cmp	r3, #5
    9510:	bf14      	ite	ne
    9512:	f04f 30ff 	movne.w	r0, #4294967295
    9516:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    951a:	4770      	bx	lr
    951c:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    9520:	4770      	bx	lr

00009522 <boot_status_off>:
{
    9522:	b510      	push	{r4, lr}
    9524:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    9526:	f000 ffef 	bl	a508 <flash_area_align>
    return flash_area_get_size(fap) - off_from_end;
    952a:	68a2      	ldr	r2, [r4, #8]
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    952c:	b2c3      	uxtb	r3, r0
    return flash_area_get_size(fap) - off_from_end;
    952e:	3a30      	subs	r2, #48	; 0x30
}
    9530:	f44f 70c0 	mov.w	r0, #384	; 0x180
    9534:	fb00 2013 	mls	r0, r0, r3, r2
    9538:	bd10      	pop	{r4, pc}

0000953a <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    953a:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    953c:	2201      	movs	r2, #1
    953e:	3920      	subs	r1, #32
    9540:	f001 bf2a 	b.w	b398 <boot_write_trailer_flag>

00009544 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    9544:	b513      	push	{r0, r1, r4, lr}
    9546:	4604      	mov	r4, r0
    9548:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    954a:	f001 feb7 	bl	b2bc <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    954e:	2304      	movs	r3, #4
    9550:	f1a0 0108 	sub.w	r1, r0, #8
    9554:	eb0d 0203 	add.w	r2, sp, r3
    9558:	4620      	mov	r0, r4
    955a:	f001 feef 	bl	b33c <boot_write_trailer>
}
    955e:	b002      	add	sp, #8
    9560:	bd10      	pop	{r4, pc}

00009562 <boot_read_image_headers>:
{
    9562:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9564:	4613      	mov	r3, r2
{
    9566:	460e      	mov	r6, r1
    9568:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    956a:	2100      	movs	r1, #0
    956c:	4602      	mov	r2, r0
{
    956e:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9570:	f7f7 fbe8 	bl	d44 <boot_read_image_header>
        if (rc != 0) {
    9574:	b950      	cbnz	r0, 958c <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9576:	462b      	mov	r3, r5
    9578:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    957c:	2101      	movs	r1, #1
    957e:	4620      	mov	r0, r4
    9580:	f7f7 fbe0 	bl	d44 <boot_read_image_header>
        if (rc != 0) {
    9584:	b110      	cbz	r0, 958c <boot_read_image_headers+0x2a>
                return 0;
    9586:	2e00      	cmp	r6, #0
    9588:	bf08      	it	eq
    958a:	2000      	moveq	r0, #0
}
    958c:	bd70      	pop	{r4, r5, r6, pc}

0000958e <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    958e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9590:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    9592:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    9594:	460d      	mov	r5, r1
    9596:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    9598:	f7ff ff0d 	bl	93b6 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    959c:	4669      	mov	r1, sp
    959e:	b2c0      	uxtb	r0, r0
    95a0:	f7f9 fa80 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
    95a4:	bb30      	cbnz	r0, 95f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    95a6:	232c      	movs	r3, #44	; 0x2c
    95a8:	fb03 4405 	mla	r4, r3, r5, r4
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    95ac:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    95ae:	68e3      	ldr	r3, [r4, #12]
    95b0:	8925      	ldrh	r5, [r4, #8]
    95b2:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    95b4:	2304      	movs	r3, #4
    95b6:	eb0d 0203 	add.w	r2, sp, r3
    95ba:	4629      	mov	r1, r5
    95bc:	f000 ff26 	bl	a40c <flash_area_read>
    95c0:	b9c0      	cbnz	r0, 95f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    95c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    95c6:	8964      	ldrh	r4, [r4, #10]
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    95c8:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    95ca:	f646 1308 	movw	r3, #26888	; 0x6908
    95ce:	429a      	cmp	r2, r3
    95d0:	d115      	bne.n	95fe <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    95d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    95d6:	429c      	cmp	r4, r3
    95d8:	d10c      	bne.n	95f4 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    95da:	2304      	movs	r3, #4
    95dc:	eb0d 0203 	add.w	r2, sp, r3
    95e0:	1961      	adds	r1, r4, r5
    95e2:	f000 ff13 	bl	a40c <flash_area_read>
    95e6:	b928      	cbnz	r0, 95f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    95e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    95ec:	f646 1307 	movw	r3, #26887	; 0x6907
    95f0:	429a      	cmp	r2, r3
    95f2:	d007      	beq.n	9604 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    95f4:	9800      	ldr	r0, [sp, #0]
    95f6:	f000 ff08 	bl	a40a <flash_area_close>
}
    95fa:	b002      	add	sp, #8
    95fc:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    95fe:	2c00      	cmp	r4, #0
    9600:	d0f2      	beq.n	95e8 <boot_read_image_size.constprop.0.isra.0+0x5a>
    9602:	e7f7      	b.n	95f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    9604:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9608:	4421      	add	r1, r4
    960a:	4429      	add	r1, r5
    960c:	6031      	str	r1, [r6, #0]
    rc = 0;
    960e:	e7f1      	b.n	95f4 <boot_read_image_size.constprop.0.isra.0+0x66>

00009610 <boot_read_sectors>:
{
    9610:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9612:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    9614:	4604      	mov	r4, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    9616:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9618:	a901      	add	r1, sp, #4
    961a:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    961c:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    961e:	f7f9 fa61 	bl	2ae4 <flash_area_get_sectors>
    if (rc != 0) {
    9622:	b958      	cbnz	r0, 963c <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    9624:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9626:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    9628:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    962a:	a901      	add	r1, sp, #4
    962c:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    962e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9630:	f7f9 fa58 	bl	2ae4 <flash_area_get_sectors>
    if (rc != 0) {
    9634:	4605      	mov	r5, r0
    9636:	b128      	cbz	r0, 9644 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    9638:	2509      	movs	r5, #9
    963a:	e000      	b.n	963e <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    963c:	2501      	movs	r5, #1
}
    963e:	4628      	mov	r0, r5
    9640:	b003      	add	sp, #12
    9642:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    9644:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    9646:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    9648:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    964a:	f000 ff5d 	bl	a508 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    964e:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    9650:	e7f5      	b.n	963e <boot_read_sectors+0x2e>

00009652 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    9652:	2301      	movs	r3, #1
    9654:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    9656:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    965a:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    965c:	2300      	movs	r3, #0
    bs->source = 0;
    965e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    9662:	4770      	bx	lr

00009664 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    9664:	7943      	ldrb	r3, [r0, #5]
    9666:	2b01      	cmp	r3, #1
    9668:	d107      	bne.n	967a <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    966a:	6803      	ldr	r3, [r0, #0]
    966c:	2b01      	cmp	r3, #1
    966e:	d104      	bne.n	967a <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    9670:	7900      	ldrb	r0, [r0, #4]
    9672:	1e43      	subs	r3, r0, #1
    9674:	4258      	negs	r0, r3
    9676:	4158      	adcs	r0, r3
    9678:	4770      	bx	lr
    967a:	2000      	movs	r0, #0
}
    967c:	4770      	bx	lr

0000967e <boot_write_status>:
{
    967e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9680:	4606      	mov	r6, r0
    9682:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    9684:	2002      	movs	r0, #2
    9686:	a901      	add	r1, sp, #4
    9688:	f7f9 fa0c 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
    968c:	bb38      	cbnz	r0, 96de <boot_write_status+0x60>
    off = boot_status_off(fap) +
    968e:	9801      	ldr	r0, [sp, #4]
    9690:	f7ff ff47 	bl	9522 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    9694:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    9696:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    9698:	4628      	mov	r0, r5
    969a:	f000 f931 	bl	9900 <boot_status_internal_off>
    off = boot_status_off(fap) +
    969e:	4404      	add	r4, r0
    align = flash_area_align(fap);
    96a0:	9801      	ldr	r0, [sp, #4]
    96a2:	f000 ff31 	bl	a508 <flash_area_align>
    96a6:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    96a8:	9801      	ldr	r0, [sp, #4]
    96aa:	f000 ff36 	bl	a51a <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    96ae:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    96b0:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    96b2:	eb0d 0002 	add.w	r0, sp, r2
    96b6:	f001 fa1f 	bl	aaf8 <memset>
    buf[0] = bs->state;
    96ba:	792b      	ldrb	r3, [r5, #4]
    96bc:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    96c0:	4621      	mov	r1, r4
    96c2:	9801      	ldr	r0, [sp, #4]
    96c4:	b2f3      	uxtb	r3, r6
    96c6:	aa02      	add	r2, sp, #8
    96c8:	f000 febc 	bl	a444 <flash_area_write>
    if (rc != 0) {
    96cc:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    96ce:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    96d0:	bf18      	it	ne
    96d2:	2401      	movne	r4, #1
    flash_area_close(fap);
    96d4:	f000 fe99 	bl	a40a <flash_area_close>
}
    96d8:	4620      	mov	r0, r4
    96da:	b004      	add	sp, #16
    96dc:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    96de:	2401      	movs	r4, #1
    96e0:	e7fa      	b.n	96d8 <boot_write_status+0x5a>

000096e2 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    96e2:	f000 bee2 	b.w	a4aa <flash_area_erase>

000096e6 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    96e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96ea:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    96ec:	2100      	movs	r1, #0
{
    96ee:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    96f0:	4608      	mov	r0, r1
    96f2:	f7ff fe60 	bl	93b6 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    96f6:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    96f8:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    96fa:	2000      	movs	r0, #0
    96fc:	f7ff fe5b 	bl	93b6 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    9700:	7833      	ldrb	r3, [r6, #0]
    9702:	42a3      	cmp	r3, r4
    9704:	d020      	beq.n	9748 <swap_erase_trailer_sectors+0x62>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    9706:	4283      	cmp	r3, r0
    9708:	d120      	bne.n	974c <swap_erase_trailer_sectors+0x66>
        slot = BOOT_SECONDARY_SLOT;
    970a:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    970c:	232c      	movs	r3, #44	; 0x2c
    970e:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    9712:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    9714:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    9716:	f7ff fef2 	bl	94fe <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    971a:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    971c:	4680      	mov	r8, r0
    total_sz = 0;
    971e:	2700      	movs	r7, #0
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    9720:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9722:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    9726:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    972a:	f8d2 9004 	ldr.w	r9, [r2, #4]
    972e:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    9730:	464a      	mov	r2, r9
    9732:	1ac9      	subs	r1, r1, r3
    9734:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    9736:	444f      	add	r7, r9
        rc = boot_erase_region(fap, off, sz);
    9738:	f7ff ffd3 	bl	96e2 <boot_erase_region>
    } while (total_sz < trailer_sz);
    973c:	45b8      	cmp	r8, r7
        sector--;
    973e:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    9742:	d8ed      	bhi.n	9720 <swap_erase_trailer_sectors+0x3a>

    return rc;
}
    9744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    9748:	2500      	movs	r5, #0
    974a:	e7df      	b.n	970c <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    974c:	2001      	movs	r0, #1
    974e:	e7f9      	b.n	9744 <swap_erase_trailer_sectors+0x5e>

00009750 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    9750:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9752:	4615      	mov	r5, r2
    9754:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    9756:	2005      	movs	r0, #5
    9758:	4669      	mov	r1, sp
    975a:	f001 fe30 	bl	b3be <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    975e:	79e9      	ldrb	r1, [r5, #7]
    9760:	2901      	cmp	r1, #1
    9762:	d003      	beq.n	976c <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    9764:	2200      	movs	r2, #0
    9766:	4620      	mov	r0, r4
    9768:	f001 fe3d 	bl	b3e6 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    976c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9770:	2b01      	cmp	r3, #1
    9772:	d102      	bne.n	977a <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    9774:	4620      	mov	r0, r4
    9776:	f001 fe19 	bl	b3ac <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    977a:	68a9      	ldr	r1, [r5, #8]
    977c:	4620      	mov	r0, r4
    977e:	f7ff fee1 	bl	9544 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    9782:	4620      	mov	r0, r4
    9784:	f7fc f93a 	bl	59fc <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    9788:	2000      	movs	r0, #0
    978a:	b003      	add	sp, #12
    978c:	bd30      	pop	{r4, r5, pc}

0000978e <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    978e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9790:	460d      	mov	r5, r1
    9792:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    9794:	f000 f8ef 	bl	9976 <swap_status_source>
    9798:	4604      	mov	r4, r0
    979a:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    979c:	b350      	cbz	r0, 97f4 <swap_read_status+0x66>
    979e:	2802      	cmp	r0, #2
    97a0:	d12d      	bne.n	97fe <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    97a2:	a901      	add	r1, sp, #4
    97a4:	f7f9 f97e 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
    97a8:	bb58      	cbnz	r0, 9802 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    97aa:	9801      	ldr	r0, [sp, #4]
    97ac:	462a      	mov	r2, r5
    97ae:	4631      	mov	r1, r6
    97b0:	f000 f859 	bl	9866 <swap_read_status_bytes>
    if (rc == 0) {
    97b4:	4604      	mov	r4, r0
    97b6:	b9d0      	cbnz	r0, 97ee <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    97b8:	9801      	ldr	r0, [sp, #4]
    97ba:	f001 fd7f 	bl	b2bc <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    97be:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    97c0:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    97c2:	f10d 0203 	add.w	r2, sp, #3
    97c6:	9801      	ldr	r0, [sp, #4]
    97c8:	f000 fe20 	bl	a40c <flash_area_read>
        if (rc != 0) {
    97cc:	4604      	mov	r4, r0
    97ce:	b9a0      	cbnz	r0, 97fa <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    97d0:	9801      	ldr	r0, [sp, #4]
    97d2:	2201      	movs	r2, #1
    97d4:	f10d 0103 	add.w	r1, sp, #3
    97d8:	f001 fd81 	bl	b2de <bootutil_buffer_is_erased>
    97dc:	b110      	cbz	r0, 97e4 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    97de:	2301      	movs	r3, #1
    97e0:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    97e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    97e8:	f003 030f 	and.w	r3, r3, #15
    97ec:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    97ee:	9801      	ldr	r0, [sp, #4]
    97f0:	f000 fe0b 	bl	a40a <flash_area_close>

    return rc;
}
    97f4:	4620      	mov	r0, r4
    97f6:	b002      	add	sp, #8
    97f8:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    97fa:	2401      	movs	r4, #1
    97fc:	e7f7      	b.n	97ee <swap_read_status+0x60>
    switch (bs->source) {
    97fe:	2407      	movs	r4, #7
    9800:	e7f8      	b.n	97f4 <swap_read_status+0x66>
        return BOOT_EFLASH;
    9802:	2401      	movs	r4, #1
    9804:	e7f6      	b.n	97f4 <swap_read_status+0x66>

00009806 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    9806:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    9808:	2002      	movs	r0, #2
    980a:	a901      	add	r1, sp, #4
    980c:	f7f9 f94a 	bl	2aa4 <flash_area_open>
            &fap);
    if (rc != 0) {
    9810:	b948      	cbnz	r0, 9826 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    9812:	9801      	ldr	r0, [sp, #4]
    9814:	f7ff fe91 	bl	953a <boot_write_copy_done>
    9818:	4604      	mov	r4, r0
    flash_area_close(fap);
    981a:	9801      	ldr	r0, [sp, #4]
    981c:	f000 fdf5 	bl	a40a <flash_area_close>
    return rc;
}
    9820:	4620      	mov	r0, r4
    9822:	b002      	add	sp, #8
    9824:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    9826:	2401      	movs	r4, #1
    9828:	e7fa      	b.n	9820 <swap_set_copy_done+0x1a>

0000982a <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    982a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    982c:	2002      	movs	r0, #2
    982e:	a901      	add	r1, sp, #4
    9830:	f7f9 f938 	bl	2aa4 <flash_area_open>
            &fap);
    if (rc != 0) {
    9834:	b9a8      	cbnz	r0, 9862 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    9836:	9801      	ldr	r0, [sp, #4]
    9838:	a902      	add	r1, sp, #8
    983a:	f7fc f8ed 	bl	5a18 <boot_read_swap_state>
    if (rc != 0) {
    983e:	4604      	mov	r4, r0
    9840:	b968      	cbnz	r0, 985e <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    9842:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9846:	2b03      	cmp	r3, #3
    9848:	d103      	bne.n	9852 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    984a:	9801      	ldr	r0, [sp, #4]
    984c:	f001 fdae 	bl	b3ac <boot_write_image_ok>
    9850:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    9852:	9801      	ldr	r0, [sp, #4]
    9854:	f000 fdd9 	bl	a40a <flash_area_close>
    return rc;
}
    9858:	4620      	mov	r0, r4
    985a:	b004      	add	sp, #16
    985c:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    985e:	2401      	movs	r4, #1
    9860:	e7f7      	b.n	9852 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    9862:	2401      	movs	r4, #1
    9864:	e7f8      	b.n	9858 <swap_set_image_ok+0x2e>

00009866 <swap_read_status_bytes>:
{
    9866:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    986a:	4607      	mov	r7, r0
    986c:	460c      	mov	r4, r1
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    986e:	4601      	mov	r1, r0
    9870:	2000      	movs	r0, #0
{
    9872:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    9874:	f7ff fe48 	bl	9508 <boot_status_entries>
    if (max_entries < 0) {
    9878:	1e05      	subs	r5, r0, #0
    987a:	db3d      	blt.n	98f8 <swap_read_status_bytes+0x92>
    off = boot_status_off(fap);
    987c:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
    987e:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
    9880:	f7ff fe4f 	bl	9522 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
    9884:	fa5f f984 	uxtb.w	r9, r4
    9888:	1e6b      	subs	r3, r5, #1
    988a:	fb09 0803 	mla	r8, r9, r3, r0
    found_idx = -1;
    988e:	f04f 34ff 	mov.w	r4, #4294967295
    for (i = max_entries; i > 0; i--) {
    9892:	b965      	cbnz	r5, 98ae <swap_read_status_bytes+0x48>
    if (found_idx == -1) {
    9894:	1c63      	adds	r3, r4, #1
    9896:	d006      	beq.n	98a6 <swap_read_status_bytes+0x40>
    } else if (found_idx < move_entries) {
    9898:	2c7f      	cmp	r4, #127	; 0x7f
    989a:	dc22      	bgt.n	98e2 <swap_read_status_bytes+0x7c>
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    989c:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    989e:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    98a2:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    98a4:	80b3      	strh	r3, [r6, #4]
}
    98a6:	4628      	mov	r0, r5
    98a8:	b002      	add	sp, #8
    98aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    98ae:	2301      	movs	r3, #1
    98b0:	f10d 0207 	add.w	r2, sp, #7
    98b4:	4641      	mov	r1, r8
    98b6:	4638      	mov	r0, r7
    98b8:	f000 fda8 	bl	a40c <flash_area_read>
        if (rc < 0) {
    98bc:	2800      	cmp	r0, #0
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    98be:	f105 3aff 	add.w	sl, r5, #4294967295
        if (rc < 0) {
    98c2:	db1b      	blt.n	98fc <swap_read_status_bytes+0x96>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    98c4:	2201      	movs	r2, #1
    98c6:	f10d 0107 	add.w	r1, sp, #7
    98ca:	4638      	mov	r0, r7
    98cc:	f001 fd07 	bl	b2de <bootutil_buffer_is_erased>
    98d0:	b918      	cbnz	r0, 98da <swap_read_status_bytes+0x74>
            if (found_idx == -1) {
    98d2:	f1b4 3fff 	cmp.w	r4, #4294967295
    98d6:	bf08      	it	eq
    98d8:	462c      	moveq	r4, r5
    98da:	eba8 0809 	sub.w	r8, r8, r9
    98de:	4655      	mov	r5, sl
    98e0:	e7d7      	b.n	9892 <swap_read_status_bytes+0x2c>
        bs->op = BOOT_STATUS_OP_SWAP;
    98e2:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    98e4:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
    98e6:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    98e8:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    98ea:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    98ee:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    98f0:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    98f2:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    98f4:	7134      	strb	r4, [r6, #4]
    98f6:	e7d6      	b.n	98a6 <swap_read_status_bytes+0x40>
        return BOOT_EBADARGS;
    98f8:	2507      	movs	r5, #7
    98fa:	e7d4      	b.n	98a6 <swap_read_status_bytes+0x40>
            return BOOT_EFLASH;
    98fc:	2501      	movs	r5, #1
    98fe:	e7d2      	b.n	98a6 <swap_read_status_bytes+0x40>

00009900 <boot_status_internal_off>:
{
    9900:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    9902:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    9904:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    9906:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    9908:	bf14      	ite	ne
    990a:	01cb      	lslne	r3, r1, #7
    990c:	2300      	moveq	r3, #0
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    990e:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    9912:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    9916:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    9918:	bf14      	ite	ne
    991a:	004c      	lslne	r4, r1, #1
    991c:	460c      	moveq	r4, r1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    991e:	3a01      	subs	r2, #1
}
    9920:	fb04 3002 	mla	r0, r4, r2, r3
    9924:	bd10      	pop	{r4, pc}

00009926 <boot_slots_compatible>:
{
    9926:	b530      	push	{r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
    9928:	6a82      	ldr	r2, [r0, #40]	; 0x28
    992a:	6d44      	ldr	r4, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    992c:	4294      	cmp	r4, r2
    992e:	d002      	beq.n	9936 <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    9930:	1c63      	adds	r3, r4, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    9932:	4293      	cmp	r3, r2
    9934:	d11b      	bne.n	996e <boot_slots_compatible+0x48>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    9936:	2a80      	cmp	r2, #128	; 0x80
    9938:	d819      	bhi.n	996e <boot_slots_compatible+0x48>
    for (i = 0; i < num_sectors_sec; i++) {
    993a:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    993c:	4619      	mov	r1, r3
    for (i = 0; i < num_sectors_sec; i++) {
    993e:	42a3      	cmp	r3, r4
    9940:	d109      	bne.n	9956 <boot_slots_compatible+0x30>
    if (num_sectors_pri > num_sectors_sec) {
    9942:	4293      	cmp	r3, r2
    9944:	d215      	bcs.n	9972 <boot_slots_compatible+0x4c>
    9946:	6a42      	ldr	r2, [r0, #36]	; 0x24
    9948:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    994c:	6858      	ldr	r0, [r3, #4]
    994e:	1a43      	subs	r3, r0, r1
    9950:	4258      	negs	r0, r3
    9952:	4158      	adcs	r0, r3
}
    9954:	bd30      	pop	{r4, r5, pc}
    9956:	6a41      	ldr	r1, [r0, #36]	; 0x24
    9958:	6d05      	ldr	r5, [r0, #80]	; 0x50
    995a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    995e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    9962:	6849      	ldr	r1, [r1, #4]
        if (sector_sz_pri != sector_sz_sec) {
    9964:	686d      	ldr	r5, [r5, #4]
    9966:	428d      	cmp	r5, r1
    9968:	d101      	bne.n	996e <boot_slots_compatible+0x48>
    for (i = 0; i < num_sectors_sec; i++) {
    996a:	3301      	adds	r3, #1
    996c:	e7e7      	b.n	993e <boot_slots_compatible+0x18>
        return 0;
    996e:	2000      	movs	r0, #0
    9970:	e7f0      	b.n	9954 <boot_slots_compatible+0x2e>
    return 1;
    9972:	2001      	movs	r0, #1
    9974:	e7ee      	b.n	9954 <boot_slots_compatible+0x2e>

00009976 <swap_status_source>:
{
    9976:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    9978:	2002      	movs	r0, #2
    997a:	4669      	mov	r1, sp
    997c:	f001 fd1f 	bl	b3be <boot_read_swap_state_by_id>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    9980:	a902      	add	r1, sp, #8
    9982:	2005      	movs	r0, #5
    9984:	f001 fd1b 	bl	b3be <boot_read_swap_state_by_id>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    9988:	f89d 3000 	ldrb.w	r3, [sp]
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    998c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    9990:	2b01      	cmp	r3, #1
    9992:	d10a      	bne.n	99aa <swap_status_source+0x34>
    9994:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9998:	2b03      	cmp	r3, #3
    999a:	d106      	bne.n	99aa <swap_status_source+0x34>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    999c:	3801      	subs	r0, #1
    999e:	bf18      	it	ne
    99a0:	2001      	movne	r0, #1
    99a2:	0040      	lsls	r0, r0, #1
}
    99a4:	b005      	add	sp, #20
    99a6:	f85d fb04 	ldr.w	pc, [sp], #4
    return BOOT_STATUS_SOURCE_NONE;
    99aa:	2000      	movs	r0, #0
    99ac:	e7fa      	b.n	99a4 <swap_status_source+0x2e>

000099ae <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    99ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
    99b2:	f89d 6018 	ldrb.w	r6, [sp, #24]
{
    99b6:	4607      	mov	r7, r0
	for (i = 0; i < len + padding; i++) {
    99b8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	uint16_t crc = initial_value;
    99bc:	4618      	mov	r0, r3

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    99be:	f04f 0c80 	mov.w	ip, #128	; 0x80
	for (i = 0; i < len + padding; i++) {
    99c2:	2300      	movs	r3, #0
    99c4:	429e      	cmp	r6, r3
    99c6:	d819      	bhi.n	99fc <crc16+0x4e>
			}
		}
	}

	return crc;
}
    99c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99cc:	4620      	mov	r0, r4
			crc = (crc << 1U);
    99ce:	0044      	lsls	r4, r0, #1
			if (i < len) {
    99d0:	428b      	cmp	r3, r1
			crc = (crc << 1U);
    99d2:	b2a4      	uxth	r4, r4
			if (i < len) {
    99d4:	d208      	bcs.n	99e8 <crc16+0x3a>
				crc |= !!(src[i] & (0x80U >> b));
    99d6:	f817 8003 	ldrb.w	r8, [r7, r3]
    99da:	fa2c fe05 	lsr.w	lr, ip, r5
    99de:	ea18 0f0e 	tst.w	r8, lr
    99e2:	bf18      	it	ne
    99e4:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    99e8:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
    99ea:	f105 0501 	add.w	r5, r5, #1
				crc = crc ^ polynomial;
    99ee:	bf48      	it	mi
    99f0:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    99f2:	2d08      	cmp	r5, #8
    99f4:	d1ea      	bne.n	99cc <crc16+0x1e>
	for (i = 0; i < len + padding; i++) {
    99f6:	3301      	adds	r3, #1
    99f8:	4620      	mov	r0, r4
    99fa:	e7e3      	b.n	99c4 <crc16+0x16>
		for (b = 0; b < 8; b++) {
    99fc:	2500      	movs	r5, #0
    99fe:	e7e6      	b.n	99ce <crc16+0x20>

00009a00 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9a00:	4603      	mov	r3, r0
    9a02:	b158      	cbz	r0, 9a1c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9a04:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9a06:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9a0a:	2a01      	cmp	r2, #1
    9a0c:	d003      	beq.n	9a16 <sys_notify_validate+0x16>
    9a0e:	2a03      	cmp	r2, #3
    9a10:	d104      	bne.n	9a1c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9a12:	6802      	ldr	r2, [r0, #0]
    9a14:	b112      	cbz	r2, 9a1c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9a16:	2000      	movs	r0, #0
    9a18:	6098      	str	r0, [r3, #8]
    9a1a:	4770      	bx	lr
    9a1c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9a20:	4770      	bx	lr

00009a22 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9a22:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9a24:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9a26:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    9a2a:	2a03      	cmp	r2, #3
    9a2c:	f04f 0200 	mov.w	r2, #0
{
    9a30:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9a32:	bf0c      	ite	eq
    9a34:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9a36:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9a38:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9a3a:	4770      	bx	lr

00009a3c <arch_printk_char_out>:
}
    9a3c:	2000      	movs	r0, #0
    9a3e:	4770      	bx	lr

00009a40 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    9a40:	b40f      	push	{r0, r1, r2, r3}
    9a42:	b507      	push	{r0, r1, r2, lr}
    9a44:	a904      	add	r1, sp, #16
    9a46:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9a4a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    9a4c:	f7f7 fc38 	bl	12c0 <vprintk>
	}
	va_end(ap);
}
    9a50:	b003      	add	sp, #12
    9a52:	f85d eb04 	ldr.w	lr, [sp], #4
    9a56:	b004      	add	sp, #16
    9a58:	4770      	bx	lr

00009a5a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9a5a:	b510      	push	{r4, lr}
	return list->head;
    9a5c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9a5e:	2200      	movs	r2, #0
    9a60:	b90b      	cbnz	r3, 9a66 <sys_slist_find_and_remove+0xc>
    9a62:	4618      	mov	r0, r3
    9a64:	e00b      	b.n	9a7e <sys_slist_find_and_remove+0x24>
    9a66:	428b      	cmp	r3, r1
    9a68:	d10f      	bne.n	9a8a <sys_slist_find_and_remove+0x30>
	return node->next;
    9a6a:	680b      	ldr	r3, [r1, #0]
	return list->tail;
    9a6c:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    9a6e:	b93a      	cbnz	r2, 9a80 <sys_slist_find_and_remove+0x26>
    9a70:	42a1      	cmp	r1, r4
	list->head = node;
    9a72:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    9a74:	d100      	bne.n	9a78 <sys_slist_find_and_remove+0x1e>
	list->tail = node;
    9a76:	6043      	str	r3, [r0, #4]
	parent->next = child;
    9a78:	2300      	movs	r3, #0
    9a7a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9a7c:	2001      	movs	r0, #1
    9a7e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    9a80:	42a1      	cmp	r1, r4
	parent->next = child;
    9a82:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9a84:	bf08      	it	eq
    9a86:	6042      	streq	r2, [r0, #4]
}
    9a88:	e7f6      	b.n	9a78 <sys_slist_find_and_remove+0x1e>
	return node->next;
    9a8a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9a8c:	681b      	ldr	r3, [r3, #0]
    9a8e:	e7e7      	b.n	9a60 <sys_slist_find_and_remove+0x6>

00009a90 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9a90:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9a92:	f013 0307 	ands.w	r3, r3, #7
    9a96:	d105      	bne.n	9aa4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9a98:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	bf0c      	ite	eq
    9a9e:	2000      	moveq	r0, #0
    9aa0:	2003      	movne	r0, #3
    9aa2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9aa4:	2b02      	cmp	r3, #2
    9aa6:	d105      	bne.n	9ab4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9aa8:	8b40      	ldrh	r0, [r0, #26]
    9aaa:	fab0 f080 	clz	r0, r0
    9aae:	0940      	lsrs	r0, r0, #5
    9ab0:	0080      	lsls	r0, r0, #2
    9ab2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9ab4:	2b01      	cmp	r3, #1
    9ab6:	d105      	bne.n	9ac4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9ab8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    9aba:	2b00      	cmp	r3, #0
    9abc:	bf0c      	ite	eq
    9abe:	2000      	moveq	r0, #0
    9ac0:	2005      	movne	r0, #5
    9ac2:	4770      	bx	lr
	int evt = EVT_NOP;
    9ac4:	2000      	movs	r0, #0
}
    9ac6:	4770      	bx	lr

00009ac8 <validate_args>:
{
    9ac8:	b510      	push	{r4, lr}
    9aca:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9acc:	b100      	cbz	r0, 9ad0 <validate_args+0x8>
    9ace:	b911      	cbnz	r1, 9ad6 <validate_args+0xe>
		return -EINVAL;
    9ad0:	f06f 0015 	mvn.w	r0, #21
}
    9ad4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    9ad6:	1d08      	adds	r0, r1, #4
    9ad8:	f7ff ff92 	bl	9a00 <sys_notify_validate>
	if ((rv == 0)
    9adc:	2800      	cmp	r0, #0
    9ade:	d1f9      	bne.n	9ad4 <validate_args+0xc>
	    && ((cli->notify.flags
    9ae0:	68a3      	ldr	r3, [r4, #8]
    9ae2:	2b03      	cmp	r3, #3
    9ae4:	d9f6      	bls.n	9ad4 <validate_args+0xc>
    9ae6:	e7f3      	b.n	9ad0 <validate_args+0x8>

00009ae8 <notify_one>:
{
    9ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9aec:	460d      	mov	r5, r1
    9aee:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9af0:	4619      	mov	r1, r3
    9af2:	1d28      	adds	r0, r5, #4
{
    9af4:	4690      	mov	r8, r2
    9af6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9af8:	f7ff ff93 	bl	9a22 <sys_notify_finalize>
	if (cb) {
    9afc:	4604      	mov	r4, r0
    9afe:	b138      	cbz	r0, 9b10 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9b00:	4633      	mov	r3, r6
    9b02:	4642      	mov	r2, r8
    9b04:	4629      	mov	r1, r5
    9b06:	4638      	mov	r0, r7
    9b08:	46a4      	mov	ip, r4
}
    9b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9b0e:	4760      	bx	ip
}
    9b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b14 <transition_complete>:
{
    9b14:	b410      	push	{r4}
	__asm__ volatile(
    9b16:	f04f 0420 	mov.w	r4, #32
    9b1a:	f3ef 8211 	mrs	r2, BASEPRI
    9b1e:	f384 8812 	msr	BASEPRI_MAX, r4
    9b22:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9b26:	6141      	str	r1, [r0, #20]
}
    9b28:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9b2a:	2101      	movs	r1, #1
    9b2c:	f7f7 bbd6 	b.w	12dc <process_event>

00009b30 <onoff_manager_init>:
{
    9b30:	b538      	push	{r3, r4, r5, lr}
    9b32:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9b34:	4605      	mov	r5, r0
    9b36:	b158      	cbz	r0, 9b50 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9b38:	b151      	cbz	r1, 9b50 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9b3a:	680b      	ldr	r3, [r1, #0]
    9b3c:	b143      	cbz	r3, 9b50 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9b3e:	684b      	ldr	r3, [r1, #4]
    9b40:	b133      	cbz	r3, 9b50 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9b42:	221c      	movs	r2, #28
    9b44:	2100      	movs	r1, #0
    9b46:	f000 ffd7 	bl	aaf8 <memset>
    9b4a:	612c      	str	r4, [r5, #16]
	return 0;
    9b4c:	2000      	movs	r0, #0
}
    9b4e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9b50:	f06f 0015 	mvn.w	r0, #21
    9b54:	e7fb      	b.n	9b4e <onoff_manager_init+0x1e>

00009b56 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9b56:	b570      	push	{r4, r5, r6, lr}
    9b58:	4605      	mov	r5, r0
    9b5a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9b5c:	f7ff ffb4 	bl	9ac8 <validate_args>

	if (rv < 0) {
    9b60:	1e04      	subs	r4, r0, #0
    9b62:	db15      	blt.n	9b90 <onoff_request+0x3a>
    9b64:	f04f 0320 	mov.w	r3, #32
    9b68:	f3ef 8211 	mrs	r2, BASEPRI
    9b6c:	f383 8812 	msr	BASEPRI_MAX, r3
    9b70:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9b74:	8b6b      	ldrh	r3, [r5, #26]
    9b76:	8b2c      	ldrh	r4, [r5, #24]
    9b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b7c:	428b      	cmp	r3, r1
    9b7e:	f004 0407 	and.w	r4, r4, #7
    9b82:	d107      	bne.n	9b94 <onoff_request+0x3e>
	__asm__ volatile(
    9b84:	f382 8811 	msr	BASEPRI, r2
    9b88:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    9b8c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    9b90:	4620      	mov	r0, r4
    9b92:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    9b94:	2c02      	cmp	r4, #2
    9b96:	d10c      	bne.n	9bb2 <onoff_request+0x5c>
		mgr->refs += 1U;
    9b98:	3301      	adds	r3, #1
    9b9a:	836b      	strh	r3, [r5, #26]
    9b9c:	f382 8811 	msr	BASEPRI, r2
    9ba0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    9ba4:	2300      	movs	r3, #0
    9ba6:	4622      	mov	r2, r4
    9ba8:	4631      	mov	r1, r6
    9baa:	4628      	mov	r0, r5
    9bac:	f7ff ff9c 	bl	9ae8 <notify_one>
    9bb0:	e7ee      	b.n	9b90 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    9bb2:	2c06      	cmp	r4, #6
    9bb4:	d814      	bhi.n	9be0 <onoff_request+0x8a>
    9bb6:	e8df f004 	tbb	[pc, r4]
    9bba:	1304      	.short	0x1304
    9bbc:	1a041313 	.word	0x1a041313
    9bc0:	04          	.byte	0x04
    9bc1:	00          	.byte	0x00
	parent->next = child;
    9bc2:	2300      	movs	r3, #0
    9bc4:	6033      	str	r3, [r6, #0]
	return list->tail;
    9bc6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    9bc8:	b93b      	cbnz	r3, 9bda <onoff_request+0x84>
	list->head = node;
    9bca:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    9bce:	b9ac      	cbnz	r4, 9bfc <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    9bd0:	2102      	movs	r1, #2
    9bd2:	4628      	mov	r0, r5
    9bd4:	f7f7 fb82 	bl	12dc <process_event>
    9bd8:	e7da      	b.n	9b90 <onoff_request+0x3a>
	parent->next = child;
    9bda:	601e      	str	r6, [r3, #0]
	list->tail = node;
    9bdc:	606e      	str	r6, [r5, #4]
}
    9bde:	e7f6      	b.n	9bce <onoff_request+0x78>
    9be0:	f382 8811 	msr	BASEPRI, r2
    9be4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    9be8:	f06f 0404 	mvn.w	r4, #4
    9bec:	e7d0      	b.n	9b90 <onoff_request+0x3a>
    9bee:	f382 8811 	msr	BASEPRI, r2
    9bf2:	f3bf 8f6f 	isb	sy
    9bf6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    9bfa:	e7c9      	b.n	9b90 <onoff_request+0x3a>
    9bfc:	f382 8811 	msr	BASEPRI, r2
    9c00:	f3bf 8f6f 	isb	sy
		if (notify) {
    9c04:	e7c4      	b.n	9b90 <onoff_request+0x3a>

00009c06 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    9c06:	b510      	push	{r4, lr}
	__asm__ volatile(
    9c08:	f04f 0320 	mov.w	r3, #32
    9c0c:	f3ef 8211 	mrs	r2, BASEPRI
    9c10:	f383 8812 	msr	BASEPRI_MAX, r3
    9c14:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c18:	8b04      	ldrh	r4, [r0, #24]
    9c1a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9c1e:	2c02      	cmp	r4, #2
    9c20:	d00a      	beq.n	9c38 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    9c22:	2c01      	cmp	r4, #1
    9c24:	bf0c      	ite	eq
    9c26:	f06f 0004 	mvneq.w	r0, #4
    9c2a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    9c2e:	f382 8811 	msr	BASEPRI, r2
    9c32:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    9c36:	e008      	b.n	9c4a <onoff_release+0x44>
	mgr->refs -= 1U;
    9c38:	8b43      	ldrh	r3, [r0, #26]
    9c3a:	3b01      	subs	r3, #1
    9c3c:	b29b      	uxth	r3, r3
    9c3e:	8343      	strh	r3, [r0, #26]
	if (stop) {
    9c40:	b923      	cbnz	r3, 9c4c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    9c42:	4621      	mov	r1, r4
    9c44:	f7f7 fb4a 	bl	12dc <process_event>
	int rv = state;
    9c48:	4620      	mov	r0, r4
}
    9c4a:	bd10      	pop	{r4, pc}
	int rv = state;
    9c4c:	4620      	mov	r0, r4
    9c4e:	e7ee      	b.n	9c2e <onoff_release+0x28>

00009c50 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    9c50:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    9c52:	b1b0      	cbz	r0, 9c82 <onoff_cancel+0x32>
    9c54:	b1a9      	cbz	r1, 9c82 <onoff_cancel+0x32>
	__asm__ volatile(
    9c56:	f04f 0220 	mov.w	r2, #32
    9c5a:	f3ef 8511 	mrs	r5, BASEPRI
    9c5e:	f382 8812 	msr	BASEPRI_MAX, r2
    9c62:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c66:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    9c68:	f7ff fef7 	bl	9a5a <sys_slist_find_and_remove>
    9c6c:	b130      	cbz	r0, 9c7c <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    9c6e:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    9c72:	f385 8811 	msr	BASEPRI, r5
    9c76:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9c7a:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    9c7c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9c80:	e7f7      	b.n	9c72 <onoff_cancel+0x22>
		return -EINVAL;
    9c82:	f06f 0015 	mvn.w	r0, #21
    9c86:	e7f8      	b.n	9c7a <onoff_cancel+0x2a>

00009c88 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9c88:	4604      	mov	r4, r0
    9c8a:	b508      	push	{r3, lr}
    9c8c:	4608      	mov	r0, r1
    9c8e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9c90:	461a      	mov	r2, r3
    9c92:	47a0      	blx	r4
	return z_impl_z_current_get();
    9c94:	f7fe ff82 	bl	8b9c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9c98:	f7f9 ffbc 	bl	3c14 <z_impl_k_thread_abort>

00009c9c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    9c9c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    9ca0:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    9ca2:	0840      	lsrs	r0, r0, #1
    9ca4:	4770      	bx	lr

00009ca6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    9ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ca8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    9caa:	f7ff fff7 	bl	9c9c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    9cae:	fab0 f080 	clz	r0, r0
    9cb2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    9cb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    9cba:	00ca      	lsls	r2, r1, #3
    9cbc:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    9cc0:	1d17      	adds	r7, r2, #4
{
    9cc2:	460c      	mov	r4, r1
    9cc4:	3206      	adds	r2, #6
    9cc6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    9cc8:	b956      	cbnz	r6, 9ce0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    9cca:	2101      	movs	r1, #1
    9ccc:	fa01 f000 	lsl.w	r0, r1, r0
    9cd0:	68d9      	ldr	r1, [r3, #12]
    9cd2:	4301      	orrs	r1, r0
    9cd4:	60d9      	str	r1, [r3, #12]
		b->next = c;
    9cd6:	f8cc 4010 	str.w	r4, [ip, #16]
    9cda:	53dd      	strh	r5, [r3, r7]
    9cdc:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    9cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    9ce0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    9ce2:	3104      	adds	r1, #4
    9ce4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    9ce6:	53d8      	strh	r0, [r3, r7]
    9ce8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9cec:	529e      	strh	r6, [r3, r2]
    9cee:	80c5      	strh	r5, [r0, #6]
    9cf0:	525d      	strh	r5, [r3, r1]
    9cf2:	e7f4      	b.n	9cde <free_list_add+0x38>

00009cf4 <free_list_remove_bidx>:
{
    9cf4:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    9cf6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    9cfa:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    9cfc:	4299      	cmp	r1, r3
    9cfe:	f102 0104 	add.w	r1, r2, #4
    9d02:	d10a      	bne.n	9d1a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    9d04:	2301      	movs	r3, #1
    9d06:	fa03 f202 	lsl.w	r2, r3, r2
    9d0a:	68c3      	ldr	r3, [r0, #12]
    9d0c:	ea23 0302 	bic.w	r3, r3, r2
    9d10:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    9d12:	2300      	movs	r3, #0
    9d14:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    9d18:	bd10      	pop	{r4, pc}
    9d1a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    9d1c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    9d20:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9d24:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    9d28:	80cb      	strh	r3, [r1, #6]
    9d2a:	8082      	strh	r2, [r0, #4]
}
    9d2c:	e7f4      	b.n	9d18 <free_list_remove_bidx+0x24>

00009d2e <free_list_remove>:
{
    9d2e:	b508      	push	{r3, lr}
    9d30:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    9d32:	f7ff ffb3 	bl	9c9c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9d36:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    9d3a:	f1c2 021f 	rsb	r2, r2, #31
    9d3e:	4618      	mov	r0, r3
}
    9d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    9d44:	f7ff bfd6 	b.w	9cf4 <free_list_remove_bidx>

00009d48 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    9d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d4c:	fab1 f581 	clz	r5, r1
    9d50:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    9d54:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    9d58:	4603      	mov	r3, r0
	if (b->next) {
    9d5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    9d5e:	460e      	mov	r6, r1
	if (b->next) {
    9d60:	b1c2      	cbz	r2, 9d94 <alloc_chunk+0x4c>
    9d62:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    9d64:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    9d68:	4618      	mov	r0, r3
    9d6a:	4621      	mov	r1, r4
    9d6c:	f7ff ff96 	bl	9c9c <chunk_size>
    9d70:	42b0      	cmp	r0, r6
    9d72:	d306      	bcc.n	9d82 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    9d74:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    9d76:	4618      	mov	r0, r3
    9d78:	f7ff ffbc 	bl	9cf4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    9d7c:	4620      	mov	r0, r4
    9d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    9d82:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    9d86:	3f01      	subs	r7, #1
    9d88:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    9d8a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    9d8e:	d001      	beq.n	9d94 <alloc_chunk+0x4c>
    9d90:	4282      	cmp	r2, r0
    9d92:	d1e7      	bne.n	9d64 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    9d94:	f1c5 0220 	rsb	r2, r5, #32
    9d98:	f04f 34ff 	mov.w	r4, #4294967295
    9d9c:	4094      	lsls	r4, r2
    9d9e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    9da0:	4014      	ands	r4, r2
    9da2:	d0eb      	beq.n	9d7c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    9da4:	fa94 f2a4 	rbit	r2, r4
    9da8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    9dac:	1d11      	adds	r1, r2, #4
    9dae:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    9db2:	4621      	mov	r1, r4
    9db4:	e7df      	b.n	9d76 <alloc_chunk+0x2e>

00009db6 <merge_chunks>:
{
    9db6:	b538      	push	{r3, r4, r5, lr}
    9db8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9dba:	f7ff ff6f 	bl	9c9c <chunk_size>
{
    9dbe:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9dc0:	4604      	mov	r4, r0
    9dc2:	4611      	mov	r1, r2
    9dc4:	4618      	mov	r0, r3
    9dc6:	f7ff ff69 	bl	9c9c <chunk_size>
		((uint16_t *)cmem)[f] = val;
    9dca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    9dce:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9dd0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    9dd2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    9dd4:	4618      	mov	r0, r3
    9dd6:	f7ff ff61 	bl	9c9c <chunk_size>
	void *cmem = &buf[c];
    9dda:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    9ddc:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    9de0:	bd38      	pop	{r3, r4, r5, pc}

00009de2 <split_chunks>:
{
    9de2:	b538      	push	{r3, r4, r5, lr}
    9de4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    9de6:	f7ff ff59 	bl	9c9c <chunk_size>
{
    9dea:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    9dec:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    9dee:	1a51      	subs	r1, r2, r1
    9df0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    9df4:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9df6:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    9df8:	8060      	strh	r0, [r4, #2]
    9dfa:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9dfe:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    9e00:	8044      	strh	r4, [r0, #2]
    9e02:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    9e06:	4618      	mov	r0, r3
    9e08:	4611      	mov	r1, r2
    9e0a:	f7ff ff47 	bl	9c9c <chunk_size>
	void *cmem = &buf[c];
    9e0e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    9e10:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    9e14:	bd38      	pop	{r3, r4, r5, pc}

00009e16 <free_chunk>:
{
    9e16:	b538      	push	{r3, r4, r5, lr}
    9e18:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    9e1a:	f7ff ff3f 	bl	9c9c <chunk_size>
    9e1e:	460c      	mov	r4, r1
    9e20:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    9e22:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9e26:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    9e28:	07da      	lsls	r2, r3, #31
    9e2a:	d40a      	bmi.n	9e42 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    9e2c:	4628      	mov	r0, r5
    9e2e:	f7ff ff7e 	bl	9d2e <free_list_remove>
	return c + chunk_size(h, c);
    9e32:	4621      	mov	r1, r4
    9e34:	4628      	mov	r0, r5
    9e36:	f7ff ff31 	bl	9c9c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    9e3a:	1822      	adds	r2, r4, r0
    9e3c:	4628      	mov	r0, r5
    9e3e:	f7ff ffba 	bl	9db6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    9e42:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9e46:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    9e48:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9e4c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    9e4e:	07db      	lsls	r3, r3, #31
    9e50:	d40c      	bmi.n	9e6c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    9e52:	4628      	mov	r0, r5
    9e54:	f7ff ff6b 	bl	9d2e <free_list_remove>
		return ((uint16_t *)cmem)[f];
    9e58:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    9e5c:	4622      	mov	r2, r4
    9e5e:	1a61      	subs	r1, r4, r1
    9e60:	4628      	mov	r0, r5
    9e62:	f7ff ffa8 	bl	9db6 <merge_chunks>
    9e66:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9e6a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    9e6c:	4621      	mov	r1, r4
    9e6e:	4628      	mov	r0, r5
}
    9e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    9e74:	f7ff bf17 	b.w	9ca6 <free_list_add>

00009e78 <sys_heap_free>:
	if (mem == NULL) {
    9e78:	b161      	cbz	r1, 9e94 <sys_heap_free+0x1c>
    9e7a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9e7c:	3904      	subs	r1, #4
    9e7e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    9e80:	f021 0307 	bic.w	r3, r1, #7
    9e84:	4403      	add	r3, r0
	free_chunk(h, c);
    9e86:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9e88:	885a      	ldrh	r2, [r3, #2]
    9e8a:	f022 0201 	bic.w	r2, r2, #1
    9e8e:	805a      	strh	r2, [r3, #2]
    9e90:	f7ff bfc1 	b.w	9e16 <free_chunk>
}
    9e94:	4770      	bx	lr

00009e96 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    9e96:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    9e98:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    9e9a:	b909      	cbnz	r1, 9ea0 <sys_heap_alloc+0xa>
		return NULL;
    9e9c:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
    9e9e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    9ea0:	68ab      	ldr	r3, [r5, #8]
    9ea2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    9ea6:	d9f9      	bls.n	9e9c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9ea8:	310b      	adds	r1, #11
    9eaa:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9eac:	4621      	mov	r1, r4
    9eae:	4628      	mov	r0, r5
    9eb0:	f7ff ff4a 	bl	9d48 <alloc_chunk>
	if (c == 0U) {
    9eb4:	4606      	mov	r6, r0
    9eb6:	2800      	cmp	r0, #0
    9eb8:	d0f0      	beq.n	9e9c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    9eba:	4601      	mov	r1, r0
    9ebc:	4628      	mov	r0, r5
    9ebe:	f7ff feed 	bl	9c9c <chunk_size>
    9ec2:	42a0      	cmp	r0, r4
    9ec4:	d907      	bls.n	9ed6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    9ec6:	1932      	adds	r2, r6, r4
    9ec8:	4628      	mov	r0, r5
    9eca:	f7ff ff8a 	bl	9de2 <split_chunks>
		free_list_add(h, c + chunk_sz);
    9ece:	4611      	mov	r1, r2
    9ed0:	4628      	mov	r0, r5
    9ed2:	f7ff fee8 	bl	9ca6 <free_list_add>
	void *cmem = &buf[c];
    9ed6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    9eda:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9edc:	8853      	ldrh	r3, [r2, #2]
    9ede:	f043 0301 	orr.w	r3, r3, #1
    9ee2:	8053      	strh	r3, [r2, #2]
    9ee4:	3004      	adds	r0, #4
	return chunk_mem(h, c);
    9ee6:	e7da      	b.n	9e9e <sys_heap_alloc+0x8>

00009ee8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9eec:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    9ef0:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    9ef4:	6806      	ldr	r6, [r0, #0]
{
    9ef6:	460f      	mov	r7, r1
    9ef8:	4614      	mov	r4, r2
	if (align != rew) {
    9efa:	d00c      	beq.n	9f16 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    9efc:	424b      	negs	r3, r1
    9efe:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    9f00:	2b04      	cmp	r3, #4
    9f02:	461a      	mov	r2, r3
    9f04:	464f      	mov	r7, r9
    9f06:	bf28      	it	cs
    9f08:	2204      	movcs	r2, #4
	rew = align & -align;
    9f0a:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    9f0c:	b964      	cbnz	r4, 9f28 <sys_heap_aligned_alloc+0x40>
		return NULL;
    9f0e:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    9f10:	4628      	mov	r0, r5
    9f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    9f16:	2904      	cmp	r1, #4
    9f18:	d804      	bhi.n	9f24 <sys_heap_aligned_alloc+0x3c>
}
    9f1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    9f1e:	4611      	mov	r1, r2
    9f20:	f7ff bfb9 	b.w	9e96 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    9f24:	2204      	movs	r2, #4
    9f26:	e7f1      	b.n	9f0c <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    9f28:	68b3      	ldr	r3, [r6, #8]
    9f2a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    9f2e:	d9ee      	bls.n	9f0e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9f30:	f104 010b 	add.w	r1, r4, #11
    9f34:	4439      	add	r1, r7
    9f36:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9f38:	08c9      	lsrs	r1, r1, #3
    9f3a:	4630      	mov	r0, r6
    9f3c:	f7ff ff04 	bl	9d48 <alloc_chunk>
	if (c0 == 0) {
    9f40:	4680      	mov	r8, r0
    9f42:	2800      	cmp	r0, #0
    9f44:	d0e3      	beq.n	9f0e <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    9f46:	f109 0504 	add.w	r5, r9, #4
    9f4a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    9f4e:	1e7b      	subs	r3, r7, #1
    9f50:	4435      	add	r5, r6
    9f52:	441d      	add	r5, r3
    9f54:	427f      	negs	r7, r7
    9f56:	403d      	ands	r5, r7
    9f58:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f5c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9f5e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f60:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9f62:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f64:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9f68:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9f6a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9f6e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9f72:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9f76:	d208      	bcs.n	9f8a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    9f78:	4601      	mov	r1, r0
    9f7a:	463a      	mov	r2, r7
    9f7c:	4630      	mov	r0, r6
    9f7e:	f7ff ff30 	bl	9de2 <split_chunks>
		free_list_add(h, c0);
    9f82:	4641      	mov	r1, r8
    9f84:	4630      	mov	r0, r6
    9f86:	f7ff fe8e 	bl	9ca6 <free_list_add>
	return c + chunk_size(h, c);
    9f8a:	4639      	mov	r1, r7
    9f8c:	4630      	mov	r0, r6
    9f8e:	f7ff fe85 	bl	9c9c <chunk_size>
    9f92:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9f94:	4284      	cmp	r4, r0
    9f96:	d207      	bcs.n	9fa8 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    9f98:	4630      	mov	r0, r6
    9f9a:	4622      	mov	r2, r4
    9f9c:	f7ff ff21 	bl	9de2 <split_chunks>
		free_list_add(h, c_end);
    9fa0:	4621      	mov	r1, r4
    9fa2:	4630      	mov	r0, r6
    9fa4:	f7ff fe7f 	bl	9ca6 <free_list_add>
	void *cmem = &buf[c];
    9fa8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9fac:	8873      	ldrh	r3, [r6, #2]
    9fae:	f043 0301 	orr.w	r3, r3, #1
    9fb2:	8073      	strh	r3, [r6, #2]
    9fb4:	e7ac      	b.n	9f10 <sys_heap_aligned_alloc+0x28>

00009fb6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    9fb6:	3a04      	subs	r2, #4
{
    9fb8:	b4f0      	push	{r4, r5, r6, r7}
    9fba:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9fbc:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9fbe:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9fc0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9fc4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    9fc8:	1a0e      	subs	r6, r1, r0
    9fca:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    9fcc:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    9fce:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    9fd2:	4604      	mov	r4, r0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    9fd4:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    9fd8:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    9fda:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    9fdc:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    9fde:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9fe2:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    9fe4:	f1c2 0220 	rsb	r2, r2, #32
    9fe8:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    9fea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    9fee:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    9ff2:	4294      	cmp	r4, r2
    9ff4:	d1fb      	bne.n	9fee <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9ff6:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9ff8:	f042 0201 	orr.w	r2, r2, #1
    9ffc:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    9ffe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a002:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a004:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    a006:	8007      	strh	r7, [r0, #0]
    a008:	8065      	strh	r5, [r4, #2]
    a00a:	1984      	adds	r4, r0, r6
    a00c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    a010:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    a014:	8067      	strh	r7, [r4, #2]
    a016:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a018:	885a      	ldrh	r2, [r3, #2]
    a01a:	f042 0201 	orr.w	r2, r2, #1
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    a01e:	bcf0      	pop	{r4, r5, r6, r7}
    a020:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
    a022:	f7ff be40 	b.w	9ca6 <free_list_add>

0000a026 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    a026:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    a02a:	4770      	bx	lr

0000a02c <ring_buf_is_empty>:
{
	return buf_size * (threshold / buf_size);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    a02c:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    a02e:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    a032:	42ac      	cmp	r4, r5
    a034:	d206      	bcs.n	a044 <ring_buf_is_empty+0x18>
		tail += get_rewind_value(buf->size,
    a036:	6906      	ldr	r6, [r0, #16]
    a038:	f7ff fff5 	bl	a026 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    a03c:	fbb0 f0f6 	udiv	r0, r0, r6
		tail += get_rewind_value(buf->size,
    a040:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    a044:	1b63      	subs	r3, r4, r5
    a046:	4258      	negs	r0, r3
    a048:	4158      	adcs	r0, r3
    a04a:	bd70      	pop	{r4, r5, r6, pc}

0000a04c <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a04e:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    a050:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a052:	6907      	ldr	r7, [r0, #16]
{
    a054:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a056:	b185      	cbz	r5, a07a <ring_buf_put_claim+0x2e>
    a058:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    a05a:	6823      	ldr	r3, [r4, #0]
    a05c:	443b      	add	r3, r7
    a05e:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    a060:	4290      	cmp	r0, r2
    a062:	bf28      	it	cs
    a064:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
    a066:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    a068:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
    a06a:	42b8      	cmp	r0, r7
    a06c:	bf28      	it	cs
    a06e:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    a070:	442b      	add	r3, r5

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    a072:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    a074:	600b      	str	r3, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    a076:	60a6      	str	r6, [r4, #8]

	return allocated;
}
    a078:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a07a:	fbb6 f5f7 	udiv	r5, r6, r7
    a07e:	fb07 6515 	mls	r5, r7, r5, r6
    a082:	e7ea      	b.n	a05a <ring_buf_put_claim+0xe>

0000a084 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    a084:	b570      	push	{r4, r5, r6, lr}
    a086:	4605      	mov	r5, r0
    a088:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    a08a:	f7ff ffcc 	bl	a026 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    a08e:	686e      	ldr	r6, [r5, #4]
    a090:	692a      	ldr	r2, [r5, #16]
    a092:	682b      	ldr	r3, [r5, #0]
    a094:	1931      	adds	r1, r6, r4
    a096:	4413      	add	r3, r2
    a098:	4299      	cmp	r1, r3
    a09a:	d80a      	bhi.n	a0b2 <ring_buf_put_finish+0x2e>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    a09c:	4286      	cmp	r6, r0
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    a09e:	bf92      	itee	ls
    a0a0:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
    a0a2:	fbb0 f3f2 	udivhi	r3, r0, r2
    a0a6:	4353      	mulhi	r3, r2
	}

	buf->tail += (size - rew);
    a0a8:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    a0aa:	e9c5 1101 	strd	r1, r1, [r5, #4]

	return 0;
    a0ae:	2000      	movs	r0, #0
}
    a0b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    a0b2:	f06f 0015 	mvn.w	r0, #21
    a0b6:	e7fb      	b.n	a0b0 <ring_buf_put_finish+0x2c>

0000a0b8 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    a0b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a0bc:	4680      	mov	r8, r0
    a0be:	460e      	mov	r6, r1
    a0c0:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    a0c2:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    a0c4:	462a      	mov	r2, r5
    a0c6:	a901      	add	r1, sp, #4
    a0c8:	4640      	mov	r0, r8
    a0ca:	f7ff ffbf 	bl	a04c <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    a0ce:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    a0d0:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    a0d2:	4602      	mov	r2, r0
    a0d4:	9801      	ldr	r0, [sp, #4]
    a0d6:	f000 fd04 	bl	aae2 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    a0da:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    a0dc:	4427      	add	r7, r4
		data += partial_size;
    a0de:	4426      	add	r6, r4
	} while (size && partial_size);
    a0e0:	d001      	beq.n	a0e6 <ring_buf_put+0x2e>
    a0e2:	2c00      	cmp	r4, #0
    a0e4:	d1ee      	bne.n	a0c4 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    a0e6:	4639      	mov	r1, r7
    a0e8:	4640      	mov	r0, r8
    a0ea:	f7ff ffcb 	bl	a084 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    a0ee:	4638      	mov	r0, r7
    a0f0:	b002      	add	sp, #8
    a0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a0f6 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    a0fa:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    a0fc:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    a0fe:	42b3      	cmp	r3, r6
{
    a100:	4604      	mov	r4, r0
    a102:	460f      	mov	r7, r1
    a104:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    a106:	d906      	bls.n	a116 <ring_buf_get_claim+0x20>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    a108:	6905      	ldr	r5, [r0, #16]
    a10a:	f7ff ff8c 	bl	a026 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    a10e:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
    a112:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a116:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    a118:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a11a:	6920      	ldr	r0, [r4, #16]
    a11c:	b185      	cbz	r5, a140 <ring_buf_get_claim+0x4a>
    a11e:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    a120:	1a76      	subs	r6, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    a122:	4546      	cmp	r6, r8
	trail_size = buf->size - tmp_head_mod;
    a124:	eba0 0005 	sub.w	r0, r0, r5
	granted_size = MIN(size, space);
    a128:	bf28      	it	cs
    a12a:	4646      	movcs	r6, r8

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);

	*data = &buf->buf.buf8[tmp_head_mod];
    a12c:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    a12e:	42b0      	cmp	r0, r6
    a130:	bf28      	it	cs
    a132:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    a134:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    a136:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    a138:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    a13a:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a140:	fbb1 f5f0 	udiv	r5, r1, r0
    a144:	fb00 1515 	mls	r5, r0, r5, r1
    a148:	e7ea      	b.n	a120 <ring_buf_get_claim+0x2a>

0000a14a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    a14a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    a14c:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    a14e:	68c3      	ldr	r3, [r0, #12]
    a150:	42b3      	cmp	r3, r6
{
    a152:	4605      	mov	r5, r0
    a154:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    a156:	d912      	bls.n	a17e <ring_buf_get_finish+0x34>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    a158:	6907      	ldr	r7, [r0, #16]
    a15a:	f7ff ff64 	bl	a026 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    a15e:	fbb0 f0f7 	udiv	r0, r0, r7
    a162:	4378      	muls	r0, r7
				       ring_buf_get_rewind_threshold());
		tail += rew;
    a164:	4406      	add	r6, r0
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    a166:	682b      	ldr	r3, [r5, #0]
    a168:	18e1      	adds	r1, r4, r3
    a16a:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    a16c:	bf9f      	itttt	ls
    a16e:	1a09      	subls	r1, r1, r0
    a170:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    a172:	60e9      	strls	r1, [r5, #12]

	return 0;
    a174:	2000      	movls	r0, #0
		return -EINVAL;
    a176:	bf88      	it	hi
    a178:	f06f 0015 	mvnhi.w	r0, #21
}
    a17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    a17e:	2000      	movs	r0, #0
    a180:	e7f1      	b.n	a166 <ring_buf_get_finish+0x1c>

0000a182 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    a182:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a186:	4680      	mov	r8, r0
    a188:	460d      	mov	r5, r1
    a18a:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    a18c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    a18e:	4632      	mov	r2, r6
    a190:	a901      	add	r1, sp, #4
    a192:	4640      	mov	r0, r8
    a194:	f7ff ffaf 	bl	a0f6 <ring_buf_get_claim>
    a198:	4604      	mov	r4, r0
		if (data) {
    a19a:	b12d      	cbz	r5, a1a8 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    a19c:	4602      	mov	r2, r0
    a19e:	9901      	ldr	r1, [sp, #4]
    a1a0:	4628      	mov	r0, r5
    a1a2:	f000 fc9e 	bl	aae2 <memcpy>
			data += partial_size;
    a1a6:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    a1a8:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    a1aa:	4427      	add	r7, r4
	} while (size && partial_size);
    a1ac:	d001      	beq.n	a1b2 <ring_buf_get+0x30>
    a1ae:	2c00      	cmp	r4, #0
    a1b0:	d1ed      	bne.n	a18e <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    a1b2:	4639      	mov	r1, r7
    a1b4:	4640      	mov	r0, r8
    a1b6:	f7ff ffc8 	bl	a14a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    a1ba:	4638      	mov	r0, r7
    a1bc:	b002      	add	sp, #8
    a1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a1c2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    a1c2:	4770      	bx	lr

0000a1c4 <usb_write>:
{
    a1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a1c8:	4606      	mov	r6, r0
    a1ca:	460f      	mov	r7, r1
    a1cc:	4690      	mov	r8, r2
    a1ce:	4699      	mov	r9, r3
    a1d0:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a1d2:	464b      	mov	r3, r9
    a1d4:	4642      	mov	r2, r8
    a1d6:	4639      	mov	r1, r7
    a1d8:	4630      	mov	r0, r6
    a1da:	f7fa fafb 	bl	47d4 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    a1de:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a1e2:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    a1e4:	d103      	bne.n	a1ee <usb_write+0x2a>
	z_impl_k_yield();
    a1e6:	f7fe fc39 	bl	8a5c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    a1ea:	3d01      	subs	r5, #1
    a1ec:	d1f1      	bne.n	a1d2 <usb_write+0xe>
}
    a1ee:	4620      	mov	r0, r4
    a1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a1f4 <usb_get_dev_data_by_cfg>:
	return list->head;
    a1f4:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a1f6:	b158      	cbz	r0, a210 <usb_get_dev_data_by_cfg+0x1c>
    a1f8:	3804      	subs	r0, #4
    a1fa:	b900      	cbnz	r0, a1fe <usb_get_dev_data_by_cfg+0xa>
    a1fc:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    a1fe:	6803      	ldr	r3, [r0, #0]

		if (cfg_cur == cfg) {
    a200:	685b      	ldr	r3, [r3, #4]
    a202:	428b      	cmp	r3, r1
    a204:	d004      	beq.n	a210 <usb_get_dev_data_by_cfg+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a206:	1d03      	adds	r3, r0, #4
    a208:	d001      	beq.n	a20e <usb_get_dev_data_by_cfg+0x1a>
	return node->next;
    a20a:	6840      	ldr	r0, [r0, #4]
    a20c:	e7f3      	b.n	a1f6 <usb_get_dev_data_by_cfg+0x2>
		}
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
    a20e:	4618      	mov	r0, r3
}
    a210:	4770      	bx	lr

0000a212 <usb_get_dev_data_by_iface>:
	return list->head;
    a212:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a214:	b168      	cbz	r0, a232 <usb_get_dev_data_by_iface+0x20>
    a216:	3804      	subs	r0, #4
    a218:	b900      	cbnz	r0, a21c <usb_get_dev_data_by_iface+0xa>
    a21a:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    a21c:	6803      	ldr	r3, [r0, #0]
		const struct usb_if_descriptor *if_desc =
    a21e:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    a220:	685b      	ldr	r3, [r3, #4]
    a222:	789b      	ldrb	r3, [r3, #2]
    a224:	428b      	cmp	r3, r1
    a226:	d004      	beq.n	a232 <usb_get_dev_data_by_iface+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a228:	1d03      	adds	r3, r0, #4
    a22a:	d001      	beq.n	a230 <usb_get_dev_data_by_iface+0x1e>
	return node->next;
    a22c:	6840      	ldr	r0, [r0, #4]
    a22e:	e7f1      	b.n	a214 <usb_get_dev_data_by_iface+0x2>
		}
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
    a230:	4618      	mov	r0, r3
}
    a232:	4770      	bx	lr

0000a234 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    a234:	b530      	push	{r4, r5, lr}
	return list->head;
    a236:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a238:	b198      	cbz	r0, a262 <usb_get_dev_data_by_ep+0x2e>
    a23a:	3804      	subs	r0, #4
    a23c:	b188      	cbz	r0, a262 <usb_get_dev_data_by_ep+0x2e>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    a23e:	6803      	ldr	r3, [r0, #0]
    a240:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    a242:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a244:	7f1d      	ldrb	r5, [r3, #28]
			if (ep_data[i].ep_addr == ep) {
    a246:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a248:	2300      	movs	r3, #0
    a24a:	b2dc      	uxtb	r4, r3
    a24c:	42a5      	cmp	r5, r4
    a24e:	d803      	bhi.n	a258 <usb_get_dev_data_by_ep+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a250:	1d03      	adds	r3, r0, #4
    a252:	d007      	beq.n	a264 <usb_get_dev_data_by_ep+0x30>
	return node->next;
    a254:	6840      	ldr	r0, [r0, #4]
    a256:	e7ef      	b.n	a238 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    a258:	3301      	adds	r3, #1
    a25a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    a25e:	428c      	cmp	r4, r1
    a260:	d1f3      	bne.n	a24a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    a262:	bd30      	pop	{r4, r5, pc}
	return NULL;
    a264:	4618      	mov	r0, r3
    a266:	e7fc      	b.n	a262 <usb_get_dev_data_by_ep+0x2e>

0000a268 <usb_transfer_is_busy>:
{
    a268:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    a26a:	f7f8 f8a9 	bl	23c0 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    a26e:	b128      	cbz	r0, a27c <usb_transfer_is_busy+0x14>
    a270:	6840      	ldr	r0, [r0, #4]
    a272:	f110 0f10 	cmn.w	r0, #16
    a276:	bf14      	ite	ne
    a278:	2000      	movne	r0, #0
    a27a:	2001      	moveq	r0, #1
}
    a27c:	bd08      	pop	{r3, pc}

0000a27e <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    a27e:	1c4b      	adds	r3, r1, #1
    a280:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    a282:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    a284:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    a286:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    a28a:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    a28c:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    a290:	4770      	bx	lr

0000a292 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    a292:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    a296:	6f80      	ldr	r0, [r0, #120]	; 0x78
    a298:	4718      	bx	r3

0000a29a <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    a29a:	6903      	ldr	r3, [r0, #16]
    a29c:	2200      	movs	r2, #0
    a29e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    a2a2:	4770      	bx	lr

0000a2a4 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a2a4:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    a2a6:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    a2aa:	b108      	cbz	r0, a2b0 <cdc_acm_irq_tx_ready+0xc>
    a2ac:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    a2b0:	4770      	bx	lr

0000a2b2 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    a2b2:	6903      	ldr	r3, [r0, #16]
    a2b4:	2200      	movs	r2, #0
    a2b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    a2ba:	4770      	bx	lr

0000a2bc <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    a2bc:	6903      	ldr	r3, [r0, #16]
}
    a2be:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    a2c2:	4770      	bx	lr

0000a2c4 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a2c4:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    a2c6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    a2ca:	b112      	cbz	r2, a2d2 <cdc_acm_irq_is_pending+0xe>
    a2cc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    a2d0:	b92a      	cbnz	r2, a2de <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    a2d2:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    a2d6:	b118      	cbz	r0, a2e0 <cdc_acm_irq_is_pending+0x1c>
    a2d8:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    a2dc:	4770      	bx	lr
		return 1;
    a2de:	2001      	movs	r0, #1
}
    a2e0:	4770      	bx	lr

0000a2e2 <cdc_acm_irq_update>:
}
    a2e2:	2001      	movs	r0, #1
    a2e4:	4770      	bx	lr

0000a2e6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a2e6:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    a2e8:	e9c3 1200 	strd	r1, r2, [r3]
}
    a2ec:	4770      	bx	lr

0000a2ee <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    a2ee:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a2f0:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    a2f2:	d007      	beq.n	a304 <cdc_acm_line_ctrl_get+0x16>
    a2f4:	2904      	cmp	r1, #4
    a2f6:	d00a      	beq.n	a30e <cdc_acm_line_ctrl_get+0x20>
    a2f8:	2901      	cmp	r1, #1
    a2fa:	d10d      	bne.n	a318 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    a2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
    a2fe:	6013      	str	r3, [r2, #0]
		return 0;
    a300:	2000      	movs	r0, #0
    a302:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    a304:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    a308:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    a30c:	e7f7      	b.n	a2fe <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    a30e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    a312:	f003 0301 	and.w	r3, r3, #1
		return 0;
    a316:	e7f2      	b.n	a2fe <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    a318:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    a31c:	4770      	bx	lr

0000a31e <cdc_acm_fifo_read>:
{
    a31e:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a320:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    a322:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    a324:	f7ff ff2d 	bl	a182 <ring_buf_get>
    a328:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    a32a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    a32c:	f7ff fe7e 	bl	a02c <ring_buf_is_empty>
    a330:	b110      	cbz	r0, a338 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    a332:	2300      	movs	r3, #0
    a334:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    a338:	4620      	mov	r0, r4
    a33a:	bd38      	pop	{r3, r4, r5, pc}

0000a33c <cdc_acm_poll_in>:
{
    a33c:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    a33e:	2201      	movs	r2, #1
    a340:	f7ff ffed 	bl	a31e <cdc_acm_fifo_read>
}
    a344:	3801      	subs	r0, #1
    a346:	bf18      	it	ne
    a348:	f04f 30ff 	movne.w	r0, #4294967295
    a34c:	bd08      	pop	{r3, pc}

0000a34e <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    a34e:	2940      	cmp	r1, #64	; 0x40
{
    a350:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a352:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    a354:	d03e      	beq.n	a3d4 <cdc_acm_line_ctrl_set+0x86>
    a356:	d813      	bhi.n	a380 <cdc_acm_line_ctrl_set+0x32>
    a358:	2910      	cmp	r1, #16
    a35a:	d031      	beq.n	a3c0 <cdc_acm_line_ctrl_set+0x72>
    a35c:	d806      	bhi.n	a36c <cdc_acm_line_ctrl_set+0x1e>
    a35e:	2901      	cmp	r1, #1
    a360:	d01e      	beq.n	a3a0 <cdc_acm_line_ctrl_set+0x52>
    a362:	2908      	cmp	r1, #8
    a364:	d01f      	beq.n	a3a6 <cdc_acm_line_ctrl_set+0x58>
    a366:	f06f 0012 	mvn.w	r0, #18
}
    a36a:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    a36c:	2920      	cmp	r1, #32
    a36e:	d1fa      	bne.n	a366 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    a370:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a374:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    a378:	b34a      	cbz	r2, a3ce <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    a37a:	f041 0104 	orr.w	r1, r1, #4
    a37e:	e026      	b.n	a3ce <cdc_acm_line_ctrl_set+0x80>
	switch (ctrl) {
    a380:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a384:	d02f      	beq.n	a3e6 <cdc_acm_line_ctrl_set+0x98>
    a386:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a38a:	d035      	beq.n	a3f8 <cdc_acm_line_ctrl_set+0xaa>
    a38c:	2980      	cmp	r1, #128	; 0x80
    a38e:	d1ea      	bne.n	a366 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    a390:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a394:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    a398:	b1ca      	cbz	r2, a3ce <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    a39a:	f041 0110 	orr.w	r1, r1, #16
    a39e:	e016      	b.n	a3ce <cdc_acm_line_ctrl_set+0x80>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    a3a0:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    a3a2:	2000      	movs	r0, #0
    a3a4:	e7e1      	b.n	a36a <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    a3a6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a3aa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    a3ae:	b10a      	cbz	r2, a3b4 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    a3b0:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    a3b4:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    a3b8:	2101      	movs	r1, #1
    a3ba:	f7f8 fb37 	bl	2a2c <cdc_acm_send_notification.isra.0>
		return 0;
    a3be:	e7f0      	b.n	a3a2 <cdc_acm_line_ctrl_set+0x54>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    a3c0:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a3c4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    a3c8:	b10a      	cbz	r2, a3ce <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    a3ca:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    a3ce:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a3d2:	e7f2      	b.n	a3ba <cdc_acm_line_ctrl_set+0x6c>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    a3d4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a3d8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    a3dc:	2a00      	cmp	r2, #0
    a3de:	d0f6      	beq.n	a3ce <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    a3e0:	f041 0108 	orr.w	r1, r1, #8
    a3e4:	e7f3      	b.n	a3ce <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    a3e6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a3ea:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    a3ee:	2a00      	cmp	r2, #0
    a3f0:	d0ed      	beq.n	a3ce <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    a3f2:	f041 0120 	orr.w	r1, r1, #32
    a3f6:	e7ea      	b.n	a3ce <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    a3f8:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    a3fc:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    a400:	2a00      	cmp	r2, #0
    a402:	d0e4      	beq.n	a3ce <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    a404:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a408:	e7e1      	b.n	a3ce <cdc_acm_line_ctrl_set+0x80>

0000a40a <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    a40a:	4770      	bx	lr

0000a40c <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a410:	1e0c      	subs	r4, r1, #0
    a412:	4605      	mov	r5, r0
    a414:	4617      	mov	r7, r2
    a416:	461e      	mov	r6, r3
    a418:	db10      	blt.n	a43c <flash_area_read+0x30>
    a41a:	6882      	ldr	r2, [r0, #8]
    a41c:	18e3      	adds	r3, r4, r3
    a41e:	4293      	cmp	r3, r2
    a420:	d80c      	bhi.n	a43c <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    a422:	68c0      	ldr	r0, [r0, #12]
    a424:	f7fd fc6e 	bl	7d04 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    a428:	6869      	ldr	r1, [r5, #4]
    a42a:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    a42c:	6883      	ldr	r3, [r0, #8]
    a42e:	681c      	ldr	r4, [r3, #0]
    a430:	463a      	mov	r2, r7
    a432:	4633      	mov	r3, r6
    a434:	46a4      	mov	ip, r4
}
    a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a43a:	4760      	bx	ip
    a43c:	f06f 0015 	mvn.w	r0, #21
    a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a444 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    a444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a448:	f1b1 0900 	subs.w	r9, r1, #0
    a44c:	4680      	mov	r8, r0
    a44e:	4617      	mov	r7, r2
    a450:	461e      	mov	r6, r3
    a452:	db27      	blt.n	a4a4 <flash_area_write+0x60>
    a454:	6882      	ldr	r2, [r0, #8]
    a456:	444b      	add	r3, r9
    a458:	4293      	cmp	r3, r2
    a45a:	d823      	bhi.n	a4a4 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    a45c:	68c0      	ldr	r0, [r0, #12]
    a45e:	f7fd fc51 	bl	7d04 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    a462:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a466:	4605      	mov	r5, r0
    a468:	4499      	add	r9, r3
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    a46a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    a46e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a472:	b96b      	cbnz	r3, a490 <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    a474:	f8d8 4004 	ldr.w	r4, [r8, #4]
    a478:	4633      	mov	r3, r6
    a47a:	463a      	mov	r2, r7
    a47c:	4649      	mov	r1, r9
    a47e:	4628      	mov	r0, r5
    a480:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    a482:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    a486:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    a488:	b943      	cbnz	r3, a49c <flash_area_write+0x58>

	return rc;
}
    a48a:	4620      	mov	r0, r4
    a48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    a490:	2100      	movs	r1, #0
    a492:	4798      	blx	r3
		if (rc) {
    a494:	4604      	mov	r4, r0
    a496:	2800      	cmp	r0, #0
    a498:	d0ec      	beq.n	a474 <flash_area_write+0x30>
    a49a:	e7f6      	b.n	a48a <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
    a49c:	2101      	movs	r1, #1
    a49e:	4628      	mov	r0, r5
    a4a0:	4798      	blx	r3
    a4a2:	e7f2      	b.n	a48a <flash_area_write+0x46>
		return -EINVAL;
    a4a4:	f06f 0415 	mvn.w	r4, #21
    a4a8:	e7ef      	b.n	a48a <flash_area_write+0x46>

0000a4aa <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    a4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4ae:	1e0c      	subs	r4, r1, #0
    a4b0:	4605      	mov	r5, r0
    a4b2:	4617      	mov	r7, r2
    a4b4:	db25      	blt.n	a502 <flash_area_erase+0x58>
    a4b6:	18a3      	adds	r3, r4, r2
    a4b8:	6882      	ldr	r2, [r0, #8]
    a4ba:	4293      	cmp	r3, r2
    a4bc:	d821      	bhi.n	a502 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    a4be:	68c0      	ldr	r0, [r0, #12]
    a4c0:	f7fd fc20 	bl	7d04 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    a4c4:	686d      	ldr	r5, [r5, #4]
    a4c6:	4606      	mov	r6, r0
    a4c8:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    a4ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    a4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a4d2:	b963      	cbnz	r3, a4ee <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    a4d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a4d8:	463a      	mov	r2, r7
    a4da:	4629      	mov	r1, r5
    a4dc:	4630      	mov	r0, r6
    a4de:	4798      	blx	r3

	if (api->write_protection != NULL) {
    a4e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    a4e4:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    a4e6:	b943      	cbnz	r3, a4fa <flash_area_erase+0x50>

	return rc;
}
    a4e8:	4620      	mov	r0, r4
    a4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    a4ee:	2100      	movs	r1, #0
    a4f0:	4798      	blx	r3
		if (rc) {
    a4f2:	4604      	mov	r4, r0
    a4f4:	2800      	cmp	r0, #0
    a4f6:	d0ed      	beq.n	a4d4 <flash_area_erase+0x2a>
    a4f8:	e7f6      	b.n	a4e8 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    a4fa:	2101      	movs	r1, #1
    a4fc:	4630      	mov	r0, r6
    a4fe:	4798      	blx	r3
    a500:	e7f2      	b.n	a4e8 <flash_area_erase+0x3e>
		return -EINVAL;
    a502:	f06f 0415 	mvn.w	r4, #21
    a506:	e7ef      	b.n	a4e8 <flash_area_erase+0x3e>

0000a508 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    a508:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    a50a:	68c0      	ldr	r0, [r0, #12]
    a50c:	f7fd fbfa 	bl	7d04 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    a510:	6883      	ldr	r3, [r0, #8]
    a512:	691b      	ldr	r3, [r3, #16]
    a514:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    a516:	6800      	ldr	r0, [r0, #0]
    a518:	bd08      	pop	{r3, pc}

0000a51a <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    a51a:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    a51c:	68c0      	ldr	r0, [r0, #12]
    a51e:	f7fd fbf1 	bl	7d04 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    a522:	6883      	ldr	r3, [r0, #8]
    a524:	691b      	ldr	r3, [r3, #16]
    a526:	4798      	blx	r3

	return param->erase_value;
}
    a528:	7900      	ldrb	r0, [r0, #4]
    a52a:	bd08      	pop	{r3, pc}

0000a52c <get_sectors_cb>:
{
    a52c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    a52e:	6802      	ldr	r2, [r0, #0]
    a530:	684c      	ldr	r4, [r1, #4]
    a532:	42a2      	cmp	r2, r4
    a534:	d201      	bcs.n	a53a <get_sectors_cb+0xe>
		*bail_value = true;
    a536:	2001      	movs	r0, #1
}
    a538:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    a53a:	688b      	ldr	r3, [r1, #8]
    a53c:	4423      	add	r3, r4
    a53e:	429a      	cmp	r2, r3
    a540:	d301      	bcc.n	a546 <get_sectors_cb+0x1a>
		*bail_value = false;
    a542:	2000      	movs	r0, #0
    a544:	e7f8      	b.n	a538 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    a546:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
    a54a:	694e      	ldr	r6, [r1, #20]
    a54c:	42b3      	cmp	r3, r6
    a54e:	d303      	bcc.n	a558 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    a550:	f06f 030b 	mvn.w	r3, #11
    a554:	618b      	str	r3, [r1, #24]
		return true;
    a556:	e7f4      	b.n	a542 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    a558:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    a55c:	1b12      	subs	r2, r2, r4
    a55e:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    a562:	6842      	ldr	r2, [r0, #4]
    a564:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    a566:	3301      	adds	r3, #1
    a568:	610b      	str	r3, [r1, #16]
	return true;
    a56a:	e7e4      	b.n	a536 <get_sectors_cb+0xa>

0000a56c <abort_function>:
{
    a56c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    a56e:	2000      	movs	r0, #0
    a570:	f7f7 f9f4 	bl	195c <sys_reboot>

0000a574 <console_write>:
{
    a574:	b570      	push	{r4, r5, r6, lr}
    a576:	4606      	mov	r6, r0
    a578:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    a57a:	2400      	movs	r4, #0
    a57c:	42ac      	cmp	r4, r5
    a57e:	db00      	blt.n	a582 <console_write+0xe>
}
    a580:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    a582:	5d30      	ldrb	r0, [r6, r4]
    a584:	f7f8 fbfe 	bl	2d84 <console_out>
    a588:	3001      	adds	r0, #1
    a58a:	d0f9      	beq.n	a580 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    a58c:	3401      	adds	r4, #1
    a58e:	e7f5      	b.n	a57c <console_write+0x8>

0000a590 <u32toa>:
{
    a590:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    a592:	2301      	movs	r3, #1
        d *= 10;
    a594:	240a      	movs	r4, #10
    while (val / d >= 10) {
    a596:	fbb1 f2f3 	udiv	r2, r1, r3
    a59a:	2a09      	cmp	r2, #9
    a59c:	d806      	bhi.n	a5ac <u32toa+0x1c>
    dst = tgt;
    a59e:	4602      	mov	r2, r0
    int n = 0;
    a5a0:	2500      	movs	r5, #0
        d /= 10;
    a5a2:	260a      	movs	r6, #10
    while (d) {
    a5a4:	b923      	cbnz	r3, a5b0 <u32toa+0x20>
    *dst = '\0';
    a5a6:	7013      	strb	r3, [r2, #0]
}
    a5a8:	1a10      	subs	r0, r2, r0
    a5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    a5ac:	4363      	muls	r3, r4
    a5ae:	e7f2      	b.n	a596 <u32toa+0x6>
        dgt = val / d;
    a5b0:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    a5b4:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    a5b8:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    a5bc:	b91d      	cbnz	r5, a5c6 <u32toa+0x36>
    a5be:	4299      	cmp	r1, r3
    a5c0:	d201      	bcs.n	a5c6 <u32toa+0x36>
    a5c2:	2b09      	cmp	r3, #9
    a5c4:	d803      	bhi.n	a5ce <u32toa+0x3e>
            *dst++ = dgt + '0';
    a5c6:	3430      	adds	r4, #48	; 0x30
    a5c8:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    a5cc:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    a5ce:	4663      	mov	r3, ip
    a5d0:	4639      	mov	r1, r7
    a5d2:	e7e7      	b.n	a5a4 <u32toa+0x14>

0000a5d4 <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_state_t *state,
		void *const result, uint32_t result_len)
{
    a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cbor_trace();
	cbor_assert(result_len != 0, "0-length result not supported.\n");
	cbor_assert(result != NULL, NULL);

	FAIL_IF((state->elem_count == 0) \
    a5d6:	6883      	ldr	r3, [r0, #8]
{
    a5d8:	4604      	mov	r4, r0
    a5da:	460d      	mov	r5, r1
    a5dc:	4617      	mov	r7, r2
	FAIL_IF((state->elem_count == 0) \
    a5de:	b303      	cbz	r3, a622 <value_extract+0x4e>
    a5e0:	6803      	ldr	r3, [r0, #0]
    a5e2:	68c1      	ldr	r1, [r0, #12]
    a5e4:	428b      	cmp	r3, r1
    a5e6:	d21c      	bcs.n	a622 <value_extract+0x4e>
		|| (state->payload >= state->payload_end));

	uint8_t *u8_result  = (uint8_t *)result;
	uint8_t additional = ADDITIONAL(*state->payload);
    a5e8:	781e      	ldrb	r6, [r3, #0]

	state->payload_bak = state->payload;
    a5ea:	6043      	str	r3, [r0, #4]
	(state->payload)++;
    a5ec:	3301      	adds	r3, #1
    a5ee:	6003      	str	r3, [r0, #0]
	uint8_t additional = ADDITIONAL(*state->payload);
    a5f0:	f006 061f 	and.w	r6, r6, #31

	memset(result, 0, result_len);
    a5f4:	2100      	movs	r1, #0
    a5f6:	4628      	mov	r0, r5
    a5f8:	f000 fa7e 	bl	aaf8 <memset>
	if (additional <= VALUE_IN_HEADER) {
    a5fc:	2e17      	cmp	r6, #23
    a5fe:	d805      	bhi.n	a60c <value_extract+0x38>
#ifdef CONFIG_BIG_ENDIAN
		u8_result[result_len - 1] = additional;
#else
		u8_result[0] = additional;
    a600:	702e      	strb	r6, [r5, #0]
#endif /* CONFIG_BIG_ENDIAN */

		(state->payload) += len;
	}

	(state->elem_count)--;
    a602:	68a3      	ldr	r3, [r4, #8]
    a604:	3b01      	subs	r3, #1
    a606:	60a3      	str	r3, [r4, #8]
	return true;
    a608:	2001      	movs	r0, #1
    a60a:	e00b      	b.n	a624 <value_extract+0x50>
	if (24 <= additional && additional <= 27) {
    a60c:	3e18      	subs	r6, #24
    a60e:	b2f3      	uxtb	r3, r6
    a610:	2b03      	cmp	r3, #3
		FAIL_AND_DECR_IF(len > result_len);
    a612:	6821      	ldr	r1, [r4, #0]
	if (24 <= additional && additional <= 27) {
    a614:	d807      	bhi.n	a626 <value_extract+0x52>
		return 1 << (additional - 24);
    a616:	2301      	movs	r3, #1
    a618:	40b3      	lsls	r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    a61a:	429f      	cmp	r7, r3
    a61c:	d204      	bcs.n	a628 <value_extract+0x54>
    a61e:	3901      	subs	r1, #1
    a620:	6021      	str	r1, [r4, #0]
	FAIL_IF((state->elem_count == 0) \
    a622:	2000      	movs	r0, #0
}
    a624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
    a626:	2300      	movs	r3, #0
		FAIL_AND_DECR_IF((state->payload + len)
    a628:	68e0      	ldr	r0, [r4, #12]
    a62a:	18ca      	adds	r2, r1, r3
    a62c:	4290      	cmp	r0, r2
    a62e:	d3f6      	bcc.n	a61e <value_extract+0x4a>
    a630:	1e59      	subs	r1, r3, #1
    a632:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    a634:	1c48      	adds	r0, r1, #1
			u8_result[i] = (state->payload)[len - i - 1];
    a636:	6822      	ldr	r2, [r4, #0]
		for (uint32_t i = 0; i < len; i++) {
    a638:	d102      	bne.n	a640 <value_extract+0x6c>
		(state->payload) += len;
    a63a:	441a      	add	r2, r3
    a63c:	6022      	str	r2, [r4, #0]
    a63e:	e7e0      	b.n	a602 <value_extract+0x2e>
			u8_result[i] = (state->payload)[len - i - 1];
    a640:	5c52      	ldrb	r2, [r2, r1]
    a642:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    a646:	3901      	subs	r1, #1
    a648:	e7f4      	b.n	a634 <value_extract+0x60>

0000a64a <strx_start_decode>:
}


static bool strx_start_decode(cbor_state_t *state,
		cbor_string_type_t *result, cbor_major_type_t exp_major_type)
{
    a64a:	b538      	push	{r3, r4, r5, lr}
	FAIL_IF(state->payload >= state->payload_end);
    a64c:	6803      	ldr	r3, [r0, #0]
{
    a64e:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    a650:	68c1      	ldr	r1, [r0, #12]
    a652:	428b      	cmp	r3, r1
{
    a654:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    a656:	d213      	bcs.n	a680 <strx_start_decode+0x36>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a658:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    a65a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    a65e:	d10f      	bne.n	a680 <strx_start_decode+0x36>
	if (!value_extract(state, result, 4)) {
    a660:	2204      	movs	r2, #4
    a662:	18a9      	adds	r1, r5, r2
    a664:	f7ff ffb6 	bl	a5d4 <value_extract>
		FAIL();
	}

	if (!uint32_decode(state, &result->len)) {
    a668:	b150      	cbz	r0, a680 <strx_start_decode+0x36>
		FAIL();
	}

	if (result->len > (state->payload_end - state->payload)) {
    a66a:	6822      	ldr	r2, [r4, #0]
    a66c:	68e3      	ldr	r3, [r4, #12]
    a66e:	6869      	ldr	r1, [r5, #4]
    a670:	1a9b      	subs	r3, r3, r2
    a672:	4299      	cmp	r1, r3
    a674:	d906      	bls.n	a684 <strx_start_decode+0x3a>
		cbor_print("error: 0x%x > 0x%x\r\n",
		(uint32_t)result->len,
		(uint32_t)(state->payload_end - state->payload));
		FAIL_RESTORE();
    a676:	6863      	ldr	r3, [r4, #4]
    a678:	6023      	str	r3, [r4, #0]
    a67a:	68a3      	ldr	r3, [r4, #8]
    a67c:	3301      	adds	r3, #1
    a67e:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    a680:	2000      	movs	r0, #0
	}

	result->value = state->payload;
	return true;
}
    a682:	bd38      	pop	{r3, r4, r5, pc}
	result->value = state->payload;
    a684:	602a      	str	r2, [r5, #0]
	return true;
    a686:	e7fc      	b.n	a682 <strx_start_decode+0x38>

0000a688 <list_map_start_decode>:


static bool list_map_start_decode(cbor_state_t *state,
		cbor_major_type_t exp_major_type)
{
	FAIL_IF(state->payload >= state->payload_end);
    a688:	6803      	ldr	r3, [r0, #0]
    a68a:	68c2      	ldr	r2, [r0, #12]
    a68c:	4293      	cmp	r3, r2
{
    a68e:	b513      	push	{r0, r1, r4, lr}
    a690:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    a692:	d213      	bcs.n	a6bc <list_map_start_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a694:	781b      	ldrb	r3, [r3, #0]
	uint32_t new_elem_count;

	if (major_type != exp_major_type) {
    a696:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    a69a:	d10f      	bne.n	a6bc <list_map_start_decode+0x34>
	if (!value_extract(state, result, 4)) {
    a69c:	2204      	movs	r2, #4
    a69e:	eb0d 0102 	add.w	r1, sp, r2
    a6a2:	f7ff ff97 	bl	a5d4 <value_extract>
		FAIL();
	}

	if (!uint32_decode(state, &new_elem_count)) {
    a6a6:	b148      	cbz	r0, a6bc <list_map_start_decode+0x34>
		FAIL();
	}

	if (!new_backup(state, new_elem_count)) {
    a6a8:	9901      	ldr	r1, [sp, #4]
    a6aa:	4620      	mov	r0, r4
    a6ac:	f000 f956 	bl	a95c <new_backup>
    a6b0:	b928      	cbnz	r0, a6be <list_map_start_decode+0x36>
		FAIL_RESTORE();
    a6b2:	6863      	ldr	r3, [r4, #4]
    a6b4:	6023      	str	r3, [r4, #0]
    a6b6:	68a3      	ldr	r3, [r4, #8]
    a6b8:	3301      	adds	r3, #1
    a6ba:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    a6bc:	2000      	movs	r0, #0
	}

	return true;
}
    a6be:	b002      	add	sp, #8
    a6c0:	bd10      	pop	{r4, pc}

0000a6c2 <intx32_decode>:
	FAIL_IF(state->payload >= state->payload_end);
    a6c2:	6803      	ldr	r3, [r0, #0]
    a6c4:	68c2      	ldr	r2, [r0, #12]
    a6c6:	4293      	cmp	r3, r2
{
    a6c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a6ca:	4604      	mov	r4, r0
    a6cc:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    a6ce:	d212      	bcs.n	a6f6 <intx32_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a6d0:	781b      	ldrb	r3, [r3, #0]
	if (major_type != CBOR_MAJOR_TYPE_PINT
    a6d2:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a6d4:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    a6d8:	d80d      	bhi.n	a6f6 <intx32_decode+0x34>
	if (!value_extract(state, &uint_result, 4)) {
    a6da:	2204      	movs	r2, #4
    a6dc:	eb0d 0102 	add.w	r1, sp, r2
    a6e0:	f7ff ff78 	bl	a5d4 <value_extract>
    a6e4:	b138      	cbz	r0, a6f6 <intx32_decode+0x34>
	if (uint_result >= (1 << (8*sizeof(uint_result)-1))) {
    a6e6:	9b01      	ldr	r3, [sp, #4]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	da07      	bge.n	a6fc <intx32_decode+0x3a>
		FAIL_RESTORE();
    a6ec:	6863      	ldr	r3, [r4, #4]
    a6ee:	6023      	str	r3, [r4, #0]
    a6f0:	68a3      	ldr	r3, [r4, #8]
    a6f2:	3301      	adds	r3, #1
    a6f4:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    a6f6:	2000      	movs	r0, #0
}
    a6f8:	b002      	add	sp, #8
    a6fa:	bd70      	pop	{r4, r5, r6, pc}
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    a6fc:	2e01      	cmp	r6, #1
		int_result = -1 - uint_result;
    a6fe:	bf08      	it	eq
    a700:	43db      	mvneq	r3, r3
	*result = int_result;
    a702:	602b      	str	r3, [r5, #0]
	return true;
    a704:	e7f8      	b.n	a6f8 <intx32_decode+0x36>

0000a706 <strx_decode>:
{
    a706:	b538      	push	{r3, r4, r5, lr}
    a708:	4604      	mov	r4, r0
    a70a:	460d      	mov	r5, r1
	if (!strx_start_decode(state, result, exp_major_type)) {
    a70c:	f7ff ff9d 	bl	a64a <strx_start_decode>
    a710:	b118      	cbz	r0, a71a <strx_decode+0x14>
	(state->payload) += result->len;
    a712:	6823      	ldr	r3, [r4, #0]
    a714:	686a      	ldr	r2, [r5, #4]
    a716:	4413      	add	r3, r2
    a718:	6023      	str	r3, [r4, #0]
}
    a71a:	bd38      	pop	{r3, r4, r5, pc}

0000a71c <strx_expect>:
{
    a71c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a71e:	460e      	mov	r6, r1
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    a720:	4669      	mov	r1, sp
{
    a722:	4604      	mov	r4, r0
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    a724:	f7ff ffef 	bl	a706 <strx_decode>
    a728:	4605      	mov	r5, r0
    a72a:	b140      	cbz	r0, a73e <strx_expect+0x22>
	if ((tmp_result.len != result->len)
    a72c:	9a01      	ldr	r2, [sp, #4]
    a72e:	6873      	ldr	r3, [r6, #4]
    a730:	429a      	cmp	r2, r3
    a732:	d008      	beq.n	a746 <strx_expect+0x2a>
		FAIL_RESTORE();
    a734:	6863      	ldr	r3, [r4, #4]
    a736:	6023      	str	r3, [r4, #0]
    a738:	68a3      	ldr	r3, [r4, #8]
    a73a:	3301      	adds	r3, #1
    a73c:	60a3      	str	r3, [r4, #8]
		FAIL();
    a73e:	2500      	movs	r5, #0
}
    a740:	4628      	mov	r0, r5
    a742:	b002      	add	sp, #8
    a744:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    a746:	9900      	ldr	r1, [sp, #0]
    a748:	6830      	ldr	r0, [r6, #0]
    a74a:	f000 f9a3 	bl	aa94 <memcmp>
    a74e:	2800      	cmp	r0, #0
    a750:	d0f6      	beq.n	a740 <strx_expect+0x24>
    a752:	e7ef      	b.n	a734 <strx_expect+0x18>

0000a754 <bstrx_decode>:
	return strx_decode(state, result, CBOR_MAJOR_TYPE_BSTR);
    a754:	2202      	movs	r2, #2
    a756:	f7ff bfd6 	b.w	a706 <strx_decode>

0000a75a <tstrx_expect>:
	return strx_expect(state, result, CBOR_MAJOR_TYPE_TSTR);
    a75a:	2203      	movs	r2, #3
    a75c:	f7ff bfde 	b.w	a71c <strx_expect>

0000a760 <map_start_decode>:
	return list_map_start_decode(state, CBOR_MAJOR_TYPE_LIST);
}


bool map_start_decode(cbor_state_t *state)
{
    a760:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    a762:	2105      	movs	r1, #5
{
    a764:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    a766:	f7ff ff8f 	bl	a688 <list_map_start_decode>

	if (ret) {
    a76a:	b110      	cbz	r0, a772 <map_start_decode+0x12>
		state->elem_count *= 2;
    a76c:	68a3      	ldr	r3, [r4, #8]
    a76e:	005b      	lsls	r3, r3, #1
    a770:	60a3      	str	r3, [r4, #8]
	}
	return ret;
}
    a772:	bd10      	pop	{r4, pc}

0000a774 <list_map_end_decode>:


bool list_map_end_decode(cbor_state_t *state)
{
	if (!restore_backup(state,
    a774:	2200      	movs	r2, #0
    a776:	2107      	movs	r1, #7
    a778:	f000 b906 	b.w	a988 <restore_backup>

0000a77c <map_end_decode>:
{
	return list_map_end_decode(state);
}


bool map_end_decode(cbor_state_t *state)
    a77c:	f7ff bffa 	b.w	a774 <list_map_end_decode>

0000a780 <multi_decode>:
		uint32_t *num_decode,
		cbor_decoder_t decoder,
		cbor_state_t *state,
		void *result,
		uint32_t result_len)
{
    a780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a784:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    a788:	4682      	mov	sl, r0
    a78a:	4688      	mov	r8, r1
    a78c:	4616      	mov	r6, r2
    a78e:	469b      	mov	fp, r3
	for (uint32_t i = 0; i < max_decode; i++) {
    a790:	2400      	movs	r4, #0
    a792:	4544      	cmp	r4, r8
    a794:	d102      	bne.n	a79c <multi_decode+0x1c>
			}
			return true;
		}
	}
	cbor_print("Found %zu elements.\n", max_decode);
	*num_decode = max_decode;
    a796:	6034      	str	r4, [r6, #0]
			return true;
    a798:	2001      	movs	r0, #1
	return true;
    a79a:	e013      	b.n	a7c4 <multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    a79c:	682a      	ldr	r2, [r5, #0]
    a79e:	9201      	str	r2, [sp, #4]
		if (!decoder(state,
    a7a0:	4639      	mov	r1, r7
    a7a2:	4628      	mov	r0, r5
		uint32_t elem_count_bak = state->elem_count;
    a7a4:	f8d5 9008 	ldr.w	r9, [r5, #8]
		if (!decoder(state,
    a7a8:	47d8      	blx	fp
    a7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a7ac:	9a01      	ldr	r2, [sp, #4]
    a7ae:	441f      	add	r7, r3
    a7b0:	b958      	cbnz	r0, a7ca <multi_decode+0x4a>
			if (i < min_decode) {
    a7b2:	4554      	cmp	r4, sl
			*num_decode = i;
    a7b4:	6034      	str	r4, [r6, #0]
			if (i < min_decode) {
    a7b6:	bf38      	it	cc
    a7b8:	2000      	movcc	r0, #0
			state->payload = payload_bak;
    a7ba:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    a7bc:	f8c5 9008 	str.w	r9, [r5, #8]
			if (i < min_decode) {
    a7c0:	bf28      	it	cs
    a7c2:	2001      	movcs	r0, #1
}
    a7c4:	b003      	add	sp, #12
    a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint32_t i = 0; i < max_decode; i++) {
    a7ca:	3401      	adds	r4, #1
    a7cc:	e7e1      	b.n	a792 <multi_decode+0x12>

0000a7ce <get_result_len>:
	return true;
}


static uint32_t get_result_len(const void *const input, uint32_t max_result_len)
{
    a7ce:	b510      	push	{r4, lr}
    a7d0:	4603      	mov	r3, r0
	uint8_t *u8_result  = (uint8_t *)input;
	size_t i;

	for (i = 0; i < max_result_len; i++) {
    a7d2:	2200      	movs	r2, #0
    a7d4:	4408      	add	r0, r1
#ifdef CONFIG_BIG_ENDIAN
		size_t idx = i;
#else
		size_t idx = max_result_len - 1 - i;
#endif
		if (u8_result[idx] != 0) {
    a7d6:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    a7da:	b144      	cbz	r4, a7ee <get_result_len+0x20>
			break;
		}
	}
	max_result_len -= i;
    a7dc:	1a88      	subs	r0, r1, r2
	 */
	cbor_assert(max_result_len <= 8, "Up to 8 bytes can be used to encode length.\n");
	size_t encode_byte_cnt = 1;

	for (size_t i = 0; i <= 3; i++) {
		if (max_result_len <= encode_byte_cnt) {
    a7de:	2801      	cmp	r0, #1
    a7e0:	d809      	bhi.n	a7f6 <get_result_len+0x28>
		}

		encode_byte_cnt *= 2;
	}

	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    a7e2:	7818      	ldrb	r0, [r3, #0]
    a7e4:	2817      	cmp	r0, #23
    a7e6:	bf94      	ite	ls
    a7e8:	2000      	movls	r0, #0
    a7ea:	2001      	movhi	r0, #1
		max_result_len = 0;
	}

	return max_result_len;
    a7ec:	e00a      	b.n	a804 <get_result_len+0x36>
	for (i = 0; i < max_result_len; i++) {
    a7ee:	3201      	adds	r2, #1
    a7f0:	4291      	cmp	r1, r2
    a7f2:	d1f0      	bne.n	a7d6 <get_result_len+0x8>
    a7f4:	e7f5      	b.n	a7e2 <get_result_len+0x14>
		if (max_result_len <= encode_byte_cnt) {
    a7f6:	2802      	cmp	r0, #2
    a7f8:	d004      	beq.n	a804 <get_result_len+0x36>
    a7fa:	2804      	cmp	r0, #4
    a7fc:	d903      	bls.n	a806 <get_result_len+0x38>
		encode_byte_cnt *= 2;
    a7fe:	2808      	cmp	r0, #8
    a800:	bf38      	it	cc
    a802:	2008      	movcc	r0, #8
}
    a804:	bd10      	pop	{r4, pc}
		encode_byte_cnt *= 2;
    a806:	2004      	movs	r0, #4
	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    a808:	e7fc      	b.n	a804 <get_result_len+0x36>

0000a80a <get_additional>:
	switch(len) {
    a80a:	2808      	cmp	r0, #8
    a80c:	d80e      	bhi.n	a82c <get_additional+0x22>
    a80e:	e8df f000 	tbb	[pc, r0]
    a812:	0f05      	.short	0x0f05
    a814:	09090707 	.word	0x09090707
    a818:	0909      	.short	0x0909
    a81a:	0b          	.byte	0x0b
    a81b:	00          	.byte	0x00
		case 0: return value0;
    a81c:	4608      	mov	r0, r1
    a81e:	4770      	bx	lr
		case 2: return 25;
    a820:	2019      	movs	r0, #25
    a822:	4770      	bx	lr
		case 4: return 26;
    a824:	201a      	movs	r0, #26
    a826:	4770      	bx	lr
		case 8: return 27;
    a828:	201b      	movs	r0, #27
    a82a:	4770      	bx	lr
	return 0;
    a82c:	2000      	movs	r0, #0
    a82e:	4770      	bx	lr
	switch(len) {
    a830:	2018      	movs	r0, #24
}
    a832:	4770      	bx	lr

0000a834 <value_encode>:


static bool value_encode(cbor_state_t *state, cbor_major_type_t major_type,
		const void *const input, uint32_t max_result_len)
{
    a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a838:	4604      	mov	r4, r0
    a83a:	460f      	mov	r7, r1
	cbor_assert(max_result_len != 0, "0-length result not supported.\n");
	return value_encode_len(state, major_type, input,
    a83c:	4610      	mov	r0, r2
    a83e:	4619      	mov	r1, r3
{
    a840:	4616      	mov	r6, r2
	return value_encode_len(state, major_type, input,
    a842:	f7ff ffc4 	bl	a7ce <get_result_len>
	if ((state->payload + 1 + result_len) > state->payload_end) {
    a846:	6822      	ldr	r2, [r4, #0]
    a848:	68e1      	ldr	r1, [r4, #12]
    a84a:	1c43      	adds	r3, r0, #1
    a84c:	4413      	add	r3, r2
    a84e:	4299      	cmp	r1, r3
	return value_encode_len(state, major_type, input,
    a850:	4605      	mov	r5, r0
	if ((state->payload + 1 + result_len) > state->payload_end) {
    a852:	d31d      	bcc.n	a890 <value_encode+0x5c>
	if ((state->payload + 1) > state->payload_end) {
    a854:	f102 0801 	add.w	r8, r2, #1
    a858:	4541      	cmp	r1, r8
    a85a:	d319      	bcc.n	a890 <value_encode+0x5c>
	if (!encode_header_byte(state, major_type,
    a85c:	7831      	ldrb	r1, [r6, #0]
    a85e:	f7ff ffd4 	bl	a80a <get_additional>
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a862:	f000 001f 	and.w	r0, r0, #31
    a866:	ea40 1147 	orr.w	r1, r0, r7, lsl #5
    a86a:	f8c4 8000 	str.w	r8, [r4]
    a86e:	1970      	adds	r0, r6, r5
    a870:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    a872:	4286      	cmp	r6, r0
    a874:	d105      	bne.n	a882 <value_encode+0x4e>
	state->elem_count++;
    a876:	68a3      	ldr	r3, [r4, #8]
    a878:	3301      	adds	r3, #1
    a87a:	60a3      	str	r3, [r4, #8]
	return true;
    a87c:	2001      	movs	r0, #1
				get_result_len(input, max_result_len));
}
    a87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(state->payload_mut++) = u8_result[result_len - 1];
    a882:	6823      	ldr	r3, [r4, #0]
    a884:	1c5a      	adds	r2, r3, #1
    a886:	6022      	str	r2, [r4, #0]
    a888:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    a88c:	701a      	strb	r2, [r3, #0]
	for (; result_len > 0; result_len--) {
    a88e:	e7f0      	b.n	a872 <value_encode+0x3e>
		FAIL();
    a890:	2000      	movs	r0, #0
    a892:	e7f4      	b.n	a87e <value_encode+0x4a>

0000a894 <strx_encode>:
}


static bool strx_encode(cbor_state_t *state,
		const cbor_string_type_t *input, cbor_major_type_t major_type)
{
    a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a896:	460e      	mov	r6, r1
{
    a898:	4604      	mov	r4, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a89a:	f856 3b04 	ldr.w	r3, [r6], #4
{
    a89e:	460d      	mov	r5, r1
    a8a0:	4617      	mov	r7, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a8a2:	b173      	cbz	r3, a8c2 <strx_encode+0x2e>
    a8a4:	2104      	movs	r1, #4
    a8a6:	4630      	mov	r0, r6
    a8a8:	f7ff ff91 	bl	a7ce <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    a8ac:	686b      	ldr	r3, [r5, #4]
    a8ae:	1c5a      	adds	r2, r3, #1
    a8b0:	6823      	ldr	r3, [r4, #0]
    a8b2:	4413      	add	r3, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a8b4:	68e2      	ldr	r2, [r4, #12]
			+ 1 + input->len + (size_t)state->payload)
    a8b6:	4403      	add	r3, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a8b8:	429a      	cmp	r2, r3
    a8ba:	d202      	bcs.n	a8c2 <strx_encode+0x2e>
	if (!strx_start_encode(state, input, major_type)) {
		FAIL();
    a8bc:	2600      	movs	r6, #0
	if (state->payload_mut != input->value) {
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    a8be:	4630      	mov	r0, r6
    a8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!value_encode(state, major_type, input, 4)) {
    a8c2:	4632      	mov	r2, r6
    a8c4:	2304      	movs	r3, #4
    a8c6:	4639      	mov	r1, r7
    a8c8:	4620      	mov	r0, r4
    a8ca:	f7ff ffb3 	bl	a834 <value_encode>
	if (!uint32_encode(state, &input->len, major_type)) {
    a8ce:	4606      	mov	r6, r0
    a8d0:	2800      	cmp	r0, #0
    a8d2:	d0f3      	beq.n	a8bc <strx_encode+0x28>
	if (input->len > (state->payload_end - state->payload)) {
    a8d4:	6820      	ldr	r0, [r4, #0]
    a8d6:	68e3      	ldr	r3, [r4, #12]
    a8d8:	686a      	ldr	r2, [r5, #4]
    a8da:	1a1b      	subs	r3, r3, r0
    a8dc:	429a      	cmp	r2, r3
    a8de:	d8ed      	bhi.n	a8bc <strx_encode+0x28>
	if (state->payload_mut != input->value) {
    a8e0:	6829      	ldr	r1, [r5, #0]
    a8e2:	4288      	cmp	r0, r1
    a8e4:	d001      	beq.n	a8ea <strx_encode+0x56>
		memmove(state->payload_mut, input->value, input->len);
    a8e6:	f000 f8e5 	bl	aab4 <memmove>
	state->payload += input->len;
    a8ea:	6823      	ldr	r3, [r4, #0]
    a8ec:	686a      	ldr	r2, [r5, #4]
    a8ee:	4413      	add	r3, r2
    a8f0:	6023      	str	r3, [r4, #0]
	return true;
    a8f2:	e7e4      	b.n	a8be <strx_encode+0x2a>

0000a8f4 <uintx32_put>:
{
    a8f4:	b507      	push	{r0, r1, r2, lr}
	if (!value_encode(state, major_type, input, 4)) {
    a8f6:	2304      	movs	r3, #4
{
    a8f8:	9101      	str	r1, [sp, #4]
	if (!value_encode(state, major_type, input, 4)) {
    a8fa:	eb0d 0203 	add.w	r2, sp, r3
    a8fe:	2100      	movs	r1, #0
    a900:	f7ff ff98 	bl	a834 <value_encode>
}
    a904:	b003      	add	sp, #12
    a906:	f85d fb04 	ldr.w	pc, [sp], #4

0000a90a <tstrx_encode>:
}


bool tstrx_encode(cbor_state_t *state, const cbor_string_type_t *input)
{
	return strx_encode(state, input, CBOR_MAJOR_TYPE_TSTR);
    a90a:	2203      	movs	r2, #3
    a90c:	f7ff bfc2 	b.w	a894 <strx_encode>

0000a910 <list_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    a910:	6803      	ldr	r3, [r0, #0]
    a912:	68c1      	ldr	r1, [r0, #12]
    a914:	1c5a      	adds	r2, r3, #1
    a916:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a918:	bf9f      	itttt	ls
    a91a:	6002      	strls	r2, [r0, #0]
    a91c:	229f      	movls	r2, #159	; 0x9f
	return true;
    a91e:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a920:	701a      	strbls	r2, [r3, #0]
		FAIL();
    a922:	bf88      	it	hi
    a924:	2000      	movhi	r0, #0


bool list_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    a926:	4770      	bx	lr

0000a928 <map_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    a928:	6803      	ldr	r3, [r0, #0]
    a92a:	68c1      	ldr	r1, [r0, #12]
    a92c:	1c5a      	adds	r2, r3, #1
    a92e:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a930:	bf9f      	itttt	ls
    a932:	6002      	strls	r2, [r0, #0]
    a934:	22bf      	movls	r2, #191	; 0xbf
	return true;
    a936:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a938:	701a      	strbls	r2, [r3, #0]
		FAIL();
    a93a:	bf88      	it	hi
    a93c:	2000      	movhi	r0, #0


bool map_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
}
    a93e:	4770      	bx	lr

0000a940 <list_end_encode>:
	if ((state->payload + 1) > state->payload_end) {
    a940:	6803      	ldr	r3, [r0, #0]
    a942:	68c1      	ldr	r1, [r0, #12]
    a944:	1c5a      	adds	r2, r3, #1
    a946:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a948:	bf9f      	itttt	ls
    a94a:	6002      	strls	r2, [r0, #0]
    a94c:	22ff      	movls	r2, #255	; 0xff
	return true;
    a94e:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a950:	701a      	strbls	r2, [r3, #0]
		FAIL();
    a952:	bf88      	it	hi
    a954:	2000      	movhi	r0, #0


bool list_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    a956:	4770      	bx	lr

0000a958 <map_end_encode>:


bool map_end_encode(cbor_state_t *state, uint32_t max_num)
    a958:	f7ff bff2 	b.w	a940 <list_end_encode>

0000a95c <new_backup>:
_Static_assert((sizeof(size_t) == sizeof(void *)),
	"This code needs size_t to be the same length as pointers.");

bool new_backup(cbor_state_t *state, uint32_t new_elem_count)
{
	if ((state->backups->current_backup + 1)
    a95c:	6902      	ldr	r2, [r0, #16]
{
    a95e:	b538      	push	{r3, r4, r5, lr}
	if ((state->backups->current_backup + 1)
    a960:	6853      	ldr	r3, [r2, #4]
{
    a962:	460d      	mov	r5, r1
	if ((state->backups->current_backup + 1)
    a964:	6891      	ldr	r1, [r2, #8]
    a966:	3301      	adds	r3, #1
    a968:	428b      	cmp	r3, r1
{
    a96a:	4604      	mov	r4, r0
	if ((state->backups->current_backup + 1)
    a96c:	d20a      	bcs.n	a984 <new_backup+0x28>
		>= state->backups->num_backups) {
		FAIL();
	}

	uint32_t i = ++(state->backups->current_backup);
	memcpy(&state->backups->backup_list[i], state,
    a96e:	6810      	ldr	r0, [r2, #0]
	uint32_t i = ++(state->backups->current_backup);
    a970:	6053      	str	r3, [r2, #4]
	memcpy(&state->backups->backup_list[i], state,
    a972:	2214      	movs	r2, #20
    a974:	4621      	mov	r1, r4
    a976:	fb02 0003 	mla	r0, r2, r3, r0
    a97a:	f000 f8b2 	bl	aae2 <memcpy>
		sizeof(cbor_state_t));

	state->elem_count = new_elem_count;
    a97e:	60a5      	str	r5, [r4, #8]

	return true;
    a980:	2001      	movs	r0, #1
}
    a982:	bd38      	pop	{r3, r4, r5, pc}
		FAIL();
    a984:	2000      	movs	r0, #0
    a986:	e7fc      	b.n	a982 <new_backup+0x26>

0000a988 <restore_backup>:


bool restore_backup(cbor_state_t *state, uint32_t flags,
		uint32_t max_elem_count)
{
    a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a98c:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint32_t elem_count = state->elem_count;

	if (state->backups->current_backup == 0) {
    a98e:	6902      	ldr	r2, [r0, #16]
	const uint8_t *payload = state->payload;
    a990:	6807      	ldr	r7, [r0, #0]
	if (state->backups->current_backup == 0) {
    a992:	6853      	ldr	r3, [r2, #4]
	const uint32_t elem_count = state->elem_count;
    a994:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    a998:	4604      	mov	r4, r0
    a99a:	460d      	mov	r5, r1
	if (state->backups->current_backup == 0) {
    a99c:	b913      	cbnz	r3, a9a4 <restore_backup+0x1c>
		FAIL();
    a99e:	2000      	movs	r0, #0
	if (flags & FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & FLAG_RESTORE) {
    a9a4:	07e9      	lsls	r1, r5, #31
    a9a6:	d505      	bpl.n	a9b4 <restore_backup+0x2c>
		memcpy(state, &state->backups->backup_list[i],
    a9a8:	6811      	ldr	r1, [r2, #0]
    a9aa:	2214      	movs	r2, #20
    a9ac:	fb02 1103 	mla	r1, r2, r3, r1
    a9b0:	f000 f897 	bl	aae2 <memcpy>
	if (flags & FLAG_DISCARD) {
    a9b4:	07aa      	lsls	r2, r5, #30
		state->backups->current_backup--;
    a9b6:	bf41      	itttt	mi
    a9b8:	6922      	ldrmi	r2, [r4, #16]
    a9ba:	6853      	ldrmi	r3, [r2, #4]
    a9bc:	f103 33ff 	addmi.w	r3, r3, #4294967295
    a9c0:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    a9c2:	45b0      	cmp	r8, r6
    a9c4:	d8eb      	bhi.n	a99e <restore_backup+0x16>
	if (flags & FLAG_TRANSFER_PAYLOAD) {
    a9c6:	076b      	lsls	r3, r5, #29
    a9c8:	d401      	bmi.n	a9ce <restore_backup+0x46>
	return true;
    a9ca:	2001      	movs	r0, #1
    a9cc:	e7e8      	b.n	a9a0 <restore_backup+0x18>
		state->payload = payload;
    a9ce:	6027      	str	r7, [r4, #0]
    a9d0:	e7fb      	b.n	a9ca <restore_backup+0x42>

0000a9d2 <union_start_code>:


bool union_start_code(cbor_state_t *state)
{
	if (!new_backup(state, state->elem_count)) {
    a9d2:	6881      	ldr	r1, [r0, #8]
    a9d4:	f7ff bfc2 	b.w	a95c <new_backup>

0000a9d8 <union_elem_code>:
}


bool union_elem_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_RESTORE, state->elem_count)) {
    a9d8:	6882      	ldr	r2, [r0, #8]
    a9da:	2101      	movs	r1, #1
    a9dc:	f7ff bfd4 	b.w	a988 <restore_backup>

0000a9e0 <union_end_code>:
	return true;
}

bool union_end_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_DISCARD, state->elem_count)) {
    a9e0:	6882      	ldr	r2, [r0, #8]
    a9e2:	2102      	movs	r1, #2
    a9e4:	f7ff bfd0 	b.w	a988 <restore_backup>

0000a9e8 <entry_function>:
}

bool entry_function(const uint8_t *payload, uint32_t payload_len,
		const void *struct_ptr, uint32_t *payload_len_out,
		cbor_encoder_t func, uint32_t elem_count, uint32_t num_backups)
{
    a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9ec:	b088      	sub	sp, #32
    a9ee:	af00      	add	r7, sp, #0
    a9f0:	4605      	mov	r5, r0
    a9f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
		.backup_list = state_backups,
		.current_backup = 0,
		.num_backups = num_backups + 1,
	};

	state.backups = &backups;
    a9f4:	61ff      	str	r7, [r7, #28]
	cbor_state_t state_backups[num_backups + 1];
    a9f6:	2414      	movs	r4, #20
{
    a9f8:	460e      	mov	r6, r1
	cbor_state_t state_backups[num_backups + 1];
    a9fa:	fb00 4404 	mla	r4, r0, r4, r4
	cbor_state_t state = {
    a9fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    aa00:	6179      	str	r1, [r7, #20]
	cbor_state_t state_backups[num_backups + 1];
    aa02:	3407      	adds	r4, #7
		.payload_end = payload + payload_len,
    aa04:	19a9      	adds	r1, r5, r6
{
    aa06:	4698      	mov	r8, r3
	cbor_state_t state = {
    aa08:	61b9      	str	r1, [r7, #24]
    aa0a:	2300      	movs	r3, #0
	cbor_state_t state_backups[num_backups + 1];
    aa0c:	1c41      	adds	r1, r0, #1
    aa0e:	f024 0407 	bic.w	r4, r4, #7
	cbor_state_backups_t backups = {
    aa12:	e9c7 3101 	strd	r3, r1, [r7, #4]
	cbor_state_t state = {
    aa16:	e9c7 5303 	strd	r5, r3, [r7, #12]
	cbor_state_t state_backups[num_backups + 1];
    aa1a:	ebad 0d04 	sub.w	sp, sp, r4

	bool result = func(&state, struct_ptr);
    aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	cbor_state_backups_t backups = {
    aa20:	f8c7 d000 	str.w	sp, [r7]
	bool result = func(&state, struct_ptr);
    aa24:	4611      	mov	r1, r2
    aa26:	f107 000c 	add.w	r0, r7, #12
    aa2a:	4798      	blx	r3

	if (result && (payload_len_out != NULL)) {
    aa2c:	b150      	cbz	r0, aa44 <entry_function+0x5c>
    aa2e:	f1b8 0f00 	cmp.w	r8, #0
    aa32:	d007      	beq.n	aa44 <entry_function+0x5c>
		*payload_len_out = MIN(payload_len,
    aa34:	68fb      	ldr	r3, [r7, #12]
    aa36:	1b5b      	subs	r3, r3, r5
    aa38:	42b3      	cmp	r3, r6
    aa3a:	bf94      	ite	ls
    aa3c:	f8c8 3000 	strls.w	r3, [r8]
    aa40:	f8c8 6000 	strhi.w	r6, [r8]
				(size_t)state.payload - (size_t)payload);
	}
	return result;
}
    aa44:	3720      	adds	r7, #32
    aa46:	46bd      	mov	sp, r7
    aa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aa4c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    aa4c:	f002 b9ec 	b.w	ce28 <z_fatal_error>

0000aa50 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    aa50:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    aa52:	6800      	ldr	r0, [r0, #0]
    aa54:	f002 b9e8 	b.w	ce28 <z_fatal_error>

0000aa58 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    aa58:	2100      	movs	r1, #0
    aa5a:	2001      	movs	r0, #1
    aa5c:	f7ff bff6 	b.w	aa4c <z_arm_fatal_error>

0000aa60 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    aa60:	b508      	push	{r3, lr}
	handler();
    aa62:	f7f8 fe93 	bl	378c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    aa66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    aa6a:	f7f8 bf5f 	b.w	392c <z_arm_exc_exit>

0000aa6e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    aa6e:	4603      	mov	r3, r0
	size_t n = 0;
    aa70:	2000      	movs	r0, #0

	while (*s != '\0') {
    aa72:	5c1a      	ldrb	r2, [r3, r0]
    aa74:	b902      	cbnz	r2, aa78 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    aa76:	4770      	bx	lr
		n++;
    aa78:	3001      	adds	r0, #1
    aa7a:	e7fa      	b.n	aa72 <strlen+0x4>

0000aa7c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    aa7c:	1e43      	subs	r3, r0, #1
    aa7e:	3901      	subs	r1, #1
    aa80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    aa84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    aa88:	4282      	cmp	r2, r0
    aa8a:	d101      	bne.n	aa90 <strcmp+0x14>
    aa8c:	2a00      	cmp	r2, #0
    aa8e:	d1f7      	bne.n	aa80 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    aa90:	1a10      	subs	r0, r2, r0
    aa92:	4770      	bx	lr

0000aa94 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    aa94:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    aa96:	b15a      	cbz	r2, aab0 <memcmp+0x1c>
    aa98:	3901      	subs	r1, #1
    aa9a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    aa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
    aaa0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    aaa4:	42a0      	cmp	r0, r4
    aaa6:	d001      	beq.n	aaac <memcmp+0x18>
    aaa8:	429a      	cmp	r2, r3
    aaaa:	d0f7      	beq.n	aa9c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    aaac:	1ad0      	subs	r0, r2, r3
}
    aaae:	bd10      	pop	{r4, pc}
		return 0;
    aab0:	4610      	mov	r0, r2
    aab2:	e7fc      	b.n	aaae <memcmp+0x1a>

0000aab4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    aab4:	1a43      	subs	r3, r0, r1
    aab6:	4293      	cmp	r3, r2
{
    aab8:	b510      	push	{r4, lr}
    aaba:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    aabe:	d308      	bcc.n	aad2 <memmove+0x1e>
    aac0:	3901      	subs	r1, #1
	char *dest = d;
    aac2:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    aac4:	429a      	cmp	r2, r3
    aac6:	d00b      	beq.n	aae0 <memmove+0x2c>
			*dest = *src;
    aac8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    aacc:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    aad0:	e7f8      	b.n	aac4 <memmove+0x10>
    aad2:	440a      	add	r2, r1
			dest[n] = src[n];
    aad4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    aad8:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    aadc:	428a      	cmp	r2, r1
    aade:	d1f9      	bne.n	aad4 <memmove+0x20>
		}
	}

	return d;
}
    aae0:	bd10      	pop	{r4, pc}

0000aae2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    aae2:	b510      	push	{r4, lr}
    aae4:	1e43      	subs	r3, r0, #1
    aae6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    aae8:	4291      	cmp	r1, r2
    aaea:	d100      	bne.n	aaee <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    aaec:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    aaee:	f811 4b01 	ldrb.w	r4, [r1], #1
    aaf2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    aaf6:	e7f7      	b.n	aae8 <memcpy+0x6>

0000aaf8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    aaf8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    aafa:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    aafc:	4603      	mov	r3, r0
	while (n > 0) {
    aafe:	4293      	cmp	r3, r2
    ab00:	d100      	bne.n	ab04 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    ab02:	4770      	bx	lr
		*(d_byte++) = c_byte;
    ab04:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ab08:	e7f9      	b.n	aafe <memset+0x6>

0000ab0a <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    ab0a:	6903      	ldr	r3, [r0, #16]
{
    ab0c:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    ab0e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    ab12:	2300      	movs	r3, #0
    ab14:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    ab16:	7f83      	ldrb	r3, [r0, #30]
{
    ab18:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    ab1a:	b113      	cbz	r3, ab22 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ab1c:	7a40      	ldrb	r0, [r0, #9]
    ab1e:	f002 f976 	bl	ce0e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    ab22:	2301      	movs	r3, #1
    ab24:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    ab26:	2300      	movs	r3, #0
    ab28:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    ab2a:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    ab2c:	77a3      	strb	r3, [r4, #30]
}
    ab2e:	bd10      	pop	{r4, pc}

0000ab30 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    ab30:	f7fd bade 	b.w	80f0 <z_impl_k_mutex_lock>

0000ab34 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    ab34:	f7fd bb54 	b.w	81e0 <z_impl_k_mutex_unlock>

0000ab38 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    ab38:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    ab3a:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    ab3c:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    ab40:	b921      	cbnz	r1, ab4c <usb_dc_ep_check_cap+0x14>
    ab42:	3a00      	subs	r2, #0
    ab44:	bf18      	it	ne
    ab46:	2201      	movne	r2, #1
    ab48:	4250      	negs	r0, r2
    ab4a:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    ab4c:	2a08      	cmp	r2, #8
    ab4e:	d806      	bhi.n	ab5e <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    ab50:	2901      	cmp	r1, #1
    ab52:	d107      	bne.n	ab64 <usb_dc_ep_check_cap+0x2c>
    ab54:	f083 0008 	eor.w	r0, r3, #8
    ab58:	f340 00c0 	sbfx	r0, r0, #3, #1
    ab5c:	4770      	bx	lr
		return -1;
    ab5e:	f04f 30ff 	mov.w	r0, #4294967295
    ab62:	4770      	bx	lr
	return 0;
    ab64:	2000      	movs	r0, #0
}
    ab66:	4770      	bx	lr

0000ab68 <usb_dc_ep_read>:
{
    ab68:	b570      	push	{r4, r5, r6, lr}
    ab6a:	4604      	mov	r4, r0
    ab6c:	460e      	mov	r6, r1
    ab6e:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    ab70:	f7f9 feac 	bl	48cc <usb_dc_ep_read_wait>
	if (ret) {
    ab74:	b930      	cbnz	r0, ab84 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    ab76:	b906      	cbnz	r6, ab7a <usb_dc_ep_read+0x12>
    ab78:	b125      	cbz	r5, ab84 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    ab7a:	4620      	mov	r0, r4
}
    ab7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    ab80:	f7f9 beec 	b.w	495c <usb_dc_ep_read_continue>
}
    ab84:	bd70      	pop	{r4, r5, r6, pc}

0000ab86 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ab86:	6903      	ldr	r3, [r0, #16]
    ab88:	b2c9      	uxtb	r1, r1
    ab8a:	220c      	movs	r2, #12
    ab8c:	fb01 3302 	mla	r3, r1, r2, r3
    ab90:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    ab92:	f000 0007 	and.w	r0, r0, #7
    ab96:	4770      	bx	lr

0000ab98 <set_on_state>:
	__asm__ volatile(
    ab98:	f04f 0320 	mov.w	r3, #32
    ab9c:	f3ef 8211 	mrs	r2, BASEPRI
    aba0:	f383 8812 	msr	BASEPRI_MAX, r3
    aba4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    aba8:	6803      	ldr	r3, [r0, #0]
    abaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    abae:	f043 0302 	orr.w	r3, r3, #2
    abb2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    abb4:	f382 8811 	msr	BASEPRI, r2
    abb8:	f3bf 8f6f 	isb	sy
}
    abbc:	4770      	bx	lr

0000abbe <stop>:
{
    abbe:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    abc0:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
    abc2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    abc4:	f04f 0420 	mov.w	r4, #32
    abc8:	f3ef 8511 	mrs	r5, BASEPRI
    abcc:	f384 8812 	msr	BASEPRI_MAX, r4
    abd0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    abd4:	260c      	movs	r6, #12
    abd6:	fb06 3401 	mla	r4, r6, r1, r3
    abda:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    abdc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    abe0:	d008      	beq.n	abf4 <stop+0x36>
    abe2:	42a2      	cmp	r2, r4
    abe4:	d006      	beq.n	abf4 <stop+0x36>
	__asm__ volatile(
    abe6:	f385 8811 	msr	BASEPRI, r5
    abea:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    abee:	f04f 30ff 	mov.w	r0, #4294967295
}
    abf2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    abf4:	fb06 3301 	mla	r3, r6, r1, r3
    abf8:	2201      	movs	r2, #1
    abfa:	641a      	str	r2, [r3, #64]	; 0x40
    abfc:	f385 8811 	msr	BASEPRI, r5
    ac00:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    ac04:	6843      	ldr	r3, [r0, #4]
    ac06:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    ac0a:	685b      	ldr	r3, [r3, #4]
    ac0c:	4798      	blx	r3
	return 0;
    ac0e:	2000      	movs	r0, #0
    ac10:	e7ef      	b.n	abf2 <stop+0x34>

0000ac12 <api_stop>:
	return stop(dev, subsys, CTX_API);
    ac12:	2280      	movs	r2, #128	; 0x80
    ac14:	f7ff bfd3 	b.w	abbe <stop>

0000ac18 <async_start>:
{
    ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac1a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    ac1c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    ac1e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ac20:	f04f 0520 	mov.w	r5, #32
    ac24:	f3ef 8611 	mrs	r6, BASEPRI
    ac28:	f385 8812 	msr	BASEPRI_MAX, r5
    ac2c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ac30:	250c      	movs	r5, #12
    ac32:	fb05 4401 	mla	r4, r5, r1, r4
    ac36:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ac38:	f005 0c07 	and.w	ip, r5, #7
    ac3c:	f1bc 0f01 	cmp.w	ip, #1
    ac40:	d10c      	bne.n	ac5c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ac42:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    ac44:	f386 8811 	msr	BASEPRI, r6
    ac48:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    ac4c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    ac50:	6843      	ldr	r3, [r0, #4]
    ac52:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    ac56:	4798      	blx	r3
	return 0;
    ac58:	2000      	movs	r0, #0
}
    ac5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ac5c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    ac60:	42af      	cmp	r7, r5
    ac62:	f386 8811 	msr	BASEPRI, r6
    ac66:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    ac6a:	bf0c      	ite	eq
    ac6c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    ac70:	f04f 30ff 	movne.w	r0, #4294967295
    ac74:	e7f1      	b.n	ac5a <async_start+0x42>

0000ac76 <api_start>:
{
    ac76:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ac78:	2480      	movs	r4, #128	; 0x80
    ac7a:	9400      	str	r4, [sp, #0]
    ac7c:	f7ff ffcc 	bl	ac18 <async_start>
}
    ac80:	b002      	add	sp, #8
    ac82:	bd10      	pop	{r4, pc}

0000ac84 <onoff_started_callback>:
	return &data->mgr[type];
    ac84:	6900      	ldr	r0, [r0, #16]
{
    ac86:	b410      	push	{r4}
	return &data->mgr[type];
    ac88:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    ac8a:	241c      	movs	r4, #28
    ac8c:	fb03 0004 	mla	r0, r3, r4, r0
    ac90:	2100      	movs	r1, #0
}
    ac92:	bc10      	pop	{r4}
	notify(mgr, 0);
    ac94:	4710      	bx	r2

0000ac96 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ac96:	2000      	movs	r0, #0
    ac98:	f001 bf60 	b.w	cb5c <nrfx_clock_start>

0000ac9c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ac9c:	2000      	movs	r0, #0
    ac9e:	f7fb bbe1 	b.w	6464 <nrfx_clock_stop>

0000aca2 <blocking_start_callback>:
{
    aca2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    aca4:	f7fd bb12 	b.w	82cc <z_impl_k_sem_give>

0000aca8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    aca8:	6843      	ldr	r3, [r0, #4]
    acaa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    acac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    acb0:	600b      	str	r3, [r1, #0]
}
    acb2:	2000      	movs	r0, #0
    acb4:	4770      	bx	lr

0000acb6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    acb6:	6843      	ldr	r3, [r0, #4]
    acb8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    acba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    acbe:	4042      	eors	r2, r0
    acc0:	400a      	ands	r2, r1
    acc2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    acc4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    acc8:	2000      	movs	r0, #0
    acca:	4770      	bx	lr

0000accc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    accc:	6843      	ldr	r3, [r0, #4]
    acce:	685b      	ldr	r3, [r3, #4]
}
    acd0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    acd2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    acd6:	4770      	bx	lr

0000acd8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    acd8:	6843      	ldr	r3, [r0, #4]
    acda:	685b      	ldr	r3, [r3, #4]
}
    acdc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    acde:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    ace2:	4770      	bx	lr

0000ace4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ace4:	6843      	ldr	r3, [r0, #4]
    ace6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ace8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    acec:	404b      	eors	r3, r1
    p_reg->OUT = value;
    acee:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    acf2:	2000      	movs	r0, #0
    acf4:	4770      	bx	lr

0000acf6 <gpio_nrfx_manage_callback>:
	return port->data;
    acf6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    acf8:	6858      	ldr	r0, [r3, #4]
{
    acfa:	b510      	push	{r4, lr}
	if (!sys_slist_is_empty(callbacks)) {
    acfc:	b148      	cbz	r0, ad12 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    acfe:	4288      	cmp	r0, r1
    ad00:	d113      	bne.n	ad2a <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
    ad02:	689c      	ldr	r4, [r3, #8]
	return node->next;
    ad04:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    ad06:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    ad08:	42a1      	cmp	r1, r4
    ad0a:	d100      	bne.n	ad0e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    ad0c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    ad0e:	2000      	movs	r0, #0
    ad10:	6008      	str	r0, [r1, #0]
	if (set) {
    ad12:	b97a      	cbnz	r2, ad34 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    ad14:	2000      	movs	r0, #0
}
    ad16:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad18:	4281      	cmp	r1, r0
    ad1a:	d106      	bne.n	ad2a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    ad1c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    ad1e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad20:	6898      	ldr	r0, [r3, #8]
    ad22:	4281      	cmp	r1, r0
    ad24:	d1f3      	bne.n	ad0e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    ad26:	609c      	str	r4, [r3, #8]
}
    ad28:	e7f1      	b.n	ad0e <gpio_nrfx_manage_callback+0x18>
	return node->next;
    ad2a:	4604      	mov	r4, r0
    ad2c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad2e:	2800      	cmp	r0, #0
    ad30:	d1f2      	bne.n	ad18 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
    ad32:	b13a      	cbz	r2, ad44 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    ad34:	685a      	ldr	r2, [r3, #4]
    ad36:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    ad38:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    ad3a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    ad3c:	2a00      	cmp	r2, #0
    ad3e:	d1e9      	bne.n	ad14 <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
    ad40:	6099      	str	r1, [r3, #8]
}
    ad42:	e7e7      	b.n	ad14 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    ad44:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ad48:	e7e5      	b.n	ad16 <gpio_nrfx_manage_callback+0x20>

0000ad4a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    ad4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    ad4c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));

	if (length > sizeof(dev_id.id)) {
    ad50:	2908      	cmp	r1, #8
    ad52:	6e66      	ldr	r6, [r4, #100]	; 0x64
    ad54:	6e65      	ldr	r5, [r4, #100]	; 0x64
    ad56:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ad58:	6e63      	ldr	r3, [r4, #100]	; 0x64
	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    ad5a:	ea4f 2515 	mov.w	r5, r5, lsr #8
    ad5e:	ea4f 6303 	mov.w	r3, r3, lsl #24
    ad62:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    ad66:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    ad6a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ad6e:	ea43 0305 	orr.w	r3, r3, r5
    ad72:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    ad76:	ea43 0302 	orr.w	r3, r3, r2
    ad7a:	9300      	str	r3, [sp, #0]
    ad7c:	6e26      	ldr	r6, [r4, #96]	; 0x60
    ad7e:	6e25      	ldr	r5, [r4, #96]	; 0x60
    ad80:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ad82:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    ad84:	ea4f 2415 	mov.w	r4, r5, lsr #8
    ad88:	ea4f 6303 	mov.w	r3, r3, lsl #24
    ad8c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    ad90:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    ad94:	ea43 0304 	orr.w	r3, r3, r4
    ad98:	ea4f 2402 	mov.w	r4, r2, lsl #8
	if (length > sizeof(dev_id.id)) {
    ad9c:	bf28      	it	cs
    ad9e:	2108      	movcs	r1, #8
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    ada0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    ada4:	4323      	orrs	r3, r4
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    ada6:	460a      	mov	r2, r1
	if (length > sizeof(dev_id.id)) {
    ada8:	460c      	mov	r4, r1
	memcpy(buffer, dev_id.id, length);
    adaa:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    adac:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    adae:	f7ff fe98 	bl	aae2 <memcpy>

	return length;
}
    adb2:	4620      	mov	r0, r4
    adb4:	b002      	add	sp, #8
    adb6:	bd70      	pop	{r4, r5, r6, pc}

0000adb8 <is_regular_addr_valid>:
{
    adb8:	b538      	push	{r3, r4, r5, lr}
    adba:	4604      	mov	r4, r0
    adbc:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    adbe:	f001 ff51 	bl	cc64 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    adc2:	4284      	cmp	r4, r0
    adc4:	d209      	bcs.n	adda <is_regular_addr_valid+0x22>
    adc6:	2c00      	cmp	r4, #0
    adc8:	db07      	blt.n	adda <is_regular_addr_valid+0x22>
	    addr < 0 ||
    adca:	42a8      	cmp	r0, r5
    adcc:	d305      	bcc.n	adda <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    adce:	442c      	add	r4, r5
	    len > flash_size ||
    add0:	4284      	cmp	r4, r0
    add2:	bf8c      	ite	hi
    add4:	2000      	movhi	r0, #0
    add6:	2001      	movls	r0, #1
}
    add8:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    adda:	2000      	movs	r0, #0
    addc:	e7fc      	b.n	add8 <is_regular_addr_valid+0x20>

0000adde <flash_nrf_read>:
{
    adde:	b570      	push	{r4, r5, r6, lr}
    ade0:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    ade2:	4628      	mov	r0, r5
    ade4:	4619      	mov	r1, r3
{
    ade6:	4616      	mov	r6, r2
    ade8:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    adea:	f7ff ffe5 	bl	adb8 <is_regular_addr_valid>
    adee:	b138      	cbz	r0, ae00 <flash_nrf_read+0x22>
	if (!len) {
    adf0:	b124      	cbz	r4, adfc <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
    adf2:	4622      	mov	r2, r4
    adf4:	4629      	mov	r1, r5
    adf6:	4630      	mov	r0, r6
    adf8:	f7ff fe73 	bl	aae2 <memcpy>
		return 0;
    adfc:	2000      	movs	r0, #0
}
    adfe:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ae00:	f06f 0015 	mvn.w	r0, #21
    ae04:	e7fb      	b.n	adfe <flash_nrf_read+0x20>

0000ae06 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    ae06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ae0a:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
    ae0c:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    ae0e:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    ae12:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
    ae14:	f8c4 8000 	str.w	r8, [r4]
{
    ae18:	460d      	mov	r5, r1
    ae1a:	4616      	mov	r6, r2
	info->index = 0U;
    ae1c:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    ae20:	aa01      	add	r2, sp, #4
    ae22:	4669      	mov	r1, sp
    ae24:	4798      	blx	r3

	while (layout_size--) {
    ae26:	e9dd 7c00 	ldrd	r7, ip, [sp]
    ae2a:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    ae2c:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    ae30:	4560      	cmp	r0, ip
    ae32:	d104      	bne.n	ae3e <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    ae34:	f06f 0015 	mvn.w	r0, #21
}
    ae38:	b003      	add	sp, #12
    ae3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    ae3e:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    ae42:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    ae44:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    ae46:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    ae4a:	b985      	cbnz	r5, ae6e <flash_get_page_info+0x68>
			index_jmp = index - info->index;
    ae4c:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    ae4e:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
    ae52:	4543      	cmp	r3, r8
    ae54:	bf28      	it	cs
    ae56:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    ae58:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    ae5c:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    ae5e:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    ae60:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    ae62:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    ae64:	f100 0001 	add.w	r0, r0, #1
    ae68:	d9e2      	bls.n	ae30 <flash_get_page_info+0x2a>
			return 0;
    ae6a:	2000      	movs	r0, #0
    ae6c:	e7e4      	b.n	ae38 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    ae6e:	1aab      	subs	r3, r5, r2
    ae70:	fbb3 f3f9 	udiv	r3, r3, r9
    ae74:	e7eb      	b.n	ae4e <flash_get_page_info+0x48>

0000ae76 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    ae76:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    ae78:	2200      	movs	r2, #0
    ae7a:	f7ff bfc4 	b.w	ae06 <flash_get_page_info>

0000ae7e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    ae7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    ae82:	6883      	ldr	r3, [r0, #8]
{
    ae84:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    ae86:	695b      	ldr	r3, [r3, #20]
{
    ae88:	4688      	mov	r8, r1
    ae8a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    ae8c:	a901      	add	r1, sp, #4
    ae8e:	aa02      	add	r2, sp, #8
    ae90:	4798      	blx	r3
	off_t off = 0;
    ae92:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    ae94:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    ae96:	4625      	mov	r5, r4
    ae98:	9b02      	ldr	r3, [sp, #8]
    ae9a:	42ab      	cmp	r3, r5
    ae9c:	d802      	bhi.n	aea4 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    ae9e:	b006      	add	sp, #24
    aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    aea4:	9f01      	ldr	r7, [sp, #4]
    aea6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    aeaa:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    aeac:	687b      	ldr	r3, [r7, #4]
    aeae:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    aeb0:	683a      	ldr	r2, [r7, #0]
    aeb2:	42b2      	cmp	r2, r6
    aeb4:	eb0a 0306 	add.w	r3, sl, r6
    aeb8:	d802      	bhi.n	aec0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    aeba:	3501      	adds	r5, #1
    aebc:	469a      	mov	sl, r3
    aebe:	e7eb      	b.n	ae98 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
    aec0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    aec2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    aec4:	4649      	mov	r1, r9
    aec6:	a803      	add	r0, sp, #12
    aec8:	47c0      	blx	r8
    aeca:	2800      	cmp	r0, #0
    aecc:	d0e7      	beq.n	ae9e <flash_page_foreach+0x20>
			off += page_info.size;
    aece:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    aed0:	3601      	adds	r6, #1
			off += page_info.size;
    aed2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    aed4:	e7ec      	b.n	aeb0 <flash_page_foreach+0x32>

0000aed6 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    aed6:	6902      	ldr	r2, [r0, #16]
{
    aed8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    aeda:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    aede:	e883 0003 	stmia.w	r3, {r0, r1}
}
    aee2:	2000      	movs	r0, #0
    aee4:	4770      	bx	lr

0000aee6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    aee6:	6843      	ldr	r3, [r0, #4]
    aee8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    aeea:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    aeee:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    aef2:	4770      	bx	lr

0000aef4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    aef4:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    aef6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    aef8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aefa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    aefe:	b148      	cbz	r0, af14 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    af00:	7d52      	ldrb	r2, [r2, #21]
    af02:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af04:	2000      	movs	r0, #0
    af06:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    af0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af0e:	2201      	movs	r2, #1
    af10:	601a      	str	r2, [r3, #0]
	return 0;
    af12:	4770      	bx	lr
		return -1;
    af14:	f04f 30ff 	mov.w	r0, #4294967295
}
    af18:	4770      	bx	lr

0000af1a <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    af1a:	2a00      	cmp	r2, #0
{
    af1c:	b510      	push	{r4, lr}
    af1e:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    af20:	dd0f      	ble.n	af42 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    af22:	6843      	ldr	r3, [r0, #4]
    af24:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    af26:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    af2a:	b148      	cbz	r0, af40 <uarte_nrfx_fifo_read+0x26>
	return dev->data;
    af2c:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af2e:	2000      	movs	r0, #0
    af30:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    af34:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    af38:	7d52      	ldrb	r2, [r2, #21]
    af3a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af3c:	2001      	movs	r0, #1
    af3e:	6018      	str	r0, [r3, #0]
}
    af40:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    af42:	2000      	movs	r0, #0
    af44:	e7fc      	b.n	af40 <uarte_nrfx_fifo_read+0x26>

0000af46 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    af46:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    af48:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    af4a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    af4c:	f04f 0020 	mov.w	r0, #32
    af50:	f3ef 8311 	mrs	r3, BASEPRI
    af54:	f380 8812 	msr	BASEPRI_MAX, r0
    af58:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    af5c:	68c9      	ldr	r1, [r1, #12]
    af5e:	2000      	movs	r0, #0
    af60:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    af62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    af66:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    af6a:	f383 8811 	msr	BASEPRI, r3
    af6e:	f3bf 8f6f 	isb	sy
}
    af72:	4770      	bx	lr

0000af74 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    af74:	6903      	ldr	r3, [r0, #16]
    af76:	68db      	ldr	r3, [r3, #12]
    af78:	2201      	movs	r2, #1
    af7a:	739a      	strb	r2, [r3, #14]
}
    af7c:	4770      	bx	lr

0000af7e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    af7e:	6903      	ldr	r3, [r0, #16]
    af80:	68db      	ldr	r3, [r3, #12]
    af82:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    af84:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    af88:	b962      	cbnz	r2, afa4 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    af8a:	6842      	ldr	r2, [r0, #4]
    af8c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    af8e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    af92:	b140      	cbz	r0, afa6 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    af94:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    af98:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    af9c:	d003      	beq.n	afa6 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    af9e:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    afa0:	2001      	movs	r0, #1
    afa2:	4770      	bx	lr
    afa4:	2000      	movs	r0, #0
}
    afa6:	4770      	bx	lr

0000afa8 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    afa8:	6843      	ldr	r3, [r0, #4]
    afaa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afac:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    afb0:	3800      	subs	r0, #0
    afb2:	bf18      	it	ne
    afb4:	2001      	movne	r0, #1
    afb6:	4770      	bx	lr

0000afb8 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    afb8:	6843      	ldr	r3, [r0, #4]
    afba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    afbc:	2210      	movs	r2, #16
    afbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    afc2:	4770      	bx	lr

0000afc4 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    afc4:	6843      	ldr	r3, [r0, #4]
    afc6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    afc8:	2210      	movs	r2, #16
    afca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    afce:	4770      	bx	lr

0000afd0 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    afd0:	6843      	ldr	r3, [r0, #4]
    afd2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    afd4:	f44f 7200 	mov.w	r2, #512	; 0x200
    afd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    afdc:	4770      	bx	lr

0000afde <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    afde:	6843      	ldr	r3, [r0, #4]
    afe0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    afe2:	f44f 7200 	mov.w	r2, #512	; 0x200
    afe6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    afea:	4770      	bx	lr

0000afec <uarte_nrfx_irq_is_pending>:
{
    afec:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    afee:	6843      	ldr	r3, [r0, #4]
    aff0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    aff2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    aff6:	025b      	lsls	r3, r3, #9
{
    aff8:	4604      	mov	r4, r0
		||
    affa:	d405      	bmi.n	b008 <uarte_nrfx_irq_is_pending+0x1c>
    affc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b000:	f010 0010 	ands.w	r0, r0, #16
    b004:	d106      	bne.n	b014 <uarte_nrfx_irq_is_pending+0x28>
}
    b006:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    b008:	f7ff ffb9 	bl	af7e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    b00c:	2800      	cmp	r0, #0
    b00e:	d0f5      	beq.n	affc <uarte_nrfx_irq_is_pending+0x10>
		||
    b010:	2001      	movs	r0, #1
    b012:	e7f8      	b.n	b006 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    b014:	4620      	mov	r0, r4
    b016:	f7ff ffc7 	bl	afa8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    b01a:	3800      	subs	r0, #0
    b01c:	bf18      	it	ne
    b01e:	2001      	movne	r0, #1
    b020:	e7f1      	b.n	b006 <uarte_nrfx_irq_is_pending+0x1a>

0000b022 <uarte_nrfx_irq_update>:
}
    b022:	2001      	movs	r0, #1
    b024:	4770      	bx	lr

0000b026 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    b026:	6903      	ldr	r3, [r0, #16]
    b028:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    b02a:	e9c3 1200 	strd	r1, r2, [r3]
}
    b02e:	4770      	bx	lr

0000b030 <nrf_gpio_cfg_input>:
{
    b030:	b507      	push	{r0, r1, r2, lr}
    b032:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b034:	a801      	add	r0, sp, #4
    b036:	f7fa f8b7 	bl	51a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b03a:	9b01      	ldr	r3, [sp, #4]
    b03c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b040:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    b042:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    b046:	b003      	add	sp, #12
    b048:	f85d fb04 	ldr.w	pc, [sp], #4

0000b04c <tx_start.isra.0>:
	return config->uarte_regs;
    b04c:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b04e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b052:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b056:	2200      	movs	r2, #0
    b058:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    b05c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    b060:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    b064:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b068:	6842      	ldr	r2, [r0, #4]
    b06a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b06c:	bf41      	itttt	mi
    b06e:	2208      	movmi	r2, #8
    b070:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    b074:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    b078:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b07c:	2201      	movs	r2, #1
    b07e:	609a      	str	r2, [r3, #8]
}
    b080:	4770      	bx	lr

0000b082 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    b082:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    b084:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b086:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b08a:	b940      	cbnz	r0, b09e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b08c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b08e:	079b      	lsls	r3, r3, #30
    b090:	d406      	bmi.n	b0a0 <is_tx_ready.isra.0+0x1e>
    b092:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    b096:	3800      	subs	r0, #0
    b098:	bf18      	it	ne
    b09a:	2001      	movne	r0, #1
    b09c:	4770      	bx	lr
    b09e:	2001      	movs	r0, #1
}
    b0a0:	4770      	bx	lr

0000b0a2 <uarte_nrfx_fifo_fill>:
{
    b0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    b0a4:	6905      	ldr	r5, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    b0a6:	68eb      	ldr	r3, [r5, #12]
    b0a8:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b0aa:	f3bf 8f5b 	dmb	ish
    b0ae:	4294      	cmp	r4, r2
    b0b0:	bfa8      	it	ge
    b0b2:	4614      	movge	r4, r2
    b0b4:	3310      	adds	r3, #16
    b0b6:	2201      	movs	r2, #1
    b0b8:	e853 6f00 	ldrex	r6, [r3]
    b0bc:	2e00      	cmp	r6, #0
    b0be:	d103      	bne.n	b0c8 <uarte_nrfx_fifo_fill+0x26>
    b0c0:	e843 2700 	strex	r7, r2, [r3]
    b0c4:	2f00      	cmp	r7, #0
    b0c6:	d1f7      	bne.n	b0b8 <uarte_nrfx_fifo_fill+0x16>
    b0c8:	f3bf 8f5b 	dmb	ish
    b0cc:	bf0c      	ite	eq
    b0ce:	4613      	moveq	r3, r2
    b0d0:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    b0d2:	d01e      	beq.n	b112 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    b0d4:	461c      	mov	r4, r3
}
    b0d6:	4620      	mov	r0, r4
    b0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    b0da:	68ea      	ldr	r2, [r5, #12]
    b0dc:	5cce      	ldrb	r6, [r1, r3]
    b0de:	6892      	ldr	r2, [r2, #8]
    b0e0:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
    b0e2:	3301      	adds	r3, #1
    b0e4:	42a3      	cmp	r3, r4
    b0e6:	dbf8      	blt.n	b0da <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
    b0e8:	f04f 0320 	mov.w	r3, #32
    b0ec:	f3ef 8711 	mrs	r7, BASEPRI
    b0f0:	f383 8812 	msr	BASEPRI_MAX, r3
    b0f4:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    b0f8:	6846      	ldr	r6, [r0, #4]
    b0fa:	4630      	mov	r0, r6
    b0fc:	f7ff ffc1 	bl	b082 <is_tx_ready.isra.0>
    b100:	68eb      	ldr	r3, [r5, #12]
    b102:	b940      	cbnz	r0, b116 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    b104:	6118      	str	r0, [r3, #16]
		len = 0;
    b106:	4604      	mov	r4, r0
	__asm__ volatile(
    b108:	f387 8811 	msr	BASEPRI, r7
    b10c:	f3bf 8f6f 	isb	sy
	return len;
    b110:	e7e1      	b.n	b0d6 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
    b112:	2300      	movs	r3, #0
    b114:	e7e6      	b.n	b0e4 <uarte_nrfx_fifo_fill+0x42>
		tx_start(dev, data->int_driven->tx_buffer, len);
    b116:	6899      	ldr	r1, [r3, #8]
    b118:	4622      	mov	r2, r4
    b11a:	4630      	mov	r0, r6
    b11c:	f7ff ff96 	bl	b04c <tx_start.isra.0>
    b120:	e7f2      	b.n	b108 <uarte_nrfx_fifo_fill+0x66>

0000b122 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    b122:	6843      	ldr	r3, [r0, #4]
    b124:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    b126:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b12a:	05d1      	lsls	r1, r2, #23
{
    b12c:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b12e:	d518      	bpl.n	b162 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b130:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    b134:	b1aa      	cbz	r2, b162 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    b136:	f04f 0120 	mov.w	r1, #32
    b13a:	f3ef 8211 	mrs	r2, BASEPRI
    b13e:	f381 8812 	msr	BASEPRI_MAX, r1
    b142:	f3bf 8f6f 	isb	sy
    b146:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b14a:	b131      	cbz	r1, b15a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b14c:	2100      	movs	r1, #0
    b14e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b152:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b156:	2101      	movs	r1, #1
    b158:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b15a:	f382 8811 	msr	BASEPRI, r2
    b15e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b162:	6842      	ldr	r2, [r0, #4]
    b164:	6852      	ldr	r2, [r2, #4]
    b166:	06d2      	lsls	r2, r2, #27
    b168:	d51a      	bpl.n	b1a0 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    b16a:	f04f 0220 	mov.w	r2, #32
    b16e:	f3ef 8111 	mrs	r1, BASEPRI
    b172:	f382 8812 	msr	BASEPRI_MAX, r2
    b176:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b17a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b17e:	b112      	cbz	r2, b186 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b180:	2200      	movs	r2, #0
    b182:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    b186:	6902      	ldr	r2, [r0, #16]
    b188:	68d2      	ldr	r2, [r2, #12]
    b18a:	b10a      	cbz	r2, b190 <uarte_nrfx_isr_int+0x6e>
    b18c:	6912      	ldr	r2, [r2, #16]
    b18e:	b91a      	cbnz	r2, b198 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    b190:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b194:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    b198:	f381 8811 	msr	BASEPRI, r1
    b19c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    b1a0:	6902      	ldr	r2, [r0, #16]
    b1a2:	68d2      	ldr	r2, [r2, #12]
    b1a4:	b15a      	cbz	r2, b1be <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b1a6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b1aa:	b151      	cbz	r1, b1c2 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    b1ac:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    b1ae:	2100      	movs	r1, #0
    b1b0:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    b1b2:	b134      	cbz	r4, b1c2 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    b1b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b1b8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    b1bc:	7391      	strb	r1, [r2, #14]
}
    b1be:	bc10      	pop	{r4}
    b1c0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b1c2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b1c6:	b121      	cbz	r1, b1d2 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1c8:	2100      	movs	r1, #0
    b1ca:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    b1ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    b1d2:	6813      	ldr	r3, [r2, #0]
    b1d4:	2b00      	cmp	r3, #0
    b1d6:	d0f2      	beq.n	b1be <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b1d8:	6851      	ldr	r1, [r2, #4]
}
    b1da:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b1dc:	4718      	bx	r3

0000b1de <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b1de:	b510      	push	{r4, lr}
    b1e0:	2200      	movs	r2, #0
    b1e2:	4604      	mov	r4, r0
    b1e4:	2101      	movs	r1, #1
    b1e6:	2028      	movs	r0, #40	; 0x28
    b1e8:	f7f8 fab8 	bl	375c <z_arm_irq_priority_set>
    b1ec:	2028      	movs	r0, #40	; 0x28
    b1ee:	f7f8 fa85 	bl	36fc <arch_irq_enable>
    b1f2:	4620      	mov	r0, r4
    b1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1f8:	f7fa b8e0 	b.w	53bc <uarte_instance_init.constprop.0>

0000b1fc <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    b1fc:	b510      	push	{r4, lr}
    b1fe:	2200      	movs	r2, #0
    b200:	4604      	mov	r4, r0
    b202:	2101      	movs	r1, #1
    b204:	2002      	movs	r0, #2
    b206:	f7f8 faa9 	bl	375c <z_arm_irq_priority_set>
    b20a:	2002      	movs	r0, #2
    b20c:	f7f8 fa76 	bl	36fc <arch_irq_enable>
    b210:	4620      	mov	r0, r4
    b212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b216:	f7fa b8d1 	b.w	53bc <uarte_instance_init.constprop.0>

0000b21a <fprotect_set_permission>:

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
    b21a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b21c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(nrf_ficr_codepagesize_get(NRF_FICR) ==
			CONFIG_FPROTECT_BLOCK_SIZE);

	uint32_t region_idx;
	int result = find_free_region(&region_idx);
    b21e:	a801      	add	r0, sp, #4
{
    b220:	460c      	mov	r4, r1
    b222:	4616      	mov	r6, r2
	int result = find_free_region(&region_idx);
    b224:	f7fa fbcc 	bl	59c0 <find_free_region>

	if (result != 0) {
    b228:	bb70      	cbnz	r0, b288 <fprotect_set_permission+0x6e>
    return p_reg->CODEPAGESIZE;
    b22a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b22e:	6919      	ldr	r1, [r3, #16]
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    b230:	fbb5 f2f1 	udiv	r2, r5, r1
    b234:	fb01 5212 	mls	r2, r1, r2, r5
    b238:	bb42      	cbnz	r2, b28c <fprotect_set_permission+0x72>
    b23a:	6919      	ldr	r1, [r3, #16]
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    b23c:	fbb4 f2f1 	udiv	r2, r4, r1
    b240:	fb01 4212 	mls	r2, r1, r2, r4
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    b244:	bb12      	cbnz	r2, b28c <fprotect_set_permission+0x72>
    b246:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    b248:	695b      	ldr	r3, [r3, #20]
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    b24a:	4353      	muls	r3, r2
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    b24c:	42a3      	cmp	r3, r4
    b24e:	d31d      	bcc.n	b28c <fprotect_set_permission+0x72>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    b250:	b1e4      	cbz	r4, b28c <fprotect_set_permission+0x72>
		return -EINVAL;
	}

	nrf_acl_region_set(NRF_ACL, region_idx, start, length, permission);
    b252:	9b01      	ldr	r3, [sp, #4]
    p_reg->ACL[region_id].ADDR = address;
    b254:	011b      	lsls	r3, r3, #4
    b256:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    b25a:	f501 31f0 	add.w	r1, r1, #122880	; 0x1e000
    b25e:	f8c1 5800 	str.w	r5, [r1, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
    b262:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
    b266:	f8c1 6808 	str.w	r6, [r1, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
    b26a:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800

	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
    b26e:	4295      	cmp	r5, r2
    b270:	d10f      	bne.n	b292 <fprotect_set_permission+0x78>
    return (size_t)p_reg->ACL[region_id].SIZE;
    b272:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
    b276:	4294      	cmp	r4, r2
    b278:	d10b      	bne.n	b292 <fprotect_set_permission+0x78>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    b27a:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
    b27e:	b2db      	uxtb	r3, r3
		return -EFAULT;
    b280:	42b3      	cmp	r3, r6
    b282:	bf18      	it	ne
    b284:	f06f 000d 	mvnne.w	r0, #13
	}

	return 0;
}
    b288:	b002      	add	sp, #8
    b28a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    b28c:	f06f 0015 	mvn.w	r0, #21
    b290:	e7fa      	b.n	b288 <fprotect_set_permission+0x6e>
		return -EFAULT;
    b292:	f06f 000d 	mvn.w	r0, #13
    b296:	e7f7      	b.n	b288 <fprotect_set_permission+0x6e>

0000b298 <fprotect_area>:
}
#endif

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
    b298:	2202      	movs	r2, #2
    b29a:	f7ff bfbe 	b.w	b21a <fprotect_set_permission>

0000b29e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    b29e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    b2a0:	2000      	movs	r0, #0
    b2a2:	f7f8 fda9 	bl	3df8 <sys_arch_reboot>

0000b2a6 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b2a6:	f7fd be95 	b.w	8fd4 <nrf_cc3xx_platform_init_no_rng>

0000b2aa <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    b2aa:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b2ac:	f7f7 fc4e 	bl	2b4c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b2b0:	f7f7 fd00 	bl	2cb4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    b2b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b2b8:	f7fd be8c 	b.w	8fd4 <nrf_cc3xx_platform_init_no_rng>

0000b2bc <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    b2bc:	6880      	ldr	r0, [r0, #8]
}
    b2be:	3828      	subs	r0, #40	; 0x28
    b2c0:	4770      	bx	lr

0000b2c2 <boot_magic_compatible_check>:
    switch (tbl_val) {
    b2c2:	2804      	cmp	r0, #4
    b2c4:	d009      	beq.n	b2da <boot_magic_compatible_check+0x18>
    b2c6:	2805      	cmp	r0, #5
    b2c8:	d103      	bne.n	b2d2 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    b2ca:	1e48      	subs	r0, r1, #1
    b2cc:	bf18      	it	ne
    b2ce:	2001      	movne	r0, #1
    b2d0:	4770      	bx	lr
        return tbl_val == val;
    b2d2:	1a43      	subs	r3, r0, r1
    b2d4:	4258      	negs	r0, r3
    b2d6:	4158      	adcs	r0, r3
    b2d8:	4770      	bx	lr
    switch (tbl_val) {
    b2da:	2001      	movs	r0, #1
}
    b2dc:	4770      	bx	lr

0000b2de <bootutil_buffer_is_erased>:
{
    b2de:	b538      	push	{r3, r4, r5, lr}
    b2e0:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    b2e2:	460c      	mov	r4, r1
    b2e4:	b161      	cbz	r1, b300 <bootutil_buffer_is_erased+0x22>
    b2e6:	b15a      	cbz	r2, b300 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    b2e8:	f7ff f917 	bl	a51a <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    b2ec:	4425      	add	r5, r4
    b2ee:	4621      	mov	r1, r4
        if (u8b[i] != erased_val) {
    b2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
    b2f4:	4283      	cmp	r3, r0
    b2f6:	d103      	bne.n	b300 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    b2f8:	42a9      	cmp	r1, r5
    b2fa:	d1f9      	bne.n	b2f0 <bootutil_buffer_is_erased+0x12>
    return true;
    b2fc:	2001      	movs	r0, #1
}
    b2fe:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    b300:	2000      	movs	r0, #0
    b302:	e7fc      	b.n	b2fe <bootutil_buffer_is_erased+0x20>

0000b304 <boot_read_flag>:
{
    b304:	b538      	push	{r3, r4, r5, lr}
    b306:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b308:	2301      	movs	r3, #1
{
    b30a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b30c:	4622      	mov	r2, r4
{
    b30e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b310:	f7ff f87c 	bl	a40c <flash_area_read>
    if (rc < 0) {
    b314:	2800      	cmp	r0, #0
    b316:	db0f      	blt.n	b338 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    b318:	2201      	movs	r2, #1
    b31a:	4621      	mov	r1, r4
    b31c:	4628      	mov	r0, r5
    b31e:	f7ff ffde 	bl	b2de <bootutil_buffer_is_erased>
    b322:	b938      	cbnz	r0, b334 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    b324:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    b326:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    b328:	bf14      	ite	ne
    b32a:	2302      	movne	r3, #2
    b32c:	2301      	moveq	r3, #1
    b32e:	7023      	strb	r3, [r4, #0]
    b330:	2000      	movs	r0, #0
}
    b332:	bd38      	pop	{r3, r4, r5, pc}
    b334:	2303      	movs	r3, #3
    b336:	e7fa      	b.n	b32e <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    b338:	2001      	movs	r0, #1
    b33a:	e7fa      	b.n	b332 <boot_read_flag+0x2e>

0000b33c <boot_write_trailer>:
{
    b33c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b340:	461d      	mov	r5, r3
    b342:	4606      	mov	r6, r0
    b344:	460f      	mov	r7, r1
    b346:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    b348:	f7ff f8de 	bl	a508 <flash_area_align>
    b34c:	b2c4      	uxtb	r4, r0
    align = (inlen + align - 1) & ~(align - 1);
    b34e:	4263      	negs	r3, r4
    b350:	442c      	add	r4, r5
    b352:	3c01      	subs	r4, #1
    b354:	b2e4      	uxtb	r4, r4
    b356:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
    b358:	2c08      	cmp	r4, #8
    b35a:	d81a      	bhi.n	b392 <boot_write_trailer+0x56>
    erased_val = flash_area_erased_val(fap);
    b35c:	4630      	mov	r0, r6
    b35e:	f7ff f8dc 	bl	a51a <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    b362:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    b364:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    b366:	4641      	mov	r1, r8
    b368:	4668      	mov	r0, sp
    b36a:	f7ff fbba 	bl	aae2 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    b36e:	1b62      	subs	r2, r4, r5
    b370:	4649      	mov	r1, r9
    b372:	eb0d 0005 	add.w	r0, sp, r5
    b376:	f7ff fbbf 	bl	aaf8 <memset>
    rc = flash_area_write(fap, off, buf, align);
    b37a:	4623      	mov	r3, r4
    b37c:	466a      	mov	r2, sp
    b37e:	4639      	mov	r1, r7
    b380:	4630      	mov	r0, r6
    b382:	f7ff f85f 	bl	a444 <flash_area_write>
    if (rc != 0) {
    b386:	3800      	subs	r0, #0
    b388:	bf18      	it	ne
    b38a:	2001      	movne	r0, #1
}
    b38c:	b003      	add	sp, #12
    b38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    b392:	f04f 30ff 	mov.w	r0, #4294967295
    b396:	e7f9      	b.n	b38c <boot_write_trailer+0x50>

0000b398 <boot_write_trailer_flag>:
{
    b398:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    b39a:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    b39c:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    b3a0:	aa01      	add	r2, sp, #4
    b3a2:	f7ff ffcb 	bl	b33c <boot_write_trailer>
}
    b3a6:	b003      	add	sp, #12
    b3a8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b3ac <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    b3ac:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    b3ae:	2201      	movs	r2, #1
    b3b0:	3918      	subs	r1, #24
    b3b2:	f7ff bff1 	b.w	b398 <boot_write_trailer_flag>

0000b3b6 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    b3b6:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    b3b8:	3a18      	subs	r2, #24
    b3ba:	f7ff bfa3 	b.w	b304 <boot_read_flag>

0000b3be <boot_read_swap_state_by_id>:
{
    b3be:	b513      	push	{r0, r1, r4, lr}
    b3c0:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    b3c2:	b2c0      	uxtb	r0, r0
    b3c4:	a901      	add	r1, sp, #4
    b3c6:	f7f7 fb6d 	bl	2aa4 <flash_area_open>
    if (rc != 0) {
    b3ca:	b950      	cbnz	r0, b3e2 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    b3cc:	4621      	mov	r1, r4
    b3ce:	9801      	ldr	r0, [sp, #4]
    b3d0:	f7fa fb22 	bl	5a18 <boot_read_swap_state>
    b3d4:	4604      	mov	r4, r0
    flash_area_close(fap);
    b3d6:	9801      	ldr	r0, [sp, #4]
    b3d8:	f7ff f817 	bl	a40a <flash_area_close>
}
    b3dc:	4620      	mov	r0, r4
    b3de:	b002      	add	sp, #8
    b3e0:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    b3e2:	2401      	movs	r4, #1
    b3e4:	e7fa      	b.n	b3dc <boot_read_swap_state_by_id+0x1e>

0000b3e6 <boot_write_swap_info>:
{
    b3e6:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    b3e8:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    b3ec:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    b3f0:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    b3f2:	2301      	movs	r3, #1
    b3f4:	f10d 0207 	add.w	r2, sp, #7
    b3f8:	3928      	subs	r1, #40	; 0x28
    b3fa:	f7ff ff9f 	bl	b33c <boot_write_trailer>
}
    b3fe:	b003      	add	sp, #12
    b400:	f85d fb04 	ldr.w	pc, [sp], #4

0000b404 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    b404:	2000      	movs	r0, #0
    b406:	4770      	bx	lr

0000b408 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    b408:	6803      	ldr	r3, [r0, #0]
{
    b40a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    b40c:	1acd      	subs	r5, r1, r3
    b40e:	2d00      	cmp	r5, #0
    b410:	dc02      	bgt.n	b418 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b412:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    b416:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    b418:	f993 6000 	ldrsb.w	r6, [r3]
    b41c:	781c      	ldrb	r4, [r3, #0]
    b41e:	2e00      	cmp	r6, #0
    b420:	db0a      	blt.n	b438 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    b422:	1c5c      	adds	r4, r3, #1
    b424:	6004      	str	r4, [r0, #0]
    b426:	781b      	ldrb	r3, [r3, #0]
    b428:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    b42a:	6803      	ldr	r3, [r0, #0]
    b42c:	1ac9      	subs	r1, r1, r3
    b42e:	6813      	ldr	r3, [r2, #0]
    b430:	428b      	cmp	r3, r1
    b432:	d8ee      	bhi.n	b412 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    b434:	2000      	movs	r0, #0
    b436:	e7ee      	b.n	b416 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    b438:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    b43c:	3c01      	subs	r4, #1
    b43e:	2c03      	cmp	r4, #3
    b440:	d827      	bhi.n	b492 <mbedtls_asn1_get_len+0x8a>
    b442:	e8df f004 	tbb	[pc, r4]
    b446:	0902      	.short	0x0902
    b448:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    b44a:	2d01      	cmp	r5, #1
    b44c:	d0e1      	beq.n	b412 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    b44e:	785c      	ldrb	r4, [r3, #1]
    b450:	6014      	str	r4, [r2, #0]
            (*p) += 2;
    b452:	3302      	adds	r3, #2
            (*p) += 5;
    b454:	6003      	str	r3, [r0, #0]
            break;
    b456:	e7e8      	b.n	b42a <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    b458:	2d02      	cmp	r5, #2
    b45a:	ddda      	ble.n	b412 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    b45c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
    b460:	ba64      	rev16	r4, r4
    b462:	b2a4      	uxth	r4, r4
    b464:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    b466:	3303      	adds	r3, #3
    b468:	e7f4      	b.n	b454 <mbedtls_asn1_get_len+0x4c>
            if( ( end - *p ) < 4 )
    b46a:	2d03      	cmp	r5, #3
    b46c:	ddd1      	ble.n	b412 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b46e:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    b470:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b472:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    b474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b478:	78dd      	ldrb	r5, [r3, #3]
    b47a:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    b47c:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    b47e:	3304      	adds	r3, #4
    b480:	e7e8      	b.n	b454 <mbedtls_asn1_get_len+0x4c>
            if( ( end - *p ) < 5 )
    b482:	2d04      	cmp	r5, #4
    b484:	ddc5      	ble.n	b412 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    b486:	f8d3 4001 	ldr.w	r4, [r3, #1]
    b48a:	ba24      	rev	r4, r4
    b48c:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    b48e:	3305      	adds	r3, #5
    b490:	e7e0      	b.n	b454 <mbedtls_asn1_get_len+0x4c>
        switch( **p & 0x7F )
    b492:	f06f 0063 	mvn.w	r0, #99	; 0x63
    b496:	e7be      	b.n	b416 <mbedtls_asn1_get_len+0xe>

0000b498 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    b498:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    b49a:	6804      	ldr	r4, [r0, #0]
    b49c:	1b0e      	subs	r6, r1, r4
    b49e:	2e00      	cmp	r6, #0
    b4a0:	dd07      	ble.n	b4b2 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    b4a2:	7826      	ldrb	r6, [r4, #0]
    b4a4:	429e      	cmp	r6, r3
    b4a6:	d108      	bne.n	b4ba <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    b4a8:	3401      	adds	r4, #1
    b4aa:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    b4ac:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    b4ae:	f7ff bfab 	b.w	b408 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b4b2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    b4b6:	bc70      	pop	{r4, r5, r6}
    b4b8:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    b4ba:	f06f 0061 	mvn.w	r0, #97	; 0x61
    b4be:	e7fa      	b.n	b4b6 <mbedtls_asn1_get_tag+0x1e>

0000b4c0 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    b4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    b4c2:	2302      	movs	r3, #2
{
    b4c4:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    b4c6:	aa01      	add	r2, sp, #4
{
    b4c8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    b4ca:	f7ff ffe5 	bl	b498 <mbedtls_asn1_get_tag>
    b4ce:	b940      	cbnz	r0, b4e2 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    b4d0:	9e01      	ldr	r6, [sp, #4]
    b4d2:	6821      	ldr	r1, [r4, #0]
    b4d4:	4632      	mov	r2, r6
    b4d6:	4628      	mov	r0, r5
    b4d8:	f000 fb5b 	bl	bb92 <mbedtls_mpi_read_binary>

    *p += len;
    b4dc:	6823      	ldr	r3, [r4, #0]
    b4de:	4433      	add	r3, r6
    b4e0:	6023      	str	r3, [r4, #0]

    return( ret );
}
    b4e2:	b002      	add	sp, #8
    b4e4:	bd70      	pop	{r4, r5, r6, pc}

0000b4e6 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    b4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4e8:	3904      	subs	r1, #4
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    const mbedtls_mpi_uint mask = -assign;
    b4ea:	425f      	negs	r7, r3

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    b4ec:	2500      	movs	r5, #0
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    b4ee:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    b4f0:	4285      	cmp	r5, r0
    b4f2:	d100      	bne.n	b4f6 <mpi_safe_cond_assign+0x10>
}
    b4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    b4f6:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    b4fa:	f851 4f04 	ldr.w	r4, [r1, #4]!
    b4fe:	403e      	ands	r6, r7
    b500:	401c      	ands	r4, r3
    b502:	4334      	orrs	r4, r6
    b504:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    b506:	3501      	adds	r5, #1
    b508:	e7f2      	b.n	b4f0 <mpi_safe_cond_assign+0xa>

0000b50a <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    b50a:	b5f0      	push	{r4, r5, r6, r7, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    b50c:	4684      	mov	ip, r0
{
    b50e:	4617      	mov	r7, r2
    b510:	460e      	mov	r6, r1
    b512:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    b514:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    b516:	f1bc 0f0f 	cmp.w	ip, #15
    b51a:	f106 0640 	add.w	r6, r6, #64	; 0x40
    b51e:	f104 0440 	add.w	r4, r4, #64	; 0x40
    b522:	d877      	bhi.n	b614 <mpi_mul_hlp+0x10a>
    b524:	0904      	lsrs	r4, r0, #4
    b526:	f06f 020f 	mvn.w	r2, #15
    b52a:	fb02 0004 	mla	r0, r2, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    b52e:	2807      	cmp	r0, #7
    b530:	ea4f 1c84 	mov.w	ip, r4, lsl #6
    b534:	eb01 1684 	add.w	r6, r1, r4, lsl #6
    b538:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    b53c:	d95d      	bls.n	b5fa <mpi_mul_hlp+0xf0>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    b53e:	f851 100c 	ldr.w	r1, [r1, ip]
    b542:	fba3 1201 	umull	r1, r2, r3, r1
    b546:	1869      	adds	r1, r5, r1
    b548:	f857 500c 	ldr.w	r5, [r7, ip]
    b54c:	f142 0200 	adc.w	r2, r2, #0
    b550:	1949      	adds	r1, r1, r5
    b552:	f847 100c 	str.w	r1, [r7, ip]
    b556:	6871      	ldr	r1, [r6, #4]
    b558:	f142 0200 	adc.w	r2, r2, #0
    b55c:	fba3 5101 	umull	r5, r1, r3, r1
    b560:	1952      	adds	r2, r2, r5
    b562:	6865      	ldr	r5, [r4, #4]
    b564:	f141 0100 	adc.w	r1, r1, #0
    b568:	1952      	adds	r2, r2, r5
    b56a:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    b56c:	68b2      	ldr	r2, [r6, #8]
        MULADDC_CORE   MULADDC_CORE
    b56e:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    b572:	fba3 5202 	umull	r5, r2, r3, r2
    b576:	1949      	adds	r1, r1, r5
    b578:	68a5      	ldr	r5, [r4, #8]
    b57a:	f142 0200 	adc.w	r2, r2, #0
    b57e:	1949      	adds	r1, r1, r5
    b580:	60a1      	str	r1, [r4, #8]
    b582:	68f1      	ldr	r1, [r6, #12]
    b584:	f142 0200 	adc.w	r2, r2, #0
    b588:	fba3 5101 	umull	r5, r1, r3, r1
    b58c:	1952      	adds	r2, r2, r5
    b58e:	68e5      	ldr	r5, [r4, #12]
    b590:	f141 0100 	adc.w	r1, r1, #0
    b594:	1952      	adds	r2, r2, r5
    b596:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
    b598:	6932      	ldr	r2, [r6, #16]
        MULADDC_CORE   MULADDC_CORE
    b59a:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    b59e:	fba3 5202 	umull	r5, r2, r3, r2
    b5a2:	1949      	adds	r1, r1, r5
    b5a4:	6925      	ldr	r5, [r4, #16]
    b5a6:	f142 0200 	adc.w	r2, r2, #0
    b5aa:	1949      	adds	r1, r1, r5
    b5ac:	6121      	str	r1, [r4, #16]
    b5ae:	6971      	ldr	r1, [r6, #20]
    b5b0:	f142 0200 	adc.w	r2, r2, #0
    b5b4:	fba3 5101 	umull	r5, r1, r3, r1
    b5b8:	1952      	adds	r2, r2, r5
    b5ba:	6965      	ldr	r5, [r4, #20]
    b5bc:	f141 0100 	adc.w	r1, r1, #0
    b5c0:	1952      	adds	r2, r2, r5
    b5c2:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
    b5c4:	69b2      	ldr	r2, [r6, #24]
        MULADDC_CORE   MULADDC_CORE
    b5c6:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    b5ca:	fba3 5202 	umull	r5, r2, r3, r2
    b5ce:	1949      	adds	r1, r1, r5
    b5d0:	69a5      	ldr	r5, [r4, #24]
    b5d2:	f142 0200 	adc.w	r2, r2, #0
    b5d6:	1949      	adds	r1, r1, r5
    b5d8:	61a1      	str	r1, [r4, #24]
    b5da:	69f1      	ldr	r1, [r6, #28]
    b5dc:	f142 0200 	adc.w	r2, r2, #0
    b5e0:	fba3 1501 	umull	r1, r5, r3, r1
    b5e4:	1852      	adds	r2, r2, r1
    b5e6:	69e1      	ldr	r1, [r4, #28]
    b5e8:	f145 0500 	adc.w	r5, r5, #0
    b5ec:	1852      	adds	r2, r2, r1
    b5ee:	61e2      	str	r2, [r4, #28]
    b5f0:	f145 0500 	adc.w	r5, r5, #0
    for( ; i >= 8; i -= 8 )
    b5f4:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    b5f6:	3420      	adds	r4, #32
    b5f8:	3620      	adds	r6, #32
    b5fa:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    b5fe:	4627      	mov	r7, r4
    b600:	eb06 0080 	add.w	r0, r6, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    b604:	42b0      	cmp	r0, r6
    b606:	f040 8106 	bne.w	b816 <mpi_mul_hlp+0x30c>
    b60a:	4464      	add	r4, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    b60c:	2d00      	cmp	r5, #0
    b60e:	f040 8110 	bne.w	b832 <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    b612:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_CORE   MULADDC_CORE
    b614:	f856 2c40 	ldr.w	r2, [r6, #-64]
    b618:	fba3 e202 	umull	lr, r2, r3, r2
    b61c:	eb15 0e0e 	adds.w	lr, r5, lr
    b620:	f854 5c40 	ldr.w	r5, [r4, #-64]
    b624:	f142 0200 	adc.w	r2, r2, #0
    b628:	eb15 050e 	adds.w	r5, r5, lr
    b62c:	f844 5c40 	str.w	r5, [r4, #-64]
    b630:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    b634:	f142 0200 	adc.w	r2, r2, #0
    b638:	fba3 e505 	umull	lr, r5, r3, r5
    b63c:	eb12 0e0e 	adds.w	lr, r2, lr
    b640:	f854 2c3c 	ldr.w	r2, [r4, #-60]
    b644:	f145 0500 	adc.w	r5, r5, #0
    b648:	eb12 020e 	adds.w	r2, r2, lr
    b64c:	f844 2c3c 	str.w	r2, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    b650:	f856 2c38 	ldr.w	r2, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    b654:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b658:	fba3 e202 	umull	lr, r2, r3, r2
    b65c:	eb15 0e0e 	adds.w	lr, r5, lr
    b660:	f854 5c38 	ldr.w	r5, [r4, #-56]
    b664:	f142 0200 	adc.w	r2, r2, #0
    b668:	eb15 050e 	adds.w	r5, r5, lr
    b66c:	f844 5c38 	str.w	r5, [r4, #-56]
    b670:	f856 5c34 	ldr.w	r5, [r6, #-52]
    b674:	f142 0200 	adc.w	r2, r2, #0
    b678:	fba3 e505 	umull	lr, r5, r3, r5
    b67c:	eb12 0e0e 	adds.w	lr, r2, lr
    b680:	f854 2c34 	ldr.w	r2, [r4, #-52]
    b684:	f145 0500 	adc.w	r5, r5, #0
    b688:	eb12 020e 	adds.w	r2, r2, lr
    b68c:	f844 2c34 	str.w	r2, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    b690:	f856 2c30 	ldr.w	r2, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    b694:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b698:	fba3 e202 	umull	lr, r2, r3, r2
    b69c:	eb15 0e0e 	adds.w	lr, r5, lr
    b6a0:	f854 5c30 	ldr.w	r5, [r4, #-48]
    b6a4:	f142 0200 	adc.w	r2, r2, #0
    b6a8:	eb15 050e 	adds.w	r5, r5, lr
    b6ac:	f844 5c30 	str.w	r5, [r4, #-48]
    b6b0:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    b6b4:	f142 0200 	adc.w	r2, r2, #0
    b6b8:	fba3 e505 	umull	lr, r5, r3, r5
    b6bc:	eb12 0e0e 	adds.w	lr, r2, lr
    b6c0:	f854 2c2c 	ldr.w	r2, [r4, #-44]
    b6c4:	f145 0500 	adc.w	r5, r5, #0
    b6c8:	eb12 020e 	adds.w	r2, r2, lr
    b6cc:	f844 2c2c 	str.w	r2, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    b6d0:	f856 2c28 	ldr.w	r2, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    b6d4:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b6d8:	fba3 e202 	umull	lr, r2, r3, r2
    b6dc:	eb15 0e0e 	adds.w	lr, r5, lr
    b6e0:	f854 5c28 	ldr.w	r5, [r4, #-40]
    b6e4:	f142 0200 	adc.w	r2, r2, #0
    b6e8:	eb15 050e 	adds.w	r5, r5, lr
    b6ec:	f844 5c28 	str.w	r5, [r4, #-40]
    b6f0:	f856 5c24 	ldr.w	r5, [r6, #-36]
    b6f4:	f142 0200 	adc.w	r2, r2, #0
    b6f8:	fba3 e505 	umull	lr, r5, r3, r5
    b6fc:	eb12 0e0e 	adds.w	lr, r2, lr
    b700:	f854 2c24 	ldr.w	r2, [r4, #-36]
    b704:	f145 0500 	adc.w	r5, r5, #0
    b708:	eb12 020e 	adds.w	r2, r2, lr
    b70c:	f844 2c24 	str.w	r2, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    b710:	f856 2c20 	ldr.w	r2, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    b714:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b718:	fba3 e202 	umull	lr, r2, r3, r2
    b71c:	eb15 0e0e 	adds.w	lr, r5, lr
    b720:	f854 5c20 	ldr.w	r5, [r4, #-32]
    b724:	f142 0200 	adc.w	r2, r2, #0
    b728:	eb15 050e 	adds.w	r5, r5, lr
    b72c:	f844 5c20 	str.w	r5, [r4, #-32]
    b730:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    b734:	f142 0200 	adc.w	r2, r2, #0
    b738:	fba3 e505 	umull	lr, r5, r3, r5
    b73c:	eb12 0e0e 	adds.w	lr, r2, lr
    b740:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    b744:	f145 0500 	adc.w	r5, r5, #0
    b748:	eb12 020e 	adds.w	r2, r2, lr
    b74c:	f844 2c1c 	str.w	r2, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    b750:	f856 2c18 	ldr.w	r2, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    b754:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b758:	fba3 e202 	umull	lr, r2, r3, r2
    b75c:	eb15 0e0e 	adds.w	lr, r5, lr
    b760:	f854 5c18 	ldr.w	r5, [r4, #-24]
    b764:	f142 0200 	adc.w	r2, r2, #0
    b768:	eb15 050e 	adds.w	r5, r5, lr
    b76c:	f844 5c18 	str.w	r5, [r4, #-24]
    b770:	f856 5c14 	ldr.w	r5, [r6, #-20]
    b774:	f142 0200 	adc.w	r2, r2, #0
    b778:	fba3 e505 	umull	lr, r5, r3, r5
    b77c:	eb12 0e0e 	adds.w	lr, r2, lr
    b780:	f854 2c14 	ldr.w	r2, [r4, #-20]
    b784:	f145 0500 	adc.w	r5, r5, #0
    b788:	eb12 020e 	adds.w	r2, r2, lr
    b78c:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    b790:	f856 2c10 	ldr.w	r2, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    b794:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b798:	fba3 e202 	umull	lr, r2, r3, r2
    b79c:	eb15 0e0e 	adds.w	lr, r5, lr
    b7a0:	f854 5c10 	ldr.w	r5, [r4, #-16]
    b7a4:	f142 0200 	adc.w	r2, r2, #0
    b7a8:	eb15 050e 	adds.w	r5, r5, lr
    b7ac:	f844 5c10 	str.w	r5, [r4, #-16]
    b7b0:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    b7b4:	f142 0200 	adc.w	r2, r2, #0
    b7b8:	fba3 e505 	umull	lr, r5, r3, r5
    b7bc:	eb12 0e0e 	adds.w	lr, r2, lr
    b7c0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    b7c4:	f145 0500 	adc.w	r5, r5, #0
    b7c8:	eb12 020e 	adds.w	r2, r2, lr
    b7cc:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    b7d0:	f856 2c08 	ldr.w	r2, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    b7d4:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    b7d8:	fba3 e202 	umull	lr, r2, r3, r2
    b7dc:	eb15 0e0e 	adds.w	lr, r5, lr
    b7e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
    b7e4:	f142 0200 	adc.w	r2, r2, #0
    b7e8:	eb15 050e 	adds.w	r5, r5, lr
    b7ec:	f844 5c08 	str.w	r5, [r4, #-8]
    b7f0:	f856 5c04 	ldr.w	r5, [r6, #-4]
    b7f4:	f142 0200 	adc.w	r2, r2, #0
    b7f8:	fba3 5e05 	umull	r5, lr, r3, r5
    b7fc:	1952      	adds	r2, r2, r5
    b7fe:	f854 5c04 	ldr.w	r5, [r4, #-4]
    b802:	f14e 0e00 	adc.w	lr, lr, #0
    b806:	18aa      	adds	r2, r5, r2
    b808:	f14e 0500 	adc.w	r5, lr, #0
    b80c:	f844 2c04 	str.w	r2, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    b810:	f1ac 0c10 	sub.w	ip, ip, #16
    b814:	e67f      	b.n	b516 <mpi_mul_hlp+0xc>
        MULADDC_CORE
    b816:	f856 2b04 	ldr.w	r2, [r6], #4
    b81a:	fba3 2102 	umull	r2, r1, r3, r2
    b81e:	18aa      	adds	r2, r5, r2
    b820:	f141 0500 	adc.w	r5, r1, #0
    b824:	6839      	ldr	r1, [r7, #0]
    b826:	1889      	adds	r1, r1, r2
    b828:	f847 1b04 	str.w	r1, [r7], #4
    b82c:	f145 0500 	adc.w	r5, r5, #0
    for( ; i > 0; i-- )
    b830:	e6e8      	b.n	b604 <mpi_mul_hlp+0xfa>
        *d += c; c = ( *d < c ); d++;
    b832:	6823      	ldr	r3, [r4, #0]
    b834:	195b      	adds	r3, r3, r5
    b836:	f844 3b04 	str.w	r3, [r4], #4
    b83a:	bf2c      	ite	cs
    b83c:	2501      	movcs	r5, #1
    b83e:	2500      	movcc	r5, #0
    b840:	e6e4      	b.n	b60c <mpi_mul_hlp+0x102>

0000b842 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    b842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b846:	b085      	sub	sp, #20
    b848:	4617      	mov	r7, r2
    b84a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    b84c:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    b84e:	6862      	ldr	r2, [r4, #4]
    b850:	68a0      	ldr	r0, [r4, #8]
{
    b852:	9303      	str	r3, [sp, #12]
    b854:	468a      	mov	sl, r1
    memset( T->p, 0, T->n * ciL );
    b856:	0092      	lsls	r2, r2, #2
    b858:	2100      	movs	r1, #0
    b85a:	f7ff f94d 	bl	aaf8 <memset>

    d = T->p;
    n = N->n;
    b85e:	687e      	ldr	r6, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    b860:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    b864:	68a5      	ldr	r5, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    b866:	42b3      	cmp	r3, r6
    b868:	bf28      	it	cs
    b86a:	4633      	movcs	r3, r6
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    b86c:	1c74      	adds	r4, r6, #1
    m = ( B->n < n ) ? B->n : n;
    b86e:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    b870:	00a4      	lsls	r4, r4, #2
    d = T->p;
    b872:	46a9      	mov	r9, r5
    for( i = 0; i < n; i++ )
    b874:	f04f 0800 	mov.w	r8, #0
        u0 = A->p[i];
    b878:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    b87a:	45b0      	cmp	r8, r6
        u0 = A->p[i];
    b87c:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    b87e:	d11c      	bne.n	b8ba <mpi_montmul+0x78>
    b880:	3c04      	subs	r4, #4
    b882:	4425      	add	r5, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    b884:	4622      	mov	r2, r4
    b886:	4629      	mov	r1, r5
    b888:	f7ff f92b 	bl	aae2 <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    b88c:	592b      	ldr	r3, [r5, r4]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    b88e:	f8d7 e008 	ldr.w	lr, [r7, #8]
    d[n] += 1;
    b892:	3301      	adds	r3, #1
    mbedtls_mpi_uint c = 0, t, z;
    b894:	2200      	movs	r2, #0
    d[n] += 1;
    b896:	512b      	str	r3, [r5, r4]
    for( i = 0; i < n; i++ )
    b898:	1f28      	subs	r0, r5, #4
    b89a:	4613      	mov	r3, r2
    b89c:	429e      	cmp	r6, r3
    b89e:	d12b      	bne.n	b8f8 <mpi_montmul+0xb6>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    b8a0:	592b      	ldr	r3, [r5, r4]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    b8a2:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    b8a4:	1a9b      	subs	r3, r3, r2
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    b8a6:	6889      	ldr	r1, [r1, #8]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    b8a8:	512b      	str	r3, [r5, r4]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    b8aa:	462a      	mov	r2, r5
    b8ac:	b2db      	uxtb	r3, r3
    b8ae:	4630      	mov	r0, r6
}
    b8b0:	b005      	add	sp, #20
    b8b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    b8b6:	f7ff be16 	b.w	b4e6 <mpi_safe_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    b8ba:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    b8be:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    b8c2:	f8d9 3000 	ldr.w	r3, [r9]
    b8c6:	6808      	ldr	r0, [r1, #0]
    b8c8:	9a03      	ldr	r2, [sp, #12]
    b8ca:	fb00 330b 	mla	r3, r0, fp, r3
    b8ce:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    b8d0:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    b8d2:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    b8d4:	464a      	mov	r2, r9
    b8d6:	465b      	mov	r3, fp
    b8d8:	f7ff fe17 	bl	b50a <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    b8dc:	9b02      	ldr	r3, [sp, #8]
    b8de:	68b9      	ldr	r1, [r7, #8]
    b8e0:	464a      	mov	r2, r9
    b8e2:	4630      	mov	r0, r6
    b8e4:	f7ff fe11 	bl	b50a <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    b8e8:	f849 bb04 	str.w	fp, [r9], #4
    b8ec:	2300      	movs	r3, #0
    b8ee:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    b8f2:	f108 0801 	add.w	r8, r8, #1
    b8f6:	e7bf      	b.n	b878 <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    b8f8:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    b8fc:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    b900:	ebac 0102 	sub.w	r1, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    b904:	42b9      	cmp	r1, r7
    b906:	bf2c      	ite	cs
    b908:	f04f 0800 	movcs.w	r8, #0
    b90c:	f04f 0801 	movcc.w	r8, #1
    b910:	1bc9      	subs	r1, r1, r7
    b912:	4594      	cmp	ip, r2
    b914:	bf2c      	ite	cs
    b916:	4642      	movcs	r2, r8
    b918:	f108 0201 	addcc.w	r2, r8, #1
    b91c:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    b91e:	3301      	adds	r3, #1
    b920:	e7bc      	b.n	b89c <mpi_montmul+0x5a>

0000b922 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    b922:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    b924:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
    b928:	3a01      	subs	r2, #1
    b92a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
         cur_limb_left <= cur_limb_right;
    b92e:	4282      	cmp	r2, r0
    b930:	d201      	bcs.n	b936 <mpi_bigendian_to_host.part.0+0x14>
}
    b932:	b002      	add	sp, #8
    b934:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    b936:	6803      	ldr	r3, [r0, #0]
    b938:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    b93a:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    b93c:	eb0d 0503 	add.w	r5, sp, r3
    mbedtls_mpi_uint tmp = 0;
    b940:	2400      	movs	r4, #0
    b942:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    b944:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    b948:	3b01      	subs	r3, #1
    b94a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    b94e:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    b952:	d1f7      	bne.n	b944 <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    b954:	6815      	ldr	r5, [r2, #0]
    b956:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    b958:	461d      	mov	r5, r3
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    b95a:	3301      	adds	r3, #1
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    b95c:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    b960:	b2db      	uxtb	r3, r3
    b962:	2b04      	cmp	r3, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    b964:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    b968:	d1f7      	bne.n	b95a <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    b96a:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    b96e:	f842 4904 	str.w	r4, [r2], #-4
         cur_limb_left++, cur_limb_right-- )
    b972:	e7dc      	b.n	b92e <mpi_bigendian_to_host.part.0+0xc>

0000b974 <mbedtls_mpi_init>:
    X->n = 0;
    b974:	2300      	movs	r3, #0
    b976:	2201      	movs	r2, #1
    b978:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
    b97c:	6083      	str	r3, [r0, #8]
}
    b97e:	4770      	bx	lr

0000b980 <mbedtls_mpi_free>:
{
    b980:	b510      	push	{r4, lr}
    if( X == NULL )
    b982:	4604      	mov	r4, r0
    b984:	b168      	cbz	r0, b9a2 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    b986:	6880      	ldr	r0, [r0, #8]
    b988:	b130      	cbz	r0, b998 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    b98a:	6861      	ldr	r1, [r4, #4]
    b98c:	0089      	lsls	r1, r1, #2
    b98e:	f7fd fc01 	bl	9194 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    b992:	68a0      	ldr	r0, [r4, #8]
    b994:	f7fa fa66 	bl	5e64 <mbedtls_free>
    X->n = 0;
    b998:	2300      	movs	r3, #0
    b99a:	2201      	movs	r2, #1
    b99c:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    b9a0:	60a3      	str	r3, [r4, #8]
}
    b9a2:	bd10      	pop	{r4, pc}

0000b9a4 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    b9a4:	f242 7310 	movw	r3, #10000	; 0x2710
    b9a8:	4299      	cmp	r1, r3
{
    b9aa:	b570      	push	{r4, r5, r6, lr}
    b9ac:	4604      	mov	r4, r0
    b9ae:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    b9b0:	d902      	bls.n	b9b8 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    b9b2:	f06f 000f 	mvn.w	r0, #15
}
    b9b6:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    b9b8:	6843      	ldr	r3, [r0, #4]
    b9ba:	428b      	cmp	r3, r1
    b9bc:	d301      	bcc.n	b9c2 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    b9be:	2000      	movs	r0, #0
    b9c0:	e7f9      	b.n	b9b6 <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    b9c2:	2104      	movs	r1, #4
    b9c4:	4628      	mov	r0, r5
    b9c6:	f7fa fa47 	bl	5e58 <mbedtls_calloc>
    b9ca:	4606      	mov	r6, r0
    b9cc:	2800      	cmp	r0, #0
    b9ce:	d0f0      	beq.n	b9b2 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    b9d0:	68a1      	ldr	r1, [r4, #8]
    b9d2:	b159      	cbz	r1, b9ec <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    b9d4:	6862      	ldr	r2, [r4, #4]
    b9d6:	0092      	lsls	r2, r2, #2
    b9d8:	f7ff f883 	bl	aae2 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    b9dc:	6861      	ldr	r1, [r4, #4]
    b9de:	68a0      	ldr	r0, [r4, #8]
    b9e0:	0089      	lsls	r1, r1, #2
    b9e2:	f7fd fbd7 	bl	9194 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    b9e6:	68a0      	ldr	r0, [r4, #8]
    b9e8:	f7fa fa3c 	bl	5e64 <mbedtls_free>
        X->p = p;
    b9ec:	e9c4 5601 	strd	r5, r6, [r4, #4]
    b9f0:	e7e5      	b.n	b9be <mbedtls_mpi_grow+0x1a>

0000b9f2 <mbedtls_mpi_resize_clear>:
{
    b9f2:	b538      	push	{r3, r4, r5, lr}
    b9f4:	4604      	mov	r4, r0
    if( limbs == 0 )
    b9f6:	460d      	mov	r5, r1
    b9f8:	b919      	cbnz	r1, ba02 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    b9fa:	f7ff ffc1 	bl	b980 <mbedtls_mpi_free>
}
    b9fe:	2000      	movs	r0, #0
    ba00:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    ba02:	6842      	ldr	r2, [r0, #4]
    ba04:	428a      	cmp	r2, r1
    ba06:	d107      	bne.n	ba18 <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    ba08:	6880      	ldr	r0, [r0, #8]
    ba0a:	0092      	lsls	r2, r2, #2
    ba0c:	2100      	movs	r1, #0
    ba0e:	f7ff f873 	bl	aaf8 <memset>
        X->s = 1;
    ba12:	2301      	movs	r3, #1
    ba14:	6023      	str	r3, [r4, #0]
        return( 0 );
    ba16:	e7f2      	b.n	b9fe <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    ba18:	f7ff ffb2 	bl	b980 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    ba1c:	4629      	mov	r1, r5
    ba1e:	4620      	mov	r0, r4
}
    ba20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    ba24:	f7ff bfbe 	b.w	b9a4 <mbedtls_mpi_grow>

0000ba28 <mbedtls_mpi_copy>:
    if( X == Y )
    ba28:	4288      	cmp	r0, r1
{
    ba2a:	b570      	push	{r4, r5, r6, lr}
    ba2c:	4605      	mov	r5, r0
    ba2e:	460e      	mov	r6, r1
    if( X == Y )
    ba30:	d009      	beq.n	ba46 <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    ba32:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    ba34:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    ba36:	b941      	cbnz	r1, ba4a <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    ba38:	b12a      	cbz	r2, ba46 <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    ba3a:	2301      	movs	r3, #1
    ba3c:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    ba3e:	0092      	lsls	r2, r2, #2
    ba40:	6880      	ldr	r0, [r0, #8]
    ba42:	f7ff f859 	bl	aaf8 <memset>
        return( 0 );
    ba46:	2000      	movs	r0, #0
}
    ba48:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    ba4a:	1e4c      	subs	r4, r1, #1
    ba4c:	b984      	cbnz	r4, ba70 <mbedtls_mpi_copy+0x48>
    i++;
    ba4e:	3401      	adds	r4, #1
    X->s = Y->s;
    ba50:	6833      	ldr	r3, [r6, #0]
    ba52:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    ba54:	4294      	cmp	r4, r2
    ba56:	d912      	bls.n	ba7e <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    ba58:	4621      	mov	r1, r4
    ba5a:	4628      	mov	r0, r5
    ba5c:	f7ff ffa2 	bl	b9a4 <mbedtls_mpi_grow>
    ba60:	2800      	cmp	r0, #0
    ba62:	d1f1      	bne.n	ba48 <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    ba64:	68b1      	ldr	r1, [r6, #8]
    ba66:	68a8      	ldr	r0, [r5, #8]
    ba68:	00a2      	lsls	r2, r4, #2
    ba6a:	f7ff f83a 	bl	aae2 <memcpy>
    ba6e:	e7ea      	b.n	ba46 <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    ba70:	68b3      	ldr	r3, [r6, #8]
    ba72:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ba76:	2b00      	cmp	r3, #0
    ba78:	d1e9      	bne.n	ba4e <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    ba7a:	3c01      	subs	r4, #1
    ba7c:	e7e6      	b.n	ba4c <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    ba7e:	68a8      	ldr	r0, [r5, #8]
    ba80:	1b12      	subs	r2, r2, r4
    ba82:	0092      	lsls	r2, r2, #2
    ba84:	2100      	movs	r1, #0
    ba86:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    ba8a:	f7ff f835 	bl	aaf8 <memset>
    ba8e:	e7e9      	b.n	ba64 <mbedtls_mpi_copy+0x3c>

0000ba90 <mbedtls_mpi_safe_cond_assign>:
{
    ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba94:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    ba96:	6849      	ldr	r1, [r1, #4]
{
    ba98:	4606      	mov	r6, r0
    ba9a:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    ba9c:	f7ff ff82 	bl	b9a4 <mbedtls_mpi_grow>
    baa0:	4607      	mov	r7, r0
    baa2:	b9e0      	cbnz	r0, bade <mbedtls_mpi_safe_cond_assign+0x4e>
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    baa4:	4263      	negs	r3, r4
    unsigned ua = a + 1;
    baa6:	6832      	ldr	r2, [r6, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    baa8:	f8d6 8008 	ldr.w	r8, [r6, #8]
    baac:	6868      	ldr	r0, [r5, #4]
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    baae:	431c      	orrs	r4, r3
    unsigned ub = b + 1;
    bab0:	682b      	ldr	r3, [r5, #0]
    unsigned ua = a + 1;
    bab2:	3201      	adds	r2, #1
    unsigned ub = b + 1;
    bab4:	3301      	adds	r3, #1
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    bab6:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    return( (int) ur - 1 );
    baba:	4053      	eors	r3, r2
    babc:	ea03 0344 	and.w	r3, r3, r4, lsl #1
    bac0:	4053      	eors	r3, r2
    bac2:	3b01      	subs	r3, #1
    X->s = mpi_safe_cond_select_sign( X->s, Y->s, assign );
    bac4:	6033      	str	r3, [r6, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    bac6:	4641      	mov	r1, r8
    bac8:	4623      	mov	r3, r4
    baca:	68aa      	ldr	r2, [r5, #8]
    bacc:	f7ff fd0b 	bl	b4e6 <mpi_safe_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    bad0:	686b      	ldr	r3, [r5, #4]
        X->p[i] &= ~limb_mask;
    bad2:	3c01      	subs	r4, #1
    bad4:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    for( i = Y->n; i < X->n; i++ )
    bad8:	6872      	ldr	r2, [r6, #4]
    bada:	429a      	cmp	r2, r3
    badc:	d802      	bhi.n	bae4 <mbedtls_mpi_safe_cond_assign+0x54>
}
    bade:	4638      	mov	r0, r7
    bae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        X->p[i] &= ~limb_mask;
    bae4:	680a      	ldr	r2, [r1, #0]
    bae6:	4022      	ands	r2, r4
    bae8:	f841 2b04 	str.w	r2, [r1], #4
    for( i = Y->n; i < X->n; i++ )
    baec:	3301      	adds	r3, #1
    baee:	e7f3      	b.n	bad8 <mbedtls_mpi_safe_cond_assign+0x48>

0000baf0 <mbedtls_mpi_lset>:
{
    baf0:	b570      	push	{r4, r5, r6, lr}
    baf2:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    baf4:	2101      	movs	r1, #1
{
    baf6:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    baf8:	f7ff ff54 	bl	b9a4 <mbedtls_mpi_grow>
    bafc:	4605      	mov	r5, r0
    bafe:	b988      	cbnz	r0, bb24 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    bb00:	6862      	ldr	r2, [r4, #4]
    bb02:	4601      	mov	r1, r0
    bb04:	0092      	lsls	r2, r2, #2
    bb06:	68a0      	ldr	r0, [r4, #8]
    bb08:	f7fe fff6 	bl	aaf8 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    bb0c:	68a3      	ldr	r3, [r4, #8]
    bb0e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    bb12:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    bb14:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    bb18:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    bb1a:	bfac      	ite	ge
    bb1c:	2301      	movge	r3, #1
    bb1e:	f04f 33ff 	movlt.w	r3, #4294967295
    bb22:	6023      	str	r3, [r4, #0]
}
    bb24:	4628      	mov	r0, r5
    bb26:	bd70      	pop	{r4, r5, r6, pc}

0000bb28 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    bb28:	6843      	ldr	r3, [r0, #4]
    bb2a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    bb2e:	bf3f      	itttt	cc
    bb30:	6883      	ldrcc	r3, [r0, #8]
    bb32:	094a      	lsrcc	r2, r1, #5
    bb34:	f001 011f 	andcc.w	r1, r1, #31
    bb38:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    bb3c:	bf3a      	itte	cc
    bb3e:	40c8      	lsrcc	r0, r1
    bb40:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    bb44:	2000      	movcs	r0, #0
}
    bb46:	4770      	bx	lr

0000bb48 <mbedtls_mpi_bitlen>:
{
    bb48:	4602      	mov	r2, r0
    if( X->n == 0 )
    bb4a:	6840      	ldr	r0, [r0, #4]
    bb4c:	b1a0      	cbz	r0, bb78 <mbedtls_mpi_bitlen+0x30>
        if( X->p[i] != 0 )
    bb4e:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    bb50:	1e43      	subs	r3, r0, #1
    bb52:	b993      	cbnz	r3, bb7a <mbedtls_mpi_bitlen+0x32>
    j = biL - mbedtls_clz( X->p[i] );
    bb54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
        if( x & mask ) break;
    bb58:	2900      	cmp	r1, #0
    for( j = 0; j < biL; j++ )
    bb5a:	f04f 0000 	mov.w	r0, #0
        if( x & mask ) break;
    bb5e:	db08      	blt.n	bb72 <mbedtls_mpi_bitlen+0x2a>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    bb60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    bb64:	3001      	adds	r0, #1
    bb66:	2820      	cmp	r0, #32
        mask >>= 1;
    bb68:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    bb6c:	d001      	beq.n	bb72 <mbedtls_mpi_bitlen+0x2a>
        if( x & mask ) break;
    bb6e:	4211      	tst	r1, r2
    bb70:	d0f8      	beq.n	bb64 <mbedtls_mpi_bitlen+0x1c>
    return( ( i * biL ) + j );
    bb72:	3301      	adds	r3, #1
    bb74:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    bb78:	4770      	bx	lr
        if( X->p[i] != 0 )
    bb7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    bb7e:	2900      	cmp	r1, #0
    bb80:	d1e8      	bne.n	bb54 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    bb82:	3b01      	subs	r3, #1
    bb84:	e7e5      	b.n	bb52 <mbedtls_mpi_bitlen+0xa>

0000bb86 <mbedtls_mpi_size>:
{
    bb86:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    bb88:	f7ff ffde 	bl	bb48 <mbedtls_mpi_bitlen>
    bb8c:	3007      	adds	r0, #7
}
    bb8e:	08c0      	lsrs	r0, r0, #3
    bb90:	bd08      	pop	{r3, pc}

0000bb92 <mbedtls_mpi_read_binary>:
{
    bb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    bb96:	f012 0403 	ands.w	r4, r2, #3
    bb9a:	bf18      	it	ne
    bb9c:	2401      	movne	r4, #1
    bb9e:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    bba2:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    bba4:	4621      	mov	r1, r4
{
    bba6:	4607      	mov	r7, r0
    bba8:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    bbaa:	f7ff ff22 	bl	b9f2 <mbedtls_mpi_resize_clear>
    bbae:	4606      	mov	r6, r0
    bbb0:	b968      	cbnz	r0, bbce <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    bbb2:	b165      	cbz	r5, bbce <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    bbb4:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    bbb6:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    bbba:	462a      	mov	r2, r5
    bbbc:	4641      	mov	r1, r8
    bbbe:	4418      	add	r0, r3
    bbc0:	f7fe ff8f 	bl	aae2 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    bbc4:	68b8      	ldr	r0, [r7, #8]
    if( limbs == 0 )
    bbc6:	b114      	cbz	r4, bbce <mbedtls_mpi_read_binary+0x3c>
    bbc8:	4621      	mov	r1, r4
    bbca:	f7ff feaa 	bl	b922 <mpi_bigendian_to_host.part.0>
}
    bbce:	4630      	mov	r0, r6
    bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bbd4 <mbedtls_mpi_write_binary>:
{
    bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbd6:	4604      	mov	r4, r0
    bbd8:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    bbda:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
    bbdc:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    bbe0:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    bbe4:	d91a      	bls.n	bc1c <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
    bbe6:	1b52      	subs	r2, r2, r5
    bbe8:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    bbea:	2100      	movs	r1, #0
    bbec:	f7fe ff84 	bl	aaf8 <memset>
        p = buf + buflen - stored_bytes;
    bbf0:	4630      	mov	r0, r6
    bbf2:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    bbf4:	1883      	adds	r3, r0, r2
    bbf6:	2100      	movs	r1, #0
    bbf8:	428a      	cmp	r2, r1
    bbfa:	d111      	bne.n	bc20 <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
    bbfc:	2000      	movs	r0, #0
}
    bbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    bc00:	68a1      	ldr	r1, [r4, #8]
    bc02:	f023 0703 	bic.w	r7, r3, #3
    bc06:	f003 0603 	and.w	r6, r3, #3
    bc0a:	59c9      	ldr	r1, [r1, r7]
    bc0c:	00f6      	lsls	r6, r6, #3
    bc0e:	40f1      	lsrs	r1, r6
    bc10:	b2c9      	uxtb	r1, r1
    bc12:	b989      	cbnz	r1, bc38 <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    bc14:	3301      	adds	r3, #1
    bc16:	42ab      	cmp	r3, r5
    bc18:	d1f2      	bne.n	bc00 <mbedtls_mpi_write_binary+0x2c>
    bc1a:	e7eb      	b.n	bbf4 <mbedtls_mpi_write_binary+0x20>
    bc1c:	4613      	mov	r3, r2
    bc1e:	e7fa      	b.n	bc16 <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    bc20:	68a6      	ldr	r6, [r4, #8]
    bc22:	f021 0003 	bic.w	r0, r1, #3
    bc26:	f001 0503 	and.w	r5, r1, #3
    bc2a:	5830      	ldr	r0, [r6, r0]
    bc2c:	00ed      	lsls	r5, r5, #3
    bc2e:	40e8      	lsrs	r0, r5
    bc30:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    bc34:	3101      	adds	r1, #1
    bc36:	e7df      	b.n	bbf8 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    bc38:	f06f 0007 	mvn.w	r0, #7
    bc3c:	e7df      	b.n	bbfe <mbedtls_mpi_write_binary+0x2a>

0000bc3e <mbedtls_mpi_shift_l>:
{
    bc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc40:	4605      	mov	r5, r0
    bc42:	460e      	mov	r6, r1
    v0 = count / (biL    );
    bc44:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    bc46:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    bc4a:	f7ff ff7d 	bl	bb48 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    bc4e:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    bc50:	4430      	add	r0, r6
    if( X->n * biL < i )
    bc52:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    bc56:	d805      	bhi.n	bc64 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    bc58:	2e1f      	cmp	r6, #31
    bc5a:	d80f      	bhi.n	bc7c <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    bc5c:	2f00      	cmp	r7, #0
    bc5e:	d13c      	bne.n	bcda <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    bc60:	2000      	movs	r0, #0
    bc62:	e00a      	b.n	bc7a <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    bc64:	f010 011f 	ands.w	r1, r0, #31
    bc68:	bf18      	it	ne
    bc6a:	2101      	movne	r1, #1
    bc6c:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    bc70:	4628      	mov	r0, r5
    bc72:	f7ff fe97 	bl	b9a4 <mbedtls_mpi_grow>
    bc76:	2800      	cmp	r0, #0
    bc78:	d0ee      	beq.n	bc58 <mbedtls_mpi_shift_l+0x1a>
}
    bc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    bc7c:	686b      	ldr	r3, [r5, #4]
    bc7e:	f06f 0003 	mvn.w	r0, #3
    bc82:	009a      	lsls	r2, r3, #2
    bc84:	4360      	muls	r0, r4
    bc86:	4619      	mov	r1, r3
    bc88:	42a1      	cmp	r1, r4
    bc8a:	f1a2 0204 	sub.w	r2, r2, #4
    bc8e:	d80c      	bhi.n	bcaa <mbedtls_mpi_shift_l+0x6c>
    bc90:	1ae2      	subs	r2, r4, r3
    bc92:	429c      	cmp	r4, r3
    bc94:	bf88      	it	hi
    bc96:	2200      	movhi	r2, #0
    bc98:	4413      	add	r3, r2
    bc9a:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
    bc9c:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
    bc9e:	3b04      	subs	r3, #4
    bca0:	1d19      	adds	r1, r3, #4
    bca2:	d0db      	beq.n	bc5c <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    bca4:	68a9      	ldr	r1, [r5, #8]
    bca6:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    bca8:	e7f9      	b.n	bc9e <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    bcaa:	68ae      	ldr	r6, [r5, #8]
    bcac:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
    bcb0:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    bcb2:	f85c c000 	ldr.w	ip, [ip, r0]
    bcb6:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    bcba:	e7e5      	b.n	bc88 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    bcbc:	68a8      	ldr	r0, [r5, #8]
    bcbe:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            X->p[i] <<= t1;
    bcc2:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    bcc6:	4313      	orrs	r3, r2
    bcc8:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    bccc:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    bcd0:	3401      	adds	r4, #1
    bcd2:	686b      	ldr	r3, [r5, #4]
    bcd4:	42a3      	cmp	r3, r4
    bcd6:	d8f1      	bhi.n	bcbc <mbedtls_mpi_shift_l+0x7e>
    bcd8:	e7c2      	b.n	bc60 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    bcda:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    bcdc:	f1c7 0620 	rsb	r6, r7, #32
    bce0:	e7f7      	b.n	bcd2 <mbedtls_mpi_shift_l+0x94>

0000bce2 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    bce2:	6843      	ldr	r3, [r0, #4]
{
    bce4:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    bce6:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    bce8:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    bcea:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    bcee:	d301      	bcc.n	bcf4 <mbedtls_mpi_shift_r+0x12>
    bcf0:	d109      	bne.n	bd06 <mbedtls_mpi_shift_r+0x24>
    bcf2:	b11a      	cbz	r2, bcfc <mbedtls_mpi_shift_r+0x1a>
}
    bcf4:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    bcf6:	2100      	movs	r1, #0
    bcf8:	f7ff befa 	b.w	baf0 <mbedtls_mpi_lset>
    if( v0 > 0 )
    bcfc:	291f      	cmp	r1, #31
    bcfe:	d804      	bhi.n	bd0a <mbedtls_mpi_shift_r+0x28>
}
    bd00:	2000      	movs	r0, #0
    bd02:	bcf0      	pop	{r4, r5, r6, r7}
    bd04:	4770      	bx	lr
    if( v0 > 0 )
    bd06:	291f      	cmp	r1, #31
    bd08:	d909      	bls.n	bd1e <mbedtls_mpi_shift_r+0x3c>
    bd0a:	00a5      	lsls	r5, r4, #2
{
    bd0c:	2300      	movs	r3, #0
        for( i = 0; i < X->n - v0; i++ )
    bd0e:	6841      	ldr	r1, [r0, #4]
    bd10:	1b09      	subs	r1, r1, r4
    bd12:	4299      	cmp	r1, r3
    bd14:	d816      	bhi.n	bd44 <mbedtls_mpi_shift_r+0x62>
            X->p[i] = 0;
    bd16:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    bd18:	6841      	ldr	r1, [r0, #4]
    bd1a:	4299      	cmp	r1, r3
    bd1c:	d819      	bhi.n	bd52 <mbedtls_mpi_shift_r+0x70>
    if( v1 > 0 )
    bd1e:	2a00      	cmp	r2, #0
    bd20:	d0ee      	beq.n	bd00 <mbedtls_mpi_shift_r+0x1e>
        for( i = X->n; i > 0; i-- )
    bd22:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    bd24:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
    bd26:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    bd2a:	3b01      	subs	r3, #1
    bd2c:	d3e8      	bcc.n	bd00 <mbedtls_mpi_shift_r+0x1e>
            r1 = X->p[i - 1] << (biL - v1);
    bd2e:	6886      	ldr	r6, [r0, #8]
    bd30:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    bd34:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    bd38:	4321      	orrs	r1, r4
    bd3a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    bd3e:	fa05 f407 	lsl.w	r4, r5, r7
    bd42:	e7f2      	b.n	bd2a <mbedtls_mpi_shift_r+0x48>
            X->p[i] = X->p[i + v0];
    bd44:	6881      	ldr	r1, [r0, #8]
    bd46:	594e      	ldr	r6, [r1, r5]
    bd48:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    bd4c:	3504      	adds	r5, #4
    bd4e:	3301      	adds	r3, #1
    bd50:	e7dd      	b.n	bd0e <mbedtls_mpi_shift_r+0x2c>
            X->p[i] = 0;
    bd52:	6881      	ldr	r1, [r0, #8]
    bd54:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    bd58:	3301      	adds	r3, #1
    bd5a:	e7dd      	b.n	bd18 <mbedtls_mpi_shift_r+0x36>

0000bd5c <mbedtls_mpi_cmp_abs>:
{
    bd5c:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    bd5e:	6842      	ldr	r2, [r0, #4]
    bd60:	b93a      	cbnz	r2, bd72 <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    bd62:	684b      	ldr	r3, [r1, #4]
    bd64:	b973      	cbnz	r3, bd84 <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    bd66:	b9b2      	cbnz	r2, bd96 <mbedtls_mpi_cmp_abs+0x3a>
    bd68:	1e18      	subs	r0, r3, #0
    bd6a:	bf18      	it	ne
    bd6c:	2001      	movne	r0, #1
    bd6e:	4240      	negs	r0, r0
}
    bd70:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    bd72:	6883      	ldr	r3, [r0, #8]
    bd74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bd78:	f853 3c04 	ldr.w	r3, [r3, #-4]
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	d1f0      	bne.n	bd62 <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    bd80:	3a01      	subs	r2, #1
    bd82:	e7ed      	b.n	bd60 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    bd84:	688c      	ldr	r4, [r1, #8]
    bd86:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    bd8a:	f854 4c04 	ldr.w	r4, [r4, #-4]
    bd8e:	2c00      	cmp	r4, #0
    bd90:	d1e9      	bne.n	bd66 <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    bd92:	3b01      	subs	r3, #1
    bd94:	e7e6      	b.n	bd64 <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    bd96:	429a      	cmp	r2, r3
    bd98:	d810      	bhi.n	bdbc <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    bd9a:	d311      	bcc.n	bdc0 <mbedtls_mpi_cmp_abs+0x64>
    bd9c:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    bd9e:	6883      	ldr	r3, [r0, #8]
    bda0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    bda4:	688b      	ldr	r3, [r1, #8]
    bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bdaa:	429c      	cmp	r4, r3
    bdac:	d806      	bhi.n	bdbc <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    bdae:	f102 32ff 	add.w	r2, r2, #4294967295
    bdb2:	d305      	bcc.n	bdc0 <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    bdb4:	1c53      	adds	r3, r2, #1
    bdb6:	d1f2      	bne.n	bd9e <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    bdb8:	2000      	movs	r0, #0
    bdba:	e7d9      	b.n	bd70 <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    bdbc:	2001      	movs	r0, #1
    bdbe:	e7d7      	b.n	bd70 <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    bdc0:	f04f 30ff 	mov.w	r0, #4294967295
    bdc4:	e7d4      	b.n	bd70 <mbedtls_mpi_cmp_abs+0x14>

0000bdc6 <mbedtls_mpi_cmp_mpi>:
{
    bdc6:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    bdc8:	6843      	ldr	r3, [r0, #4]
{
    bdca:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
    bdcc:	b923      	cbnz	r3, bdd8 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    bdce:	6848      	ldr	r0, [r1, #4]
    bdd0:	b958      	cbnz	r0, bdea <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d136      	bne.n	be44 <mbedtls_mpi_cmp_mpi+0x7e>
    bdd6:	e02f      	b.n	be38 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    bdd8:	6890      	ldr	r0, [r2, #8]
    bdda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    bdde:	f850 0c04 	ldr.w	r0, [r0, #-4]
    bde2:	2800      	cmp	r0, #0
    bde4:	d1f3      	bne.n	bdce <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    bde6:	3b01      	subs	r3, #1
    bde8:	e7f0      	b.n	bdcc <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    bdea:	688c      	ldr	r4, [r1, #8]
    bdec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    bdf0:	f855 5c04 	ldr.w	r5, [r5, #-4]
    bdf4:	bb15      	cbnz	r5, be3c <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    bdf6:	3801      	subs	r0, #1
    bdf8:	e7ea      	b.n	bdd0 <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    bdfa:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    bdfc:	d202      	bcs.n	be04 <mbedtls_mpi_cmp_mpi+0x3e>
    bdfe:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    be00:	4240      	negs	r0, r0
    be02:	e020      	b.n	be46 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    be04:	6810      	ldr	r0, [r2, #0]
    be06:	2800      	cmp	r0, #0
    be08:	dd03      	ble.n	be12 <mbedtls_mpi_cmp_mpi+0x4c>
    be0a:	2d00      	cmp	r5, #0
    be0c:	da07      	bge.n	be1e <mbedtls_mpi_cmp_mpi+0x58>
    be0e:	2001      	movs	r0, #1
    be10:	e019      	b.n	be46 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    be12:	2d00      	cmp	r5, #0
    be14:	dd03      	ble.n	be1e <mbedtls_mpi_cmp_mpi+0x58>
    be16:	b110      	cbz	r0, be1e <mbedtls_mpi_cmp_mpi+0x58>
    be18:	f04f 30ff 	mov.w	r0, #4294967295
    be1c:	e013      	b.n	be46 <mbedtls_mpi_cmp_mpi+0x80>
    be1e:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    be20:	6891      	ldr	r1, [r2, #8]
    be22:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    be26:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    be2a:	428d      	cmp	r5, r1
    be2c:	d80b      	bhi.n	be46 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    be2e:	f103 33ff 	add.w	r3, r3, #4294967295
    be32:	d3e5      	bcc.n	be00 <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    be34:	1c59      	adds	r1, r3, #1
    be36:	d1f3      	bne.n	be20 <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    be38:	2000      	movs	r0, #0
    be3a:	e004      	b.n	be46 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    be3c:	2b00      	cmp	r3, #0
    be3e:	d0de      	beq.n	bdfe <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    be40:	4283      	cmp	r3, r0
    be42:	d9da      	bls.n	bdfa <mbedtls_mpi_cmp_mpi+0x34>
    be44:	6810      	ldr	r0, [r2, #0]
}
    be46:	bd30      	pop	{r4, r5, pc}

0000be48 <mbedtls_mpi_cmp_int>:
{
    be48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    be4a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    be4e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    be52:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    be54:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    be56:	bfac      	ite	ge
    be58:	2301      	movge	r3, #1
    be5a:	f04f 33ff 	movlt.w	r3, #4294967295
    be5e:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    be60:	a901      	add	r1, sp, #4
    Y.n = 1;
    be62:	2301      	movs	r3, #1
    be64:	9302      	str	r3, [sp, #8]
    Y.p = p;
    be66:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    be6a:	f7ff ffac 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
}
    be6e:	b005      	add	sp, #20
    be70:	f85d fb04 	ldr.w	pc, [sp], #4

0000be74 <mbedtls_mpi_add_abs>:
    if( X == B )
    be74:	4290      	cmp	r0, r2
{
    be76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be7a:	4606      	mov	r6, r0
    be7c:	460f      	mov	r7, r1
    be7e:	4615      	mov	r5, r2
    if( X == B )
    be80:	d002      	beq.n	be88 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    be82:	4288      	cmp	r0, r1
    be84:	d129      	bne.n	beda <mbedtls_mpi_add_abs+0x66>
{
    be86:	462f      	mov	r7, r5
    X->s = 1;
    be88:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    be8a:	687d      	ldr	r5, [r7, #4]
    X->s = 1;
    be8c:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    be8e:	bb65      	cbnz	r5, beea <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    be90:	4629      	mov	r1, r5
    be92:	4630      	mov	r0, r6
    be94:	f7ff fd86 	bl	b9a4 <mbedtls_mpi_grow>
    be98:	4604      	mov	r4, r0
    be9a:	bb18      	cbnz	r0, bee4 <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    be9c:	68b3      	ldr	r3, [r6, #8]
    be9e:	68b9      	ldr	r1, [r7, #8]
    bea0:	469c      	mov	ip, r3
    bea2:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    bea4:	4285      	cmp	r5, r0
    bea6:	d129      	bne.n	befc <mbedtls_mpi_add_abs+0x88>
    bea8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    beac:	b1d7      	cbz	r7, bee4 <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    beae:	6872      	ldr	r2, [r6, #4]
    beb0:	42aa      	cmp	r2, r5
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    beb2:	f105 0801 	add.w	r8, r5, #1
        if( i >= X->n )
    beb6:	d807      	bhi.n	bec8 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    beb8:	4641      	mov	r1, r8
    beba:	4630      	mov	r0, r6
    bebc:	f7ff fd72 	bl	b9a4 <mbedtls_mpi_grow>
    bec0:	bb68      	cbnz	r0, bf1e <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    bec2:	68b3      	ldr	r3, [r6, #8]
    bec4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    bec8:	681a      	ldr	r2, [r3, #0]
    beca:	19d2      	adds	r2, r2, r7
    becc:	f843 2b04 	str.w	r2, [r3], #4
    bed0:	bf2c      	ite	cs
    bed2:	2701      	movcs	r7, #1
    bed4:	2700      	movcc	r7, #0
    bed6:	4645      	mov	r5, r8
    bed8:	e7e8      	b.n	beac <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    beda:	f7ff fda5 	bl	ba28 <mbedtls_mpi_copy>
    bede:	4604      	mov	r4, r0
    bee0:	2800      	cmp	r0, #0
    bee2:	d0d0      	beq.n	be86 <mbedtls_mpi_add_abs+0x12>
}
    bee4:	4620      	mov	r0, r4
    bee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    beea:	68bb      	ldr	r3, [r7, #8]
    beec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    bef0:	f853 3c04 	ldr.w	r3, [r3, #-4]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d1cb      	bne.n	be90 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    bef8:	3d01      	subs	r5, #1
    befa:	e7c8      	b.n	be8e <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    befc:	f8dc 2000 	ldr.w	r2, [ip]
    bf00:	19d2      	adds	r2, r2, r7
    bf02:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    bf06:	bf2c      	ite	cs
    bf08:	f04f 0e01 	movcs.w	lr, #1
    bf0c:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    bf10:	19d2      	adds	r2, r2, r7
    bf12:	f84c 2b04 	str.w	r2, [ip], #4
    bf16:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    bf1a:	3001      	adds	r0, #1
    bf1c:	e7c2      	b.n	bea4 <mbedtls_mpi_add_abs+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    bf1e:	4604      	mov	r4, r0
    return( ret );
    bf20:	e7e0      	b.n	bee4 <mbedtls_mpi_add_abs+0x70>

0000bf22 <mbedtls_mpi_sub_abs>:
{
    bf22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for( n = B->n; n > 0; n-- )
    bf26:	6854      	ldr	r4, [r2, #4]
{
    bf28:	4605      	mov	r5, r0
    bf2a:	460e      	mov	r6, r1
    bf2c:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    bf2e:	b93c      	cbnz	r4, bf40 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    bf30:	6871      	ldr	r1, [r6, #4]
    bf32:	42a1      	cmp	r1, r4
    bf34:	d20e      	bcs.n	bf54 <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    bf36:	f06f 0709 	mvn.w	r7, #9
}
    bf3a:	4638      	mov	r0, r7
    bf3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    bf40:	f8d8 3008 	ldr.w	r3, [r8, #8]
    bf44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    bf48:	f853 3c04 	ldr.w	r3, [r3, #-4]
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d1ef      	bne.n	bf30 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    bf50:	3c01      	subs	r4, #1
    bf52:	e7ec      	b.n	bf2e <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    bf54:	4628      	mov	r0, r5
    bf56:	f7ff fd25 	bl	b9a4 <mbedtls_mpi_grow>
    bf5a:	4607      	mov	r7, r0
    bf5c:	2800      	cmp	r0, #0
    bf5e:	d1ec      	bne.n	bf3a <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    bf60:	6872      	ldr	r2, [r6, #4]
    bf62:	42a2      	cmp	r2, r4
    bf64:	d909      	bls.n	bf7a <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    bf66:	68b1      	ldr	r1, [r6, #8]
    bf68:	68a8      	ldr	r0, [r5, #8]
    bf6a:	1b12      	subs	r2, r2, r4
    bf6c:	0092      	lsls	r2, r2, #2
    bf6e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bf72:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    bf76:	f7fe fdb4 	bl	aae2 <memcpy>
    if( X->n > A->n )
    bf7a:	686a      	ldr	r2, [r5, #4]
    bf7c:	6870      	ldr	r0, [r6, #4]
    bf7e:	4282      	cmp	r2, r0
    bf80:	d907      	bls.n	bf92 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    bf82:	68ab      	ldr	r3, [r5, #8]
    bf84:	1a12      	subs	r2, r2, r0
    bf86:	0092      	lsls	r2, r2, #2
    bf88:	2100      	movs	r1, #0
    bf8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    bf8e:	f7fe fdb3 	bl	aaf8 <memset>
    mbedtls_mpi_uint c = 0, t, z;
    bf92:	2200      	movs	r2, #0
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    bf94:	68a9      	ldr	r1, [r5, #8]
    bf96:	f8d6 e008 	ldr.w	lr, [r6, #8]
    bf9a:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    bf9e:	4613      	mov	r3, r2
    bfa0:	429c      	cmp	r4, r3
    bfa2:	d111      	bne.n	bfc8 <mbedtls_mpi_sub_abs+0xa6>
    if( carry != 0 )
    bfa4:	b16a      	cbz	r2, bfc2 <mbedtls_mpi_sub_abs+0xa0>
    bfa6:	eb01 0384 	add.w	r3, r1, r4, lsl #2
            --X->p[n];
    bfaa:	f04f 30ff 	mov.w	r0, #4294967295
        for( ; n < X->n && X->p[n] == 0; n++ )
    bfae:	686a      	ldr	r2, [r5, #4]
    bfb0:	42a2      	cmp	r2, r4
    bfb2:	d923      	bls.n	bffc <mbedtls_mpi_sub_abs+0xda>
    bfb4:	681a      	ldr	r2, [r3, #0]
    bfb6:	b1ea      	cbz	r2, bff4 <mbedtls_mpi_sub_abs+0xd2>
        --X->p[n];
    bfb8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    bfbc:	3b01      	subs	r3, #1
    bfbe:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    X->s = 1;
    bfc2:	2301      	movs	r3, #1
    bfc4:	602b      	str	r3, [r5, #0]
    return( ret );
    bfc6:	e7b8      	b.n	bf3a <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    bfc8:	f85e c023 	ldr.w	ip, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    bfcc:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    bfd0:	ebac 0002 	sub.w	r0, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    bfd4:	42b0      	cmp	r0, r6
    bfd6:	bf2c      	ite	cs
    bfd8:	f04f 0900 	movcs.w	r9, #0
    bfdc:	f04f 0901 	movcc.w	r9, #1
    bfe0:	1b80      	subs	r0, r0, r6
    bfe2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    bfe6:	4594      	cmp	ip, r2
    bfe8:	bf2c      	ite	cs
    bfea:	464a      	movcs	r2, r9
    bfec:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    bff0:	3301      	adds	r3, #1
    bff2:	e7d5      	b.n	bfa0 <mbedtls_mpi_sub_abs+0x7e>
            --X->p[n];
    bff4:	f843 0b04 	str.w	r0, [r3], #4
        for( ; n < X->n && X->p[n] == 0; n++ )
    bff8:	3401      	adds	r4, #1
    bffa:	e7d8      	b.n	bfae <mbedtls_mpi_sub_abs+0x8c>
        if( n == X->n )
    bffc:	d1dc      	bne.n	bfb8 <mbedtls_mpi_sub_abs+0x96>
    bffe:	e79a      	b.n	bf36 <mbedtls_mpi_sub_abs+0x14>

0000c000 <mbedtls_mpi_add_mpi>:
{
    c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    c002:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    c004:	6813      	ldr	r3, [r2, #0]
    c006:	437b      	muls	r3, r7
{
    c008:	4605      	mov	r5, r0
    c00a:	460c      	mov	r4, r1
    c00c:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    c00e:	d516      	bpl.n	c03e <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    c010:	4611      	mov	r1, r2
    c012:	4620      	mov	r0, r4
    c014:	f7ff fea2 	bl	bd5c <mbedtls_mpi_cmp_abs>
    c018:	2800      	cmp	r0, #0
    c01a:	db06      	blt.n	c02a <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c01c:	4632      	mov	r2, r6
    c01e:	4621      	mov	r1, r4
    c020:	4628      	mov	r0, r5
    c022:	f7ff ff7e 	bl	bf22 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c026:	b138      	cbz	r0, c038 <mbedtls_mpi_add_mpi+0x38>
}
    c028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c02a:	4622      	mov	r2, r4
    c02c:	4628      	mov	r0, r5
    c02e:	f7ff ff78 	bl	bf22 <mbedtls_mpi_sub_abs>
    c032:	2800      	cmp	r0, #0
    c034:	d1f8      	bne.n	c028 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    c036:	427f      	negs	r7, r7
        X->s = s;
    c038:	602f      	str	r7, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c03a:	2000      	movs	r0, #0
    return( ret );
    c03c:	e7f4      	b.n	c028 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c03e:	f7ff ff19 	bl	be74 <mbedtls_mpi_add_abs>
    c042:	e7f0      	b.n	c026 <mbedtls_mpi_add_mpi+0x26>

0000c044 <mbedtls_mpi_sub_mpi>:
{
    c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    c046:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    c048:	6813      	ldr	r3, [r2, #0]
    c04a:	437b      	muls	r3, r7
    c04c:	2b00      	cmp	r3, #0
{
    c04e:	4605      	mov	r5, r0
    c050:	460c      	mov	r4, r1
    c052:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    c054:	dd16      	ble.n	c084 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    c056:	4611      	mov	r1, r2
    c058:	4620      	mov	r0, r4
    c05a:	f7ff fe7f 	bl	bd5c <mbedtls_mpi_cmp_abs>
    c05e:	2800      	cmp	r0, #0
    c060:	db06      	blt.n	c070 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c062:	4632      	mov	r2, r6
    c064:	4621      	mov	r1, r4
    c066:	4628      	mov	r0, r5
    c068:	f7ff ff5b 	bl	bf22 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c06c:	b138      	cbz	r0, c07e <mbedtls_mpi_sub_mpi+0x3a>
}
    c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c070:	4622      	mov	r2, r4
    c072:	4628      	mov	r0, r5
    c074:	f7ff ff55 	bl	bf22 <mbedtls_mpi_sub_abs>
    c078:	2800      	cmp	r0, #0
    c07a:	d1f8      	bne.n	c06e <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    c07c:	427f      	negs	r7, r7
        X->s = s;
    c07e:	602f      	str	r7, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c080:	2000      	movs	r0, #0
    return( ret );
    c082:	e7f4      	b.n	c06e <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c084:	f7ff fef6 	bl	be74 <mbedtls_mpi_add_abs>
    c088:	e7f0      	b.n	c06c <mbedtls_mpi_sub_mpi+0x28>

0000c08a <mbedtls_mpi_mul_int>:
{
    c08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n = A->n;
    c08e:	684e      	ldr	r6, [r1, #4]
{
    c090:	4605      	mov	r5, r0
    c092:	460f      	mov	r7, r1
    c094:	4690      	mov	r8, r2
    while( n > 0 && A->p[n - 1] == 0 )
    c096:	b146      	cbz	r6, c0aa <mbedtls_mpi_mul_int+0x20>
    c098:	68bb      	ldr	r3, [r7, #8]
    c09a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c09e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c0a2:	b143      	cbz	r3, c0b6 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    c0a4:	f1b8 0f00 	cmp.w	r8, #0
    c0a8:	d107      	bne.n	c0ba <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    c0aa:	4628      	mov	r0, r5
    c0ac:	2100      	movs	r1, #0
}
    c0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    c0b2:	f7ff bd1d 	b.w	baf0 <mbedtls_mpi_lset>
        --n;
    c0b6:	3e01      	subs	r6, #1
    c0b8:	e7ed      	b.n	c096 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    c0ba:	1c71      	adds	r1, r6, #1
    c0bc:	4628      	mov	r0, r5
    c0be:	f7ff fc71 	bl	b9a4 <mbedtls_mpi_grow>
    c0c2:	4604      	mov	r4, r0
    c0c4:	b960      	cbnz	r0, c0e0 <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c0c6:	4639      	mov	r1, r7
    c0c8:	4628      	mov	r0, r5
    c0ca:	f7ff fcad 	bl	ba28 <mbedtls_mpi_copy>
    c0ce:	4604      	mov	r4, r0
    c0d0:	b930      	cbnz	r0, c0e0 <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    c0d2:	68aa      	ldr	r2, [r5, #8]
    c0d4:	68b9      	ldr	r1, [r7, #8]
    c0d6:	f108 33ff 	add.w	r3, r8, #4294967295
    c0da:	4630      	mov	r0, r6
    c0dc:	f7ff fa15 	bl	b50a <mpi_mul_hlp>
}
    c0e0:	4620      	mov	r0, r4
    c0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c0e6 <mbedtls_mpi_div_mpi>:
{
    c0e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0ea:	b09d      	sub	sp, #116	; 0x74
    c0ec:	4683      	mov	fp, r0
    c0ee:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c0f0:	4618      	mov	r0, r3
    c0f2:	2100      	movs	r1, #0
{
    c0f4:	4616      	mov	r6, r2
    c0f6:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c0f8:	f7ff fea6 	bl	be48 <mbedtls_mpi_cmp_int>
    c0fc:	2800      	cmp	r0, #0
    c0fe:	f000 8187 	beq.w	c410 <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c102:	2303      	movs	r3, #3
    X->n = 0;
    c104:	2400      	movs	r4, #0
    c106:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c108:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c10a:	9903      	ldr	r1, [sp, #12]
    T2.s = 1;
    c10c:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    c10e:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c110:	4630      	mov	r0, r6
    X->n = 0;
    c112:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    c116:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    c11a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    c11e:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    c122:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    c126:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.p = TP2;
    c12a:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c12c:	f7ff fe16 	bl	bd5c <mbedtls_mpi_cmp_abs>
    c130:	42a0      	cmp	r0, r4
    c132:	da28      	bge.n	c186 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c134:	f1bb 0f00 	cmp.w	fp, #0
    c138:	d105      	bne.n	c146 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c13a:	b9e7      	cbnz	r7, c176 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    c13c:	2400      	movs	r4, #0
}
    c13e:	4620      	mov	r0, r4
    c140:	b01d      	add	sp, #116	; 0x74
    c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c146:	4621      	mov	r1, r4
    c148:	4658      	mov	r0, fp
    c14a:	f7ff fcd1 	bl	baf0 <mbedtls_mpi_lset>
    c14e:	4604      	mov	r4, r0
    c150:	2800      	cmp	r0, #0
    c152:	d0f2      	beq.n	c13a <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    c154:	a80a      	add	r0, sp, #40	; 0x28
    c156:	f7ff fc13 	bl	b980 <mbedtls_mpi_free>
    c15a:	a80d      	add	r0, sp, #52	; 0x34
    c15c:	f7ff fc10 	bl	b980 <mbedtls_mpi_free>
    c160:	a810      	add	r0, sp, #64	; 0x40
    c162:	f7ff fc0d 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    c166:	a813      	add	r0, sp, #76	; 0x4c
    c168:	f7ff fc0a 	bl	b980 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    c16c:	210c      	movs	r1, #12
    c16e:	a819      	add	r0, sp, #100	; 0x64
    c170:	f7fd f810 	bl	9194 <mbedtls_platform_zeroize>
    return( ret );
    c174:	e7e3      	b.n	c13e <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c176:	4631      	mov	r1, r6
    c178:	4638      	mov	r0, r7
    c17a:	f7ff fc55 	bl	ba28 <mbedtls_mpi_copy>
    c17e:	4604      	mov	r4, r0
    c180:	2800      	cmp	r0, #0
    c182:	d1e7      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    c184:	e7da      	b.n	c13c <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    c186:	4631      	mov	r1, r6
    c188:	a80a      	add	r0, sp, #40	; 0x28
    c18a:	f7ff fc4d 	bl	ba28 <mbedtls_mpi_copy>
    c18e:	4604      	mov	r4, r0
    c190:	2800      	cmp	r0, #0
    c192:	d1df      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    c194:	9903      	ldr	r1, [sp, #12]
    c196:	a80d      	add	r0, sp, #52	; 0x34
    c198:	f7ff fc46 	bl	ba28 <mbedtls_mpi_copy>
    c19c:	4604      	mov	r4, r0
    c19e:	2800      	cmp	r0, #0
    c1a0:	d1d8      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c1a2:	6871      	ldr	r1, [r6, #4]
    X.s = Y.s = 1;
    c1a4:	950d      	str	r5, [sp, #52]	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c1a6:	3102      	adds	r1, #2
    c1a8:	a810      	add	r0, sp, #64	; 0x40
    X.s = Y.s = 1;
    c1aa:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c1ac:	f7ff fbfa 	bl	b9a4 <mbedtls_mpi_grow>
    c1b0:	4604      	mov	r4, r0
    c1b2:	2800      	cmp	r0, #0
    c1b4:	d1ce      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    c1b6:	4601      	mov	r1, r0
    c1b8:	a810      	add	r0, sp, #64	; 0x40
    c1ba:	f7ff fc99 	bl	baf0 <mbedtls_mpi_lset>
    c1be:	4604      	mov	r4, r0
    c1c0:	2800      	cmp	r0, #0
    c1c2:	d1c7      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    c1c4:	6871      	ldr	r1, [r6, #4]
    c1c6:	a813      	add	r0, sp, #76	; 0x4c
    c1c8:	3102      	adds	r1, #2
    c1ca:	f7ff fbeb 	bl	b9a4 <mbedtls_mpi_grow>
    c1ce:	4604      	mov	r4, r0
    c1d0:	2800      	cmp	r0, #0
    c1d2:	d1bf      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    c1d4:	a80d      	add	r0, sp, #52	; 0x34
    c1d6:	f7ff fcb7 	bl	bb48 <mbedtls_mpi_bitlen>
    c1da:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    c1de:	281f      	cmp	r0, #31
    c1e0:	d070      	beq.n	c2c4 <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    c1e2:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c1e6:	4619      	mov	r1, r3
    c1e8:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    c1ea:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c1ec:	f7ff fd27 	bl	bc3e <mbedtls_mpi_shift_l>
    c1f0:	4604      	mov	r4, r0
    c1f2:	2800      	cmp	r0, #0
    c1f4:	d1ae      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    c1f6:	9901      	ldr	r1, [sp, #4]
    c1f8:	a80d      	add	r0, sp, #52	; 0x34
    c1fa:	f7ff fd20 	bl	bc3e <mbedtls_mpi_shift_l>
    c1fe:	4604      	mov	r4, r0
    c200:	2800      	cmp	r0, #0
    c202:	d1a7      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    c204:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    c206:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    c20a:	eba5 0a08 	sub.w	sl, r5, r8
    c20e:	ea4f 194a 	mov.w	r9, sl, lsl #5
    c212:	4649      	mov	r1, r9
    c214:	a80d      	add	r0, sp, #52	; 0x34
    c216:	f7ff fd12 	bl	bc3e <mbedtls_mpi_shift_l>
    c21a:	4604      	mov	r4, r0
    c21c:	2800      	cmp	r0, #0
    c21e:	d199      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    c220:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    c224:	a90d      	add	r1, sp, #52	; 0x34
    c226:	a80a      	add	r0, sp, #40	; 0x28
    c228:	f7ff fdcd 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
    c22c:	2800      	cmp	r0, #0
    c22e:	da4b      	bge.n	c2c8 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    c230:	4649      	mov	r1, r9
    c232:	a80d      	add	r0, sp, #52	; 0x34
    c234:	f7ff fd55 	bl	bce2 <mbedtls_mpi_shift_r>
    c238:	4604      	mov	r4, r0
    c23a:	2800      	cmp	r0, #0
    c23c:	d18a      	bne.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    c23e:	f108 33ff 	add.w	r3, r8, #4294967295
    c242:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    c244:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    c246:	f105 3aff 	add.w	sl, r5, #4294967295
        if( X.p[i] >= Y.p[t] )
    c24a:	9306      	str	r3, [sp, #24]
    c24c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c250:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    c254:	3b02      	subs	r3, #2
    c256:	3d01      	subs	r5, #1
    c258:	009b      	lsls	r3, r3, #2
    c25a:	eba5 0508 	sub.w	r5, r5, r8
    c25e:	9308      	str	r3, [sp, #32]
    c260:	00ab      	lsls	r3, r5, #2
    c262:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    c264:	9b05      	ldr	r3, [sp, #20]
    c266:	459a      	cmp	sl, r3
    c268:	d83d      	bhi.n	c2e6 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    c26a:	f1bb 0f00 	cmp.w	fp, #0
    c26e:	d00c      	beq.n	c28a <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    c270:	a910      	add	r1, sp, #64	; 0x40
    c272:	4658      	mov	r0, fp
    c274:	f7ff fbd8 	bl	ba28 <mbedtls_mpi_copy>
    c278:	2800      	cmp	r0, #0
    c27a:	f040 80c5 	bne.w	c408 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    c27e:	9a03      	ldr	r2, [sp, #12]
    c280:	6833      	ldr	r3, [r6, #0]
    c282:	6812      	ldr	r2, [r2, #0]
    c284:	4353      	muls	r3, r2
    c286:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    c28a:	2f00      	cmp	r7, #0
    c28c:	f43f af62 	beq.w	c154 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    c290:	9901      	ldr	r1, [sp, #4]
    c292:	a80a      	add	r0, sp, #40	; 0x28
    c294:	f7ff fd25 	bl	bce2 <mbedtls_mpi_shift_r>
    c298:	2800      	cmp	r0, #0
    c29a:	f040 80b5 	bne.w	c408 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    c29e:	6833      	ldr	r3, [r6, #0]
    c2a0:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    c2a2:	a90a      	add	r1, sp, #40	; 0x28
    c2a4:	4638      	mov	r0, r7
    c2a6:	f7ff fbbf 	bl	ba28 <mbedtls_mpi_copy>
    c2aa:	4601      	mov	r1, r0
    c2ac:	2800      	cmp	r0, #0
    c2ae:	f040 80ad 	bne.w	c40c <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    c2b2:	4638      	mov	r0, r7
    c2b4:	f7ff fdc8 	bl	be48 <mbedtls_mpi_cmp_int>
    c2b8:	2800      	cmp	r0, #0
    c2ba:	f47f af4b 	bne.w	c154 <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    c2be:	2301      	movs	r3, #1
    c2c0:	603b      	str	r3, [r7, #0]
    c2c2:	e747      	b.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    c2c4:	9401      	str	r4, [sp, #4]
    c2c6:	e79d      	b.n	c204 <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    c2c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c2ca:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c2ce:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    c2d0:	3301      	adds	r3, #1
    c2d2:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c2d6:	4608      	mov	r0, r1
    c2d8:	aa0d      	add	r2, sp, #52	; 0x34
    c2da:	f7ff feb3 	bl	c044 <mbedtls_mpi_sub_mpi>
    c2de:	4604      	mov	r4, r0
    c2e0:	2800      	cmp	r0, #0
    c2e2:	d09f      	beq.n	c224 <mbedtls_mpi_div_mpi+0x13e>
    c2e4:	e736      	b.n	c154 <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    c2e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c2e8:	9a06      	ldr	r2, [sp, #24]
    c2ea:	9304      	str	r3, [sp, #16]
    c2ec:	4413      	add	r3, r2
    c2ee:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    c2f2:	9307      	str	r3, [sp, #28]
    c2f4:	9b04      	ldr	r3, [sp, #16]
    c2f6:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
    c2fa:	589a      	ldr	r2, [r3, r2]
            Z.p[i - t - 1] = ~0;
    c2fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
    c2fe:	ea4f 088a 	mov.w	r8, sl, lsl #2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c302:	f1a8 0304 	sub.w	r3, r8, #4
    c306:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    c308:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    c30a:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    c30c:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    c30e:	d276      	bcs.n	c3fe <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    c310:	f1a8 0004 	sub.w	r0, r8, #4
    c314:	2300      	movs	r3, #0
    c316:	f859 0000 	ldr.w	r0, [r9, r0]
    c31a:	f7f3 fef1 	bl	100 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    c31e:	2900      	cmp	r1, #0
    c320:	bf14      	ite	ne
    c322:	f04f 33ff 	movne.w	r3, #4294967295
    c326:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    c328:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    c32c:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    c32e:	bf16      	itet	ne
    c330:	eb09 0308 	addne.w	r3, r9, r8
    c334:	2300      	moveq	r3, #0
    c336:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    c33a:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    c33c:	f1a8 0304 	sub.w	r3, r8, #4
    c340:	f859 3003 	ldr.w	r3, [r9, r3]
    c344:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    c346:	f859 3008 	ldr.w	r3, [r9, r8]
    c34a:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    c34c:	682b      	ldr	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c34e:	f8dd 8010 	ldr.w	r8, [sp, #16]
        Z.p[i - t - 1]++;
    c352:	3301      	adds	r3, #1
    c354:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c356:	9b08      	ldr	r3, [sp, #32]
    c358:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    c35a:	682b      	ldr	r3, [r5, #0]
    c35c:	3b01      	subs	r3, #1
    c35e:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    c360:	2100      	movs	r1, #0
    c362:	a813      	add	r0, sp, #76	; 0x4c
    c364:	f7ff fbc4 	bl	baf0 <mbedtls_mpi_lset>
    c368:	2800      	cmp	r0, #0
    c36a:	d14d      	bne.n	c408 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c36c:	9b05      	ldr	r3, [sp, #20]
    c36e:	2b00      	cmp	r3, #0
    c370:	d048      	beq.n	c404 <mbedtls_mpi_div_mpi+0x31e>
    c372:	f8d8 2000 	ldr.w	r2, [r8]
    c376:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c378:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    c37a:	9a07      	ldr	r2, [sp, #28]
    c37c:	6812      	ldr	r2, [r2, #0]
    c37e:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    c380:	a913      	add	r1, sp, #76	; 0x4c
    c382:	682a      	ldr	r2, [r5, #0]
    c384:	4608      	mov	r0, r1
    c386:	f7ff fe80 	bl	c08a <mbedtls_mpi_mul_int>
    c38a:	2800      	cmp	r0, #0
    c38c:	d13c      	bne.n	c408 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    c38e:	a916      	add	r1, sp, #88	; 0x58
    c390:	a813      	add	r0, sp, #76	; 0x4c
    c392:	f7ff fd18 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
    c396:	2800      	cmp	r0, #0
    c398:	dcdf      	bgt.n	c35a <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    c39a:	682a      	ldr	r2, [r5, #0]
    c39c:	a90d      	add	r1, sp, #52	; 0x34
    c39e:	a813      	add	r0, sp, #76	; 0x4c
    c3a0:	f7ff fe73 	bl	c08a <mbedtls_mpi_mul_int>
    c3a4:	bb80      	cbnz	r0, c408 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    c3a6:	9b02      	ldr	r3, [sp, #8]
    c3a8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    c3ac:	4641      	mov	r1, r8
    c3ae:	a813      	add	r0, sp, #76	; 0x4c
    c3b0:	f7ff fc45 	bl	bc3e <mbedtls_mpi_shift_l>
    c3b4:	bb40      	cbnz	r0, c408 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    c3b6:	a90a      	add	r1, sp, #40	; 0x28
    c3b8:	4608      	mov	r0, r1
    c3ba:	aa13      	add	r2, sp, #76	; 0x4c
    c3bc:	f7ff fe42 	bl	c044 <mbedtls_mpi_sub_mpi>
    c3c0:	4601      	mov	r1, r0
    c3c2:	bb18      	cbnz	r0, c40c <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    c3c4:	a80a      	add	r0, sp, #40	; 0x28
    c3c6:	f7ff fd3f 	bl	be48 <mbedtls_mpi_cmp_int>
    c3ca:	2800      	cmp	r0, #0
    c3cc:	da12      	bge.n	c3f4 <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    c3ce:	a90d      	add	r1, sp, #52	; 0x34
    c3d0:	a813      	add	r0, sp, #76	; 0x4c
    c3d2:	f7ff fb29 	bl	ba28 <mbedtls_mpi_copy>
    c3d6:	b9b8      	cbnz	r0, c408 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    c3d8:	4641      	mov	r1, r8
    c3da:	a813      	add	r0, sp, #76	; 0x4c
    c3dc:	f7ff fc2f 	bl	bc3e <mbedtls_mpi_shift_l>
    c3e0:	b990      	cbnz	r0, c408 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    c3e2:	a90a      	add	r1, sp, #40	; 0x28
    c3e4:	aa13      	add	r2, sp, #76	; 0x4c
    c3e6:	4608      	mov	r0, r1
    c3e8:	f7ff fe0a 	bl	c000 <mbedtls_mpi_add_mpi>
    c3ec:	b960      	cbnz	r0, c408 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    c3ee:	682b      	ldr	r3, [r5, #0]
    c3f0:	3b01      	subs	r3, #1
    c3f2:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    c3f4:	9b02      	ldr	r3, [sp, #8]
    c3f6:	f10a 3aff 	add.w	sl, sl, #4294967295
    c3fa:	3b04      	subs	r3, #4
    c3fc:	e731      	b.n	c262 <mbedtls_mpi_div_mpi+0x17c>
    c3fe:	f04f 33ff 	mov.w	r3, #4294967295
    c402:	e791      	b.n	c328 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c404:	9a05      	ldr	r2, [sp, #20]
    c406:	e7b6      	b.n	c376 <mbedtls_mpi_div_mpi+0x290>
    c408:	4604      	mov	r4, r0
    c40a:	e6a3      	b.n	c154 <mbedtls_mpi_div_mpi+0x6e>
    c40c:	460c      	mov	r4, r1
    c40e:	e6a1      	b.n	c154 <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    c410:	f06f 040b 	mvn.w	r4, #11
    c414:	e693      	b.n	c13e <mbedtls_mpi_div_mpi+0x58>

0000c416 <mbedtls_mpi_mod_mpi>:
{
    c416:	b570      	push	{r4, r5, r6, lr}
    c418:	4604      	mov	r4, r0
    c41a:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    c41c:	4610      	mov	r0, r2
    c41e:	2100      	movs	r1, #0
{
    c420:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    c422:	f7ff fd11 	bl	be48 <mbedtls_mpi_cmp_int>
    c426:	2800      	cmp	r0, #0
    c428:	db24      	blt.n	c474 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    c42a:	462a      	mov	r2, r5
    c42c:	4633      	mov	r3, r6
    c42e:	4621      	mov	r1, r4
    c430:	2000      	movs	r0, #0
    c432:	f7ff fe58 	bl	c0e6 <mbedtls_mpi_div_mpi>
    c436:	4605      	mov	r5, r0
    c438:	b138      	cbz	r0, c44a <mbedtls_mpi_mod_mpi+0x34>
}
    c43a:	4628      	mov	r0, r5
    c43c:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    c43e:	4632      	mov	r2, r6
    c440:	4621      	mov	r1, r4
    c442:	4620      	mov	r0, r4
    c444:	f7ff fddc 	bl	c000 <mbedtls_mpi_add_mpi>
    c448:	b990      	cbnz	r0, c470 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    c44a:	2100      	movs	r1, #0
    c44c:	4620      	mov	r0, r4
    c44e:	f7ff fcfb 	bl	be48 <mbedtls_mpi_cmp_int>
    c452:	2800      	cmp	r0, #0
    c454:	dbf3      	blt.n	c43e <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    c456:	4631      	mov	r1, r6
    c458:	4620      	mov	r0, r4
    c45a:	f7ff fcb4 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
    c45e:	2800      	cmp	r0, #0
    c460:	dbeb      	blt.n	c43a <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    c462:	4632      	mov	r2, r6
    c464:	4621      	mov	r1, r4
    c466:	4620      	mov	r0, r4
    c468:	f7ff fdec 	bl	c044 <mbedtls_mpi_sub_mpi>
    c46c:	2800      	cmp	r0, #0
    c46e:	d0f2      	beq.n	c456 <mbedtls_mpi_mod_mpi+0x40>
    c470:	4605      	mov	r5, r0
    c472:	e7e2      	b.n	c43a <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    c474:	f06f 0509 	mvn.w	r5, #9
    c478:	e7df      	b.n	c43a <mbedtls_mpi_mod_mpi+0x24>

0000c47a <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    c47a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c47e:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    c482:	4606      	mov	r6, r0
    c484:	4689      	mov	r9, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c486:	4618      	mov	r0, r3
    c488:	2100      	movs	r1, #0
{
    c48a:	9205      	str	r2, [sp, #20]
    c48c:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c48e:	f7ff fcdb 	bl	be48 <mbedtls_mpi_cmp_int>
    c492:	2800      	cmp	r0, #0
    c494:	f340 8212 	ble.w	c8bc <mbedtls_mpi_exp_mod+0x442>
    c498:	68ab      	ldr	r3, [r5, #8]
    c49a:	681c      	ldr	r4, [r3, #0]
    c49c:	f014 0301 	ands.w	r3, r4, #1
    c4a0:	9308      	str	r3, [sp, #32]
    c4a2:	f000 820b 	beq.w	c8bc <mbedtls_mpi_exp_mod+0x442>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    c4a6:	9805      	ldr	r0, [sp, #20]
    c4a8:	2100      	movs	r1, #0
    c4aa:	f7ff fccd 	bl	be48 <mbedtls_mpi_cmp_int>
    c4ae:	2800      	cmp	r0, #0
    c4b0:	f2c0 8204 	blt.w	c8bc <mbedtls_mpi_exp_mod+0x442>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    c4b4:	9805      	ldr	r0, [sp, #20]
    c4b6:	f7ff fb47 	bl	bb48 <mbedtls_mpi_bitlen>
    c4ba:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c4be:	f200 81fd 	bhi.w	c8bc <mbedtls_mpi_exp_mod+0x442>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    c4c2:	4628      	mov	r0, r5
    c4c4:	f7ff fb40 	bl	bb48 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    c4c8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c4cc:	f200 81f6 	bhi.w	c8bc <mbedtls_mpi_exp_mod+0x442>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    c4d0:	f104 0802 	add.w	r8, r4, #2
    c4d4:	ea4f 0848 	mov.w	r8, r8, lsl #1
    c4d8:	f008 0808 	and.w	r8, r8, #8
    c4dc:	44a0      	add	r8, r4
    c4de:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
    c4e0:	fb08 f304 	mul.w	r3, r8, r4
    c4e4:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
    c4e8:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    c4ea:	fb03 f808 	mul.w	r8, r3, r8
    for( i = biL; i >= 8; i /= 2 )
    c4ee:	d1f7      	bne.n	c4e0 <mbedtls_mpi_exp_mod+0x66>
    X->s = 1;
    c4f0:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    c4f2:	f44f 7240 	mov.w	r2, #768	; 0x300
    c4f6:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    c4f8:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    c4fc:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    c500:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    c504:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    c508:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    c50c:	9116      	str	r1, [sp, #88]	; 0x58
    c50e:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    c510:	f7fe faf2 	bl	aaf8 <memset>

    i = mbedtls_mpi_bitlen( E );
    c514:	9805      	ldr	r0, [sp, #20]
    c516:	f7ff fb17 	bl	bb48 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    c51a:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    c51e:	f080 80f5 	bcs.w	c70c <mbedtls_mpi_exp_mod+0x292>
    c522:	28ef      	cmp	r0, #239	; 0xef
    c524:	f200 80f4 	bhi.w	c710 <mbedtls_mpi_exp_mod+0x296>
    c528:	284f      	cmp	r0, #79	; 0x4f
    c52a:	f200 80f3 	bhi.w	c714 <mbedtls_mpi_exp_mod+0x29a>
    c52e:	9b08      	ldr	r3, [sp, #32]
    c530:	2818      	cmp	r0, #24
    c532:	bf34      	ite	cc
    c534:	461f      	movcc	r7, r3
    c536:	2703      	movcs	r7, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    c538:	686b      	ldr	r3, [r5, #4]
    c53a:	f103 0a01 	add.w	sl, r3, #1
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c53e:	4651      	mov	r1, sl
    c540:	4630      	mov	r0, r6
    c542:	f7ff fa2f 	bl	b9a4 <mbedtls_mpi_grow>
    c546:	4604      	mov	r4, r0
    c548:	2800      	cmp	r0, #0
    c54a:	f040 80bd 	bne.w	c6c8 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    c54e:	4651      	mov	r1, sl
    c550:	a81d      	add	r0, sp, #116	; 0x74
    c552:	f7ff fa27 	bl	b9a4 <mbedtls_mpi_grow>
    c556:	4604      	mov	r4, r0
    c558:	2800      	cmp	r0, #0
    c55a:	f040 80b5 	bne.w	c6c8 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    c55e:	ea4f 014a 	mov.w	r1, sl, lsl #1
    c562:	a80e      	add	r0, sp, #56	; 0x38
    c564:	f7ff fa1e 	bl	b9a4 <mbedtls_mpi_grow>
    c568:	4604      	mov	r4, r0
    c56a:	2800      	cmp	r0, #0
    c56c:	f040 80ac 	bne.w	c6c8 <mbedtls_mpi_exp_mod+0x24e>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    c570:	f8d9 3000 	ldr.w	r3, [r9]
    c574:	9306      	str	r3, [sp, #24]
    if( neg )
    c576:	3301      	adds	r3, #1
    c578:	d10b      	bne.n	c592 <mbedtls_mpi_exp_mod+0x118>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    c57a:	4649      	mov	r1, r9
    c57c:	a814      	add	r0, sp, #80	; 0x50
    c57e:	f7ff fa53 	bl	ba28 <mbedtls_mpi_copy>
    c582:	4604      	mov	r4, r0
    c584:	2800      	cmp	r0, #0
    c586:	f040 809f 	bne.w	c6c8 <mbedtls_mpi_exp_mod+0x24e>
        Apos.s = 1;
    c58a:	2301      	movs	r3, #1
    c58c:	9314      	str	r3, [sp, #80]	; 0x50
        A = &Apos;
    c58e:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    c592:	9be4      	ldr	r3, [sp, #912]	; 0x390
    c594:	b11b      	cbz	r3, c59e <mbedtls_mpi_exp_mod+0x124>
    c596:	689b      	ldr	r3, [r3, #8]
    c598:	2b00      	cmp	r3, #0
    c59a:	f040 80bd 	bne.w	c718 <mbedtls_mpi_exp_mod+0x29e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    c59e:	2101      	movs	r1, #1
    c5a0:	a80b      	add	r0, sp, #44	; 0x2c
    c5a2:	f7ff faa5 	bl	baf0 <mbedtls_mpi_lset>
    c5a6:	4604      	mov	r4, r0
    c5a8:	2800      	cmp	r0, #0
    c5aa:	f040 808d 	bne.w	c6c8 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    c5ae:	6869      	ldr	r1, [r5, #4]
    c5b0:	a80b      	add	r0, sp, #44	; 0x2c
    c5b2:	0189      	lsls	r1, r1, #6
    c5b4:	f7ff fb43 	bl	bc3e <mbedtls_mpi_shift_l>
    c5b8:	4604      	mov	r4, r0
    c5ba:	2800      	cmp	r0, #0
    c5bc:	f040 8084 	bne.w	c6c8 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    c5c0:	a90b      	add	r1, sp, #44	; 0x2c
    c5c2:	462a      	mov	r2, r5
    c5c4:	4608      	mov	r0, r1
    c5c6:	f7ff ff26 	bl	c416 <mbedtls_mpi_mod_mpi>
    c5ca:	4604      	mov	r4, r0
    c5cc:	2800      	cmp	r0, #0
    c5ce:	d17b      	bne.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>

        if( _RR != NULL )
    c5d0:	9be4      	ldr	r3, [sp, #912]	; 0x390
    c5d2:	b123      	cbz	r3, c5de <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    c5d4:	220c      	movs	r2, #12
    c5d6:	a90b      	add	r1, sp, #44	; 0x2c
    c5d8:	4618      	mov	r0, r3
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    c5da:	f7fe fa82 	bl	aae2 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    c5de:	4629      	mov	r1, r5
    c5e0:	4648      	mov	r0, r9
    c5e2:	f7ff fbf0 	bl	bdc6 <mbedtls_mpi_cmp_mpi>
    c5e6:	2800      	cmp	r0, #0
    c5e8:	f2c0 809a 	blt.w	c720 <mbedtls_mpi_exp_mod+0x2a6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    c5ec:	462a      	mov	r2, r5
    c5ee:	4649      	mov	r1, r9
    c5f0:	a81d      	add	r0, sp, #116	; 0x74
    c5f2:	f7ff ff10 	bl	c416 <mbedtls_mpi_mod_mpi>
    c5f6:	4604      	mov	r4, r0
    c5f8:	2800      	cmp	r0, #0
    c5fa:	d165      	bne.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    c5fc:	6869      	ldr	r1, [r5, #4]
    c5fe:	a81d      	add	r0, sp, #116	; 0x74
    c600:	3101      	adds	r1, #1
    c602:	f7ff f9cf 	bl	b9a4 <mbedtls_mpi_grow>
    c606:	4604      	mov	r4, r0
    c608:	2800      	cmp	r0, #0
    c60a:	d15d      	bne.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    c60c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    *mm = ~x + 1;
    c610:	f1c8 0300 	rsb	r3, r8, #0
    mpi_montmul( &W[1], &RR, N, mm, &T );
    c614:	462a      	mov	r2, r5
    c616:	a90b      	add	r1, sp, #44	; 0x2c
    c618:	a81d      	add	r0, sp, #116	; 0x74
    c61a:	f8cd b000 	str.w	fp, [sp]
    *mm = ~x + 1;
    c61e:	9303      	str	r3, [sp, #12]
    mpi_montmul( &W[1], &RR, N, mm, &T );
    c620:	f7ff f90f 	bl	b842 <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    c624:	a90b      	add	r1, sp, #44	; 0x2c
    c626:	4630      	mov	r0, r6
    c628:	f7ff f9fe 	bl	ba28 <mbedtls_mpi_copy>
    c62c:	4604      	mov	r4, r0
    c62e:	2800      	cmp	r0, #0
    c630:	d14a      	bne.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>
    mbedtls_mpi_uint z = 1;
    c632:	2301      	movs	r3, #1
    c634:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    c636:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    c63a:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    c63c:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    c63e:	9b03      	ldr	r3, [sp, #12]
    c640:	f8cd b000 	str.w	fp, [sp]
    c644:	462a      	mov	r2, r5
    c646:	a917      	add	r1, sp, #92	; 0x5c
    c648:	4630      	mov	r0, r6
    c64a:	f7ff f8fa 	bl	b842 <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    c64e:	2f01      	cmp	r7, #1
    c650:	d16b      	bne.n	c72a <mbedtls_mpi_exp_mod+0x2b0>

            mpi_montmul( &W[i], &W[1], N, mm, &T );
        }
    }

    nblimbs = E->n;
    c652:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    c654:	f04f 0a00 	mov.w	sl, #0
    nblimbs = E->n;
    c658:	685b      	ldr	r3, [r3, #4]
    c65a:	9304      	str	r3, [sp, #16]
    nbits   = 0;
    c65c:	46d0      	mov	r8, sl
    bufsize = 0;
    c65e:	46d3      	mov	fp, sl
    wbits   = 0;
    c660:	46d1      	mov	r9, sl

    while( 1 )
    {
        if( bufsize == 0 )
    c662:	f1bb 0f00 	cmp.w	fp, #0
    c666:	f040 80af 	bne.w	c7c8 <mbedtls_mpi_exp_mod+0x34e>
        {
            if( nblimbs == 0 )
    c66a:	9b04      	ldr	r3, [sp, #16]
    c66c:	2b00      	cmp	r3, #0
    c66e:	f040 80a6 	bne.w	c7be <mbedtls_mpi_exp_mod+0x344>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    c672:	f04f 0b01 	mov.w	fp, #1
    c676:	fa0b fb07 	lsl.w	fp, fp, r7
    c67a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    for( i = 0; i < nbits; i++ )
    c67e:	9b04      	ldr	r3, [sp, #16]
    c680:	4543      	cmp	r3, r8
    c682:	f040 80f9 	bne.w	c878 <mbedtls_mpi_exp_mod+0x3fe>
    mbedtls_mpi_uint z = 1;
    c686:	2301      	movs	r3, #1
    c688:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    c68a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    c68e:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    c690:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    c692:	9b03      	ldr	r3, [sp, #12]
    c694:	f8cd a000 	str.w	sl, [sp]
    c698:	462a      	mov	r2, r5
    c69a:	a917      	add	r1, sp, #92	; 0x5c
    c69c:	4630      	mov	r0, r6
    c69e:	f7ff f8d0 	bl	b842 <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    c6a2:	9b06      	ldr	r3, [sp, #24]
    c6a4:	3301      	adds	r3, #1
    c6a6:	d10f      	bne.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>
    c6a8:	9b05      	ldr	r3, [sp, #20]
    c6aa:	685b      	ldr	r3, [r3, #4]
    c6ac:	b163      	cbz	r3, c6c8 <mbedtls_mpi_exp_mod+0x24e>
    c6ae:	9b05      	ldr	r3, [sp, #20]
    c6b0:	689b      	ldr	r3, [r3, #8]
    c6b2:	681b      	ldr	r3, [r3, #0]
    c6b4:	07db      	lsls	r3, r3, #31
    c6b6:	d507      	bpl.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>
    {
        X->s = -1;
    c6b8:	9b06      	ldr	r3, [sp, #24]
    c6ba:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    c6bc:	4632      	mov	r2, r6
    c6be:	4629      	mov	r1, r5
    c6c0:	4630      	mov	r0, r6
    c6c2:	f7ff fc9d 	bl	c000 <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    c6c6:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    c6c8:	1e7d      	subs	r5, r7, #1
    c6ca:	2301      	movs	r3, #1
    c6cc:	fa03 f607 	lsl.w	r6, r3, r7
    c6d0:	fa03 f505 	lsl.w	r5, r3, r5
        mbedtls_mpi_free( &W[i] );
    c6d4:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    c6d6:	42ae      	cmp	r6, r5
    c6d8:	f200 80e9 	bhi.w	c8ae <mbedtls_mpi_exp_mod+0x434>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    c6dc:	a81d      	add	r0, sp, #116	; 0x74
    c6de:	f7ff f94f 	bl	b980 <mbedtls_mpi_free>
    c6e2:	a80e      	add	r0, sp, #56	; 0x38
    c6e4:	f7ff f94c 	bl	b980 <mbedtls_mpi_free>
    c6e8:	a814      	add	r0, sp, #80	; 0x50
    c6ea:	f7ff f949 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    c6ee:	a811      	add	r0, sp, #68	; 0x44
    c6f0:	f7ff f946 	bl	b980 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    c6f4:	9be4      	ldr	r3, [sp, #912]	; 0x390
    c6f6:	b10b      	cbz	r3, c6fc <mbedtls_mpi_exp_mod+0x282>
    c6f8:	689b      	ldr	r3, [r3, #8]
    c6fa:	b913      	cbnz	r3, c702 <mbedtls_mpi_exp_mod+0x288>
        mbedtls_mpi_free( &RR );
    c6fc:	a80b      	add	r0, sp, #44	; 0x2c
    c6fe:	f7ff f93f 	bl	b980 <mbedtls_mpi_free>

    return( ret );
}
    c702:	4620      	mov	r0, r4
    c704:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    c70c:	2706      	movs	r7, #6
    c70e:	e713      	b.n	c538 <mbedtls_mpi_exp_mod+0xbe>
    c710:	2705      	movs	r7, #5
    c712:	e711      	b.n	c538 <mbedtls_mpi_exp_mod+0xbe>
    c714:	2704      	movs	r7, #4
    c716:	e70f      	b.n	c538 <mbedtls_mpi_exp_mod+0xbe>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    c718:	99e4      	ldr	r1, [sp, #912]	; 0x390
    c71a:	220c      	movs	r2, #12
    c71c:	a80b      	add	r0, sp, #44	; 0x2c
    c71e:	e75c      	b.n	c5da <mbedtls_mpi_exp_mod+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    c720:	4649      	mov	r1, r9
    c722:	a81d      	add	r0, sp, #116	; 0x74
    c724:	f7ff f980 	bl	ba28 <mbedtls_mpi_copy>
    c728:	e76d      	b.n	c606 <mbedtls_mpi_exp_mod+0x18c>
        j =  one << ( wsize - 1 );
    c72a:	f107 39ff 	add.w	r9, r7, #4294967295
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    c72e:	230c      	movs	r3, #12
    c730:	6869      	ldr	r1, [r5, #4]
    c732:	fa03 f309 	lsl.w	r3, r3, r9
    c736:	aa1a      	add	r2, sp, #104	; 0x68
    c738:	eb02 0803 	add.w	r8, r2, r3
    c73c:	3101      	adds	r1, #1
    c73e:	4640      	mov	r0, r8
    c740:	f7ff f930 	bl	b9a4 <mbedtls_mpi_grow>
    c744:	2800      	cmp	r0, #0
    c746:	d1be      	bne.n	c6c6 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    c748:	a91d      	add	r1, sp, #116	; 0x74
    c74a:	4640      	mov	r0, r8
    c74c:	f7ff f96c 	bl	ba28 <mbedtls_mpi_copy>
    c750:	2800      	cmp	r0, #0
    c752:	d1b8      	bne.n	c6c6 <mbedtls_mpi_exp_mod+0x24c>
        for( i = 0; i < wsize - 1; i++ )
    c754:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    c756:	9b03      	ldr	r3, [sp, #12]
    c758:	f8cd b000 	str.w	fp, [sp]
    c75c:	462a      	mov	r2, r5
    c75e:	4641      	mov	r1, r8
    c760:	4640      	mov	r0, r8
        for( i = 0; i < wsize - 1; i++ )
    c762:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    c766:	f7ff f86c 	bl	b842 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    c76a:	45ca      	cmp	sl, r9
    c76c:	d3f3      	bcc.n	c756 <mbedtls_mpi_exp_mod+0x2dc>
        j =  one << ( wsize - 1 );
    c76e:	f04f 0a01 	mov.w	sl, #1
    c772:	fa0a f909 	lsl.w	r9, sl, r9
        for( i = j + 1; i < ( one << wsize ); i++ )
    c776:	44d1      	add	r9, sl
    c778:	fa0a fa07 	lsl.w	sl, sl, r7
    c77c:	45ca      	cmp	sl, r9
    c77e:	f67f af68 	bls.w	c652 <mbedtls_mpi_exp_mod+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    c782:	6869      	ldr	r1, [r5, #4]
    c784:	f108 0b0c 	add.w	fp, r8, #12
    c788:	3101      	adds	r1, #1
    c78a:	4658      	mov	r0, fp
    c78c:	f7ff f90a 	bl	b9a4 <mbedtls_mpi_grow>
    c790:	2800      	cmp	r0, #0
    c792:	d198      	bne.n	c6c6 <mbedtls_mpi_exp_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    c794:	4641      	mov	r1, r8
    c796:	4658      	mov	r0, fp
    c798:	f7ff f946 	bl	ba28 <mbedtls_mpi_copy>
    c79c:	2800      	cmp	r0, #0
    c79e:	d192      	bne.n	c6c6 <mbedtls_mpi_exp_mod+0x24c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    c7a0:	ab0e      	add	r3, sp, #56	; 0x38
    c7a2:	9300      	str	r3, [sp, #0]
    c7a4:	462a      	mov	r2, r5
    c7a6:	9b03      	ldr	r3, [sp, #12]
    c7a8:	a91d      	add	r1, sp, #116	; 0x74
    c7aa:	4658      	mov	r0, fp
    c7ac:	f7ff f849 	bl	b842 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    c7b0:	f109 0901 	add.w	r9, r9, #1
    c7b4:	46d8      	mov	r8, fp
    c7b6:	e7e1      	b.n	c77c <mbedtls_mpi_exp_mod+0x302>
        state = 2;
    c7b8:	f04f 0a02 	mov.w	sl, #2
    c7bc:	e751      	b.n	c662 <mbedtls_mpi_exp_mod+0x1e8>
            nblimbs--;
    c7be:	9b04      	ldr	r3, [sp, #16]
    c7c0:	3b01      	subs	r3, #1
    c7c2:	9304      	str	r3, [sp, #16]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    c7c4:	f04f 0b20 	mov.w	fp, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
    c7c8:	9b05      	ldr	r3, [sp, #20]
    c7ca:	9a04      	ldr	r2, [sp, #16]
    c7cc:	689b      	ldr	r3, [r3, #8]
    c7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
    c7d2:	f10b 3bff 	add.w	fp, fp, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    c7d6:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    c7da:	f013 0301 	ands.w	r3, r3, #1
    c7de:	d10f      	bne.n	c800 <mbedtls_mpi_exp_mod+0x386>
    c7e0:	f1ba 0f00 	cmp.w	sl, #0
    c7e4:	f43f af3d 	beq.w	c662 <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    c7e8:	f1ba 0f01 	cmp.w	sl, #1
    c7ec:	d108      	bne.n	c800 <mbedtls_mpi_exp_mod+0x386>
            mpi_montmul( X, X, N, mm, &T );
    c7ee:	ab0e      	add	r3, sp, #56	; 0x38
    c7f0:	9300      	str	r3, [sp, #0]
    c7f2:	462a      	mov	r2, r5
    c7f4:	9b03      	ldr	r3, [sp, #12]
    c7f6:	4631      	mov	r1, r6
    c7f8:	4630      	mov	r0, r6
    c7fa:	f7ff f822 	bl	b842 <mpi_montmul>
            continue;
    c7fe:	e730      	b.n	c662 <mbedtls_mpi_exp_mod+0x1e8>
        nbits++;
    c800:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
    c804:	eba7 0208 	sub.w	r2, r7, r8
    c808:	4093      	lsls	r3, r2
        if( nbits == wsize )
    c80a:	4547      	cmp	r7, r8
        wbits |= ( ei << ( wsize - nbits ) );
    c80c:	ea49 0903 	orr.w	r9, r9, r3
        if( nbits == wsize )
    c810:	d1d2      	bne.n	c7b8 <mbedtls_mpi_exp_mod+0x33e>
            for( i = 0; i < wsize; i++ )
    c812:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    c816:	ab0e      	add	r3, sp, #56	; 0x38
    c818:	9300      	str	r3, [sp, #0]
    c81a:	462a      	mov	r2, r5
    c81c:	9b03      	ldr	r3, [sp, #12]
    c81e:	4631      	mov	r1, r6
    c820:	4630      	mov	r0, r6
            for( i = 0; i < wsize; i++ )
    c822:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    c826:	f7ff f80c 	bl	b842 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    c82a:	45d0      	cmp	r8, sl
    c82c:	d8f3      	bhi.n	c816 <mbedtls_mpi_exp_mod+0x39c>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    c82e:	2301      	movs	r3, #1
    c830:	fa03 f808 	lsl.w	r8, r3, r8
    for( size_t i = 0; i < T_size; i++ )
    c834:	a91a      	add	r1, sp, #104	; 0x68
    c836:	f04f 0a00 	mov.w	sl, #0
    const size_t diff = x ^ y;
    c83a:	ea89 030a 	eor.w	r3, r9, sl
    const size_t diff_msb = ( diff | (size_t) -diff );
    c83e:	425a      	negs	r2, r3
    c840:	431a      	orrs	r2, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    c842:	43d2      	mvns	r2, r2
    c844:	0fd2      	lsrs	r2, r2, #31
    c846:	a811      	add	r0, sp, #68	; 0x44
    c848:	9109      	str	r1, [sp, #36]	; 0x24
    c84a:	f7ff f921 	bl	ba90 <mbedtls_mpi_safe_cond_assign>
    c84e:	9007      	str	r0, [sp, #28]
    c850:	bb58      	cbnz	r0, c8aa <mbedtls_mpi_exp_mod+0x430>
    for( size_t i = 0; i < T_size; i++ )
    c852:	9909      	ldr	r1, [sp, #36]	; 0x24
    c854:	f10a 0a01 	add.w	sl, sl, #1
    c858:	45d0      	cmp	r8, sl
    c85a:	f101 010c 	add.w	r1, r1, #12
    c85e:	d1ec      	bne.n	c83a <mbedtls_mpi_exp_mod+0x3c0>
            mpi_montmul( X, &WW, N, mm, &T );
    c860:	ab0e      	add	r3, sp, #56	; 0x38
    c862:	9300      	str	r3, [sp, #0]
    c864:	462a      	mov	r2, r5
    c866:	9b03      	ldr	r3, [sp, #12]
    c868:	a911      	add	r1, sp, #68	; 0x44
    c86a:	4630      	mov	r0, r6
    c86c:	f7fe ffe9 	bl	b842 <mpi_montmul>
            nbits = 0;
    c870:	e9dd 9a07 	ldrd	r9, sl, [sp, #28]
            wbits = 0;
    c874:	46c8      	mov	r8, r9
    c876:	e6f4      	b.n	c662 <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    c878:	9b03      	ldr	r3, [sp, #12]
    c87a:	f8cd a000 	str.w	sl, [sp]
    c87e:	462a      	mov	r2, r5
    c880:	4631      	mov	r1, r6
    c882:	4630      	mov	r0, r6
        wbits <<= 1;
    c884:	ea4f 0949 	mov.w	r9, r9, lsl #1
        mpi_montmul( X, X, N, mm, &T );
    c888:	f7fe ffdb 	bl	b842 <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    c88c:	ea1b 0f09 	tst.w	fp, r9
    c890:	d007      	beq.n	c8a2 <mbedtls_mpi_exp_mod+0x428>
            mpi_montmul( X, &W[1], N, mm, &T );
    c892:	9b03      	ldr	r3, [sp, #12]
    c894:	f8cd a000 	str.w	sl, [sp]
    c898:	462a      	mov	r2, r5
    c89a:	a91d      	add	r1, sp, #116	; 0x74
    c89c:	4630      	mov	r0, r6
    c89e:	f7fe ffd0 	bl	b842 <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    c8a2:	9b04      	ldr	r3, [sp, #16]
    c8a4:	3301      	adds	r3, #1
    c8a6:	9304      	str	r3, [sp, #16]
    c8a8:	e6e9      	b.n	c67e <mbedtls_mpi_exp_mod+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    c8aa:	9c07      	ldr	r4, [sp, #28]
    c8ac:	e70c      	b.n	c6c8 <mbedtls_mpi_exp_mod+0x24e>
        mbedtls_mpi_free( &W[i] );
    c8ae:	ab1a      	add	r3, sp, #104	; 0x68
    c8b0:	fb07 3005 	mla	r0, r7, r5, r3
    c8b4:	f7ff f864 	bl	b980 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    c8b8:	3501      	adds	r5, #1
    c8ba:	e70c      	b.n	c6d6 <mbedtls_mpi_exp_mod+0x25c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    c8bc:	f06f 0403 	mvn.w	r4, #3
    c8c0:	e71f      	b.n	c702 <mbedtls_mpi_exp_mod+0x288>

0000c8c2 <platform_calloc_uninit>:
}
    c8c2:	2000      	movs	r0, #0
    c8c4:	4770      	bx	lr

0000c8c6 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    c8c6:	4770      	bx	lr

0000c8c8 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    c8c8:	4770      	bx	lr

0000c8ca <mbedtls_rsa_import>:
{
    c8ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c8ce:	4604      	mov	r4, r0
    c8d0:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    c8d4:	4691      	mov	r9, r2
    c8d6:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    c8d8:	460d      	mov	r5, r1
    c8da:	b951      	cbnz	r1, c8f2 <mbedtls_rsa_import+0x28>
    c8dc:	f1b9 0f00 	cmp.w	r9, #0
    c8e0:	d110      	bne.n	c904 <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    c8e2:	f1b8 0f00 	cmp.w	r8, #0
    c8e6:	d115      	bne.n	c914 <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    c8e8:	b9e7      	cbnz	r7, c924 <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    c8ea:	bb1e      	cbnz	r6, c934 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    c8ec:	bb55      	cbnz	r5, c944 <mbedtls_rsa_import+0x7a>
    return( 0 );
    c8ee:	2000      	movs	r0, #0
    c8f0:	e006      	b.n	c900 <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    c8f2:	3008      	adds	r0, #8
    c8f4:	f7ff f898 	bl	ba28 <mbedtls_mpi_copy>
    c8f8:	2800      	cmp	r0, #0
    c8fa:	d0ef      	beq.n	c8dc <mbedtls_rsa_import+0x12>
    c8fc:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    c900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    c904:	4649      	mov	r1, r9
    c906:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    c90a:	f7ff f88d 	bl	ba28 <mbedtls_mpi_copy>
    c90e:	2800      	cmp	r0, #0
    c910:	d0e7      	beq.n	c8e2 <mbedtls_rsa_import+0x18>
    c912:	e7f3      	b.n	c8fc <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    c914:	4641      	mov	r1, r8
    c916:	f104 0038 	add.w	r0, r4, #56	; 0x38
    c91a:	f7ff f885 	bl	ba28 <mbedtls_mpi_copy>
    c91e:	2800      	cmp	r0, #0
    c920:	d0e2      	beq.n	c8e8 <mbedtls_rsa_import+0x1e>
    c922:	e7eb      	b.n	c8fc <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    c924:	4639      	mov	r1, r7
    c926:	f104 0020 	add.w	r0, r4, #32
    c92a:	f7ff f87d 	bl	ba28 <mbedtls_mpi_copy>
    c92e:	2800      	cmp	r0, #0
    c930:	d0db      	beq.n	c8ea <mbedtls_rsa_import+0x20>
    c932:	e7e3      	b.n	c8fc <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    c934:	4631      	mov	r1, r6
    c936:	f104 0014 	add.w	r0, r4, #20
    c93a:	f7ff f875 	bl	ba28 <mbedtls_mpi_copy>
    c93e:	2800      	cmp	r0, #0
    c940:	d0d4      	beq.n	c8ec <mbedtls_rsa_import+0x22>
    c942:	e7db      	b.n	c8fc <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    c944:	f104 0008 	add.w	r0, r4, #8
    c948:	f7ff f91d 	bl	bb86 <mbedtls_mpi_size>
    c94c:	6060      	str	r0, [r4, #4]
    c94e:	e7ce      	b.n	c8ee <mbedtls_rsa_import+0x24>

0000c950 <mbedtls_rsa_init>:
{
    c950:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    c952:	22ac      	movs	r2, #172	; 0xac
    c954:	2100      	movs	r1, #0
{
    c956:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    c958:	f7fe f8ce 	bl	aaf8 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    c95c:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    c95e:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    c962:	bd10      	pop	{r4, pc}

0000c964 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    c964:	b510      	push	{r4, lr}
    if( ctx == NULL )
    c966:	4604      	mov	r4, r0
    c968:	b3a0      	cbz	r0, c9d4 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    c96a:	308c      	adds	r0, #140	; 0x8c
    c96c:	f7ff f808 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    c970:	f104 0098 	add.w	r0, r4, #152	; 0x98
    c974:	f7ff f804 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    c978:	f104 0068 	add.w	r0, r4, #104	; 0x68
    c97c:	f7ff f800 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    c980:	f104 0020 	add.w	r0, r4, #32
    c984:	f7fe fffc 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    c988:	f104 0038 	add.w	r0, r4, #56	; 0x38
    c98c:	f7fe fff8 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    c990:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    c994:	f7fe fff4 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    c998:	f104 0014 	add.w	r0, r4, #20
    c99c:	f7fe fff0 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    c9a0:	f104 0008 	add.w	r0, r4, #8
    c9a4:	f7fe ffec 	bl	b980 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    c9a8:	f104 0080 	add.w	r0, r4, #128	; 0x80
    c9ac:	f7fe ffe8 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    c9b0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    c9b4:	f7fe ffe4 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    c9b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c9bc:	f7fe ffe0 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    c9c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c9c4:	f7fe ffdc 	bl	b980 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    c9c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    c9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    c9d0:	f7fe bfd6 	b.w	b980 <mbedtls_mpi_free>
}
    c9d4:	bd10      	pop	{r4, pc}

0000c9d6 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    c9d6:	226c      	movs	r2, #108	; 0x6c
    c9d8:	2100      	movs	r1, #0
    c9da:	f7fe b88d 	b.w	aaf8 <memset>

0000c9de <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    c9de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9e2:	4605      	mov	r5, r0
    c9e4:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    c9e6:	4614      	mov	r4, r2
    c9e8:	b37a      	cbz	r2, ca4a <mbedtls_sha256_update+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    c9ea:	6803      	ldr	r3, [r0, #0]
    c9ec:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    c9f0:	189b      	adds	r3, r3, r2
    c9f2:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    c9f4:	bf22      	ittt	cs
    c9f6:	6843      	ldrcs	r3, [r0, #4]
    c9f8:	3301      	addcs	r3, #1
    c9fa:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    c9fc:	b19f      	cbz	r7, ca26 <mbedtls_sha256_update+0x48>
    fill = 64 - left;
    c9fe:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    ca02:	454a      	cmp	r2, r9
    ca04:	d30f      	bcc.n	ca26 <mbedtls_sha256_update+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    ca06:	f100 0828 	add.w	r8, r0, #40	; 0x28
    ca0a:	464a      	mov	r2, r9
    ca0c:	eb08 0007 	add.w	r0, r8, r7
    ca10:	f7fe f867 	bl	aae2 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    ca14:	4641      	mov	r1, r8
    ca16:	4628      	mov	r0, r5
    ca18:	f7f9 fb60 	bl	60dc <mbedtls_internal_sha256_process>
    ca1c:	b9b0      	cbnz	r0, ca4c <mbedtls_sha256_update+0x6e>
            return( ret );

        input += fill;
    ca1e:	443c      	add	r4, r7
    ca20:	444e      	add	r6, r9
        ilen  -= fill;
    ca22:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    ca24:	4607      	mov	r7, r0
    ca26:	4426      	add	r6, r4
    ca28:	e004      	b.n	ca34 <mbedtls_sha256_update+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    ca2a:	4628      	mov	r0, r5
    ca2c:	f7f9 fb56 	bl	60dc <mbedtls_internal_sha256_process>
    ca30:	b960      	cbnz	r0, ca4c <mbedtls_sha256_update+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
    ca32:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    ca34:	2c3f      	cmp	r4, #63	; 0x3f
    ca36:	eba6 0104 	sub.w	r1, r6, r4
    ca3a:	d8f6      	bhi.n	ca2a <mbedtls_sha256_update+0x4c>
    }

    if( ilen > 0 )
    ca3c:	b12c      	cbz	r4, ca4a <mbedtls_sha256_update+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    ca3e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    ca42:	4622      	mov	r2, r4
    ca44:	4438      	add	r0, r7
    ca46:	f7fe f84c 	bl	aae2 <memcpy>
        return( 0 );
    ca4a:	2000      	movs	r0, #0

    return( 0 );
}
    ca4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ca50 <mbedtls_sha256_finish>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    ca50:	6803      	ldr	r3, [r0, #0]
    ca52:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    ca56:	1c5a      	adds	r2, r3, #1
    ca58:	4403      	add	r3, r0
{
    ca5a:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    ca5c:	2a38      	cmp	r2, #56	; 0x38
{
    ca5e:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    ca60:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    ca64:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    ca68:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    ca6a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    ca6e:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    ca72:	d861      	bhi.n	cb38 <mbedtls_sha256_finish+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
    ca74:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    ca78:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    ca7a:	f7fe f83d 	bl	aaf8 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    ca7e:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    ca82:	0f5a      	lsrs	r2, r3, #29
    ca84:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    ca88:	00db      	lsls	r3, r3, #3
    ca8a:	ba12      	rev	r2, r2
    ca8c:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    ca8e:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    ca90:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    ca92:	4631      	mov	r1, r6
    ca94:	4620      	mov	r0, r4
    ca96:	f7f9 fb21 	bl	60dc <mbedtls_internal_sha256_process>
    ca9a:	2800      	cmp	r0, #0
    ca9c:	d14b      	bne.n	cb36 <mbedtls_sha256_finish+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    ca9e:	7ae3      	ldrb	r3, [r4, #11]
    caa0:	702b      	strb	r3, [r5, #0]
    caa2:	8963      	ldrh	r3, [r4, #10]
    caa4:	706b      	strb	r3, [r5, #1]
    caa6:	68a3      	ldr	r3, [r4, #8]
    caa8:	0a1b      	lsrs	r3, r3, #8
    caaa:	70ab      	strb	r3, [r5, #2]
    caac:	68a3      	ldr	r3, [r4, #8]
    caae:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    cab0:	7be3      	ldrb	r3, [r4, #15]
    cab2:	712b      	strb	r3, [r5, #4]
    cab4:	89e3      	ldrh	r3, [r4, #14]
    cab6:	716b      	strb	r3, [r5, #5]
    cab8:	68e3      	ldr	r3, [r4, #12]
    caba:	0a1b      	lsrs	r3, r3, #8
    cabc:	71ab      	strb	r3, [r5, #6]
    cabe:	68e3      	ldr	r3, [r4, #12]
    cac0:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    cac2:	7ce3      	ldrb	r3, [r4, #19]
    cac4:	722b      	strb	r3, [r5, #8]
    cac6:	8a63      	ldrh	r3, [r4, #18]
    cac8:	726b      	strb	r3, [r5, #9]
    caca:	6923      	ldr	r3, [r4, #16]
    cacc:	0a1b      	lsrs	r3, r3, #8
    cace:	72ab      	strb	r3, [r5, #10]
    cad0:	6923      	ldr	r3, [r4, #16]
    cad2:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    cad4:	7de3      	ldrb	r3, [r4, #23]
    cad6:	732b      	strb	r3, [r5, #12]
    cad8:	8ae3      	ldrh	r3, [r4, #22]
    cada:	736b      	strb	r3, [r5, #13]
    cadc:	6963      	ldr	r3, [r4, #20]
    cade:	0a1b      	lsrs	r3, r3, #8
    cae0:	73ab      	strb	r3, [r5, #14]
    cae2:	6963      	ldr	r3, [r4, #20]
    cae4:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    cae6:	7ee3      	ldrb	r3, [r4, #27]
    cae8:	742b      	strb	r3, [r5, #16]
    caea:	8b63      	ldrh	r3, [r4, #26]
    caec:	746b      	strb	r3, [r5, #17]
    caee:	69a3      	ldr	r3, [r4, #24]
    caf0:	0a1b      	lsrs	r3, r3, #8
    caf2:	74ab      	strb	r3, [r5, #18]
    caf4:	69a3      	ldr	r3, [r4, #24]
    caf6:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    caf8:	7fe3      	ldrb	r3, [r4, #31]
    cafa:	752b      	strb	r3, [r5, #20]
    cafc:	8be3      	ldrh	r3, [r4, #30]
    cafe:	756b      	strb	r3, [r5, #21]
    cb00:	69e3      	ldr	r3, [r4, #28]
    cb02:	0a1b      	lsrs	r3, r3, #8
    cb04:	75ab      	strb	r3, [r5, #22]
    cb06:	69e3      	ldr	r3, [r4, #28]
    cb08:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    cb0a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    cb0e:	762b      	strb	r3, [r5, #24]
    cb10:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    cb12:	766b      	strb	r3, [r5, #25]
    cb14:	6a23      	ldr	r3, [r4, #32]
    cb16:	0a1b      	lsrs	r3, r3, #8
    cb18:	76ab      	strb	r3, [r5, #26]
    cb1a:	6a23      	ldr	r3, [r4, #32]
    cb1c:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    cb1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cb20:	b94b      	cbnz	r3, cb36 <mbedtls_sha256_finish+0xe6>
#endif
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    cb22:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    cb26:	772b      	strb	r3, [r5, #28]
    cb28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cb2a:	776b      	strb	r3, [r5, #29]
    cb2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cb2e:	0a1b      	lsrs	r3, r3, #8
    cb30:	77ab      	strb	r3, [r5, #30]
    cb32:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cb34:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    cb36:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    cb38:	2100      	movs	r1, #0
    cb3a:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    cb3e:	f7fd ffdb 	bl	aaf8 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    cb42:	4631      	mov	r1, r6
    cb44:	4620      	mov	r0, r4
    cb46:	f7f9 fac9 	bl	60dc <mbedtls_internal_sha256_process>
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d1f3      	bne.n	cb36 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer, 0, 56 );
    cb4e:	4601      	mov	r1, r0
    cb50:	2238      	movs	r2, #56	; 0x38
    cb52:	4630      	mov	r0, r6
    cb54:	e791      	b.n	ca7a <mbedtls_sha256_finish+0x2a>

0000cb56 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    cb56:	4700      	bx	r0

0000cb58 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    cb58:	f000 bbc4 	b.w	d2e4 <z_impl_k_busy_wait>

0000cb5c <nrfx_clock_start>:
    switch (domain)
    cb5c:	b110      	cbz	r0, cb64 <nrfx_clock_start+0x8>
    cb5e:	2801      	cmp	r0, #1
    cb60:	d01d      	beq.n	cb9e <nrfx_clock_start+0x42>
    cb62:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cb64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cb68:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cb6c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    cb70:	03c9      	lsls	r1, r1, #15
    cb72:	d512      	bpl.n	cb9a <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    cb74:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    cb78:	2a01      	cmp	r2, #1
    cb7a:	d10e      	bne.n	cb9a <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    cb7c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cb84:	2200      	movs	r2, #0
    cb86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    cb8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    cb8e:	2202      	movs	r2, #2
    cb90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb94:	2201      	movs	r2, #1
    cb96:	609a      	str	r2, [r3, #8]
}
    cb98:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    cb9a:	2200      	movs	r2, #0
    cb9c:	e7ee      	b.n	cb7c <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cba2:	2200      	movs	r2, #0
    cba4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cba8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    cbac:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cbb0:	6018      	str	r0, [r3, #0]
}
    cbb2:	4770      	bx	lr

0000cbb4 <nrf_gpio_reconfigure>:
{
    cbb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cbb6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    cbb8:	a801      	add	r0, sp, #4
{
    cbba:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    cbbe:	4616      	mov	r6, r2
    cbc0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    cbc2:	f7f9 fcbf 	bl	6544 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cbc6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    cbc8:	f1b6 0c00 	subs.w	ip, r6, #0
    cbcc:	bf18      	it	ne
    cbce:	f04f 0c01 	movne.w	ip, #1
    cbd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    cbd6:	1e0b      	subs	r3, r1, #0
    cbd8:	bf18      	it	ne
    cbda:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    cbdc:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    cbde:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    cbe2:	bf14      	ite	ne
    cbe4:	f04f 0c0c 	movne.w	ip, #12
    cbe8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    cbec:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    cbee:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    cbf2:	bf14      	ite	ne
    cbf4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    cbf8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    cbfc:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    cbfe:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cc02:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    cc06:	bf14      	ite	ne
    cc08:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    cc0c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    cc10:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    cc14:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cc18:	b101      	cbz	r1, cc1c <nrf_gpio_reconfigure+0x68>
    cc1a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    cc1c:	b10e      	cbz	r6, cc22 <nrf_gpio_reconfigure+0x6e>
    cc1e:	7836      	ldrb	r6, [r6, #0]
    cc20:	0076      	lsls	r6, r6, #1
    cc22:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    cc24:	b10d      	cbz	r5, cc2a <nrf_gpio_reconfigure+0x76>
    cc26:	782d      	ldrb	r5, [r5, #0]
    cc28:	00ad      	lsls	r5, r5, #2
    cc2a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    cc2c:	b10c      	cbz	r4, cc32 <nrf_gpio_reconfigure+0x7e>
    cc2e:	7824      	ldrb	r4, [r4, #0]
    cc30:	0224      	lsls	r4, r4, #8
    cc32:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    cc34:	b10f      	cbz	r7, cc3a <nrf_gpio_reconfigure+0x86>
    cc36:	783f      	ldrb	r7, [r7, #0]
    cc38:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cc3a:	430c      	orrs	r4, r1
    cc3c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    cc3e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    cc42:	b003      	add	sp, #12
    cc44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cc46 <nrf_gpio_cfg_sense_set>:
{
    cc46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    cc48:	f10d 030f 	add.w	r3, sp, #15
    cc4c:	9301      	str	r3, [sp, #4]
    cc4e:	2300      	movs	r3, #0
{
    cc50:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    cc54:	9300      	str	r3, [sp, #0]
    cc56:	461a      	mov	r2, r3
    cc58:	4619      	mov	r1, r3
    cc5a:	f7ff ffab 	bl	cbb4 <nrf_gpio_reconfigure>
}
    cc5e:	b005      	add	sp, #20
    cc60:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc64 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
    cc64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cc68:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    cc6a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    cc6c:	4350      	muls	r0, r2
    cc6e:	4770      	bx	lr

0000cc70 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    cc70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cc74:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    cc76:	4770      	bx	lr

0000cc78 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    cc78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cc7c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    cc7e:	4770      	bx	lr

0000cc80 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cc80:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    cc84:	681a      	ldr	r2, [r3, #0]
    cc86:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc88:	bf1f      	itttt	ne
    cc8a:	2200      	movne	r2, #0
    cc8c:	601a      	strne	r2, [r3, #0]
    cc8e:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cc90:	2001      	movne	r0, #1
    cc92:	bf08      	it	eq
    cc94:	2000      	moveq	r0, #0
}
    cc96:	4770      	bx	lr

0000cc98 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    cc98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cc9c:	f44f 7260 	mov.w	r2, #896	; 0x380
    cca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    cca4:	4770      	bx	lr

0000cca6 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    cca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ccaa:	f44f 7260 	mov.w	r2, #896	; 0x380
    ccae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    ccb2:	4770      	bx	lr

0000ccb4 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    ccb4:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    ccb6:	f7fa f833 	bl	6d20 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    ccba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    ccbe:	f7f9 bc0d 	b.w	64dc <nrfx_clock_irq_handler>

0000ccc2 <nrfx_usbd_consumer>:
{
    ccc2:	b530      	push	{r4, r5, lr}
        p_next->p_data = p_transfer->p_data;
    ccc4:	e9d1 5400 	ldrd	r5, r4, [r1]
    if (size < data_size)
    ccc8:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    ccca:	bf97      	itett	ls
    cccc:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    ccd0:	2100      	movhi	r1, #0
        size -= data_size;
    ccd2:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    ccd4:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    ccd6:	bf8e      	itee	hi
    ccd8:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    ccdc:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    ccde:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    cce0:	429a      	cmp	r2, r3
    cce2:	d103      	bne.n	ccec <nrfx_usbd_consumer+0x2a>
    cce4:	1e20      	subs	r0, r4, #0
    cce6:	bf18      	it	ne
    cce8:	2001      	movne	r0, #1
}
    ccea:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    ccec:	2000      	movs	r0, #0
    ccee:	e7fc      	b.n	ccea <nrfx_usbd_consumer+0x28>

0000ccf0 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    ccf0:	684b      	ldr	r3, [r1, #4]
{
    ccf2:	b510      	push	{r4, lr}
    ccf4:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    ccf6:	680c      	ldr	r4, [r1, #0]
    ccf8:	bf28      	it	cs
    ccfa:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    ccfc:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    cd00:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    cd02:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    cd04:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    cd06:	4413      	add	r3, r2
}
    cd08:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    cd0a:	600b      	str	r3, [r1, #0]
}
    cd0c:	bf18      	it	ne
    cd0e:	2001      	movne	r0, #1
    cd10:	bd10      	pop	{r4, pc}

0000cd12 <nrfx_usbd_feeder_ram_zlp>:
{
    cd12:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    cd14:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    cd16:	680b      	ldr	r3, [r1, #0]
    cd18:	42a2      	cmp	r2, r4
    cd1a:	bf28      	it	cs
    cd1c:	4622      	movcs	r2, r4
    cd1e:	2a00      	cmp	r2, #0
    cd20:	bf14      	ite	ne
    cd22:	461d      	movne	r5, r3
    cd24:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
    cd26:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    cd2a:	4413      	add	r3, r2
    p_next->size = tx_size;
    cd2c:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    cd30:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    cd32:	600b      	str	r3, [r1, #0]
}
    cd34:	bf14      	ite	ne
    cd36:	2001      	movne	r0, #1
    cd38:	2000      	moveq	r0, #0
    cd3a:	bd30      	pop	{r4, r5, pc}

0000cd3c <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    cd3c:	43c3      	mvns	r3, r0
    cd3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cd42:	f000 000f 	and.w	r0, r0, #15
}
    cd46:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    cd4a:	4770      	bx	lr

0000cd4c <ev_started_handler>:
}
    cd4c:	4770      	bx	lr

0000cd4e <nrf_usbd_epin_dma_handler>:
{
    cd4e:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    cd50:	f7fa f95a 	bl	7008 <usbd_dma_pending_clear>
{
    cd54:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    cd56:	f7fa f84d 	bl	6df4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cd5a:	7b83      	ldrb	r3, [r0, #14]
    cd5c:	2b03      	cmp	r3, #3
    cd5e:	d10a      	bne.n	cd76 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cd60:	4608      	mov	r0, r1
    cd62:	f7ff ffeb 	bl	cd3c <ep2bit>
    cd66:	2301      	movs	r3, #1
    cd68:	fa03 f000 	lsl.w	r0, r3, r0
    cd6c:	43c0      	mvns	r0, r0
}
    cd6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cd72:	f7fa b939 	b.w	6fe8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    cd76:	6803      	ldr	r3, [r0, #0]
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d0f1      	beq.n	cd60 <nrf_usbd_epin_dma_handler+0x12>
}
    cd7c:	bd08      	pop	{r3, pc}

0000cd7e <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    cd7e:	2087      	movs	r0, #135	; 0x87
    cd80:	f7ff bfe5 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cd84 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    cd84:	2086      	movs	r0, #134	; 0x86
    cd86:	f7ff bfe2 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cd8a <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    cd8a:	2085      	movs	r0, #133	; 0x85
    cd8c:	f7ff bfdf 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cd90 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    cd90:	2084      	movs	r0, #132	; 0x84
    cd92:	f7ff bfdc 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cd96 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    cd96:	2083      	movs	r0, #131	; 0x83
    cd98:	f7ff bfd9 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cd9c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    cd9c:	2082      	movs	r0, #130	; 0x82
    cd9e:	f7ff bfd6 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cda2 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    cda2:	2081      	movs	r0, #129	; 0x81
    cda4:	f7ff bfd3 	b.w	cd4e <nrf_usbd_epin_dma_handler>

0000cda8 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    cda8:	f7fa b940 	b.w	702c <nrf_usbd_ep0in_dma_handler>

0000cdac <nrfx_usbd_ep_max_packet_size_set>:
{
    cdac:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    cdae:	f7fa f821 	bl	6df4 <ep_state_access>
    p_state->max_packet_size = size;
    cdb2:	8181      	strh	r1, [r0, #12]
}
    cdb4:	bd08      	pop	{r3, pc}

0000cdb6 <nrfx_usbd_ep_status_get>:
{
    cdb6:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    cdb8:	f7fa f81c 	bl	6df4 <ep_state_access>
	__asm__ volatile(
    cdbc:	f04f 0220 	mov.w	r2, #32
    cdc0:	f3ef 8311 	mrs	r3, BASEPRI
    cdc4:	f382 8812 	msr	BASEPRI_MAX, r2
    cdc8:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    cdcc:	6882      	ldr	r2, [r0, #8]
    cdce:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    cdd0:	6802      	ldr	r2, [r0, #0]
    cdd2:	b92a      	cbnz	r2, cde0 <nrfx_usbd_ep_status_get+0x2a>
    cdd4:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    cdd6:	f383 8811 	msr	BASEPRI, r3
    cdda:	f3bf 8f6f 	isb	sy
}
    cdde:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    cde0:	2004      	movs	r0, #4
    cde2:	e7f8      	b.n	cdd6 <nrfx_usbd_ep_status_get+0x20>

0000cde4 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    cde4:	2007      	movs	r0, #7
    cde6:	f7fa bc71 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000cdea <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    cdea:	2006      	movs	r0, #6
    cdec:	f7fa bc6e 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000cdf0 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    cdf0:	2005      	movs	r0, #5
    cdf2:	f7fa bc6b 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000cdf6 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    cdf6:	2004      	movs	r0, #4
    cdf8:	f7fa bc68 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000cdfc <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    cdfc:	2003      	movs	r0, #3
    cdfe:	f7fa bc65 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000ce02 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    ce02:	2002      	movs	r0, #2
    ce04:	f7fa bc62 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000ce08 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    ce08:	2001      	movs	r0, #1
    ce0a:	f7fa bc5f 	b.w	76cc <nrf_usbd_epout_dma_handler>

0000ce0e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    ce0e:	f7fa bd53 	b.w	78b8 <usbd_ep_abort>

0000ce12 <z_device_state_init>:
}
    ce12:	4770      	bx	lr

0000ce14 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ce14:	b138      	cbz	r0, ce26 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ce16:	68c3      	ldr	r3, [r0, #12]
    ce18:	8818      	ldrh	r0, [r3, #0]
    ce1a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ce1e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    ce22:	4258      	negs	r0, r3
    ce24:	4158      	adcs	r0, r3
}
    ce26:	4770      	bx	lr

0000ce28 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ce28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce2a:	4605      	mov	r5, r0
    ce2c:	460e      	mov	r6, r1
	__asm__ volatile(
    ce2e:	f04f 0320 	mov.w	r3, #32
    ce32:	f3ef 8711 	mrs	r7, BASEPRI
    ce36:	f383 8812 	msr	BASEPRI_MAX, r3
    ce3a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    ce3e:	f7fb fead 	bl	8b9c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    ce42:	4631      	mov	r1, r6
    ce44:	4604      	mov	r4, r0
    ce46:	4628      	mov	r0, r5
    ce48:	f7fe fa29 	bl	b29e <k_sys_fatal_error_handler>
	__asm__ volatile(
    ce4c:	f387 8811 	msr	BASEPRI, r7
    ce50:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    ce54:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    ce56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ce5a:	f7f6 bedb 	b.w	3c14 <z_impl_k_thread_abort>

0000ce5e <k_mem_slab_init>:
{
    ce5e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    ce60:	2400      	movs	r4, #0
    ce62:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ce64:	ea41 0402 	orr.w	r4, r1, r2
    ce68:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    ce6c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    ce70:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ce72:	d10c      	bne.n	ce8e <k_mem_slab_init+0x30>
    ce74:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    ce76:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    ce78:	6145      	str	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ce7a:	d103      	bne.n	ce84 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    ce7c:	e9c0 0000 	strd	r0, r0, [r0]
}
    ce80:	2000      	movs	r0, #0
}
    ce82:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    ce84:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    ce86:	3401      	adds	r4, #1
    ce88:	460d      	mov	r5, r1
		p += slab->block_size;
    ce8a:	4411      	add	r1, r2
    ce8c:	e7f3      	b.n	ce76 <k_mem_slab_init+0x18>
		return -EINVAL;
    ce8e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    ce92:	e7f6      	b.n	ce82 <k_mem_slab_init+0x24>

0000ce94 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce96:	4604      	mov	r4, r0
    ce98:	460d      	mov	r5, r1
	__asm__ volatile(
    ce9a:	f04f 0320 	mov.w	r3, #32
    ce9e:	f3ef 8611 	mrs	r6, BASEPRI
    cea2:	f383 8812 	msr	BASEPRI_MAX, r3
    cea6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    ceaa:	6947      	ldr	r7, [r0, #20]
    ceac:	b977      	cbnz	r7, cecc <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    ceae:	f000 f96a 	bl	d186 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    ceb2:	b158      	cbz	r0, cecc <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    ceb4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    ceb6:	6142      	str	r2, [r0, #20]
    ceb8:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    ceba:	f000 f954 	bl	d166 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    cebe:	4631      	mov	r1, r6
    cec0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    cec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    cec8:	f7fb bd2a 	b.w	8920 <z_reschedule>
	**(char ***) mem = slab->free_list;
    cecc:	682b      	ldr	r3, [r5, #0]
    cece:	6962      	ldr	r2, [r4, #20]
    ced0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    ced2:	682b      	ldr	r3, [r5, #0]
    ced4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    ced6:	69a3      	ldr	r3, [r4, #24]
    ced8:	3b01      	subs	r3, #1
    ceda:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    cedc:	f386 8811 	msr	BASEPRI, r6
    cee0:	f3bf 8f6f 	isb	sy
}
    cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cee6 <k_is_in_isr>:
    cee6:	f3ef 8005 	mrs	r0, IPSR
}
    ceea:	3800      	subs	r0, #0
    ceec:	bf18      	it	ne
    ceee:	2001      	movne	r0, #1
    cef0:	4770      	bx	lr

0000cef2 <z_impl_k_thread_name_set>:
}
    cef2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    cef6:	4770      	bx	lr

0000cef8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    cef8:	f7fb bd24 	b.w	8944 <z_sched_start>

0000cefc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    cefc:	b508      	push	{r3, lr}
	__asm__ volatile(
    cefe:	f04f 0220 	mov.w	r2, #32
    cf02:	f3ef 8311 	mrs	r3, BASEPRI
    cf06:	f382 8812 	msr	BASEPRI_MAX, r2
    cf0a:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    cf0e:	f7f6 fbdd 	bl	36cc <arch_cpu_idle>
    cf12:	e7f4      	b.n	cefe <idle+0x2>

0000cf14 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    cf14:	f990 300e 	ldrsb.w	r3, [r0, #14]
    cf18:	428b      	cmp	r3, r1
    cf1a:	d001      	beq.n	cf20 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    cf1c:	f7fb bcba 	b.w	8894 <z_set_prio>
}
    cf20:	2000      	movs	r0, #0
    cf22:	4770      	bx	lr

0000cf24 <z_impl_k_mutex_init>:
{
    cf24:	4603      	mov	r3, r0
	mutex->owner = NULL;
    cf26:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    cf28:	e9c3 0002 	strd	r0, r0, [r3, #8]
    cf2c:	e9c3 3300 	strd	r3, r3, [r3]
}
    cf30:	4770      	bx	lr

0000cf32 <queue_insert>:
{
    cf32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf36:	4699      	mov	r9, r3
    cf38:	4604      	mov	r4, r0
    cf3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    cf3e:	460d      	mov	r5, r1
    cf40:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    cf42:	f100 0608 	add.w	r6, r0, #8
    cf46:	f04f 0220 	mov.w	r2, #32
    cf4a:	f3ef 8711 	mrs	r7, BASEPRI
    cf4e:	f382 8812 	msr	BASEPRI_MAX, r2
    cf52:	f3bf 8f6f 	isb	sy
	if (is_append) {
    cf56:	b103      	cbz	r3, cf5a <queue_insert+0x28>
	return list->tail;
    cf58:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    cf5a:	4630      	mov	r0, r6
    cf5c:	f000 f913 	bl	d186 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    cf60:	b158      	cbz	r0, cf7a <queue_insert+0x48>
    cf62:	2300      	movs	r3, #0
    cf64:	6783      	str	r3, [r0, #120]	; 0x78
    cf66:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    cf6a:	f000 f8fc 	bl	d166 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    cf6e:	4630      	mov	r0, r6
    cf70:	4639      	mov	r1, r7
    cf72:	f7fb fcd5 	bl	8920 <z_reschedule>
		return 0;
    cf76:	2000      	movs	r0, #0
    cf78:	e00c      	b.n	cf94 <queue_insert+0x62>
	if (alloc) {
    cf7a:	f1b9 0f00 	cmp.w	r9, #0
    cf7e:	d01c      	beq.n	cfba <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    cf80:	2108      	movs	r1, #8
    cf82:	f7fb ffdb 	bl	8f3c <z_thread_aligned_alloc>
		if (anode == NULL) {
    cf86:	b938      	cbnz	r0, cf98 <queue_insert+0x66>
	__asm__ volatile(
    cf88:	f387 8811 	msr	BASEPRI, r7
    cf8c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    cf90:	f06f 000b 	mvn.w	r0, #11
}
    cf94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    cf98:	2201      	movs	r2, #1
		anode->data = data;
    cf9a:	f8c0 8004 	str.w	r8, [r0, #4]
    cf9e:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cfa0:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfa2:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    cfa6:	b965      	cbnz	r5, cfc2 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfa8:	6822      	ldr	r2, [r4, #0]
    cfaa:	430a      	orrs	r2, r1
    cfac:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    cfae:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    cfb0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    cfb2:	2a00      	cmp	r2, #0
    cfb4:	d1db      	bne.n	cf6e <queue_insert+0x3c>
	list->tail = node;
    cfb6:	6060      	str	r0, [r4, #4]
}
    cfb8:	e7d9      	b.n	cf6e <queue_insert+0x3c>
	node->next_and_flags = flags;
    cfba:	f8c8 9000 	str.w	r9, [r8]
}
    cfbe:	4640      	mov	r0, r8
    cfc0:	e7ee      	b.n	cfa0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    cfc2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    cfc4:	2a03      	cmp	r2, #3
    cfc6:	d80b      	bhi.n	cfe0 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfc8:	6001      	str	r1, [r0, #0]
	return list->tail;
    cfca:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    cfcc:	b911      	cbnz	r1, cfd4 <queue_insert+0xa2>
	list->head = node;
    cfce:	e9c4 0000 	strd	r0, r0, [r4]
}
    cfd2:	e7cc      	b.n	cf6e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cfd4:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfd6:	f002 0203 	and.w	r2, r2, #3
    cfda:	4302      	orrs	r2, r0
    cfdc:	600a      	str	r2, [r1, #0]
    cfde:	e7ea      	b.n	cfb6 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    cfe0:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfe4:	430a      	orrs	r2, r1
    cfe6:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cfe8:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfea:	f002 0203 	and.w	r2, r2, #3
    cfee:	ea40 0302 	orr.w	r3, r0, r2
    cff2:	602b      	str	r3, [r5, #0]
}
    cff4:	e7bb      	b.n	cf6e <queue_insert+0x3c>

0000cff6 <z_queue_node_peek>:
{
    cff6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    cff8:	4604      	mov	r4, r0
    cffa:	b130      	cbz	r0, d00a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cffc:	6802      	ldr	r2, [r0, #0]
    cffe:	0793      	lsls	r3, r2, #30
    d000:	d003      	beq.n	d00a <z_queue_node_peek+0x14>
		ret = anode->data;
    d002:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    d004:	b109      	cbz	r1, d00a <z_queue_node_peek+0x14>
			k_free(anode);
    d006:	f000 f993 	bl	d330 <k_free>
}
    d00a:	4620      	mov	r0, r4
    d00c:	bd10      	pop	{r4, pc}

0000d00e <k_queue_append>:
{
    d00e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    d010:	2301      	movs	r3, #1
    d012:	9300      	str	r3, [sp, #0]
    d014:	2300      	movs	r3, #0
{
    d016:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    d018:	4619      	mov	r1, r3
    d01a:	f7ff ff8a 	bl	cf32 <queue_insert>
}
    d01e:	b003      	add	sp, #12
    d020:	f85d fb04 	ldr.w	pc, [sp], #4

0000d024 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    d024:	b13a      	cbz	r2, d036 <z_impl_k_sem_init+0x12>
    d026:	428a      	cmp	r2, r1
    d028:	d305      	bcc.n	d036 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    d02a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    d02e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    d032:	2000      	movs	r0, #0
    d034:	4770      	bx	lr
		return -EINVAL;
    d036:	f06f 0015 	mvn.w	r0, #21
}
    d03a:	4770      	bx	lr

0000d03c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    d03c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    d03e:	2301      	movs	r3, #1
    d040:	408b      	lsls	r3, r1
    d042:	ea22 0303 	bic.w	r3, r2, r3
    d046:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    d048:	fa22 f001 	lsr.w	r0, r2, r1
}
    d04c:	f000 0001 	and.w	r0, r0, #1
    d050:	4770      	bx	lr

0000d052 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    d052:	b120      	cbz	r0, d05e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    d054:	2200      	movs	r2, #0
    d056:	4611      	mov	r1, r2
    d058:	3088      	adds	r0, #136	; 0x88
    d05a:	f000 b8ea 	b.w	d232 <z_sched_wake>
}
    d05e:	4770      	bx	lr

0000d060 <k_work_init>:
{
    d060:	b538      	push	{r3, r4, r5, lr}
    d062:	4604      	mov	r4, r0
    d064:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d066:	2210      	movs	r2, #16
    d068:	2100      	movs	r1, #0
    d06a:	f7fd fd45 	bl	aaf8 <memset>
    d06e:	6065      	str	r5, [r4, #4]
}
    d070:	bd38      	pop	{r3, r4, r5, pc}

0000d072 <k_work_submit_to_queue>:
{
    d072:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d074:	9001      	str	r0, [sp, #4]
    d076:	4608      	mov	r0, r1
	__asm__ volatile(
    d078:	f04f 0320 	mov.w	r3, #32
    d07c:	f3ef 8511 	mrs	r5, BASEPRI
    d080:	f383 8812 	msr	BASEPRI_MAX, r3
    d084:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    d088:	a901      	add	r1, sp, #4
    d08a:	f7fb fa0d 	bl	84a8 <submit_to_queue_locked>
    d08e:	4604      	mov	r4, r0
	__asm__ volatile(
    d090:	f385 8811 	msr	BASEPRI, r5
    d094:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    d098:	2800      	cmp	r0, #0
    d09a:	dd04      	ble.n	d0a6 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    d09c:	f7fb fd84 	bl	8ba8 <z_impl_k_is_preempt_thread>
    d0a0:	b108      	cbz	r0, d0a6 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    d0a2:	f7fb fcdb 	bl	8a5c <z_impl_k_yield>
}
    d0a6:	4620      	mov	r0, r4
    d0a8:	b003      	add	sp, #12
    d0aa:	bd30      	pop	{r4, r5, pc}

0000d0ac <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    d0ac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    d0b0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d0b2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d0b4:	2300      	movs	r3, #0
	node->prev = NULL;
    d0b6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    d0ba:	4770      	bx	lr

0000d0bc <unpend_thread_no_timeout>:
{
    d0bc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    d0be:	f7ff fff5 	bl	d0ac <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d0c2:	7b43      	ldrb	r3, [r0, #13]
    d0c4:	f023 0302 	bic.w	r3, r3, #2
    d0c8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    d0ca:	2300      	movs	r3, #0
    d0cc:	6083      	str	r3, [r0, #8]
}
    d0ce:	bd08      	pop	{r3, pc}

0000d0d0 <z_thread_timeout>:
{
    d0d0:	b510      	push	{r4, lr}
    d0d2:	4601      	mov	r1, r0
	__asm__ volatile(
    d0d4:	f04f 0320 	mov.w	r3, #32
    d0d8:	f3ef 8411 	mrs	r4, BASEPRI
    d0dc:	f383 8812 	msr	BASEPRI_MAX, r3
    d0e0:	f3bf 8f6f 	isb	sy
		if (!killed) {
    d0e4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    d0e8:	f013 0f28 	tst.w	r3, #40	; 0x28
    d0ec:	d10d      	bne.n	d10a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    d0ee:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    d0f2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    d0f4:	b10b      	cbz	r3, d0fa <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    d0f6:	f7ff ffe1 	bl	d0bc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    d0fa:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    d0fe:	f023 0314 	bic.w	r3, r3, #20
    d102:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    d106:	f7fb facb 	bl	86a0 <ready_thread>
	__asm__ volatile(
    d10a:	f384 8811 	msr	BASEPRI, r4
    d10e:	f3bf 8f6f 	isb	sy
}
    d112:	bd10      	pop	{r4, pc}

0000d114 <add_to_waitq_locked>:
{
    d114:	b538      	push	{r3, r4, r5, lr}
    d116:	4604      	mov	r4, r0
    d118:	460d      	mov	r5, r1
	unready_thread(thread);
    d11a:	f7fb faf7 	bl	870c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    d11e:	7b63      	ldrb	r3, [r4, #13]
    d120:	f043 0302 	orr.w	r3, r3, #2
    d124:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    d126:	b1ed      	cbz	r5, d164 <add_to_waitq_locked+0x50>
	return list->head == list;
    d128:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    d12a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d12c:	429d      	cmp	r5, r3
    d12e:	d109      	bne.n	d144 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    d130:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    d132:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    d136:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d138:	606c      	str	r4, [r5, #4]
}
    d13a:	e013      	b.n	d164 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
    d13c:	686a      	ldr	r2, [r5, #4]
    d13e:	4293      	cmp	r3, r2
    d140:	d0f6      	beq.n	d130 <add_to_waitq_locked+0x1c>
    d142:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d144:	2b00      	cmp	r3, #0
    d146:	d0f3      	beq.n	d130 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    d148:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    d14c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    d150:	4291      	cmp	r1, r2
    d152:	d0f3      	beq.n	d13c <add_to_waitq_locked+0x28>
		return b2 - b1;
    d154:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    d156:	2a00      	cmp	r2, #0
    d158:	ddf0      	ble.n	d13c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    d15a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d15c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d160:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d162:	605c      	str	r4, [r3, #4]
}
    d164:	bd38      	pop	{r3, r4, r5, pc}

0000d166 <z_ready_thread>:
{
    d166:	b510      	push	{r4, lr}
	__asm__ volatile(
    d168:	f04f 0320 	mov.w	r3, #32
    d16c:	f3ef 8411 	mrs	r4, BASEPRI
    d170:	f383 8812 	msr	BASEPRI_MAX, r3
    d174:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    d178:	f7fb fa92 	bl	86a0 <ready_thread>
	__asm__ volatile(
    d17c:	f384 8811 	msr	BASEPRI, r4
    d180:	f3bf 8f6f 	isb	sy
}
    d184:	bd10      	pop	{r4, pc}

0000d186 <z_unpend_first_thread>:
{
    d186:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d188:	f04f 0320 	mov.w	r3, #32
    d18c:	f3ef 8511 	mrs	r5, BASEPRI
    d190:	f383 8812 	msr	BASEPRI_MAX, r3
    d194:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d198:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d19a:	42a0      	cmp	r0, r4
    d19c:	d00d      	beq.n	d1ba <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    d19e:	b134      	cbz	r4, d1ae <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    d1a0:	4620      	mov	r0, r4
    d1a2:	f7ff ff8b 	bl	d0bc <unpend_thread_no_timeout>
    d1a6:	f104 0018 	add.w	r0, r4, #24
    d1aa:	f000 f865 	bl	d278 <z_abort_timeout>
	__asm__ volatile(
    d1ae:	f385 8811 	msr	BASEPRI, r5
    d1b2:	f3bf 8f6f 	isb	sy
}
    d1b6:	4620      	mov	r0, r4
    d1b8:	bd38      	pop	{r3, r4, r5, pc}
    d1ba:	2400      	movs	r4, #0
    d1bc:	e7f7      	b.n	d1ae <z_unpend_first_thread+0x28>

0000d1be <z_unpend_thread>:
{
    d1be:	b510      	push	{r4, lr}
	__asm__ volatile(
    d1c0:	f04f 0320 	mov.w	r3, #32
    d1c4:	f3ef 8411 	mrs	r4, BASEPRI
    d1c8:	f383 8812 	msr	BASEPRI_MAX, r3
    d1cc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    d1d0:	f7ff ff74 	bl	d0bc <unpend_thread_no_timeout>
	__asm__ volatile(
    d1d4:	f384 8811 	msr	BASEPRI, r4
    d1d8:	f3bf 8f6f 	isb	sy
}
    d1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1e0:	3018      	adds	r0, #24
    d1e2:	f000 b849 	b.w	d278 <z_abort_timeout>

0000d1e6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d1e6:	4603      	mov	r3, r0
    d1e8:	b920      	cbnz	r0, d1f4 <z_reschedule_irqlock+0xe>
    d1ea:	f3ef 8205 	mrs	r2, IPSR
    d1ee:	b90a      	cbnz	r2, d1f4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    d1f0:	f7f6 baec 	b.w	37cc <arch_swap>
    d1f4:	f383 8811 	msr	BASEPRI, r3
    d1f8:	f3bf 8f6f 	isb	sy
}
    d1fc:	4770      	bx	lr

0000d1fe <z_reschedule_unlocked>:
	__asm__ volatile(
    d1fe:	f04f 0320 	mov.w	r3, #32
    d202:	f3ef 8011 	mrs	r0, BASEPRI
    d206:	f383 8812 	msr	BASEPRI_MAX, r3
    d20a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d20e:	f7ff bfea 	b.w	d1e6 <z_reschedule_irqlock>

0000d212 <z_unpend_all>:
{
    d212:	b538      	push	{r3, r4, r5, lr}
    d214:	4605      	mov	r5, r0
	int need_sched = 0;
    d216:	2000      	movs	r0, #0
	return list->head == list;
    d218:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d21a:	42a5      	cmp	r5, r4
    d21c:	d000      	beq.n	d220 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d21e:	b904      	cbnz	r4, d222 <z_unpend_all+0x10>
}
    d220:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    d222:	4620      	mov	r0, r4
    d224:	f7ff ffcb 	bl	d1be <z_unpend_thread>
		z_ready_thread(thread);
    d228:	4620      	mov	r0, r4
    d22a:	f7ff ff9c 	bl	d166 <z_ready_thread>
		need_sched = 1;
    d22e:	2001      	movs	r0, #1
    d230:	e7f2      	b.n	d218 <z_unpend_all+0x6>

0000d232 <z_sched_wake>:
{
    d232:	b538      	push	{r3, r4, r5, lr}
    d234:	f04f 0320 	mov.w	r3, #32
    d238:	f3ef 8511 	mrs	r5, BASEPRI
    d23c:	f383 8812 	msr	BASEPRI_MAX, r3
    d240:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d244:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d246:	42a0      	cmp	r0, r4
    d248:	d012      	beq.n	d270 <z_sched_wake+0x3e>
		if (thread != NULL) {
    d24a:	b19c      	cbz	r4, d274 <z_sched_wake+0x42>
    d24c:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    d24e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    d250:	4620      	mov	r0, r4
    d252:	f7ff ff33 	bl	d0bc <unpend_thread_no_timeout>
    d256:	f104 0018 	add.w	r0, r4, #24
    d25a:	f000 f80d 	bl	d278 <z_abort_timeout>
			ready_thread(thread);
    d25e:	4620      	mov	r0, r4
    d260:	f7fb fa1e 	bl	86a0 <ready_thread>
			ret = true;
    d264:	2001      	movs	r0, #1
	__asm__ volatile(
    d266:	f385 8811 	msr	BASEPRI, r5
    d26a:	f3bf 8f6f 	isb	sy
}
    d26e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    d270:	2000      	movs	r0, #0
    d272:	e7f8      	b.n	d266 <z_sched_wake+0x34>
    d274:	4620      	mov	r0, r4
    d276:	e7f6      	b.n	d266 <z_sched_wake+0x34>

0000d278 <z_abort_timeout>:
{
    d278:	b510      	push	{r4, lr}
	__asm__ volatile(
    d27a:	f04f 0220 	mov.w	r2, #32
    d27e:	f3ef 8411 	mrs	r4, BASEPRI
    d282:	f382 8812 	msr	BASEPRI_MAX, r2
    d286:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    d28a:	6803      	ldr	r3, [r0, #0]
    d28c:	b13b      	cbz	r3, d29e <z_abort_timeout+0x26>
			remove_timeout(to);
    d28e:	f7fb fd4d 	bl	8d2c <remove_timeout>
			ret = 0;
    d292:	2000      	movs	r0, #0
	__asm__ volatile(
    d294:	f384 8811 	msr	BASEPRI, r4
    d298:	f3bf 8f6f 	isb	sy
}
    d29c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    d29e:	f06f 0015 	mvn.w	r0, #21
    d2a2:	e7f7      	b.n	d294 <z_abort_timeout+0x1c>

0000d2a4 <z_set_timeout_expiry>:
{
    d2a4:	b570      	push	{r4, r5, r6, lr}
    d2a6:	4604      	mov	r4, r0
    d2a8:	460d      	mov	r5, r1
	__asm__ volatile(
    d2aa:	f04f 0320 	mov.w	r3, #32
    d2ae:	f3ef 8611 	mrs	r6, BASEPRI
    d2b2:	f383 8812 	msr	BASEPRI_MAX, r3
    d2b6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    d2ba:	f7fb fd0d 	bl	8cd8 <next_timeout>
			      || (ticks <= next_to);
    d2be:	2801      	cmp	r0, #1
    d2c0:	dd07      	ble.n	d2d2 <z_set_timeout_expiry+0x2e>
    d2c2:	42a0      	cmp	r0, r4
    d2c4:	db05      	blt.n	d2d2 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    d2c6:	42a0      	cmp	r0, r4
    d2c8:	4629      	mov	r1, r5
    d2ca:	bfa8      	it	ge
    d2cc:	4620      	movge	r0, r4
    d2ce:	f7f8 fb3d 	bl	594c <sys_clock_set_timeout>
	__asm__ volatile(
    d2d2:	f386 8811 	msr	BASEPRI, r6
    d2d6:	f3bf 8f6f 	isb	sy
}
    d2da:	bd70      	pop	{r4, r5, r6, pc}

0000d2dc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d2dc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d2de:	f7fb fe15 	bl	8f0c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d2e2:	bd08      	pop	{r3, pc}

0000d2e4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d2e4:	b108      	cbz	r0, d2ea <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d2e6:	f7f6 bd9d 	b.w	3e24 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d2ea:	4770      	bx	lr

0000d2ec <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d2ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    d2f0:	bf08      	it	eq
    d2f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    d2f6:	b538      	push	{r3, r4, r5, lr}
    d2f8:	460c      	mov	r4, r1
    d2fa:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d2fc:	d014      	beq.n	d328 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d2fe:	4308      	orrs	r0, r1
    d300:	d103      	bne.n	d30a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    d302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    d306:	f7fb be01 	b.w	8f0c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    d30a:	f06f 0001 	mvn.w	r0, #1
    d30e:	1b40      	subs	r0, r0, r5
    d310:	f04f 33ff 	mov.w	r3, #4294967295
    d314:	eb63 0101 	sbc.w	r1, r3, r1
    d318:	2900      	cmp	r1, #0
    d31a:	da04      	bge.n	d326 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    d31c:	f7fb fdf6 	bl	8f0c <sys_clock_tick_get>
    d320:	1940      	adds	r0, r0, r5
    d322:	eb41 0104 	adc.w	r1, r1, r4
}
    d326:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    d328:	f04f 30ff 	mov.w	r0, #4294967295
    d32c:	4601      	mov	r1, r0
    d32e:	e7fa      	b.n	d326 <sys_clock_timeout_end_calc+0x3a>

0000d330 <k_free>:
	if (ptr != NULL) {
    d330:	b120      	cbz	r0, d33c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    d332:	1f01      	subs	r1, r0, #4
    d334:	f850 0c04 	ldr.w	r0, [r0, #-4]
    d338:	f000 b84b 	b.w	d3d2 <k_heap_free>
}
    d33c:	4770      	bx	lr

0000d33e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    d33e:	4770      	bx	lr

0000d340 <k_heap_init>:
{
    d340:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    d342:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    d346:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    d34a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    d34c:	f7fc be33 	b.w	9fb6 <sys_heap_init>

0000d350 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d354:	b085      	sub	sp, #20
    d356:	4606      	mov	r6, r0
    d358:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d35a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    d35e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d360:	f7ff ffc4 	bl	d2ec <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    d364:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d368:	4605      	mov	r5, r0
    d36a:	460f      	mov	r7, r1
	__asm__ volatile(
    d36c:	f04f 0320 	mov.w	r3, #32
    d370:	f3ef 8411 	mrs	r4, BASEPRI
    d374:	f383 8812 	msr	BASEPRI_MAX, r3
    d378:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d37c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    d380:	464a      	mov	r2, r9
    d382:	4641      	mov	r1, r8
    d384:	4630      	mov	r0, r6
    d386:	f7fc fdaf 	bl	9ee8 <sys_heap_aligned_alloc>
    d38a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    d38c:	f7fb fdbe 	bl	8f0c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    d390:	9b03      	ldr	r3, [sp, #12]
    d392:	b13b      	cbz	r3, d3a4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    d394:	f384 8811 	msr	BASEPRI, r4
    d398:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    d39c:	4618      	mov	r0, r3
    d39e:	b005      	add	sp, #20
    d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    d3a4:	1a28      	subs	r0, r5, r0
    d3a6:	eb67 0101 	sbc.w	r1, r7, r1
    d3aa:	2801      	cmp	r0, #1
    d3ac:	f171 0200 	sbcs.w	r2, r1, #0
    d3b0:	dbf0      	blt.n	d394 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d3b2:	e9cd 0100 	strd	r0, r1, [sp]
    d3b6:	465a      	mov	r2, fp
    d3b8:	4621      	mov	r1, r4
    d3ba:	4650      	mov	r0, sl
    d3bc:	f7fb fa56 	bl	886c <z_pend_curr>
	__asm__ volatile(
    d3c0:	f04f 0320 	mov.w	r3, #32
    d3c4:	f3ef 8411 	mrs	r4, BASEPRI
    d3c8:	f383 8812 	msr	BASEPRI_MAX, r3
    d3cc:	f3bf 8f6f 	isb	sy
    d3d0:	e7d6      	b.n	d380 <k_heap_aligned_alloc+0x30>

0000d3d2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    d3d2:	b538      	push	{r3, r4, r5, lr}
    d3d4:	4604      	mov	r4, r0
    d3d6:	f04f 0320 	mov.w	r3, #32
    d3da:	f3ef 8511 	mrs	r5, BASEPRI
    d3de:	f383 8812 	msr	BASEPRI_MAX, r3
    d3e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    d3e6:	f7fc fd47 	bl	9e78 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    d3ea:	f104 000c 	add.w	r0, r4, #12
    d3ee:	f7ff ff10 	bl	d212 <z_unpend_all>
    d3f2:	b130      	cbz	r0, d402 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    d3f4:	4629      	mov	r1, r5
    d3f6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    d3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    d3fe:	f7fb ba8f 	b.w	8920 <z_reschedule>
	__asm__ volatile(
    d402:	f385 8811 	msr	BASEPRI, r5
    d406:	f3bf 8f6f 	isb	sy
}
    d40a:	bd38      	pop	{r3, r4, r5, pc}

0000d40c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    d40c:	f7f8 bf1c 	b.w	6248 <SystemInit>
