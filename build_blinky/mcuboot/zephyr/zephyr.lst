
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	58 2e 01 20 e9 2d 00 00 c1 65 00 00 bd 2d 00 00     X.. .-...e...-..
  10:	bd 2d 00 00 bd 2d 00 00 bd 2d 00 00 bd 2d 00 00     .-...-...-...-..
	...
  2c:	91 29 00 00 bd 2d 00 00 00 00 00 00 bd 2d 00 00     .)...-.......-..
  3c:	bd 2d 00 00                                         .-..

00000040 <_irq_vector_table>:
  40:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  50:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  60:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  70:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  80:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  90:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  a0:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  b0:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  c0:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  d0:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  e0:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
  f0:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
 100:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
 110:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
 120:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
 130:	ed 29 00 00 ed 29 00 00 ed 29 00 00 ed 29 00 00     .)...)...)...)..
 140:	ed 29 00 00                                         .)..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__data_size+0x4>
     146:	b94a      	cbnz	r2, 15c <__data_size+0x4>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f808 	bl	178 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
     178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     17c:	4686      	mov	lr, r0
     17e:	468c      	mov	ip, r1
     180:	4608      	mov	r0, r1
     182:	9e08      	ldr	r6, [sp, #32]
     184:	4615      	mov	r5, r2
     186:	4674      	mov	r4, lr
     188:	4619      	mov	r1, r3
     18a:	2b00      	cmp	r3, #0
     18c:	f040 80c1 	bne.w	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
     190:	4285      	cmp	r5, r0
     192:	fab2 f282 	clz	r2, r2
     196:	d945      	bls.n	224 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x24>
     198:	b14a      	cbz	r2, 1ae <__udivmoddi4+0x36>
     19a:	f1c2 0320 	rsb	r3, r2, #32
     19e:	fa00 fc02 	lsl.w	ip, r0, r2
     1a2:	4095      	lsls	r5, r2
     1a4:	4094      	lsls	r4, r2
     1a6:	fa2e f303 	lsr.w	r3, lr, r3
     1aa:	ea43 0c0c 	orr.w	ip, r3, ip
     1ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b2:	b2a8      	uxth	r0, r5
     1b4:	0c23      	lsrs	r3, r4, #16
     1b6:	fbbc f8fe 	udiv	r8, ip, lr
     1ba:	fb0e cc18 	mls	ip, lr, r8, ip
     1be:	fb08 f900 	mul.w	r9, r8, r0
     1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1c6:	4599      	cmp	r9, r3
     1c8:	d928      	bls.n	21c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f108 37ff 	add.w	r7, r8, #4294967295
     1d0:	d204      	bcs.n	1dc <__udivmoddi4+0x64>
     1d2:	4599      	cmp	r9, r3
     1d4:	d902      	bls.n	1dc <__udivmoddi4+0x64>
     1d6:	f1a8 0702 	sub.w	r7, r8, #2
     1da:	442b      	add	r3, r5
     1dc:	eba3 0309 	sub.w	r3, r3, r9
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 fcfe 	udiv	ip, r3, lr
     1e6:	fb0e 331c 	mls	r3, lr, ip, r3
     1ea:	fb0c f000 	mul.w	r0, ip, r0
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1f2:	42a0      	cmp	r0, r4
     1f4:	d914      	bls.n	220 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x20>
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f10c 33ff 	add.w	r3, ip, #4294967295
     1fc:	d204      	bcs.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     1fe:	42a0      	cmp	r0, r4
     200:	d902      	bls.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     202:	f1ac 0302 	sub.w	r3, ip, #2
     206:	442c      	add	r4, r5
     208:	1a24      	subs	r4, r4, r0
     20a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     20e:	b11e      	cbz	r6, 218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     210:	40d4      	lsrs	r4, r2
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
     216:	6073      	str	r3, [r6, #4]
     218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21c:	4647      	mov	r7, r8
     21e:	e7dd      	b.n	1dc <__udivmoddi4+0x64>
     220:	4663      	mov	r3, ip
     222:	e7f1      	b.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     224:	bb92      	cbnz	r2, 28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     226:	1b43      	subs	r3, r0, r5
     228:	2101      	movs	r1, #1
     22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22e:	b2af      	uxth	r7, r5
     230:	0c20      	lsrs	r0, r4, #16
     232:	fbb3 fcfe 	udiv	ip, r3, lr
     236:	fb0e 331c 	mls	r3, lr, ip, r3
     23a:	fb0c f807 	mul.w	r8, ip, r7
     23e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     242:	4598      	cmp	r8, r3
     244:	d961      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     246:	18eb      	adds	r3, r5, r3
     248:	f10c 30ff 	add.w	r0, ip, #4294967295
     24c:	d204      	bcs.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     24e:	4598      	cmp	r8, r3
     250:	d902      	bls.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     252:	f1ac 0002 	sub.w	r0, ip, #2
     256:	442b      	add	r3, r5
     258:	eba3 0308 	sub.w	r3, r3, r8
     25c:	b2a4      	uxth	r4, r4
     25e:	fbb3 fcfe 	udiv	ip, r3, lr
     262:	fb0e 331c 	mls	r3, lr, ip, r3
     266:	fb0c f707 	mul.w	r7, ip, r7
     26a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26e:	42a7      	cmp	r7, r4
     270:	d94d      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     272:	192c      	adds	r4, r5, r4
     274:	f10c 33ff 	add.w	r3, ip, #4294967295
     278:	d204      	bcs.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27a:	42a7      	cmp	r7, r4
     27c:	d902      	bls.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27e:	f1ac 0302 	sub.w	r3, ip, #2
     282:	442c      	add	r4, r5
     284:	1be4      	subs	r4, r4, r7
     286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     28a:	e7c0      	b.n	20e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe>
     28c:	f1c2 0320 	rsb	r3, r2, #32
     290:	4095      	lsls	r5, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f103 	lsr.w	r1, r0, r3
     298:	fa2e f303 	lsr.w	r3, lr, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a0:	4090      	lsls	r0, r2
     2a2:	b2af      	uxth	r7, r5
     2a4:	4303      	orrs	r3, r0
     2a6:	fbb1 fcfe 	udiv	ip, r1, lr
     2aa:	fb0e 101c 	mls	r0, lr, ip, r1
     2ae:	0c19      	lsrs	r1, r3, #16
     2b0:	fb0c f807 	mul.w	r8, ip, r7
     2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2b8:	4588      	cmp	r8, r1
     2ba:	d922      	bls.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
     2bc:	1869      	adds	r1, r5, r1
     2be:	f10c 30ff 	add.w	r0, ip, #4294967295
     2c2:	d204      	bcs.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c4:	4588      	cmp	r8, r1
     2c6:	d902      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c8:	f1ac 0002 	sub.w	r0, ip, #2
     2cc:	4429      	add	r1, r5
     2ce:	eba1 0108 	sub.w	r1, r1, r8
     2d2:	b29b      	uxth	r3, r3
     2d4:	fbb1 fcfe 	udiv	ip, r1, lr
     2d8:	fb0e 111c 	mls	r1, lr, ip, r1
     2dc:	fb0c f707 	mul.w	r7, ip, r7
     2e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e4:	429f      	cmp	r7, r3
     2e6:	d90e      	bls.n	306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
     2e8:	18eb      	adds	r3, r5, r3
     2ea:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ee:	d204      	bcs.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f0:	429f      	cmp	r7, r3
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	f1ac 0102 	sub.w	r1, ip, #2
     2f8:	442b      	add	r3, r5
     2fa:	1bdb      	subs	r3, r3, r7
     2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     300:	e793      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
     302:	4660      	mov	r0, ip
     304:	e7e3      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     306:	4661      	mov	r1, ip
     308:	e7f7      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     30a:	4660      	mov	r0, ip
     30c:	e7a4      	b.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     30e:	4663      	mov	r3, ip
     310:	e7b8      	b.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     312:	4283      	cmp	r3, r0
     314:	d906      	bls.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     316:	b916      	cbnz	r6, 31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
     318:	2100      	movs	r1, #0
     31a:	4608      	mov	r0, r1
     31c:	e77c      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     31e:	e9c6 e000 	strd	lr, r0, [r6]
     322:	e7f9      	b.n	318 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x18>
     324:	fab3 f783 	clz	r7, r3
     328:	b98f      	cbnz	r7, 34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     32a:	4283      	cmp	r3, r0
     32c:	d301      	bcc.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
     32e:	4572      	cmp	r2, lr
     330:	d808      	bhi.n	344 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x44>
     332:	ebbe 0402 	subs.w	r4, lr, r2
     336:	eb60 0303 	sbc.w	r3, r0, r3
     33a:	2001      	movs	r0, #1
     33c:	469c      	mov	ip, r3
     33e:	b91e      	cbnz	r6, 348 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x48>
     340:	2100      	movs	r1, #0
     342:	e769      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     344:	4638      	mov	r0, r7
     346:	e7fa      	b.n	33e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3e>
     348:	e9c6 4c00 	strd	r4, ip, [r6]
     34c:	e7f8      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     34e:	f1c7 0c20 	rsb	ip, r7, #32
     352:	40bb      	lsls	r3, r7
     354:	fa0e f507 	lsl.w	r5, lr, r7
     358:	fa22 f40c 	lsr.w	r4, r2, ip
     35c:	fa2e f10c 	lsr.w	r1, lr, ip
     360:	40ba      	lsls	r2, r7
     362:	431c      	orrs	r4, r3
     364:	fa20 f30c 	lsr.w	r3, r0, ip
     368:	40b8      	lsls	r0, r7
     36a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     36e:	4301      	orrs	r1, r0
     370:	fa1f fe84 	uxth.w	lr, r4
     374:	fbb3 f8f9 	udiv	r8, r3, r9
     378:	fb09 3018 	mls	r0, r9, r8, r3
     37c:	0c0b      	lsrs	r3, r1, #16
     37e:	fb08 fa0e 	mul.w	sl, r8, lr
     382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     386:	459a      	cmp	sl, r3
     388:	d940      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     38a:	18e3      	adds	r3, r4, r3
     38c:	f108 30ff 	add.w	r0, r8, #4294967295
     390:	d204      	bcs.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     392:	459a      	cmp	sl, r3
     394:	d902      	bls.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     396:	f1a8 0002 	sub.w	r0, r8, #2
     39a:	4423      	add	r3, r4
     39c:	eba3 030a 	sub.w	r3, r3, sl
     3a0:	b289      	uxth	r1, r1
     3a2:	fbb3 f8f9 	udiv	r8, r3, r9
     3a6:	fb09 3318 	mls	r3, r9, r8, r3
     3aa:	fb08 fe0e 	mul.w	lr, r8, lr
     3ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3b2:	458e      	cmp	lr, r1
     3b4:	d92c      	bls.n	410 <CONFIG_FLASH_SIZE+0x10>
     3b6:	1861      	adds	r1, r4, r1
     3b8:	f108 33ff 	add.w	r3, r8, #4294967295
     3bc:	d204      	bcs.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3be:	458e      	cmp	lr, r1
     3c0:	d902      	bls.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3c2:	f1a8 0302 	sub.w	r3, r8, #2
     3c6:	4421      	add	r1, r4
     3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3cc:	eba1 010e 	sub.w	r1, r1, lr
     3d0:	fba0 9802 	umull	r9, r8, r0, r2
     3d4:	4541      	cmp	r1, r8
     3d6:	46ce      	mov	lr, r9
     3d8:	4643      	mov	r3, r8
     3da:	d302      	bcc.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	d106      	bne.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3de:	454d      	cmp	r5, r9
     3e0:	d204      	bcs.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e2:	3801      	subs	r0, #1
     3e4:	ebb9 0e02 	subs.w	lr, r9, r2
     3e8:	eb68 0304 	sbc.w	r3, r8, r4
     3ec:	2e00      	cmp	r6, #0
     3ee:	d0a7      	beq.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     3f0:	ebb5 020e 	subs.w	r2, r5, lr
     3f4:	eb61 0103 	sbc.w	r1, r1, r3
     3f8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3fc:	fa22 f307 	lsr.w	r3, r2, r7
     400:	40f9      	lsrs	r1, r7
     402:	ea4c 0303 	orr.w	r3, ip, r3
     406:	e9c6 3100 	strd	r3, r1, [r6]
     40a:	e799      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     40c:	4640      	mov	r0, r8
     40e:	e7c5      	b.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     410:	4643      	mov	r3, r8
     412:	e7d9      	b.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>

00000414 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     416:	4b3f      	ldr	r3, [pc, #252]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     418:	4a3f      	ldr	r2, [pc, #252]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     41a:	4840      	ldr	r0, [pc, #256]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     41c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     420:	2149      	movs	r1, #73	; 0x49
     422:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     426:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     42a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     42e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     432:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     436:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     43a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     43e:	f005 fd89 	bl	5f54 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     442:	f000 f8af 	bl	5a4 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     446:	4836      	ldr	r0, [pc, #216]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     448:	f000 f87e 	bl	548 <flash_device_get_binding>
     44c:	b928      	cbnz	r0, 45a <main+0x46>
        BOOT_LOG_ERR("Flash device %s not found",
     44e:	2145      	movs	r1, #69	; 0x45
     450:	4a33      	ldr	r2, [pc, #204]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     452:	4834      	ldr	r0, [pc, #208]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     454:	f005 fd7e 	bl	5f54 <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     458:	e7fe      	b.n	458 <main+0x44>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     45a:	4833      	ldr	r0, [pc, #204]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     45c:	f004 fecc 	bl	51f8 <z_impl_device_get_binding>
     460:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     462:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     464:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     466:	6813      	ldr	r3, [r2, #0]
     468:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
     46c:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     46e:	680b      	ldr	r3, [r1, #0]
     470:	f44f 7288 	mov.w	r2, #272	; 0x110
     474:	211a      	movs	r1, #26
     476:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     478:	68a3      	ldr	r3, [r4, #8]
     47a:	4620      	mov	r0, r4
     47c:	685b      	ldr	r3, [r3, #4]
     47e:	a901      	add	r1, sp, #4
     480:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     482:	b990      	cbnz	r0, 4aa <FIH_LABEL_FIH_CALL_START_489>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     484:	9b01      	ldr	r3, [sp, #4]
     486:	015a      	lsls	r2, r3, #5
     488:	d40f      	bmi.n	4aa <FIH_LABEL_FIH_CALL_START_489>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     48a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     48e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     492:	b10b      	cbz	r3, 498 <main+0x84>
     494:	07db      	lsls	r3, r3, #31
     496:	d508      	bpl.n	4aa <FIH_LABEL_FIH_CALL_START_489>
            !boot_skip_serial_recovery()) {
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
     498:	2149      	movs	r1, #73	; 0x49
     49a:	4824      	ldr	r0, [pc, #144]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     49c:	f005 fd5a 	bl	5f54 <z_log_minimal_printk>
        rc = boot_console_init();
     4a0:	f001 fd68 	bl	1f74 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     4a4:	4822      	ldr	r0, [pc, #136]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4a6:	f002 f8d7 	bl	2658 <boot_serial_start>

000004aa <FIH_LABEL_FIH_CALL_START_489>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4aa:	a801      	add	r0, sp, #4
     4ac:	f000 fcca 	bl	e44 <boot_go>

000004b0 <FIH_LABEL_FIH_CALL_END_501>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4b0:	4b20      	ldr	r3, [pc, #128]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	4283      	cmp	r3, r0
     4b6:	d004      	beq.n	4c2 <FIH_LABEL_FIH_CALL_END_501+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     4b8:	2145      	movs	r1, #69	; 0x45
     4ba:	481f      	ldr	r0, [pc, #124]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     4bc:	f005 fd4a 	bl	5f54 <z_log_minimal_printk>
        FIH_PANIC;
     4c0:	e7fe      	b.n	4c0 <FIH_LABEL_FIH_CALL_END_501+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4c2:	9a03      	ldr	r2, [sp, #12]
     4c4:	2149      	movs	r1, #73	; 0x49
     4c6:	481d      	ldr	r0, [pc, #116]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     4c8:	f005 fd44 	bl	5f54 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     4cc:	2149      	movs	r1, #73	; 0x49
     4ce:	481c      	ldr	r0, [pc, #112]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4d0:	f005 fd40 	bl	5f54 <z_log_minimal_printk>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4d4:	4669      	mov	r1, sp
     4d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4da:	f000 f841 	bl	560 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4de:	9b00      	ldr	r3, [sp, #0]
     4e0:	9c03      	ldr	r4, [sp, #12]
     4e2:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4e4:	9b01      	ldr	r3, [sp, #4]
     4e6:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     4e8:	f000 ff4e 	bl	1388 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     4ec:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4ee:	f04f 0220 	mov.w	r2, #32
     4f2:	f3ef 8311 	mrs	r3, BASEPRI
     4f6:	f382 8812 	msr	BASEPRI_MAX, r2
     4fa:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4fe:	5963      	ldr	r3, [r4, r5]
     500:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     504:	6873      	ldr	r3, [r6, #4]
     506:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     508:	2145      	movs	r1, #69	; 0x45
     50a:	480e      	ldr	r0, [pc, #56]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     50c:	f005 fd22 	bl	5f54 <z_log_minimal_printk>
    while (1)
     510:	e7fe      	b.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     512:	bf00      	nop
     514:	50018000 	.word	0x50018000
     518:	6e524635 	.word	0x6e524635
     51c:	00008d9b 	.word	0x00008d9b
     520:	00008db4 	.word	0x00008db4
     524:	00008dc7 	.word	0x00008dc7
     528:	00008de6 	.word	0x00008de6
     52c:	00008ded 	.word	0x00008ded
     530:	000089b8 	.word	0x000089b8
     534:	2000c71c 	.word	0x2000c71c
     538:	00008e11 	.word	0x00008e11
     53c:	00008e34 	.word	0x00008e34
     540:	00008e63 	.word	0x00008e63
     544:	00008e88 	.word	0x00008e88

00000548 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     548:	b510      	push	{r4, lr}
    if (!flash_dev) {
     54a:	4c04      	ldr	r4, [pc, #16]	; (55c <flash_device_get_binding+0x14>)
     54c:	6823      	ldr	r3, [r4, #0]
     54e:	b913      	cbnz	r3, 556 <flash_device_get_binding+0xe>
     550:	f004 fe52 	bl	51f8 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     554:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     556:	6820      	ldr	r0, [r4, #0]
     558:	bd10      	pop	{r4, pc}
     55a:	bf00      	nop
     55c:	2000c718 	.word	0x2000c718

00000560 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     560:	4602      	mov	r2, r0
{
     562:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     564:	b138      	cbz	r0, 576 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     566:	4805      	ldr	r0, [pc, #20]	; (57c <flash_device_base+0x1c>)
     568:	2300      	movs	r3, #0
     56a:	2145      	movs	r1, #69	; 0x45
     56c:	f005 fcf2 	bl	5f54 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     570:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     574:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     576:	6008      	str	r0, [r1, #0]
    return 0;
     578:	e7fc      	b.n	574 <flash_device_base+0x14>
     57a:	bf00      	nop
     57c:	00008eab 	.word	0x00008eab

00000580 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     582:	4a07      	ldr	r2, [pc, #28]	; (5a0 <flash_area_sector_from_off+0x20>)
{
     584:	4603      	mov	r3, r0
     586:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     588:	6810      	ldr	r0, [r2, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     58a:	4619      	mov	r1, r3
     58c:	aa01      	add	r2, sp, #4
     58e:	f006 f998 	bl	68c2 <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     592:	b918      	cbnz	r0, 59c <flash_area_sector_from_off+0x1c>
        return rc;
    }

    sector->fs_off = page.start_offset;
     594:	9b01      	ldr	r3, [sp, #4]
     596:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     598:	9b02      	ldr	r3, [sp, #8]
     59a:	6063      	str	r3, [r4, #4]

    return rc;
}
     59c:	b004      	add	sp, #16
     59e:	bd10      	pop	{r4, pc}
     5a0:	2000c718 	.word	0x2000c718

000005a4 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5a8:	4801      	ldr	r0, [pc, #4]	; (5b0 <os_heap_init+0xc>)
     5aa:	f003 bf1d 	b.w	43e8 <mbedtls_memory_buffer_alloc_init>
     5ae:	bf00      	nop
     5b0:	2000e08e 	.word	0x2000e08e

000005b4 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     5b8:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 7a0 <FIH_LABEL_FIH_CALL_END_637+0x2c>
{
     5bc:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     5be:	a838      	add	r0, sp, #224	; 0xe0
     5c0:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     5c4:	4617      	mov	r7, r2
     5c6:	461d      	mov	r5, r3
    fih_int valid_signature = FIH_FAILURE;
     5c8:	f8da 6000 	ldr.w	r6, [sl]
     5cc:	f007 fed0 	bl	8370 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     5d0:	2100      	movs	r1, #0
     5d2:	a838      	add	r0, sp, #224	; 0xe0
     5d4:	f004 f81a 	bl	460c <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     5d8:	b13c      	cbz	r4, 5ea <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xe>
     5da:	f1b8 0f00 	cmp.w	r8, #0
     5de:	dd04      	ble.n	5ea <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xe>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     5e0:	4642      	mov	r2, r8
     5e2:	4621      	mov	r1, r4
     5e4:	a838      	add	r0, sp, #224	; 0xe0
     5e6:	f007 fec7 	bl	8378 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5ea:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     5ee:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     5f0:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     5f4:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     5f6:	68fb      	ldr	r3, [r7, #12]
     5f8:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     5fa:	45c8      	cmp	r8, r9
     5fc:	d849      	bhi.n	692 <FIH_LABEL_FIH_CALL_END_308+0xe>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     5fe:	a90d      	add	r1, sp, #52	; 0x34
     600:	a838      	add	r0, sp, #224	; 0xe0
     602:	f007 fef2 	bl	83ea <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     606:	9b86      	ldr	r3, [sp, #536]	; 0x218
     608:	b123      	cbz	r3, 614 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x38>
        memcpy(out_hash, hash, 32);
     60a:	2220      	movs	r2, #32
     60c:	4618      	mov	r0, r3
     60e:	a90d      	add	r1, sp, #52	; 0x34
     610:	f006 f820 	bl	6654 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     614:	2300      	movs	r3, #0
     616:	462a      	mov	r2, r5
     618:	9300      	str	r3, [sp, #0]
     61a:	4639      	mov	r1, r7
     61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     620:	a807      	add	r0, sp, #28
     622:	f005 f923 	bl	586c <bootutil_tlv_iter_begin>
    if (rc) {
     626:	4604      	mov	r4, r0
     628:	2800      	cmp	r0, #0
     62a:	f040 80b1 	bne.w	790 <FIH_LABEL_FIH_CALL_END_637+0x1c>
    int key_id = -1;
     62e:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     632:	f8df 9170 	ldr.w	r9, [pc, #368]	; 7a4 <FIH_LABEL_FIH_CALL_END_637+0x30>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     636:	f10d 0316 	add.w	r3, sp, #22
     63a:	aa05      	add	r2, sp, #20
     63c:	a906      	add	r1, sp, #24
     63e:	a807      	add	r0, sp, #28
     640:	f005 f960 	bl	5904 <bootutil_tlv_iter_next>
        if (rc < 0) {
     644:	f1b0 0800 	subs.w	r8, r0, #0
     648:	f2c0 80a8 	blt.w	79c <FIH_LABEL_FIH_CALL_END_637+0x28>
        } else if (rc > 0) {
     64c:	f040 8095 	bne.w	77a <FIH_LABEL_FIH_CALL_END_637+0x6>
        if (type == IMAGE_TLV_SHA256) {
     650:	f8bd b016 	ldrh.w	fp, [sp, #22]
     654:	f1bb 0f10 	cmp.w	fp, #16
     658:	d131      	bne.n	6be <FIH_LABEL_FIH_CALL_END_308+0x3a>
            if (len != sizeof(hash)) {
     65a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
     65e:	2c20      	cmp	r4, #32
     660:	f040 8094 	bne.w	78c <FIH_LABEL_FIH_CALL_END_637+0x18>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     664:	4623      	mov	r3, r4
     666:	4628      	mov	r0, r5
     668:	9906      	ldr	r1, [sp, #24]
     66a:	aa38      	add	r2, sp, #224	; 0xe0
     66c:	f005 fc80 	bl	5f70 <flash_area_read>
            if (rc) {
     670:	4680      	mov	r8, r0
     672:	2800      	cmp	r0, #0
     674:	f040 8092 	bne.w	79c <FIH_LABEL_FIH_CALL_END_637+0x28>

00000678 <FIH_LABEL_FIH_CALL_START_291>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     678:	4622      	mov	r2, r4
     67a:	a938      	add	r1, sp, #224	; 0xe0
     67c:	a80d      	add	r0, sp, #52	; 0x34
     67e:	f005 f98c 	bl	599a <boot_fih_memequal>
     682:	4604      	mov	r4, r0

00000684 <FIH_LABEL_FIH_CALL_END_308>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     684:	4b48      	ldr	r3, [pc, #288]	; (7a8 <FIH_LABEL_FIH_CALL_END_637+0x34>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	4283      	cmp	r3, r0
     68a:	f040 8081 	bne.w	790 <FIH_LABEL_FIH_CALL_END_637+0x1c>
            sha256_valid = 1;
     68e:	2401      	movs	r4, #1
     690:	e7d1      	b.n	636 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x5a>
        if (blk_sz > tmp_buf_sz) {
     692:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     694:	eba8 0b09 	sub.w	fp, r8, r9
     698:	459b      	cmp	fp, r3
     69a:	bf28      	it	cs
     69c:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     69e:	4649      	mov	r1, r9
     6a0:	465b      	mov	r3, fp
     6a2:	4628      	mov	r0, r5
     6a4:	9a82      	ldr	r2, [sp, #520]	; 0x208
     6a6:	f005 fc63 	bl	5f70 <flash_area_read>
        if (rc) {
     6aa:	4604      	mov	r4, r0
     6ac:	2800      	cmp	r0, #0
     6ae:	d16f      	bne.n	790 <FIH_LABEL_FIH_CALL_END_637+0x1c>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6b0:	465a      	mov	r2, fp
     6b2:	9982      	ldr	r1, [sp, #520]	; 0x208
     6b4:	a838      	add	r0, sp, #224	; 0xe0
     6b6:	f007 fe5f 	bl	8378 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6ba:	44d9      	add	r9, fp
     6bc:	e79d      	b.n	5fa <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     6be:	f1bb 0f01 	cmp.w	fp, #1
     6c2:	d137      	bne.n	734 <FIH_LABEL_FIH_CALL_END_308+0xb0>
            if (len > 32) {
     6c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6c8:	2b20      	cmp	r3, #32
     6ca:	d85f      	bhi.n	78c <FIH_LABEL_FIH_CALL_END_637+0x18>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6cc:	4628      	mov	r0, r5
     6ce:	9906      	ldr	r1, [sp, #24]
     6d0:	aa38      	add	r2, sp, #224	; 0xe0
     6d2:	f005 fc4d 	bl	5f70 <flash_area_read>
            if (rc) {
     6d6:	4680      	mov	r8, r0
     6d8:	2800      	cmp	r0, #0
     6da:	d15f      	bne.n	79c <FIH_LABEL_FIH_CALL_END_637+0x28>
            key_id = bootutil_find_key(buf, len);
     6dc:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     6e0:	f1bb 0f20 	cmp.w	fp, #32
     6e4:	d903      	bls.n	6ee <FIH_LABEL_FIH_CALL_END_308+0x6a>
        return -1;
     6e6:	f04f 38ff 	mov.w	r8, #4294967295
            key_id = bootutil_find_key(buf, len);
     6ea:	4647      	mov	r7, r8
     6ec:	e7a3      	b.n	636 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x5a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6ee:	f8d9 3000 	ldr.w	r3, [r9]
     6f2:	4f2e      	ldr	r7, [pc, #184]	; (7ac <FIH_LABEL_FIH_CALL_END_637+0x38>)
     6f4:	9303      	str	r3, [sp, #12]
     6f6:	9b03      	ldr	r3, [sp, #12]
     6f8:	4598      	cmp	r8, r3
     6fa:	daf4      	bge.n	6e6 <FIH_LABEL_FIH_CALL_END_308+0x62>
    mbedtls_sha256_init(ctx);
     6fc:	a81d      	add	r0, sp, #116	; 0x74
     6fe:	f007 fe37 	bl	8370 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     702:	2100      	movs	r1, #0
     704:	a81d      	add	r0, sp, #116	; 0x74
     706:	f003 ff81 	bl	460c <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     70a:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     70c:	a81d      	add	r0, sp, #116	; 0x74
     70e:	6812      	ldr	r2, [r2, #0]
     710:	f857 1b08 	ldr.w	r1, [r7], #8
     714:	f007 fe30 	bl	8378 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     718:	a915      	add	r1, sp, #84	; 0x54
     71a:	a81d      	add	r0, sp, #116	; 0x74
     71c:	f007 fe65 	bl	83ea <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     720:	465a      	mov	r2, fp
     722:	a938      	add	r1, sp, #224	; 0xe0
     724:	a815      	add	r0, sp, #84	; 0x54
     726:	f005 ff6e 	bl	6606 <memcmp>
     72a:	2800      	cmp	r0, #0
     72c:	d0dd      	beq.n	6ea <FIH_LABEL_FIH_CALL_END_308+0x66>
    for (i = 0; i < bootutil_key_cnt; i++) {
     72e:	f108 0801 	add.w	r8, r8, #1
     732:	e7e0      	b.n	6f6 <FIH_LABEL_FIH_CALL_END_308+0x72>
        } else if (type == EXPECTED_SIG_TLV) {
     734:	f1bb 0f20 	cmp.w	fp, #32
     738:	f47f af7d 	bne.w	636 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x5a>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     73c:	2f00      	cmp	r7, #0
     73e:	db19      	blt.n	774 <FIH_LABEL_FIH_CALL_END_637>
     740:	f8d9 3000 	ldr.w	r3, [r9]
     744:	42bb      	cmp	r3, r7
     746:	dd15      	ble.n	774 <FIH_LABEL_FIH_CALL_END_637>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     748:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     74c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     750:	d11c      	bne.n	78c <FIH_LABEL_FIH_CALL_END_637+0x18>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     752:	4628      	mov	r0, r5
     754:	9906      	ldr	r1, [sp, #24]
     756:	aa38      	add	r2, sp, #224	; 0xe0
     758:	f005 fc0a 	bl	5f70 <flash_area_read>
            if (rc) {
     75c:	4680      	mov	r8, r0
     75e:	b9e8      	cbnz	r0, 79c <FIH_LABEL_FIH_CALL_END_637+0x28>

00000760 <FIH_LABEL_FIH_CALL_START_616>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     760:	b2ff      	uxtb	r7, r7
     762:	4659      	mov	r1, fp
     764:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     768:	9700      	str	r7, [sp, #0]
     76a:	aa38      	add	r2, sp, #224	; 0xe0
     76c:	a80d      	add	r0, sp, #52	; 0x34
     76e:	f000 f81f 	bl	7b0 <bootutil_verify_sig>
     772:	4606      	mov	r6, r0

00000774 <FIH_LABEL_FIH_CALL_END_637>:
                key_id = -1;
     774:	f04f 37ff 	mov.w	r7, #4294967295
     778:	e75d      	b.n	636 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x5a>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     77a:	b16c      	cbz	r4, 798 <FIH_LABEL_FIH_CALL_END_637+0x24>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     77c:	4b0a      	ldr	r3, [pc, #40]	; (7a8 <FIH_LABEL_FIH_CALL_END_637+0x34>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     77e:	681b      	ldr	r3, [r3, #0]
     780:	42b3      	cmp	r3, r6
     782:	d001      	beq.n	788 <FIH_LABEL_FIH_CALL_END_637+0x14>
        return FIH_FAILURE;
     784:	f8da 6000 	ldr.w	r6, [sl]
        return -1;
     788:	4634      	mov	r4, r6
     78a:	e001      	b.n	790 <FIH_LABEL_FIH_CALL_END_637+0x1c>
                rc = -1;
     78c:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     790:	4620      	mov	r0, r4
     792:	b079      	add	sp, #484	; 0x1e4
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = !sha256_valid;
     798:	f04f 0801 	mov.w	r8, #1
        return -1;
     79c:	4644      	mov	r4, r8
     79e:	e7f7      	b.n	790 <FIH_LABEL_FIH_CALL_END_637+0x1c>
     7a0:	2000c500 	.word	0x2000c500
     7a4:	000089c0 	.word	0x000089c0
     7a8:	2000c71c 	.word	0x2000c71c
     7ac:	000089c4 	.word	0x000089c4

000007b0 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b4:	461f      	mov	r7, r3
     7b6:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     7ba:	4b6a      	ldr	r3, [pc, #424]	; (964 <FIH_LABEL_FIH_CALL_END_650+0x2>)
{
     7bc:	4680      	mov	r8, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     7be:	a827      	add	r0, sp, #156	; 0x9c
{
     7c0:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
     7c4:	468a      	mov	sl, r1
     7c6:	4691      	mov	r9, r2
    fih_int fih_rc = FIH_FAILURE;
     7c8:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx);
     7ca:	f007 fd8e 	bl	82ea <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     7ce:	4b66      	ldr	r3, [pc, #408]	; (968 <FIH_LABEL_FIH_CALL_END_650+0x6>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7d0:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7d2:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     7d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     7da:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7dc:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     7de:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7e0:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     7e2:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7e4:	4621      	mov	r1, r4
     7e6:	2330      	movs	r3, #48	; 0x30
     7e8:	f006 fb24 	bl	6e34 <mbedtls_asn1_get_tag>
     7ec:	bb68      	cbnz	r0, 84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
    if (*p + len != end) {
     7ee:	9b02      	ldr	r3, [sp, #8]
     7f0:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     7f2:	4413      	add	r3, r2
     7f4:	429c      	cmp	r4, r3
     7f6:	d128      	bne.n	84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     7f8:	4621      	mov	r1, r4
     7fa:	aa29      	add	r2, sp, #164	; 0xa4
     7fc:	a802      	add	r0, sp, #8
     7fe:	f006 fb2d 	bl	6e5c <mbedtls_asn1_get_mpi>
     802:	bb10      	cbnz	r0, 84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     804:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     808:	465a      	mov	r2, fp
     80a:	4621      	mov	r1, r4
     80c:	a802      	add	r0, sp, #8
     80e:	f006 fb25 	bl	6e5c <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     812:	4606      	mov	r6, r0
     814:	b9c8      	cbnz	r0, 84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     816:	a829      	add	r0, sp, #164	; 0xa4
     818:	f006 fe82 	bl	7520 <mbedtls_mpi_size>
    if (*p != end) {
     81c:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     81e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     820:	429c      	cmp	r4, r3
     822:	d112      	bne.n	84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     824:	4633      	mov	r3, r6
     826:	4632      	mov	r2, r6
     828:	e9cd 6b00 	strd	r6, fp, [sp]
     82c:	a929      	add	r1, sp, #164	; 0xa4
     82e:	a827      	add	r0, sp, #156	; 0x9c
     830:	f007 fd18 	bl	8264 <mbedtls_rsa_import>
    if (rc != 0) {
     834:	b948      	cbnz	r0, 84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     836:	a827      	add	r0, sp, #156	; 0x9c
     838:	f003 fe7a 	bl	4530 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     83c:	b928      	cbnz	r0, 84a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     83e:	a829      	add	r0, sp, #164	; 0xa4
     840:	f006 fe6e 	bl	7520 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     844:	4287      	cmp	r7, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     846:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     848:	d00a      	beq.n	860 <FIH_LABEL_FIH_CALL_START_229>
        mbedtls_rsa_free(&ctx);
     84a:	a827      	add	r0, sp, #156	; 0x9c
     84c:	f007 fd57 	bl	82fe <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     850:	a827      	add	r0, sp, #156	; 0x9c
     852:	f007 fd54 	bl	82fe <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     856:	4628      	mov	r0, r5
     858:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000860 <FIH_LABEL_FIH_CALL_START_229>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     860:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
     864:	d002      	beq.n	86c <FIH_LABEL_FIH_CALL_END_285+0x2>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     866:	f04f 35ff 	mov.w	r5, #4294967295

0000086a <FIH_LABEL_FIH_CALL_END_285>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     86a:	e7f1      	b.n	850 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x50>
    if (hlen != PSS_HLEN) {
     86c:	f1ba 0f20 	cmp.w	sl, #32
     870:	d1f9      	bne.n	866 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     872:	4649      	mov	r1, r9
     874:	aa8a      	add	r2, sp, #552	; 0x228
     876:	a827      	add	r0, sp, #156	; 0x9c
     878:	f003 fe80 	bl	457c <mbedtls_rsa_public>
     87c:	4604      	mov	r4, r0
     87e:	2800      	cmp	r0, #0
     880:	d1f1      	bne.n	866 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     882:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     886:	2bbc      	cmp	r3, #188	; 0xbc
     888:	d1ed      	bne.n	866 <FIH_LABEL_FIH_CALL_START_229+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     88a:	af52      	add	r7, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     88c:	26df      	movs	r6, #223	; 0xdf
     88e:	463d      	mov	r5, r7
    uint8_t counter[4] = { 0, 0, 0, 0 };
     890:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     892:	a80c      	add	r0, sp, #48	; 0x30
     894:	f007 fd6c 	bl	8370 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     898:	2100      	movs	r1, #0
     89a:	a80c      	add	r0, sp, #48	; 0x30
     89c:	f003 feb6 	bl	460c <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8a0:	2220      	movs	r2, #32
     8a2:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8a6:	a80c      	add	r0, sp, #48	; 0x30
     8a8:	f007 fd66 	bl	8378 <mbedtls_sha256_update>
     8ac:	2204      	movs	r2, #4
     8ae:	a903      	add	r1, sp, #12
     8b0:	a80c      	add	r0, sp, #48	; 0x30
     8b2:	f007 fd61 	bl	8378 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     8b6:	a904      	add	r1, sp, #16
     8b8:	a80c      	add	r0, sp, #48	; 0x30
     8ba:	f007 fd96 	bl	83ea <mbedtls_sha256_finish>
        if (bytes > count)
     8be:	2e20      	cmp	r6, #32
     8c0:	46b1      	mov	r9, r6
     8c2:	bfa8      	it	ge
     8c4:	f04f 0920 	movge.w	r9, #32
        counter[3]++;
     8c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8cc:	4638      	mov	r0, r7
        counter[3]++;
     8ce:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     8d0:	464a      	mov	r2, r9
     8d2:	a904      	add	r1, sp, #16
        count -= bytes;
     8d4:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     8d8:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8dc:	f005 feba 	bl	6654 <memcpy>
    while (count > 0) {
     8e0:	2e00      	cmp	r6, #0
        mask += bytes;
     8e2:	444f      	add	r7, r9
    while (count > 0) {
     8e4:	dcd5      	bgt.n	892 <FIH_LABEL_FIH_CALL_END_285+0x28>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8e6:	462f      	mov	r7, r5
     8e8:	4629      	mov	r1, r5
     8ea:	2200      	movs	r2, #0
     8ec:	ab8a      	add	r3, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     8ee:	7808      	ldrb	r0, [r1, #0]
     8f0:	f813 6b01 	ldrb.w	r6, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8f4:	3201      	adds	r2, #1
        db_mask[i] ^= em[i];
     8f6:	4070      	eors	r0, r6
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8f8:	2adf      	cmp	r2, #223	; 0xdf
        db_mask[i] ^= em[i];
     8fa:	f801 0b01 	strb.w	r0, [r1], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8fe:	d1f6      	bne.n	8ee <FIH_LABEL_FIH_CALL_END_285+0x84>
    db_mask[0] &= 0x7F;
     900:	782b      	ldrb	r3, [r5, #0]
     902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     906:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     908:	f817 6b01 	ldrb.w	r6, [r7], #1
     90c:	2e00      	cmp	r6, #0
     90e:	d1aa      	bne.n	866 <FIH_LABEL_FIH_CALL_START_229+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     910:	3401      	adds	r4, #1
     912:	2cbe      	cmp	r4, #190	; 0xbe
     914:	d1f8      	bne.n	908 <FIH_LABEL_FIH_CALL_END_285+0x9e>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     916:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     91a:	2b01      	cmp	r3, #1
     91c:	d1a3      	bne.n	866 <FIH_LABEL_FIH_CALL_START_229+0x6>
    mbedtls_sha256_init(ctx);
     91e:	a80c      	add	r0, sp, #48	; 0x30
     920:	f007 fd26 	bl	8370 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     924:	4631      	mov	r1, r6
     926:	a80c      	add	r0, sp, #48	; 0x30
     928:	f003 fe70 	bl	460c <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     92c:	2208      	movs	r2, #8
     92e:	490f      	ldr	r1, [pc, #60]	; (96c <FIH_LABEL_FIH_CALL_END_650+0xa>)
     930:	a80c      	add	r0, sp, #48	; 0x30
     932:	f007 fd21 	bl	8378 <mbedtls_sha256_update>
     936:	4641      	mov	r1, r8
     938:	2220      	movs	r2, #32
     93a:	a80c      	add	r0, sp, #48	; 0x30
     93c:	f007 fd1c 	bl	8378 <mbedtls_sha256_update>
     940:	2220      	movs	r2, #32
     942:	f20d 2107 	addw	r1, sp, #519	; 0x207
     946:	a80c      	add	r0, sp, #48	; 0x30
     948:	f007 fd16 	bl	8378 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     94c:	a904      	add	r1, sp, #16
     94e:	a80c      	add	r0, sp, #48	; 0x30
     950:	f007 fd4b 	bl	83ea <mbedtls_sha256_finish>

00000954 <FIH_LABEL_FIH_CALL_START_634>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     954:	2220      	movs	r2, #32
     956:	f20d 3107 	addw	r1, sp, #775	; 0x307
     95a:	a804      	add	r0, sp, #16
     95c:	f005 f81d 	bl	599a <boot_fih_memequal>
     960:	4605      	mov	r5, r0

00000962 <FIH_LABEL_FIH_CALL_END_650>:
    if (rc) {
     962:	e782      	b.n	86a <FIH_LABEL_FIH_CALL_END_285>
     964:	2000c500 	.word	0x2000c500
     968:	000089c4 	.word	0x000089c4
     96c:	00008ed1 	.word	0x00008ed1

00000970 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     974:	2302      	movs	r3, #2
{
     976:	b086      	sub	sp, #24
     978:	460d      	mov	r5, r1
     97a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     97c:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     97e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9e8 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     982:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     986:	f817 0b01 	ldrb.w	r0, [r7], #1
     98a:	a901      	add	r1, sp, #4
     98c:	f001 f9e8 	bl	1d60 <flash_area_open>
        if (rc != 0) {
     990:	4604      	mov	r4, r0
     992:	b9a0      	cbnz	r0, 9be <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     994:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     996:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     998:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     99a:	aa02      	add	r2, sp, #8
     99c:	3910      	subs	r1, #16
     99e:	f005 fae7 	bl	5f70 <flash_area_read>
     9a2:	4604      	mov	r4, r0
        flash_area_close(*fap);
     9a4:	9801      	ldr	r0, [sp, #4]
     9a6:	f005 fae2 	bl	5f6e <flash_area_close>
        if (rc != 0) {
     9aa:	b944      	cbnz	r4, 9be <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9ac:	2210      	movs	r2, #16
     9ae:	4641      	mov	r1, r8
     9b0:	a802      	add	r0, sp, #8
     9b2:	f005 fe28 	bl	6606 <memcmp>
     9b6:	b140      	cbz	r0, 9ca <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9b8:	b12e      	cbz	r6, 9c6 <boot_read_swap_size+0x56>
    return -1;
     9ba:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     9be:	4620      	mov	r0, r4
     9c0:	b006      	add	sp, #24
     9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9c6:	2601      	movs	r6, #1
     9c8:	e7dd      	b.n	986 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9ca:	9801      	ldr	r0, [sp, #4]
     9cc:	f006 f944 	bl	6c58 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9d0:	2304      	movs	r3, #4
     9d2:	f1a0 0108 	sub.w	r1, r0, #8
     9d6:	462a      	mov	r2, r5
     9d8:	9801      	ldr	r0, [sp, #4]
     9da:	f005 fac9 	bl	5f70 <flash_area_read>
     9de:	4604      	mov	r4, r0
        flash_area_close(fap);
     9e0:	9801      	ldr	r0, [sp, #4]
     9e2:	f005 fac4 	bl	5f6e <flash_area_close>
     9e6:	e7ea      	b.n	9be <boot_read_swap_size+0x4e>
     9e8:	00008bdc 	.word	0x00008bdc

000009ec <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9f0:	4b35      	ldr	r3, [pc, #212]	; (ac8 <FIH_LABEL_FIH_CALL_END_437+0x76>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9f2:	b088      	sub	sp, #32
     9f4:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9f6:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     9f8:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     9fa:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9fc:	f004 ff2b 	bl	5856 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a00:	a906      	add	r1, sp, #24
     a02:	b2c0      	uxtb	r0, r0
     a04:	f001 f9ac 	bl	1d60 <flash_area_open>
    if (rc != 0) {
     a08:	2800      	cmp	r0, #0
     a0a:	d157      	bne.n	abc <FIH_LABEL_FIH_CALL_END_437+0x6a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a0c:	4621      	mov	r1, r4
     a0e:	f004 ff22 	bl	5856 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a12:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a14:	a907      	add	r1, sp, #28
     a16:	b2c0      	uxtb	r0, r0
     a18:	fb05 6504 	mla	r5, r5, r4, r6
     a1c:	f001 f9a0 	bl	1d60 <flash_area_open>
    if (rc != 0) {
     a20:	2800      	cmp	r0, #0
     a22:	d033      	beq.n	a8c <FIH_LABEL_FIH_CALL_END_437+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a24:	272c      	movs	r7, #44	; 0x2c
     a26:	4367      	muls	r7, r4
     a28:	eb06 0807 	add.w	r8, r6, r7
     a2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     a30:	9b06      	ldr	r3, [sp, #24]
    if (boot_check_header_erased(state, slot) == 0 ||
     a32:	f011 0110 	ands.w	r1, r1, #16
     a36:	d138      	bne.n	aaa <FIH_LABEL_FIH_CALL_END_437+0x58>

00000a38 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a38:	f44f 7280 	mov.w	r2, #256	; 0x100
     a3c:	9201      	str	r2, [sp, #4]
     a3e:	4a23      	ldr	r2, [pc, #140]	; (acc <FIH_LABEL_FIH_CALL_END_437+0x7a>)
     a40:	4608      	mov	r0, r1
     a42:	9200      	str	r2, [sp, #0]
     a44:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a48:	462a      	mov	r2, r5
     a4a:	9102      	str	r1, [sp, #8]
     a4c:	f7ff fdb2 	bl	5b4 <bootutil_img_validate>
     a50:	4605      	mov	r5, r0

00000a52 <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a52:	4b1f      	ldr	r3, [pc, #124]	; (ad0 <FIH_LABEL_FIH_CALL_END_437+0x7e>)
     a54:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a56:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a58:	429a      	cmp	r2, r3
     a5a:	d10c      	bne.n	a76 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a5c:	f8d8 200c 	ldr.w	r2, [r8, #12]
     a60:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     a64:	189b      	adds	r3, r3, r2
     a66:	d206      	bcs.n	a76 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= flash_area_get_size(fap)) {
     a68:	6882      	ldr	r2, [r0, #8]
     a6a:	4293      	cmp	r3, r2
     a6c:	d203      	bcs.n	a76 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a6e:	4b19      	ldr	r3, [pc, #100]	; (ad4 <FIH_LABEL_FIH_CALL_END_437+0x82>)
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	42ab      	cmp	r3, r5
     a74:	d01f      	beq.n	ab6 <FIH_LABEL_FIH_CALL_END_437+0x64>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a76:	b32c      	cbz	r4, ac4 <FIH_LABEL_FIH_CALL_END_437+0x72>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a78:	6882      	ldr	r2, [r0, #8]
     a7a:	2100      	movs	r1, #0
     a7c:	f005 fac7 	bl	600e <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a80:	4a15      	ldr	r2, [pc, #84]	; (ad8 <FIH_LABEL_FIH_CALL_END_437+0x86>)
     a82:	2145      	movs	r1, #69	; 0x45
     a84:	4815      	ldr	r0, [pc, #84]	; (adc <FIH_LABEL_FIH_CALL_END_437+0x8a>)
     a86:	f005 fa65 	bl	5f54 <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     a8a:	e013      	b.n	ab4 <FIH_LABEL_FIH_CALL_END_437+0x62>
    erased_val = flash_area_erased_val(fap);
     a8c:	9807      	ldr	r0, [sp, #28]
     a8e:	f005 faf6 	bl	607e <flash_area_erased_val>
     a92:	4607      	mov	r7, r0
    flash_area_close(fap);
     a94:	9807      	ldr	r0, [sp, #28]
     a96:	f005 fa6a 	bl	5f6e <flash_area_close>
    for (i = 0; i < len; i++) {
     a9a:	1e6b      	subs	r3, r5, #1
     a9c:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     a9e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     aa2:	42b9      	cmp	r1, r7
     aa4:	d1be      	bne.n	a24 <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     aa6:	4293      	cmp	r3, r2
     aa8:	d1f9      	bne.n	a9e <FIH_LABEL_FIH_CALL_END_437+0x4c>
        if (slot != BOOT_PRIMARY_SLOT) {
     aaa:	b11c      	cbz	r4, ab4 <FIH_LABEL_FIH_CALL_END_437+0x62>
            swap_erase_trailer_sectors(state, fap);
     aac:	4630      	mov	r0, r6
     aae:	9906      	ldr	r1, [sp, #24]
     ab0:	f005 f86a 	bl	5b88 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     ab4:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     ab6:	9806      	ldr	r0, [sp, #24]
     ab8:	f005 fa59 	bl	5f6e <flash_area_close>

    FIH_RET(fih_rc);
}
     abc:	4628      	mov	r0, r5
     abe:	b008      	add	sp, #32
     ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ac4:	4a06      	ldr	r2, [pc, #24]	; (ae0 <FIH_LABEL_FIH_CALL_END_437+0x8e>)
     ac6:	e7dc      	b.n	a82 <FIH_LABEL_FIH_CALL_END_437+0x30>
     ac8:	2000c500 	.word	0x2000c500
     acc:	2000f88e 	.word	0x2000f88e
     ad0:	96f3b83d 	.word	0x96f3b83d
     ad4:	2000c71c 	.word	0x2000c71c
     ad8:	00008ee1 	.word	0x00008ee1
     adc:	00008eeb 	.word	0x00008eeb
     ae0:	00008ed9 	.word	0x00008ed9

00000ae4 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ae6:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     ae8:	2100      	movs	r1, #0
{
     aea:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     aec:	4628      	mov	r0, r5
    size = copy_size = 0;
     aee:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     af2:	f005 f808 	bl	5b06 <boot_status_is_reset>
     af6:	b330      	cbz	r0, b46 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     af8:	4e16      	ldr	r6, [pc, #88]	; (b54 <boot_swap_image+0x70>)
     afa:	6823      	ldr	r3, [r4, #0]
     afc:	42b3      	cmp	r3, r6
     afe:	d103      	bne.n	b08 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b00:	4620      	mov	r0, r4
     b02:	aa01      	add	r2, sp, #4
     b04:	f004 ff93 	bl	5a2e <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b0a:	42b3      	cmp	r3, r6
     b0c:	d104      	bne.n	b18 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b0e:	466a      	mov	r2, sp
     b10:	2101      	movs	r1, #1
     b12:	4620      	mov	r0, r4
     b14:	f004 ff8b 	bl	5a2e <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     b18:	e9dd 3200 	ldrd	r3, r2, [sp]
     b1c:	4293      	cmp	r3, r2
            copy_size = size;
     b1e:	bf88      	it	hi
     b20:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b22:	9b01      	ldr	r3, [sp, #4]
     b24:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b26:	9a01      	ldr	r2, [sp, #4]
     b28:	4629      	mov	r1, r5
     b2a:	4620      	mov	r0, r4
     b2c:	f000 fb36 	bl	119c <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b30:	4b09      	ldr	r3, [pc, #36]	; (b58 <boot_swap_image+0x74>)
     b32:	681a      	ldr	r2, [r3, #0]
     b34:	2a00      	cmp	r2, #0
     b36:	dd03      	ble.n	b40 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b38:	2157      	movs	r1, #87	; 0x57
     b3a:	4808      	ldr	r0, [pc, #32]	; (b5c <boot_swap_image+0x78>)
     b3c:	f005 fa0a 	bl	5f54 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     b40:	2000      	movs	r0, #0
     b42:	b002      	add	sp, #8
     b44:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b46:	f105 0108 	add.w	r1, r5, #8
     b4a:	f7ff ff11 	bl	970 <boot_read_swap_size>
        copy_size = bs->swap_size;
     b4e:	68ab      	ldr	r3, [r5, #8]
     b50:	9301      	str	r3, [sp, #4]
     b52:	e7e8      	b.n	b26 <boot_swap_image+0x42>
     b54:	96f3b83d 	.word	0x96f3b83d
     b58:	2000db80 	.word	0x2000db80
     b5c:	00008f13 	.word	0x00008f13

00000b60 <boot_copy_region>:
{
     b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b64:	4688      	mov	r8, r1
     b66:	4691      	mov	r9, r2
     b68:	469a      	mov	sl, r3
    bytes_copied = 0;
     b6a:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b6c:	f8df b068 	ldr.w	fp, [pc, #104]	; bd8 <boot_copy_region+0x78>
     b70:	4c1a      	ldr	r4, [pc, #104]	; (bdc <boot_copy_region+0x7c>)
     b72:	4d1b      	ldr	r5, [pc, #108]	; (be0 <boot_copy_region+0x80>)
    while (bytes_copied < sz) {
     b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b76:	429e      	cmp	r6, r3
     b78:	d301      	bcc.n	b7e <boot_copy_region+0x1e>
    return 0;
     b7a:	2000      	movs	r0, #0
     b7c:	e00f      	b.n	b9e <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b80:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b82:	1b9f      	subs	r7, r3, r6
     b84:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b88:	bf28      	it	cs
     b8a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b8e:	4a12      	ldr	r2, [pc, #72]	; (bd8 <boot_copy_region+0x78>)
     b90:	463b      	mov	r3, r7
     b92:	eb06 010a 	add.w	r1, r6, sl
     b96:	f005 f9eb 	bl	5f70 <flash_area_read>
        if (rc != 0) {
     b9a:	b110      	cbz	r0, ba2 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b9c:	2001      	movs	r0, #1
}
     b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     ba2:	990a      	ldr	r1, [sp, #40]	; 0x28
     ba4:	463b      	mov	r3, r7
     ba6:	465a      	mov	r2, fp
     ba8:	4648      	mov	r0, r9
     baa:	1871      	adds	r1, r6, r1
     bac:	f005 f9fc 	bl	5fa8 <flash_area_write>
        if (rc != 0) {
     bb0:	2800      	cmp	r0, #0
     bb2:	d1f3      	bne.n	b9c <boot_copy_region+0x3c>
     bb4:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     bb8:	443e      	add	r6, r7
     bba:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     bbe:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     bc2:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     bc6:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     bca:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     bce:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     bd2:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bd6:	e7cd      	b.n	b74 <boot_copy_region+0x14>
     bd8:	2000d720 	.word	0x2000d720
     bdc:	50018000 	.word	0x50018000
     be0:	6e524635 	.word	0x6e524635

00000be4 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     be4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     be8:	460e      	mov	r6, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bea:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bec:	4b8e      	ldr	r3, [pc, #568]	; (e28 <FIH_LABEL_FIH_CALL_END_2277+0x40>)
{
     bee:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bf0:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     bf2:	4b8e      	ldr	r3, [pc, #568]	; (e2c <FIH_LABEL_FIH_CALL_END_2277+0x44>)
     bf4:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bf6:	4608      	mov	r0, r1
     bf8:	f004 fe2d 	bl	5856 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bfc:	f104 0120 	add.w	r1, r4, #32
     c00:	b2c0      	uxtb	r0, r0
     c02:	f001 f8ad 	bl	1d60 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c06:	2101      	movs	r1, #1
     c08:	2000      	movs	r0, #0
     c0a:	f004 fe24 	bl	5856 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c0e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c12:	b2c0      	uxtb	r0, r0
     c14:	f001 f8a4 	bl	1d60 <flash_area_open>
     c18:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c1a:	4620      	mov	r0, r4
     c1c:	f004 ff48 	bl	5ab0 <boot_read_sectors>
    if (rc != 0) {
     c20:	4607      	mov	r7, r0
     c22:	b968      	cbnz	r0, c40 <context_boot_go+0x5c>
    rc = boot_read_image_headers(state, false, NULL);
     c24:	2200      	movs	r2, #0
     c26:	4620      	mov	r0, r4
     c28:	4611      	mov	r1, r2
     c2a:	f004 feea 	bl	5a02 <boot_read_image_headers>
    if (rc != 0) {
     c2e:	4607      	mov	r7, r0
     c30:	b308      	cbz	r0, c76 <context_boot_go+0x92>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c32:	2200      	movs	r2, #0
     c34:	2157      	movs	r1, #87	; 0x57
     c36:	487e      	ldr	r0, [pc, #504]	; (e30 <FIH_LABEL_FIH_CALL_END_2277+0x48>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c38:	f005 f98c 	bl	5f54 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c3c:	2301      	movs	r3, #1
     c3e:	e090      	b.n	d62 <FIH_LABEL_FIH_CALL_END_2026+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c40:	f44f 7280 	mov.w	r2, #256	; 0x100
     c44:	2157      	movs	r1, #87	; 0x57
     c46:	487b      	ldr	r0, [pc, #492]	; (e34 <FIH_LABEL_FIH_CALL_END_2277+0x4c>)
     c48:	f005 f984 	bl	5f54 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c4c:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c4e:	429f      	cmp	r7, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c50:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c54:	d1e6      	bne.n	c24 <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c56:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     c5a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c5c:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     c60:	f200 8082 	bhi.w	d68 <FIH_LABEL_FIH_CALL_END_2026+0x14>
     c64:	2b01      	cmp	r3, #1
     c66:	f200 8085 	bhi.w	d74 <FIH_LABEL_FIH_CALL_END_2026+0x20>
     c6a:	f000 809c 	beq.w	da6 <FIH_LABEL_FIH_CALL_END_2026+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c6e:	23ff      	movs	r3, #255	; 0xff
     c70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c74:	e097      	b.n	da6 <FIH_LABEL_FIH_CALL_END_2026+0x52>
    if (boot_slots_compatible(state)) {
     c76:	4620      	mov	r0, r4
     c78:	f000 f9a6 	bl	fc8 <boot_slots_compatible>
     c7c:	2800      	cmp	r0, #0
     c7e:	d0dd      	beq.n	c3c <context_boot_go+0x58>
        boot_status_reset(bs);
     c80:	4668      	mov	r0, sp
     c82:	f004 ff37 	bl	5af4 <boot_status_reset>
        rc = swap_read_status(state, bs);
     c86:	4669      	mov	r1, sp
     c88:	4620      	mov	r0, r4
     c8a:	f004 ffd2 	bl	5c32 <swap_read_status>
        if (rc != 0) {
     c8e:	b118      	cbz	r0, c98 <context_boot_go+0xb4>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c90:	463a      	mov	r2, r7
     c92:	2157      	movs	r1, #87	; 0x57
     c94:	4868      	ldr	r0, [pc, #416]	; (e38 <FIH_LABEL_FIH_CALL_END_2277+0x50>)
     c96:	e7cf      	b.n	c38 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c98:	4668      	mov	r0, sp
     c9a:	f004 ff34 	bl	5b06 <boot_status_is_reset>
     c9e:	f080 0101 	eor.w	r1, r0, #1
     ca2:	466a      	mov	r2, sp
     ca4:	4620      	mov	r0, r4
     ca6:	b2c9      	uxtb	r1, r1
     ca8:	f004 feab 	bl	5a02 <boot_read_image_headers>
        if (rc != 0) {
     cac:	4602      	mov	r2, r0
     cae:	2800      	cmp	r0, #0
     cb0:	d1bf      	bne.n	c32 <context_boot_go+0x4e>
        if (!boot_status_is_reset(bs)) {
     cb2:	4668      	mov	r0, sp
     cb4:	f004 ff27 	bl	5b06 <boot_status_is_reset>
     cb8:	4607      	mov	r7, r0
     cba:	bb60      	cbnz	r0, d16 <context_boot_go+0x132>
    rc = boot_swap_image(state, bs);
     cbc:	4669      	mov	r1, sp
     cbe:	4620      	mov	r0, r4
     cc0:	f7ff ff10 	bl	ae4 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cc8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     ccc:	3b03      	subs	r3, #3
     cce:	2b01      	cmp	r3, #1
     cd0:	d806      	bhi.n	ce0 <context_boot_go+0xfc>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cd2:	4638      	mov	r0, r7
     cd4:	f004 fffb 	bl	5cce <swap_set_image_ok>
        if (rc != 0) {
     cd8:	b110      	cbz	r0, ce0 <context_boot_go+0xfc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cda:	23ff      	movs	r3, #255	; 0xff
     cdc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     ce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ce4:	3b02      	subs	r3, #2
     ce6:	2b02      	cmp	r3, #2
     ce8:	d80b      	bhi.n	d02 <context_boot_go+0x11e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cea:	2000      	movs	r0, #0
     cec:	f004 ffdd 	bl	5caa <swap_set_copy_done>
        if (rc != 0) {
     cf0:	b138      	cbz	r0, d02 <context_boot_go+0x11e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cf2:	23ff      	movs	r3, #255	; 0xff
     cf4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     cf8:	2145      	movs	r1, #69	; 0x45
     cfa:	4850      	ldr	r0, [pc, #320]	; (e3c <FIH_LABEL_FIH_CALL_END_2277+0x54>)
     cfc:	f005 f92a 	bl	5f54 <z_log_minimal_printk>
        while (1) {}
     d00:	e7fe      	b.n	d00 <context_boot_go+0x11c>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d02:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d06:	2bff      	cmp	r3, #255	; 0xff
     d08:	d0f6      	beq.n	cf8 <context_boot_go+0x114>
            rc = boot_read_image_headers(state, false, bs);
     d0a:	466a      	mov	r2, sp
     d0c:	2100      	movs	r1, #0
     d0e:	4620      	mov	r0, r4
     d10:	f004 fe77 	bl	5a02 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d14:	e792      	b.n	c3c <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d16:	f89d 8007 	ldrb.w	r8, [sp, #7]
     d1a:	f1b8 0f01 	cmp.w	r8, #1
     d1e:	d115      	bne.n	d4c <FIH_LABEL_FIH_CALL_START_2011>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d20:	4610      	mov	r0, r2
     d22:	f003 f997 	bl	4054 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d26:	1e83      	subs	r3, r0, #2
     d28:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d2a:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d2c:	d80b      	bhi.n	d46 <FIH_LABEL_FIH_CALL_END_1975+0x10>

00000d2e <FIH_LABEL_FIH_CALL_START_1960>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d2e:	4641      	mov	r1, r8
     d30:	4620      	mov	r0, r4
     d32:	f7ff fe5b 	bl	9ec <boot_validate_slot.isra.0>

00000d36 <FIH_LABEL_FIH_CALL_END_1975>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d36:	4b42      	ldr	r3, [pc, #264]	; (e40 <FIH_LABEL_FIH_CALL_END_2277+0x58>)
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	4298      	cmp	r0, r3
     d3c:	d003      	beq.n	d46 <FIH_LABEL_FIH_CALL_END_1975+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     d3e:	2801      	cmp	r0, #1
     d40:	bf14      	ite	ne
     d42:	2705      	movne	r7, #5
     d44:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d46:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     d4a:	e784      	b.n	c56 <context_boot_go+0x72>

00000d4c <FIH_LABEL_FIH_CALL_START_2011>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d4c:	2101      	movs	r1, #1
     d4e:	4620      	mov	r0, r4
     d50:	f7ff fe4c 	bl	9ec <boot_validate_slot.isra.0>

00000d54 <FIH_LABEL_FIH_CALL_END_2026>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d54:	4b3a      	ldr	r3, [pc, #232]	; (e40 <FIH_LABEL_FIH_CALL_END_2277+0x58>)
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d5a:	bf14      	ite	ne
     d5c:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d5e:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d62:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d66:	e776      	b.n	c56 <context_boot_go+0x72>
        switch (BOOT_SWAP_TYPE(state)) {
     d68:	2b05      	cmp	r3, #5
     d6a:	d180      	bne.n	c6e <context_boot_go+0x8a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d6c:	2000      	movs	r0, #0
     d6e:	f004 ffae 	bl	5cce <swap_set_image_ok>
     d72:	e013      	b.n	d9c <FIH_LABEL_FIH_CALL_END_2026+0x48>
        rc = boot_swap_image(state, bs);
     d74:	4669      	mov	r1, sp
     d76:	4620      	mov	r0, r4
     d78:	f7ff feb4 	bl	ae4 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d7c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     d80:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d82:	1eda      	subs	r2, r3, #3
     d84:	2a01      	cmp	r2, #1
     d86:	d80c      	bhi.n	da2 <FIH_LABEL_FIH_CALL_END_2026+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d88:	2000      	movs	r0, #0
     d8a:	f004 ffa0 	bl	5cce <swap_set_image_ok>
        if (rc != 0) {
     d8e:	4605      	mov	r5, r0
     d90:	2800      	cmp	r0, #0
     d92:	f47f af6c 	bne.w	c6e <context_boot_go+0x8a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d96:	2000      	movs	r0, #0
     d98:	f004 ff87 	bl	5caa <swap_set_copy_done>
            if (rc != 0) {
     d9c:	4605      	mov	r5, r0
     d9e:	b110      	cbz	r0, da6 <FIH_LABEL_FIH_CALL_END_2026+0x52>
     da0:	e765      	b.n	c6e <context_boot_go+0x8a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     da2:	2b02      	cmp	r3, #2
     da4:	d0f7      	beq.n	d96 <FIH_LABEL_FIH_CALL_END_2026+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     da6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     daa:	2bff      	cmp	r3, #255	; 0xff
     dac:	d104      	bne.n	db8 <FIH_LABEL_FIH_CALL_END_2026+0x64>
            BOOT_LOG_ERR("panic!");
     dae:	2145      	movs	r1, #69	; 0x45
     db0:	4822      	ldr	r0, [pc, #136]	; (e3c <FIH_LABEL_FIH_CALL_END_2277+0x54>)
     db2:	f005 f8cf 	bl	5f54 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     db6:	e7fe      	b.n	db6 <FIH_LABEL_FIH_CALL_END_2026+0x62>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     db8:	2b01      	cmp	r3, #1
     dba:	d010      	beq.n	dde <FIH_LABEL_FIH_CALL_START_2262>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     dbc:	466a      	mov	r2, sp
     dbe:	2100      	movs	r1, #0
     dc0:	4620      	mov	r0, r4
     dc2:	f004 fe1e 	bl	5a02 <boot_read_image_headers>
            if (rc != 0) {
     dc6:	4605      	mov	r5, r0
     dc8:	b148      	cbz	r0, dde <FIH_LABEL_FIH_CALL_START_2262>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     dcc:	f005 f8cf 	bl	5f6e <flash_area_close>
     dd0:	6a20      	ldr	r0, [r4, #32]
     dd2:	f005 f8cc 	bl	5f6e <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     dd6:	4628      	mov	r0, r5
     dd8:	b004      	add	sp, #16
     dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000dde <FIH_LABEL_FIH_CALL_START_2262>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     dde:	2100      	movs	r1, #0
     de0:	4620      	mov	r0, r4
     de2:	f7ff fe03 	bl	9ec <boot_validate_slot.isra.0>
     de6:	4607      	mov	r7, r0

00000de8 <FIH_LABEL_FIH_CALL_END_2277>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     de8:	f8df 8054 	ldr.w	r8, [pc, #84]	; e40 <FIH_LABEL_FIH_CALL_END_2277+0x58>
     dec:	f8d8 3000 	ldr.w	r3, [r8]
     df0:	4298      	cmp	r0, r3
     df2:	d10f      	bne.n	e14 <FIH_LABEL_FIH_CALL_END_2277+0x2c>
    memset(&bs, 0, sizeof(struct boot_status));
     df4:	2210      	movs	r2, #16
     df6:	2100      	movs	r1, #0
     df8:	4668      	mov	r0, sp
     dfa:	f005 fc36 	bl	666a <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     dfe:	6a20      	ldr	r0, [r4, #32]
     e00:	f004 fd32 	bl	5868 <flash_area_get_device_id>
     e04:	7130      	strb	r0, [r6, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     e06:	6a23      	ldr	r3, [r4, #32]
    fih_rc = FIH_SUCCESS;
     e08:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e0c:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     e0e:	6034      	str	r4, [r6, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e10:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     e12:	e7da      	b.n	dca <FIH_LABEL_FIH_CALL_END_2026+0x76>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e14:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e16:	f005 f8aa 	bl	5f6e <flash_area_close>
     e1a:	6a20      	ldr	r0, [r4, #32]
     e1c:	f005 f8a7 	bl	5f6e <flash_area_close>
    if (rc) {
     e20:	2d00      	cmp	r5, #0
     e22:	bf08      	it	eq
     e24:	463d      	moveq	r5, r7
     e26:	e7d6      	b.n	dd6 <FIH_LABEL_FIH_CALL_END_2026+0x82>
     e28:	2000cf20 	.word	0x2000cf20
     e2c:	2000c720 	.word	0x2000c720
     e30:	00008f84 	.word	0x00008f84
     e34:	00008f42 	.word	0x00008f42
     e38:	00008fb0 	.word	0x00008fb0
     e3c:	00008fda 	.word	0x00008fda
     e40:	2000c71c 	.word	0x2000c71c

00000e44 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e44:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e46:	4d06      	ldr	r5, [pc, #24]	; (e60 <FIH_LABEL_FIH_CALL_END_2900+0x4>)
{
     e48:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e4a:	2260      	movs	r2, #96	; 0x60
     e4c:	2100      	movs	r1, #0
     e4e:	4628      	mov	r0, r5
     e50:	f005 fc0b 	bl	666a <memset>

00000e54 <FIH_LABEL_FIH_CALL_START_2886>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e54:	4621      	mov	r1, r4
     e56:	4628      	mov	r0, r5
     e58:	f7ff fec4 	bl	be4 <context_boot_go>

00000e5c <FIH_LABEL_FIH_CALL_END_2900>:
}
     e5c:	bd38      	pop	{r3, r4, r5, pc}
     e5e:	bf00      	nop
     e60:	2000db20 	.word	0x2000db20

00000e64 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e66:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e68:	461d      	mov	r5, r3
     e6a:	b143      	cbz	r3, e7e <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e6c:	795b      	ldrb	r3, [r3, #5]
     e6e:	2b01      	cmp	r3, #1
     e70:	d107      	bne.n	e82 <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e72:	b921      	cbnz	r1, e7e <boot_read_image_header+0x1a>
     e74:	4b20      	ldr	r3, [pc, #128]	; (ef8 <boot_read_image_header+0x94>)
     e76:	682a      	ldr	r2, [r5, #0]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	429a      	cmp	r2, r3
     e7c:	d817      	bhi.n	eae <boot_read_image_header+0x4a>
    off = 0;
     e7e:	2400      	movs	r4, #0
     e80:	e018      	b.n	eb4 <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e82:	2b02      	cmp	r3, #2
     e84:	d1fb      	bne.n	e7e <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e86:	682b      	ldr	r3, [r5, #0]
     e88:	2b01      	cmp	r3, #1
     e8a:	d907      	bls.n	e9c <boot_read_image_header+0x38>
     e8c:	4a1a      	ldr	r2, [pc, #104]	; (ef8 <boot_read_image_header+0x94>)
     e8e:	6812      	ldr	r2, [r2, #0]
     e90:	4293      	cmp	r3, r2
     e92:	d8f4      	bhi.n	e7e <boot_read_image_header+0x1a>
                if (slot == 0) {
     e94:	fab1 f181 	clz	r1, r1
     e98:	0949      	lsrs	r1, r1, #5
     e9a:	e7f0      	b.n	e7e <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     e9c:	d1ef      	bne.n	e7e <boot_read_image_header+0x1a>
                if (slot == 0) {
     e9e:	b131      	cbz	r1, eae <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     ea0:	2901      	cmp	r1, #1
     ea2:	d1ec      	bne.n	e7e <boot_read_image_header+0x1a>
     ea4:	7929      	ldrb	r1, [r5, #4]
     ea6:	3902      	subs	r1, #2
     ea8:	bf18      	it	ne
     eaa:	2101      	movne	r1, #1
     eac:	e7e7      	b.n	e7e <boot_read_image_header+0x1a>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     eae:	2100      	movs	r1, #0
     eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
     eb2:	685c      	ldr	r4, [r3, #4]
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     eb4:	2000      	movs	r0, #0
     eb6:	f004 fcce 	bl	5856 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     eba:	a901      	add	r1, sp, #4
     ebc:	b2c0      	uxtb	r0, r0
     ebe:	f000 ff4f 	bl	1d60 <flash_area_open>
    if (rc != 0) {
     ec2:	b130      	cbz	r0, ed2 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     ec4:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     ec6:	9801      	ldr	r0, [sp, #4]
     ec8:	f005 f851 	bl	5f6e <flash_area_close>
    return rc;
}
     ecc:	4620      	mov	r0, r4
     ece:	b002      	add	sp, #8
     ed0:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     ed2:	4621      	mov	r1, r4
     ed4:	2320      	movs	r3, #32
     ed6:	4632      	mov	r2, r6
     ed8:	9801      	ldr	r0, [sp, #4]
     eda:	f005 f849 	bl	5f70 <flash_area_read>
    if (rc != 0) {
     ede:	4604      	mov	r4, r0
     ee0:	2800      	cmp	r0, #0
     ee2:	d1ef      	bne.n	ec4 <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ee4:	2d00      	cmp	r5, #0
     ee6:	d0ee      	beq.n	ec6 <boot_read_image_header+0x62>
     ee8:	6834      	ldr	r4, [r6, #0]
     eea:	4b04      	ldr	r3, [pc, #16]	; (efc <boot_read_image_header+0x98>)
     eec:	1ae4      	subs	r4, r4, r3
     eee:	bf18      	it	ne
     ef0:	f04f 34ff 	movne.w	r4, #4294967295
     ef4:	e7e7      	b.n	ec6 <boot_read_image_header+0x62>
     ef6:	bf00      	nop
     ef8:	2000c504 	.word	0x2000c504
     efc:	96f3b83d 	.word	0x96f3b83d

00000f00 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f04:	4607      	mov	r7, r0
     f06:	460c      	mov	r4, r1
     f08:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f0a:	4601      	mov	r1, r0
     f0c:	2000      	movs	r0, #0
{
     f0e:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f10:	f004 fd4a 	bl	59a8 <boot_status_entries>
    if (max_entries < 0) {
     f14:	1e05      	subs	r5, r0, #0
     f16:	db51      	blt.n	fbc <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f18:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f1a:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f1c:	f004 fd51 	bl	59c2 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f20:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f24:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f28:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f2c:	f04f 34ff 	mov.w	r4, #4294967295
     f30:	1e6b      	subs	r3, r5, #1
     f32:	fb09 0803 	mla	r8, r9, r3, r0
    for (i = max_entries; i > 0; i--) {
     f36:	b99d      	cbnz	r5, f60 <swap_read_status_bytes+0x60>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f38:	f1ba 0f01 	cmp.w	sl, #1
     f3c:	dd03      	ble.n	f46 <swap_read_status_bytes+0x46>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f3e:	2145      	movs	r1, #69	; 0x45
     f40:	4820      	ldr	r0, [pc, #128]	; (fc4 <swap_read_status_bytes+0xc4>)
     f42:	f005 f807 	bl	5f54 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f46:	1c63      	adds	r3, r4, #1
     f48:	d006      	beq.n	f58 <swap_read_status_bytes+0x58>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f4a:	2cff      	cmp	r4, #255	; 0xff
     f4c:	dc2a      	bgt.n	fa4 <swap_read_status_bytes+0xa4>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f4e:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f52:	3401      	adds	r4, #1
     f54:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f56:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f58:	4628      	mov	r0, r5
     f5a:	b005      	add	sp, #20
     f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f60:	1e6b      	subs	r3, r5, #1
     f62:	9300      	str	r3, [sp, #0]
     f64:	4641      	mov	r1, r8
     f66:	2301      	movs	r3, #1
     f68:	4638      	mov	r0, r7
     f6a:	f10d 020f 	add.w	r2, sp, #15
     f6e:	f004 ffff 	bl	5f70 <flash_area_read>
        if (rc < 0) {
     f72:	1e03      	subs	r3, r0, #0
     f74:	9301      	str	r3, [sp, #4]
     f76:	db23      	blt.n	fc0 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f78:	2201      	movs	r2, #1
     f7a:	4638      	mov	r0, r7
     f7c:	f10d 010f 	add.w	r1, sp, #15
     f80:	f005 fe7b 	bl	6c7a <bootutil_buffer_is_erased>
     f84:	9b01      	ldr	r3, [sp, #4]
     f86:	b140      	cbz	r0, f9a <swap_read_status_bytes+0x9a>
            if (rc != last_rc) {
     f88:	455b      	cmp	r3, fp
     f8a:	d001      	beq.n	f90 <swap_read_status_bytes+0x90>
                erased_sections++;
     f8c:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f90:	469b      	mov	fp, r3
     f92:	9d00      	ldr	r5, [sp, #0]
     f94:	eba8 0809 	sub.w	r8, r8, r9
     f98:	e7cd      	b.n	f36 <swap_read_status_bytes+0x36>
     f9a:	f1b4 3fff 	cmp.w	r4, #4294967295
     f9e:	bf08      	it	eq
     fa0:	462c      	moveq	r4, r5
     fa2:	e7f5      	b.n	f90 <swap_read_status_bytes+0x90>
        bs->op = BOOT_STATUS_OP_SWAP;
     fa4:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa6:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     faa:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fac:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fae:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fb2:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fb4:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fb6:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fb8:	7134      	strb	r4, [r6, #4]
     fba:	e7cd      	b.n	f58 <swap_read_status_bytes+0x58>
        return BOOT_EBADARGS;
     fbc:	2507      	movs	r5, #7
     fbe:	e7cb      	b.n	f58 <swap_read_status_bytes+0x58>
            return BOOT_EFLASH;
     fc0:	2501      	movs	r5, #1
     fc2:	e7c9      	b.n	f58 <swap_read_status_bytes+0x58>
     fc4:	00008fe6 	.word	0x00008fe6

00000fc8 <boot_slots_compatible>:
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     fc8:	6a81      	ldr	r1, [r0, #40]	; 0x28
     fca:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     fcc:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fce:	428a      	cmp	r2, r1
     fd0:	d008      	beq.n	fe4 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     fd2:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     fd4:	428b      	cmp	r3, r1
     fd6:	d005      	beq.n	fe4 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     fd8:	2157      	movs	r1, #87	; 0x57
     fda:	4814      	ldr	r0, [pc, #80]	; (102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>)
        return 0;
    }

    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fdc:	f004 ffba 	bl	5f54 <z_log_minimal_printk>
        return 0;
     fe0:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     fe2:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     fe4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     fe8:	d91c      	bls.n	1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fea:	2157      	movs	r1, #87	; 0x57
     fec:	4810      	ldr	r0, [pc, #64]	; (1030 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x30>)
     fee:	e7f5      	b.n	fdc <boot_slots_compatible+0x14>
     ff0:	6a44      	ldr	r4, [r0, #36]	; 0x24
     ff2:	6d05      	ldr	r5, [r0, #80]	; 0x50
     ff4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     ff8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     ffc:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ffe:	686d      	ldr	r5, [r5, #4]
    1000:	42ac      	cmp	r4, r5
    1002:	d002      	beq.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1004:	2157      	movs	r1, #87	; 0x57
    1006:	480b      	ldr	r0, [pc, #44]	; (1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>)
    1008:	e7e8      	b.n	fdc <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    100a:	3301      	adds	r3, #1
    100c:	429a      	cmp	r2, r3
    100e:	d1ef      	bne.n	ff0 <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
    1010:	4291      	cmp	r1, r2
    1012:	d905      	bls.n	1020 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x20>
    1014:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    101a:	685b      	ldr	r3, [r3, #4]
    101c:	42a3      	cmp	r3, r4
    101e:	d1f1      	bne.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
    return 1;
    1020:	2001      	movs	r0, #1
    1022:	e7de      	b.n	fe2 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    1024:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    1026:	461c      	mov	r4, r3
    1028:	e7f0      	b.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    102a:	bf00      	nop
    102c:	00009009 	.word	0x00009009
    1030:	00009041 	.word	0x00009041
    1034:	00009070 	.word	0x00009070

00001038 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1038:	b500      	push	{lr}
    103a:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    103c:	2002      	movs	r0, #2
    103e:	a904      	add	r1, sp, #16
    1040:	f005 fe8b 	bl	6d5a <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1044:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1048:	2a01      	cmp	r2, #1
    104a:	d041      	beq.n	10d0 <swap_status_source+0x98>
    104c:	4b25      	ldr	r3, [pc, #148]	; (10e4 <swap_status_source+0xac>)
    104e:	4926      	ldr	r1, [pc, #152]	; (10e8 <swap_status_source+0xb0>)
    1050:	2a03      	cmp	r2, #3
    1052:	bf08      	it	eq
    1054:	460b      	moveq	r3, r1
    1056:	f89d 2013 	ldrb.w	r2, [sp, #19]
    105a:	2149      	movs	r1, #73	; 0x49
    105c:	9202      	str	r2, [sp, #8]
    105e:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1062:	4822      	ldr	r0, [pc, #136]	; (10ec <swap_status_source+0xb4>)
    1064:	9201      	str	r2, [sp, #4]
    1066:	f89d 2011 	ldrb.w	r2, [sp, #17]
    106a:	9200      	str	r2, [sp, #0]
    106c:	4a20      	ldr	r2, [pc, #128]	; (10f0 <swap_status_source+0xb8>)
    106e:	f004 ff71 	bl	5f54 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1072:	2007      	movs	r0, #7
    1074:	a906      	add	r1, sp, #24
    1076:	f005 fe70 	bl	6d5a <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    107a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    107e:	2a01      	cmp	r2, #1
    1080:	d028      	beq.n	10d4 <swap_status_source+0x9c>
    1082:	4b18      	ldr	r3, [pc, #96]	; (10e4 <swap_status_source+0xac>)
    1084:	4918      	ldr	r1, [pc, #96]	; (10e8 <swap_status_source+0xb0>)
    1086:	2a03      	cmp	r2, #3
    1088:	bf08      	it	eq
    108a:	460b      	moveq	r3, r1
    108c:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1090:	2149      	movs	r1, #73	; 0x49
    1092:	9202      	str	r2, [sp, #8]
    1094:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1098:	4814      	ldr	r0, [pc, #80]	; (10ec <swap_status_source+0xb4>)
    109a:	9201      	str	r2, [sp, #4]
    109c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    10a0:	9200      	str	r2, [sp, #0]
    10a2:	4a14      	ldr	r2, [pc, #80]	; (10f4 <swap_status_source+0xbc>)
    10a4:	f004 ff56 	bl	5f54 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10ac:	2b01      	cmp	r3, #1
    10ae:	d113      	bne.n	10d8 <swap_status_source+0xa0>
    10b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
    10b4:	2b03      	cmp	r3, #3
    10b6:	d10f      	bne.n	10d8 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    10b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10bc:	2b01      	cmp	r3, #1
    10be:	d00b      	beq.n	10d8 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    10c0:	480d      	ldr	r0, [pc, #52]	; (10f8 <swap_status_source+0xc0>)
    10c2:	2149      	movs	r1, #73	; 0x49
    10c4:	f004 ff46 	bl	5f54 <z_log_minimal_printk>
        return source;
    10c8:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    10ca:	b009      	add	sp, #36	; 0x24
    10cc:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <swap_status_source+0xc4>)
    10d2:	e7c0      	b.n	1056 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10d4:	4b09      	ldr	r3, [pc, #36]	; (10fc <swap_status_source+0xc4>)
    10d6:	e7d9      	b.n	108c <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    10d8:	4809      	ldr	r0, [pc, #36]	; (1100 <swap_status_source+0xc8>)
    10da:	2149      	movs	r1, #73	; 0x49
    10dc:	f004 ff3a 	bl	5f54 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    10e0:	2000      	movs	r0, #0
    10e2:	e7f2      	b.n	10ca <swap_status_source+0x92>
    10e4:	0000909c 	.word	0x0000909c
    10e8:	000090a5 	.word	0x000090a5
    10ec:	000090b9 	.word	0x000090b9
    10f0:	000090ab 	.word	0x000090ab
    10f4:	000090fa 	.word	0x000090fa
    10f8:	0000910a 	.word	0x0000910a
    10fc:	000090a0 	.word	0x000090a0
    1100:	00009129 	.word	0x00009129

00001104 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1104:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1106:	684b      	ldr	r3, [r1, #4]
{
    1108:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    110a:	4a1e      	ldr	r2, [pc, #120]	; (1184 <fixup_revert+0x80>)
    110c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1110:	4293      	cmp	r3, r2
{
    1112:	4606      	mov	r6, r0
    1114:	460d      	mov	r5, r1
    1116:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1118:	d12f      	bne.n	117a <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    111a:	680b      	ldr	r3, [r1, #0]
    111c:	2b01      	cmp	r3, #1
    111e:	d12c      	bne.n	117a <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1120:	4620      	mov	r0, r4
    1122:	a904      	add	r1, sp, #16
    1124:	f002 ff46 	bl	3fb4 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1128:	f89d 2010 	ldrb.w	r2, [sp, #16]
    112c:	2a01      	cmp	r2, #1
    112e:	d026      	beq.n	117e <fixup_revert+0x7a>
    1130:	4b15      	ldr	r3, [pc, #84]	; (1188 <fixup_revert+0x84>)
    1132:	4916      	ldr	r1, [pc, #88]	; (118c <fixup_revert+0x88>)
    1134:	2a03      	cmp	r2, #3
    1136:	bf08      	it	eq
    1138:	460b      	moveq	r3, r1
    113a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    113e:	2149      	movs	r1, #73	; 0x49
    1140:	9202      	str	r2, [sp, #8]
    1142:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1146:	4812      	ldr	r0, [pc, #72]	; (1190 <fixup_revert+0x8c>)
    1148:	9201      	str	r2, [sp, #4]
    114a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    114e:	9200      	str	r2, [sp, #0]
    1150:	4a10      	ldr	r2, [pc, #64]	; (1194 <fixup_revert+0x90>)
    1152:	f004 feff 	bl	5f54 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1156:	f89d 3010 	ldrb.w	r3, [sp, #16]
    115a:	2b03      	cmp	r3, #3
    115c:	d10d      	bne.n	117a <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    115e:	4621      	mov	r1, r4
    1160:	4630      	mov	r0, r6
    1162:	f004 fd11 	bl	5b88 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    1166:	4620      	mov	r0, r4
    1168:	f005 fdee 	bl	6d48 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    116c:	4620      	mov	r0, r4
    116e:	68a9      	ldr	r1, [r5, #8]
    1170:	f004 fc38 	bl	59e4 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1174:	4620      	mov	r0, r4
    1176:	f002 ff0f 	bl	3f98 <boot_write_magic>
        assert(rc == 0);
    }
}
    117a:	b006      	add	sp, #24
    117c:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    117e:	4b06      	ldr	r3, [pc, #24]	; (1198 <fixup_revert+0x94>)
    1180:	e7db      	b.n	113a <fixup_revert+0x36>
    1182:	bf00      	nop
    1184:	04000100 	.word	0x04000100
    1188:	0000909c 	.word	0x0000909c
    118c:	000090a5 	.word	0x000090a5
    1190:	000090b9 	.word	0x000090b9
    1194:	000090fa 	.word	0x000090fa
    1198:	000090a0 	.word	0x000090a0

0000119c <swap_run>:
    119c:	6a43      	ldr	r3, [r0, #36]	; 0x24

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    119e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11a2:	460c      	mov	r4, r1
    11a4:	685e      	ldr	r6, [r3, #4]
    11a6:	4605      	mov	r5, r0
    11a8:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    11aa:	2300      	movs	r3, #0
{
    11ac:	b089      	sub	sp, #36	; 0x24
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11ae:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    11b0:	429a      	cmp	r2, r3
    11b2:	4608      	mov	r0, r1
    11b4:	f101 0101 	add.w	r1, r1, #1
    11b8:	d8f9      	bhi.n	11ae <swap_run+0x12>
    11ba:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 137c <swap_run+0x1e0>
    11be:	f8c8 0000 	str.w	r0, [r8]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    11c2:	4620      	mov	r0, r4
    11c4:	f004 fc9f 	bl	5b06 <boot_status_is_reset>
    11c8:	b1b8      	cbz	r0, 11fa <swap_run+0x5e>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    11ca:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    11cc:	f004 fbe7 	bl	599e <boot_trailer_sz>
        sz = 0;
    11d0:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    11d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    11d4:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    11d6:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    11d8:	4290      	cmp	r0, r2
    11da:	d901      	bls.n	11e0 <swap_run+0x44>
                break;
            }
            first_trailer_idx--;
    11dc:	3b01      	subs	r3, #1
            sz += sector_sz;
    11de:	e7fa      	b.n	11d6 <swap_run+0x3a>
        }

        if (g_last_idx >= first_trailer_idx) {
    11e0:	f8d8 2000 	ldr.w	r2, [r8]
    11e4:	429a      	cmp	r2, r3
    11e6:	d308      	bcc.n	11fa <swap_run+0x5e>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    11e8:	2157      	movs	r1, #87	; 0x57
    11ea:	4865      	ldr	r0, [pc, #404]	; (1380 <swap_run+0x1e4>)
    11ec:	f004 feb2 	bl	5f54 <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    11f0:	2301      	movs	r3, #1
    11f2:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    11f4:	b009      	add	sp, #36	; 0x24
    11f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    11fa:	a906      	add	r1, sp, #24
    11fc:	2002      	movs	r0, #2
    11fe:	f000 fdaf 	bl	1d60 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1202:	a907      	add	r1, sp, #28
    1204:	2007      	movs	r0, #7
    1206:	f000 fdab 	bl	1d60 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    120a:	4621      	mov	r1, r4
    120c:	4628      	mov	r0, r5
    120e:	9a07      	ldr	r2, [sp, #28]
    1210:	f7ff ff78 	bl	1104 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1214:	7963      	ldrb	r3, [r4, #5]
    1216:	2b01      	cmp	r3, #1
    1218:	d10a      	bne.n	1230 <swap_run+0x94>
        idx = g_last_idx;
    121a:	f8d8 7000 	ldr.w	r7, [r8]
    BOOT_STATUS_ASSERT(rc == 0);
    121e:	f8df b164 	ldr.w	fp, [pc, #356]	; 1384 <swap_run+0x1e8>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1222:	f8d8 3000 	ldr.w	r3, [r8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1226:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
    122a:	b98f      	cbnz	r7, 1250 <swap_run+0xb4>
        bs->idx = BOOT_STATUS_IDX_0;
    122c:	2301      	movs	r3, #1
    122e:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1230:	2302      	movs	r3, #2
    idx = 1;
    1232:	2701      	movs	r7, #1
    bs->op = BOOT_STATUS_OP_SWAP;
    1234:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    1236:	f8d8 3000 	ldr.w	r3, [r8]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    123a:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    123e:	429f      	cmp	r7, r3
    1240:	d948      	bls.n	12d4 <swap_run+0x138>
    flash_area_close(fap_pri);
    1242:	4650      	mov	r0, sl
    1244:	f004 fe93 	bl	5f6e <flash_area_close>
    flash_area_close(fap_sec);
    1248:	9807      	ldr	r0, [sp, #28]
    124a:	f004 fe90 	bl	5f6e <flash_area_close>
    124e:	e7d1      	b.n	11f4 <swap_run+0x58>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1250:	6822      	ldr	r2, [r4, #0]
    1252:	3301      	adds	r3, #1
    1254:	1a9b      	subs	r3, r3, r2
    1256:	429f      	cmp	r7, r3
    1258:	d83a      	bhi.n	12d0 <swap_run+0x134>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    125a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    125c:	2a01      	cmp	r2, #1
	return fs->fs_off;
    125e:	6819      	ldr	r1, [r3, #0]
    1260:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1264:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1268:	f853 3c08 	ldr.w	r3, [r3, #-8]
    126c:	eba0 0a01 	sub.w	sl, r0, r1
    1270:	eba3 0301 	sub.w	r3, r3, r1
    1274:	9304      	str	r3, [sp, #16]
    1276:	d111      	bne.n	129c <swap_run+0x100>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1278:	9b07      	ldr	r3, [sp, #28]
    127a:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    127c:	68e3      	ldr	r3, [r4, #12]
    127e:	2b02      	cmp	r3, #2
    1280:	d008      	beq.n	1294 <swap_run+0xf8>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    1282:	4649      	mov	r1, r9
    1284:	4628      	mov	r0, r5
    1286:	f004 fc7f 	bl	5b88 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    128a:	4622      	mov	r2, r4
    128c:	4649      	mov	r1, r9
    128e:	4628      	mov	r0, r5
    1290:	f004 fcb0 	bl	5bf4 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1294:	4628      	mov	r0, r5
    1296:	9903      	ldr	r1, [sp, #12]
    1298:	f004 fc76 	bl	5b88 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    129c:	4632      	mov	r2, r6
    129e:	4651      	mov	r1, sl
    12a0:	4648      	mov	r0, r9
    12a2:	f004 fc6f 	bl	5b84 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12a6:	9b04      	ldr	r3, [sp, #16]
    12a8:	464a      	mov	r2, r9
    12aa:	4649      	mov	r1, r9
    12ac:	4628      	mov	r0, r5
    12ae:	e9cd a600 	strd	sl, r6, [sp]
    12b2:	f7ff fc55 	bl	b60 <boot_copy_region>
    rc = boot_write_status(state, bs);
    12b6:	4621      	mov	r1, r4
    12b8:	4628      	mov	r0, r5
    12ba:	f004 fc31 	bl	5b20 <boot_write_status>
    bs->idx++;
    12be:	6823      	ldr	r3, [r4, #0]
    12c0:	3301      	adds	r3, #1
    12c2:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    12c4:	b120      	cbz	r0, 12d0 <swap_run+0x134>
    12c6:	f8db 3000 	ldr.w	r3, [fp]
    12ca:	3301      	adds	r3, #1
    12cc:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    12d0:	3f01      	subs	r7, #1
    12d2:	e7a6      	b.n	1222 <swap_run+0x86>
        if (idx >= bs->idx) {
    12d4:	6823      	ldr	r3, [r4, #0]
    12d6:	429f      	cmp	r7, r3
    12d8:	d34d      	bcc.n	1376 <swap_run+0x1da>
    12da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12dc:	00fb      	lsls	r3, r7, #3
    12de:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    12e2:	3b08      	subs	r3, #8
    12e4:	9104      	str	r1, [sp, #16]
    12e6:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
    12ec:	9103      	str	r1, [sp, #12]
    12ee:	58d1      	ldr	r1, [r2, r3]
    12f0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    12f2:	58d0      	ldr	r0, [r2, r3]
    12f4:	6813      	ldr	r3, [r2, #0]
    12f6:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    12fa:	7923      	ldrb	r3, [r4, #4]
    12fc:	2b01      	cmp	r3, #1
    12fe:	d138      	bne.n	1372 <swap_run+0x1d6>
    1300:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1302:	4632      	mov	r2, r6
    1304:	1ac9      	subs	r1, r1, r3
    1306:	4650      	mov	r0, sl
    1308:	9105      	str	r1, [sp, #20]
    130a:	f004 fc3b 	bl	5b84 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    130e:	9905      	ldr	r1, [sp, #20]
    1310:	464b      	mov	r3, r9
    1312:	4652      	mov	r2, sl
    1314:	9100      	str	r1, [sp, #0]
    1316:	4628      	mov	r0, r5
    1318:	4659      	mov	r1, fp
    131a:	9601      	str	r6, [sp, #4]
    131c:	f7ff fc20 	bl	b60 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1320:	4621      	mov	r1, r4
    1322:	4628      	mov	r0, r5
    1324:	f004 fbfc 	bl	5b20 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1328:	2302      	movs	r3, #2
    132a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    132c:	b118      	cbz	r0, 1336 <swap_run+0x19a>
    132e:	4a15      	ldr	r2, [pc, #84]	; (1384 <swap_run+0x1e8>)
    1330:	6813      	ldr	r3, [r2, #0]
    1332:	3301      	adds	r3, #1
    1334:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    1336:	4632      	mov	r2, r6
    1338:	4649      	mov	r1, r9
    133a:	4658      	mov	r0, fp
    133c:	f004 fc22 	bl	5b84 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1340:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    1344:	4651      	mov	r1, sl
    1346:	1a9b      	subs	r3, r3, r2
    1348:	4628      	mov	r0, r5
    134a:	465a      	mov	r2, fp
    134c:	e9cd 9600 	strd	r9, r6, [sp]
    1350:	f7ff fc06 	bl	b60 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1354:	4621      	mov	r1, r4
    1356:	4628      	mov	r0, r5
    1358:	f004 fbe2 	bl	5b20 <boot_write_status>
        bs->idx++;
    135c:	6823      	ldr	r3, [r4, #0]
    135e:	3301      	adds	r3, #1
    1360:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1362:	2301      	movs	r3, #1
    1364:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1366:	b130      	cbz	r0, 1376 <swap_run+0x1da>
    1368:	4a06      	ldr	r2, [pc, #24]	; (1384 <swap_run+0x1e8>)
    136a:	6813      	ldr	r3, [r2, #0]
    136c:	3301      	adds	r3, #1
    136e:	6013      	str	r3, [r2, #0]
    1370:	e001      	b.n	1376 <swap_run+0x1da>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1372:	2b02      	cmp	r3, #2
    1374:	d0df      	beq.n	1336 <swap_run+0x19a>
        idx++;
    1376:	3701      	adds	r7, #1
    1378:	e75d      	b.n	1236 <swap_run+0x9a>
    137a:	bf00      	nop
    137c:	2000c504 	.word	0x2000c504
    1380:	00009140 	.word	0x00009140
    1384:	2000db80 	.word	0x2000db80

00001388 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1388:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    138a:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    138c:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1390:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1392:	4b1a      	ldr	r3, [pc, #104]	; (13fc <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1394:	4629      	mov	r1, r5
    1396:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1398:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    139c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    13a4:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    13a6:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    13aa:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    13ae:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    13b2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    13b6:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    13b8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    13bc:	4810      	ldr	r0, [pc, #64]	; (1400 <nrf_cleanup_peripheral+0x78>)
    13be:	f005 f954 	bl	666a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    13c2:	2280      	movs	r2, #128	; 0x80
    13c4:	4629      	mov	r1, r5
    13c6:	480f      	ldr	r0, [pc, #60]	; (1404 <nrf_cleanup_peripheral+0x7c>)
    13c8:	f005 f94f 	bl	666a <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13cc:	4b0e      	ldr	r3, [pc, #56]	; (1408 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    13ce:	2280      	movs	r2, #128	; 0x80
    13d0:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    13d4:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    13d6:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    13da:	480c      	ldr	r0, [pc, #48]	; (140c <nrf_cleanup_peripheral+0x84>)
    13dc:	f005 f945 	bl	666a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    13e0:	2280      	movs	r2, #128	; 0x80
    13e2:	4629      	mov	r1, r5
    13e4:	480a      	ldr	r0, [pc, #40]	; (1410 <nrf_cleanup_peripheral+0x88>)
    13e6:	f005 f940 	bl	666a <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    13ea:	4b0a      	ldr	r3, [pc, #40]	; (1414 <nrf_cleanup_peripheral+0x8c>)
    13ec:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    13f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    13f4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    13f8:	bd38      	pop	{r3, r4, r5, pc}
    13fa:	bf00      	nop
    13fc:	50014000 	.word	0x50014000
    1400:	50008080 	.word	0x50008080
    1404:	50008180 	.word	0x50008180
    1408:	50009000 	.word	0x50009000
    140c:	50009080 	.word	0x50009080
    1410:	50009180 	.word	0x50009180
    1414:	50017000 	.word	0x50017000

00001418 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    141c:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    141e:	b915      	cbnz	r5, 1426 <base64_encode+0xe>
		*olen = 0;
    1420:	6015      	str	r5, [r2, #0]
		return 0;
    1422:	2000      	movs	r0, #0
    1424:	e012      	b.n	144c <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    1426:	2403      	movs	r4, #3
    1428:	fbb5 f4f4 	udiv	r4, r5, r4
    142c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1430:	42bd      	cmp	r5, r7
    1432:	bf18      	it	ne
    1434:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1436:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    143a:	d209      	bcs.n	1450 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    143c:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    143e:	3401      	adds	r4, #1
    1440:	428c      	cmp	r4, r1
    1442:	d800      	bhi.n	1446 <base64_encode+0x2e>
    1444:	b938      	cbnz	r0, 1456 <base64_encode+0x3e>
		return -ENOMEM;
    1446:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    144a:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    144c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1450:	f04f 34ff 	mov.w	r4, #4294967295
    1454:	e7f7      	b.n	1446 <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    1456:	4604      	mov	r4, r0
    1458:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    145a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1510 <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    145e:	42b9      	cmp	r1, r7
    1460:	f103 0c03 	add.w	ip, r3, #3
    1464:	f104 0604 	add.w	r6, r4, #4
    1468:	d32b      	bcc.n	14c2 <base64_encode+0xaa>
	if (i < slen) {
    146a:	42a9      	cmp	r1, r5
    146c:	4627      	mov	r7, r4
    146e:	d223      	bcs.n	14b8 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1470:	f101 0c01 	add.w	ip, r1, #1
    1474:	45ac      	cmp	ip, r5
		C1 = *src++;
    1476:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1478:	bf28      	it	cs
    147a:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    147c:	4924      	ldr	r1, [pc, #144]	; (1510 <base64_encode+0xf8>)
    147e:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1482:	bf38      	it	cc
    1484:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1486:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    148a:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    148c:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1490:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    1494:	bf2e      	itee	cs
    1496:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    1498:	009b      	lslcc	r3, r3, #2
    149a:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    149e:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    14a2:	bf38      	it	cc
    14a4:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14a6:	f007 0730 	and.w	r7, r7, #48	; 0x30
    14aa:	f81e 7007 	ldrb.w	r7, [lr, r7]
    14ae:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    14b0:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14b2:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    14b4:	4637      	mov	r7, r6
    14b6:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    14b8:	2300      	movs	r3, #0
	*olen = p - dst;
    14ba:	1a38      	subs	r0, r7, r0
    14bc:	6010      	str	r0, [r2, #0]
	*p = 0U;
    14be:	703b      	strb	r3, [r7, #0]
	return 0;
    14c0:	e7af      	b.n	1422 <base64_encode+0xa>
		C1 = *src++;
    14c2:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    14c6:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14ca:	ea4f 09a4 	mov.w	r9, r4, asr #2
    14ce:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14d2:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    14d4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14d8:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14dc:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14e0:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    14e4:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    14e8:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14ea:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    14ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    14f2:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    14f6:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    14f8:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    14fc:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    1500:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    1504:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    1506:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    150a:	3103      	adds	r1, #3
    150c:	4663      	mov	r3, ip
    150e:	e7a6      	b.n	145e <base64_encode+0x46>
    1510:	000092fd 	.word	0x000092fd

00001514 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    1518:	2700      	movs	r7, #0
    151a:	463c      	mov	r4, r7
    151c:	463d      	mov	r5, r7
{
    151e:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1522:	f8df 8128 	ldr.w	r8, [pc, #296]	; 164c <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    1526:	4575      	cmp	r5, lr
    1528:	d31f      	bcc.n	156a <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    152a:	bbe4      	cbnz	r4, 15a6 <base64_decode+0x92>
		*olen = 0;
		return 0;
    152c:	2000      	movs	r0, #0
		*olen = 0;
    152e:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    1534:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    1536:	4576      	cmp	r6, lr
    1538:	d033      	beq.n	15a2 <base64_decode+0x8e>
    153a:	f813 c006 	ldrb.w	ip, [r3, r6]
    153e:	f1bc 0f20 	cmp.w	ip, #32
    1542:	d0f7      	beq.n	1534 <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1544:	ebae 0906 	sub.w	r9, lr, r6
    1548:	f1b9 0f01 	cmp.w	r9, #1
    154c:	eba6 0505 	sub.w	r5, r6, r5
    1550:	d00d      	beq.n	156e <base64_decode+0x5a>
    1552:	f1bc 0f0d 	cmp.w	ip, #13
    1556:	d10a      	bne.n	156e <base64_decode+0x5a>
    1558:	eb03 0906 	add.w	r9, r3, r6
    155c:	f899 9001 	ldrb.w	r9, [r9, #1]
    1560:	f1b9 0f0a 	cmp.w	r9, #10
    1564:	d16e      	bne.n	1644 <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    1566:	1c75      	adds	r5, r6, #1
    1568:	e7dd      	b.n	1526 <base64_decode+0x12>
    156a:	462e      	mov	r6, r5
    156c:	e7e3      	b.n	1536 <base64_decode+0x22>
		if (src[i] == '\n') {
    156e:	f1bc 0f0a 	cmp.w	ip, #10
    1572:	d0f8      	beq.n	1566 <base64_decode+0x52>
		if (x != 0U) {
    1574:	b92d      	cbnz	r5, 1582 <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    1576:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    157a:	d105      	bne.n	1588 <base64_decode+0x74>
    157c:	3701      	adds	r7, #1
    157e:	2f02      	cmp	r7, #2
    1580:	d90d      	bls.n	159e <base64_decode+0x8a>
			return -EINVAL;
    1582:	f06f 0015 	mvn.w	r0, #21
    1586:	e7d3      	b.n	1530 <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1588:	f01c 0f80 	tst.w	ip, #128	; 0x80
    158c:	d1f9      	bne.n	1582 <base64_decode+0x6e>
    158e:	f818 500c 	ldrb.w	r5, [r8, ip]
    1592:	2d7f      	cmp	r5, #127	; 0x7f
    1594:	d0f5      	beq.n	1582 <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    1596:	2d3f      	cmp	r5, #63	; 0x3f
    1598:	d801      	bhi.n	159e <base64_decode+0x8a>
    159a:	2f00      	cmp	r7, #0
    159c:	d1f1      	bne.n	1582 <base64_decode+0x6e>
		n++;
    159e:	3401      	adds	r4, #1
    15a0:	e7e1      	b.n	1566 <base64_decode+0x52>
    15a2:	4635      	mov	r5, r6
    15a4:	e7c1      	b.n	152a <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    15a6:	f04f 0c06 	mov.w	ip, #6
    15aa:	f004 0607 	and.w	r6, r4, #7
    15ae:	08e4      	lsrs	r4, r4, #3
    15b0:	fb0c f606 	mul.w	r6, ip, r6
    15b4:	fb0c f404 	mul.w	r4, ip, r4
    15b8:	3607      	adds	r6, #7
	n -= j;
    15ba:	1be4      	subs	r4, r4, r7
    15bc:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    15c0:	b170      	cbz	r0, 15e0 <base64_decode+0xcc>
    15c2:	428c      	cmp	r4, r1
    15c4:	d80c      	bhi.n	15e0 <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    15c6:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    15c8:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    15ca:	2603      	movs	r6, #3
    15cc:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    15ce:	f8df e07c 	ldr.w	lr, [pc, #124]	; 164c <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    15d2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1650 <base64_decode+0x13c>
    15d6:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    15d8:	429d      	cmp	r5, r3
    15da:	d105      	bne.n	15e8 <base64_decode+0xd4>
	*olen = p - dst;
    15dc:	1a0c      	subs	r4, r1, r0
	return 0;
    15de:	e7a5      	b.n	152c <base64_decode+0x18>
		return -ENOMEM;
    15e0:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    15e4:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    15e6:	e7a3      	b.n	1530 <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    15e8:	f813 9b01 	ldrb.w	r9, [r3], #1
    15ec:	f1a9 0c0a 	sub.w	ip, r9, #10
    15f0:	fa5f fc8c 	uxtb.w	ip, ip
    15f4:	f1bc 0f16 	cmp.w	ip, #22
    15f8:	d804      	bhi.n	1604 <base64_decode+0xf0>
    15fa:	fa48 fc0c 	asr.w	ip, r8, ip
    15fe:	f01c 0f01 	tst.w	ip, #1
    1602:	d0e9      	beq.n	15d8 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    1604:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    1608:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    160a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    160e:	bf08      	it	eq
    1610:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1612:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    1616:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1618:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    161c:	d1dc      	bne.n	15d8 <base64_decode+0xc4>
			if (j > 0) {
    161e:	b17e      	cbz	r6, 1640 <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    1620:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    1622:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    1624:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    1626:	d102      	bne.n	162e <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    1628:	3101      	adds	r1, #1
			n = 0;
    162a:	2400      	movs	r4, #0
    162c:	e7d4      	b.n	15d8 <base64_decode+0xc4>
			if (j > 2) {
    162e:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    1630:	ea4f 2417 	mov.w	r4, r7, lsr #8
    1634:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    1636:	bf16      	itet	ne
    1638:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    163a:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    163c:	3103      	addne	r1, #3
    163e:	e7f4      	b.n	162a <base64_decode+0x116>
			n = 0;
    1640:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1642:	e7c9      	b.n	15d8 <base64_decode+0xc4>
		if (x != 0U) {
    1644:	2d00      	cmp	r5, #0
    1646:	d0a2      	beq.n	158e <base64_decode+0x7a>
    1648:	e79b      	b.n	1582 <base64_decode+0x6e>
    164a:	bf00      	nop
    164c:	0000927d 	.word	0x0000927d
    1650:	ffbffff6 	.word	0xffbffff6

00001654 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1654:	680b      	ldr	r3, [r1, #0]
    1656:	3301      	adds	r3, #1
    1658:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    165a:	4b01      	ldr	r3, [pc, #4]	; (1660 <char_out+0xc>)
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	4718      	bx	r3
    1660:	2000c508 	.word	0x2000c508

00001664 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1664:	b507      	push	{r0, r1, r2, lr}
    1666:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1668:	2100      	movs	r1, #0
{
    166a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    166c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    166e:	4803      	ldr	r0, [pc, #12]	; (167c <vprintk+0x18>)
    1670:	a901      	add	r1, sp, #4
    1672:	f000 f913 	bl	189c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1676:	b003      	add	sp, #12
    1678:	f85d fb04 	ldr.w	pc, [sp], #4
    167c:	00001655 	.word	0x00001655

00001680 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1684:	8b05      	ldrh	r5, [r0, #24]
{
    1686:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1688:	0728      	lsls	r0, r5, #28
{
    168a:	4690      	mov	r8, r2
	if (processing) {
    168c:	d411      	bmi.n	16b2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    168e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1690:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1694:	f040 80cd 	bne.w	1832 <process_event+0x1b2>
			evt = process_recheck(mgr);
    1698:	4620      	mov	r0, r4
    169a:	f004 fb9f 	bl	5ddc <process_recheck>
		}

		if (evt == EVT_NOP) {
    169e:	b178      	cbz	r0, 16c0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    16a0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16a2:	8b21      	ldrh	r1, [r4, #24]
    16a4:	2804      	cmp	r0, #4
    16a6:	d811      	bhi.n	16cc <process_event+0x4c>
    16a8:	e8df f000 	tbb	[pc, r0]
    16ac:	856d10c3 	.word	0x856d10c3
    16b0:	95          	.byte	0x95
    16b1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    16b2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    16b4:	bf0c      	ite	eq
    16b6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16ba:	f045 0520 	orrne.w	r5, r5, #32
    16be:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    16c0:	f388 8811 	msr	BASEPRI, r8
    16c4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    16c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    16d0:	45aa      	cmp	sl, r5
    16d2:	f000 80a6 	beq.w	1822 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    16d6:	2700      	movs	r7, #0
    16d8:	46b9      	mov	r9, r7
    16da:	463e      	mov	r6, r7
    16dc:	68a3      	ldr	r3, [r4, #8]
    16de:	2b00      	cmp	r3, #0
    16e0:	f000 80bd 	beq.w	185e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    16e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    16e8:	8321      	strh	r1, [r4, #24]
    16ea:	f388 8811 	msr	BASEPRI, r8
    16ee:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    16f2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16f4:	2900      	cmp	r1, #0
    16f6:	f000 80bb 	beq.w	1870 <process_event+0x1f0>
	return node->next;
    16fa:	680d      	ldr	r5, [r1, #0]
    16fc:	2900      	cmp	r1, #0
    16fe:	f000 80b7 	beq.w	1870 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1702:	4633      	mov	r3, r6
    1704:	4652      	mov	r2, sl
    1706:	4620      	mov	r0, r4
    1708:	f8d1 8004 	ldr.w	r8, [r1, #4]
    170c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    170e:	2d00      	cmp	r5, #0
    1710:	d076      	beq.n	1800 <process_event+0x180>
    1712:	682b      	ldr	r3, [r5, #0]
    1714:	4629      	mov	r1, r5
    1716:	461d      	mov	r5, r3
    1718:	e7f0      	b.n	16fc <process_event+0x7c>
    171a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    171e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1720:	2a01      	cmp	r2, #1
    1722:	d81b      	bhi.n	175c <process_event+0xdc>
	list->head = NULL;
    1724:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1726:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    172a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    172c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172e:	b289      	uxth	r1, r1
	list->tail = NULL;
    1730:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1734:	d109      	bne.n	174a <process_event+0xca>
    1736:	463b      	mov	r3, r7
    1738:	e003      	b.n	1742 <process_event+0xc2>
				mgr->refs += 1U;
    173a:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	3201      	adds	r2, #1
    1740:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1742:	2b00      	cmp	r3, #0
    1744:	d1f9      	bne.n	173a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1746:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    174a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    174c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    174e:	f004 fb45 	bl	5ddc <process_recheck>
    1752:	2800      	cmp	r0, #0
    1754:	d07b      	beq.n	184e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1756:	f041 0120 	orr.w	r1, r1, #32
    175a:	e077      	b.n	184c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    175c:	2b04      	cmp	r3, #4
    175e:	d10a      	bne.n	1776 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1760:	f021 0107 	bic.w	r1, r1, #7
    1764:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1766:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1768:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    176a:	f004 fb37 	bl	5ddc <process_recheck>
    176e:	b110      	cbz	r0, 1776 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1770:	f041 0120 	orr.w	r1, r1, #32
    1774:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1776:	8b21      	ldrh	r1, [r4, #24]
    1778:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    177c:	45aa      	cmp	sl, r5
    177e:	d050      	beq.n	1822 <process_event+0x1a2>
    1780:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1782:	46b9      	mov	r9, r7
    1784:	e7aa      	b.n	16dc <process_event+0x5c>
			transit = mgr->transitions->start;
    1786:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1788:	f021 0107 	bic.w	r1, r1, #7
    178c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1790:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1792:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1796:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1798:	d12d      	bne.n	17f6 <process_event+0x176>
		    || (transit != NULL)) {
    179a:	f1b9 0f00 	cmp.w	r9, #0
    179e:	d040      	beq.n	1822 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17a0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17a4:	8321      	strh	r1, [r4, #24]
    17a6:	f388 8811 	msr	BASEPRI, r8
    17aa:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    17ae:	4620      	mov	r0, r4
    17b0:	4939      	ldr	r1, [pc, #228]	; (1898 <process_event+0x218>)
    17b2:	47c8      	blx	r9
    17b4:	e029      	b.n	180a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17b6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    17ba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17bc:	f041 0104 	orr.w	r1, r1, #4
    17c0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    17c2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    17c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17c8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17ca:	d0e6      	beq.n	179a <process_event+0x11a>
    17cc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17ce:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    17d2:	463e      	mov	r6, r7
    17d4:	e782      	b.n	16dc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    17da:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17dc:	f041 0105 	orr.w	r1, r1, #5
    17e0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    17e2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    17e4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17e8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17ea:	d0d6      	beq.n	179a <process_event+0x11a>
    17ec:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17ee:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    17f2:	463e      	mov	r6, r7
    17f4:	e772      	b.n	16dc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    17f6:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17f8:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    17fc:	463e      	mov	r6, r7
    17fe:	e76d      	b.n	16dc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1800:	462b      	mov	r3, r5
    1802:	e787      	b.n	1714 <process_event+0x94>
			if (transit != NULL) {
    1804:	f1b9 0f00 	cmp.w	r9, #0
    1808:	d1d1      	bne.n	17ae <process_event+0x12e>
	__asm__ volatile(
    180a:	f04f 0320 	mov.w	r3, #32
    180e:	f3ef 8811 	mrs	r8, BASEPRI
    1812:	f383 8812 	msr	BASEPRI_MAX, r3
    1816:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    181a:	8b23      	ldrh	r3, [r4, #24]
    181c:	f023 0308 	bic.w	r3, r3, #8
    1820:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1822:	8b25      	ldrh	r5, [r4, #24]
    1824:	06ea      	lsls	r2, r5, #27
    1826:	d52e      	bpl.n	1886 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1828:	f025 0310 	bic.w	r3, r5, #16
    182c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    182e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1832:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1834:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1836:	2e00      	cmp	r6, #0
    1838:	f6bf af6f 	bge.w	171a <process_event+0x9a>
	list->head = NULL;
    183c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    183e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1840:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1844:	f021 0107 	bic.w	r1, r1, #7
    1848:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    184c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    184e:	8b21      	ldrh	r1, [r4, #24]
    1850:	f04f 0900 	mov.w	r9, #0
    1854:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1858:	45aa      	cmp	sl, r5
    185a:	f47f af3f 	bne.w	16dc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    185e:	2f00      	cmp	r7, #0
    1860:	d09b      	beq.n	179a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1862:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1866:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1868:	f388 8811 	msr	BASEPRI, r8
    186c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1870:	2f00      	cmp	r7, #0
    1872:	d0c7      	beq.n	1804 <process_event+0x184>
	return node->next;
    1874:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1876:	4639      	mov	r1, r7
    1878:	4633      	mov	r3, r6
    187a:	4652      	mov	r2, sl
    187c:	4620      	mov	r0, r4
    187e:	f004 fad9 	bl	5e34 <notify_one>
	list->head = node;
    1882:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1884:	e7f4      	b.n	1870 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1886:	06ab      	lsls	r3, r5, #26
    1888:	f57f af1a 	bpl.w	16c0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    188c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1890:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1892:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1896:	e6ff      	b.n	1698 <process_event+0x18>
    1898:	00005e61 	.word	0x00005e61

0000189c <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18a0:	4681      	mov	r9, r0
	size_t count = 0;
    18a2:	f04f 0800 	mov.w	r8, #0
{
    18a6:	b08d      	sub	sp, #52	; 0x34
    18a8:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    18aa:	1e53      	subs	r3, r2, #1
{
    18ac:	9101      	str	r1, [sp, #4]
	fmt--;
    18ae:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    18b0:	9b03      	ldr	r3, [sp, #12]
    18b2:	7858      	ldrb	r0, [r3, #1]
    18b4:	1c5c      	adds	r4, r3, #1
    18b6:	2825      	cmp	r0, #37	; 0x25
    18b8:	d119      	bne.n	18ee <cbvprintf+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    18ba:	2000      	movs	r0, #0
	precision = -1;
    18bc:	f04f 37ff 	mov.w	r7, #4294967295

	for (fmt++ ; ; fmt++) {
    18c0:	461e      	mov	r6, r3
	min_width = -1;
    18c2:	463c      	mov	r4, r7
	length_mod = 0;
    18c4:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    18c6:	3602      	adds	r6, #2
	padding_mode = 0;
    18c8:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    18ca:	7831      	ldrb	r1, [r6, #0]
    18cc:	9603      	str	r6, [sp, #12]
    18ce:	2939      	cmp	r1, #57	; 0x39
    18d0:	d855      	bhi.n	197e <cbvprintf+0xe2>
    18d2:	291f      	cmp	r1, #31
    18d4:	d814      	bhi.n	1900 <cbvprintf+0x64>
    18d6:	2900      	cmp	r1, #0
    18d8:	f000 81fd 	beq.w	1cd6 <cbvprintf+0x43a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    18dc:	9901      	ldr	r1, [sp, #4]
    18de:	2025      	movs	r0, #37	; 0x25
    18e0:	47c8      	blx	r9
			OUTC(*fmt);
    18e2:	9901      	ldr	r1, [sp, #4]
    18e4:	7830      	ldrb	r0, [r6, #0]
    18e6:	47c8      	blx	r9
    18e8:	f108 0802 	add.w	r8, r8, #2
			goto start;
    18ec:	e7e0      	b.n	18b0 <cbvprintf+0x14>
		if (*fmt == '\0') {
    18ee:	2800      	cmp	r0, #0
    18f0:	f000 81f1 	beq.w	1cd6 <cbvprintf+0x43a>
		OUTC(*fmt);
    18f4:	9901      	ldr	r1, [sp, #4]
    18f6:	47c8      	blx	r9
    18f8:	f108 0801 	add.w	r8, r8, #1
	while (*++fmt != '%') {
    18fc:	9403      	str	r4, [sp, #12]
    18fe:	e7d7      	b.n	18b0 <cbvprintf+0x14>
		switch (*fmt) {
    1900:	f1a1 0220 	sub.w	r2, r1, #32
    1904:	2a19      	cmp	r2, #25
    1906:	d8e9      	bhi.n	18dc <cbvprintf+0x40>
    1908:	f20f 0c04 	addw	ip, pc, #4
    190c:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1910:	00001979 	.word	0x00001979
    1914:	000018dd 	.word	0x000018dd
    1918:	000018dd 	.word	0x000018dd
    191c:	00001979 	.word	0x00001979
    1920:	000018dd 	.word	0x000018dd
    1924:	00001a01 	.word	0x00001a01
    1928:	000018dd 	.word	0x000018dd
    192c:	000018dd 	.word	0x000018dd
    1930:	000018dd 	.word	0x000018dd
    1934:	000018dd 	.word	0x000018dd
    1938:	00001a47 	.word	0x00001a47
    193c:	00001979 	.word	0x00001979
    1940:	000018dd 	.word	0x000018dd
    1944:	00001a59 	.word	0x00001a59
    1948:	00001a0d 	.word	0x00001a0d
    194c:	000018dd 	.word	0x000018dd
    1950:	00001a19 	.word	0x00001a19
    1954:	00001a37 	.word	0x00001a37
    1958:	00001a37 	.word	0x00001a37
    195c:	00001a37 	.word	0x00001a37
    1960:	00001a37 	.word	0x00001a37
    1964:	00001a37 	.word	0x00001a37
    1968:	00001a37 	.word	0x00001a37
    196c:	00001a37 	.word	0x00001a37
    1970:	00001a37 	.word	0x00001a37
    1974:	00001a37 	.word	0x00001a37
    1978:	4608      	mov	r0, r1
    197a:	3601      	adds	r6, #1
    197c:	e7a5      	b.n	18ca <cbvprintf+0x2e>
    197e:	2958      	cmp	r1, #88	; 0x58
    1980:	f000 80f5 	beq.w	1b6e <cbvprintf+0x2d2>
    1984:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1988:	fa5f fc82 	uxtb.w	ip, r2
    198c:	f1bc 0f17 	cmp.w	ip, #23
    1990:	d8a4      	bhi.n	18dc <cbvprintf+0x40>
    1992:	2a17      	cmp	r2, #23
    1994:	d8a2      	bhi.n	18dc <cbvprintf+0x40>
    1996:	f20f 0c08 	addw	ip, pc, #8
    199a:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    199e:	bf00      	nop
    19a0:	00001c0f 	.word	0x00001c0f
    19a4:	00001a7f 	.word	0x00001a7f
    19a8:	000018dd 	.word	0x000018dd
    19ac:	000018dd 	.word	0x000018dd
    19b0:	000018dd 	.word	0x000018dd
    19b4:	00001a5f 	.word	0x00001a5f
    19b8:	00001a7f 	.word	0x00001a7f
    19bc:	000018dd 	.word	0x000018dd
    19c0:	000018dd 	.word	0x000018dd
    19c4:	00001a5f 	.word	0x00001a5f
    19c8:	000018dd 	.word	0x000018dd
    19cc:	000018dd 	.word	0x000018dd
    19d0:	000018dd 	.word	0x000018dd
    19d4:	00001b47 	.word	0x00001b47
    19d8:	000018dd 	.word	0x000018dd
    19dc:	000018dd 	.word	0x000018dd
    19e0:	00001bf1 	.word	0x00001bf1
    19e4:	000018dd 	.word	0x000018dd
    19e8:	00001a7f 	.word	0x00001a7f
    19ec:	000018dd 	.word	0x000018dd
    19f0:	000018dd 	.word	0x000018dd
    19f4:	00001b47 	.word	0x00001b47
    19f8:	000018dd 	.word	0x000018dd
    19fc:	00001a5f 	.word	0x00001a5f
			OUTC('%');
    1a00:	2025      	movs	r0, #37	; 0x25
    1a02:	9901      	ldr	r1, [sp, #4]
    1a04:	47c8      	blx	r9
    1a06:	f108 0801 	add.w	r8, r8, #1
			goto start;
    1a0a:	e751      	b.n	18b0 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a0c:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    1a0e:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    1a10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1a14:	9202      	str	r2, [sp, #8]
			continue;
    1a16:	e7b0      	b.n	197a <cbvprintf+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a18:	2c00      	cmp	r4, #0
    1a1a:	da0c      	bge.n	1a36 <cbvprintf+0x19a>
    1a1c:	2f00      	cmp	r7, #0
    1a1e:	da0c      	bge.n	1a3a <cbvprintf+0x19e>
    1a20:	9a02      	ldr	r2, [sp, #8]
    1a22:	2a00      	cmp	r2, #0
    1a24:	f000 814f 	beq.w	1cc6 <cbvprintf+0x42a>
				min_width = 10 * min_width + *fmt - '0';
    1a28:	220a      	movs	r2, #10
				if (min_width < 0) {
    1a2a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1a2e:	fb02 1404 	mla	r4, r2, r4, r1
				min_width = 10 * min_width + *fmt - '0';
    1a32:	3c30      	subs	r4, #48	; 0x30
    1a34:	e7a1      	b.n	197a <cbvprintf+0xde>
			if (precision >= 0) {
    1a36:	2f00      	cmp	r7, #0
    1a38:	dbf6      	blt.n	1a28 <cbvprintf+0x18c>
				precision = 10 * precision + *fmt - '0';
    1a3a:	220a      	movs	r2, #10
    1a3c:	fb02 1207 	mla	r2, r2, r7, r1
    1a40:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    1a44:	e799      	b.n	197a <cbvprintf+0xde>
			if (precision >= 0) {
    1a46:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
    1a48:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1a4c:	f280 813d 	bge.w	1cca <cbvprintf+0x42e>
				if (min_width < 0) {
    1a50:	2a00      	cmp	r2, #0
    1a52:	f280 813c 	bge.w	1cce <cbvprintf+0x432>
					min_width = -min_width;
    1a56:	4254      	negs	r4, r2
		switch (*fmt) {
    1a58:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1a5a:	9202      	str	r2, [sp, #8]
    1a5c:	e78d      	b.n	197a <cbvprintf+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1a5e:	2968      	cmp	r1, #104	; 0x68
    1a60:	d103      	bne.n	1a6a <cbvprintf+0x1ce>
    1a62:	2b68      	cmp	r3, #104	; 0x68
    1a64:	d106      	bne.n	1a74 <cbvprintf+0x1d8>
				length_mod = 'H';
    1a66:	2348      	movs	r3, #72	; 0x48
    1a68:	e787      	b.n	197a <cbvprintf+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1a6a:	296c      	cmp	r1, #108	; 0x6c
    1a6c:	d102      	bne.n	1a74 <cbvprintf+0x1d8>
    1a6e:	2b6c      	cmp	r3, #108	; 0x6c
    1a70:	f000 812f 	beq.w	1cd2 <cbvprintf+0x436>
			} else if (length_mod == '\0') {
    1a74:	2b00      	cmp	r3, #0
    1a76:	f47f af31 	bne.w	18dc <cbvprintf+0x40>
		switch (*fmt) {
    1a7a:	460b      	mov	r3, r1
    1a7c:	e77d      	b.n	197a <cbvprintf+0xde>
			if (length_mod == 'z') {
    1a7e:	2b7a      	cmp	r3, #122	; 0x7a
    1a80:	d106      	bne.n	1a90 <cbvprintf+0x1f4>
			} else if (*fmt == 'u') {
    1a82:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1a84:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1a88:	d115      	bne.n	1ab6 <cbvprintf+0x21a>
				d = va_arg(ap, unsigned int);
    1a8a:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1a8e:	e00c      	b.n	1aaa <cbvprintf+0x20e>
			} else if (length_mod == 'l') {
    1a90:	2b6c      	cmp	r3, #108	; 0x6c
    1a92:	d0f6      	beq.n	1a82 <cbvprintf+0x1e6>
			} else if (length_mod == 'L') {
    1a94:	2b4c      	cmp	r3, #76	; 0x4c
    1a96:	d1f4      	bne.n	1a82 <cbvprintf+0x1e6>
					unsigned long long llu =
    1a98:	3507      	adds	r5, #7
    1a9a:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1a9e:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1aa0:	f103 0508 	add.w	r5, r3, #8
    1aa4:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1aa8:	d107      	bne.n	1aba <cbvprintf+0x21e>
			} else if (special == ' ') {
    1aaa:	2820      	cmp	r0, #32
    1aac:	d142      	bne.n	1b34 <cbvprintf+0x298>
				prefix = " ";
    1aae:	f8df a230 	ldr.w	sl, [pc, #560]	; 1ce0 <cbvprintf+0x444>
				min_width--;
    1ab2:	3c01      	subs	r4, #1
    1ab4:	e00a      	b.n	1acc <cbvprintf+0x230>
				d = va_arg(ap, int);
    1ab6:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1aba:	f1bb 0f00 	cmp.w	fp, #0
    1abe:	daf4      	bge.n	1aaa <cbvprintf+0x20e>
				d = -d;
    1ac0:	4276      	negs	r6, r6
				prefix = "-";
    1ac2:	f8df a220 	ldr.w	sl, [pc, #544]	; 1ce4 <cbvprintf+0x448>
				d = -d;
    1ac6:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1aca:	3c01      	subs	r4, #1
	int i = 0;
    1acc:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1ad0:	9305      	str	r3, [sp, #20]
    1ad2:	2300      	movs	r3, #0
    1ad4:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1ad6:	4630      	mov	r0, r6
    1ad8:	4659      	mov	r1, fp
    1ada:	220a      	movs	r2, #10
    1adc:	2300      	movs	r3, #0
    1ade:	f7fe fb31 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1ae2:	9b04      	ldr	r3, [sp, #16]
    1ae4:	3230      	adds	r2, #48	; 0x30
    1ae6:	f103 3cff 	add.w	ip, r3, #4294967295
    1aea:	f8cd c010 	str.w	ip, [sp, #16]
    1aee:	f8dd c014 	ldr.w	ip, [sp, #20]
    1af2:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    1af6:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    1afa:	46b4      	mov	ip, r6
    1afc:	465a      	mov	r2, fp
	} while (num);
    1afe:	f1bc 0f0a 	cmp.w	ip, #10
    1b02:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1b06:	4606      	mov	r6, r0
    1b08:	468b      	mov	fp, r1
	} while (num);
    1b0a:	d2e4      	bcs.n	1ad6 <cbvprintf+0x23a>
	return -i;
    1b0c:	f1c3 0601 	rsb	r6, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b10:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1b12:	eb0d 0b03 	add.w	fp, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b16:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1b18:	f1ab 0b04 	sub.w	fp, fp, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b1c:	da04      	bge.n	1b28 <cbvprintf+0x28c>
    1b1e:	9b02      	ldr	r3, [sp, #8]
    1b20:	f013 0f01 	tst.w	r3, #1
    1b24:	bf18      	it	ne
    1b26:	4627      	movne	r7, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1b28:	1bbb      	subs	r3, r7, r6
		if (precision > 0) {
    1b2a:	2b00      	cmp	r3, #0
		min_width -= data_len;
    1b2c:	bfd4      	ite	le
    1b2e:	1ba4      	suble	r4, r4, r6
			min_width -= precision;
    1b30:	1be4      	subgt	r4, r4, r7
    1b32:	e016      	b.n	1b62 <cbvprintf+0x2c6>
			} else if (special == '+') {
    1b34:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1b36:	bf0a      	itet	eq
    1b38:	f8df a1ac 	ldreq.w	sl, [pc, #428]	; 1ce8 <cbvprintf+0x44c>
	prefix = "";
    1b3c:	f8df a1ac 	ldrne.w	sl, [pc, #428]	; 1cec <cbvprintf+0x450>
				min_width--;
    1b40:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1b44:	e7c2      	b.n	1acc <cbvprintf+0x230>
			if (*fmt == 'p') {
    1b46:	2970      	cmp	r1, #112	; 0x70
    1b48:	d110      	bne.n	1b6c <cbvprintf+0x2d0>
				x = (uintptr_t)va_arg(ap, void *);
    1b4a:	f855 2b04 	ldr.w	r2, [r5], #4
    1b4e:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1b50:	bb02      	cbnz	r2, 1b94 <cbvprintf+0x2f8>
		precision -= data_len;
    1b52:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1b56:	2605      	movs	r6, #5
					data = "(nil)";
    1b58:	f8df b194 	ldr.w	fp, [pc, #404]	; 1cf0 <cbvprintf+0x454>
		min_width -= data_len;
    1b5c:	3c05      	subs	r4, #5
	prefix = "";
    1b5e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 1cec <cbvprintf+0x450>
		}

		if (!(padding_mode & PAD_TAIL)) {
    1b62:	9a02      	ldr	r2, [sp, #8]
    1b64:	0797      	lsls	r7, r2, #30
    1b66:	d46f      	bmi.n	1c48 <cbvprintf+0x3ac>
    1b68:	4627      	mov	r7, r4
    1b6a:	e060      	b.n	1c2e <cbvprintf+0x392>
		switch (*fmt) {
    1b6c:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1b6e:	2b6c      	cmp	r3, #108	; 0x6c
    1b70:	d103      	bne.n	1b7a <cbvprintf+0x2de>
				x = va_arg(ap, unsigned int);
    1b72:	2300      	movs	r3, #0
    1b74:	f855 2b04 	ldr.w	r2, [r5], #4
    1b78:	e008      	b.n	1b8c <cbvprintf+0x2f0>
			} else if (length_mod == 'L') {
    1b7a:	2b4c      	cmp	r3, #76	; 0x4c
    1b7c:	d1f9      	bne.n	1b72 <cbvprintf+0x2d6>
				unsigned long long llx =
    1b7e:	3507      	adds	r5, #7
    1b80:	f025 0307 	bic.w	r3, r5, #7
    1b84:	461d      	mov	r5, r3
    1b86:	685b      	ldr	r3, [r3, #4]
    1b88:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1b8c:	2823      	cmp	r0, #35	; 0x23
    1b8e:	d128      	bne.n	1be2 <cbvprintf+0x346>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1b90:	0688      	lsls	r0, r1, #26
    1b92:	d523      	bpl.n	1bdc <cbvprintf+0x340>
    1b94:	f8df a15c 	ldr.w	sl, [pc, #348]	; 1cf4 <cbvprintf+0x458>
				min_width -= 2;
    1b98:	3c02      	subs	r4, #2
	int i = 0;
    1b9a:	f04f 0b00 	mov.w	fp, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1b9e:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1ba2:	f1a1 0e39 	sub.w	lr, r1, #57	; 0x39
	int i = 0;
    1ba6:	f10d 0c2d 	add.w	ip, sp, #45	; 0x2d
		unsigned int c = num % base;
    1baa:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1bae:	2909      	cmp	r1, #9
			c += alpha;
    1bb0:	bf88      	it	hi
    1bb2:	4471      	addhi	r1, lr
		buftop[--i] = c + '0';
    1bb4:	3130      	adds	r1, #48	; 0x30
    1bb6:	f80c 1d01 	strb.w	r1, [ip, #-1]!
	} while (num);
    1bba:	2a10      	cmp	r2, #16
		num /= base;
    1bbc:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1bc0:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1bc4:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1bc8:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1bcc:	f10b 36ff 	add.w	r6, fp, #4294967295
	} while (num);
    1bd0:	d20a      	bcs.n	1be8 <cbvprintf+0x34c>
	return -i;
    1bd2:	f1cb 0601 	rsb	r6, fp, #1
			data = buf + sizeof(buf) - data_len;
    1bd6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    1bda:	e79a      	b.n	1b12 <cbvprintf+0x276>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bdc:	f8df a118 	ldr.w	sl, [pc, #280]	; 1cf8 <cbvprintf+0x45c>
    1be0:	e7da      	b.n	1b98 <cbvprintf+0x2fc>
	prefix = "";
    1be2:	f8df a108 	ldr.w	sl, [pc, #264]	; 1cec <cbvprintf+0x450>
    1be6:	e7d8      	b.n	1b9a <cbvprintf+0x2fe>
		buftop[--i] = c + '0';
    1be8:	46b3      	mov	fp, r6
		num /= base;
    1bea:	460a      	mov	r2, r1
    1bec:	4603      	mov	r3, r0
    1bee:	e7dc      	b.n	1baa <cbvprintf+0x30e>
			data = va_arg(ap, char *);
    1bf0:	f855 bb04 	ldr.w	fp, [r5], #4
			data_len = strlen(data);
    1bf4:	4658      	mov	r0, fp
    1bf6:	f004 fcf3 	bl	65e0 <strlen>
			if (precision >= 0 && data_len > precision) {
    1bfa:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    1bfc:	4606      	mov	r6, r0
			if (precision >= 0 && data_len > precision) {
    1bfe:	db02      	blt.n	1c06 <cbvprintf+0x36a>
    1c00:	42b8      	cmp	r0, r7
    1c02:	bfa8      	it	ge
    1c04:	463e      	movge	r6, r7
			precision = 0;
    1c06:	2700      	movs	r7, #0
	prefix = "";
    1c08:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1cec <cbvprintf+0x450>
    1c0c:	e78c      	b.n	1b28 <cbvprintf+0x28c>
			buf[0] = c;
    1c0e:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c12:	2601      	movs	r6, #1
			buf[0] = c;
    1c14:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1c18:	3c01      	subs	r4, #1
		precision -= data_len;
    1c1a:	f04f 33ff 	mov.w	r3, #4294967295
			data = buf;
    1c1e:	f10d 0b18 	add.w	fp, sp, #24
    1c22:	e79c      	b.n	1b5e <cbvprintf+0x2c2>
    1c24:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1c26:	2020      	movs	r0, #32
    1c28:	9901      	ldr	r1, [sp, #4]
    1c2a:	47c8      	blx	r9
    1c2c:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1c2e:	3f01      	subs	r7, #1
    1c30:	d5f8      	bpl.n	1c24 <cbvprintf+0x388>
    1c32:	1e62      	subs	r2, r4, #1
    1c34:	1c50      	adds	r0, r2, #1
    1c36:	bfac      	ite	ge
    1c38:	4621      	movge	r1, r4
    1c3a:	2100      	movlt	r1, #0
    1c3c:	f1c4 0400 	rsb	r4, r4, #0
    1c40:	bfb8      	it	lt
    1c42:	2400      	movlt	r4, #0
    1c44:	4488      	add	r8, r1
    1c46:	4414      	add	r4, r2
    1c48:	4657      	mov	r7, sl
    1c4a:	e006      	b.n	1c5a <cbvprintf+0x3be>
    1c4c:	9304      	str	r3, [sp, #16]
    1c4e:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1c50:	9901      	ldr	r1, [sp, #4]
    1c52:	47c8      	blx	r9
    1c54:	9a02      	ldr	r2, [sp, #8]
    1c56:	9b04      	ldr	r3, [sp, #16]
    1c58:	4617      	mov	r7, r2
		while (*prefix) {
    1c5a:	463a      	mov	r2, r7
    1c5c:	f812 0b01 	ldrb.w	r0, [r2], #1
    1c60:	2800      	cmp	r0, #0
    1c62:	d1f3      	bne.n	1c4c <cbvprintf+0x3b0>
    1c64:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1c66:	3a01      	subs	r2, #1
    1c68:	d51a      	bpl.n	1ca0 <cbvprintf+0x404>
    1c6a:	1e5a      	subs	r2, r3, #1
    1c6c:	3201      	adds	r2, #1
    1c6e:	bfb8      	it	lt
    1c70:	2300      	movlt	r3, #0
    1c72:	eba3 0a0a 	sub.w	sl, r3, sl
    1c76:	4633      	mov	r3, r6
			OUTC('0');
		}
		while (--data_len >= 0) {
    1c78:	3b01      	subs	r3, #1
    1c7a:	d519      	bpl.n	1cb0 <cbvprintf+0x414>
    1c7c:	1e73      	subs	r3, r6, #1
    1c7e:	3301      	adds	r3, #1
    1c80:	bfb8      	it	lt
    1c82:	2600      	movlt	r6, #0
    1c84:	4456      	add	r6, sl
    1c86:	4446      	add	r6, r8
    1c88:	46a0      	mov	r8, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1c8a:	f1b8 0801 	subs.w	r8, r8, #1
    1c8e:	d516      	bpl.n	1cbe <cbvprintf+0x422>
    1c90:	1e63      	subs	r3, r4, #1
    1c92:	3301      	adds	r3, #1
    1c94:	bfb8      	it	lt
    1c96:	2400      	movlt	r4, #0
    1c98:	4434      	add	r4, r6
    1c9a:	eb04 0807 	add.w	r8, r4, r7
    1c9e:	e607      	b.n	18b0 <cbvprintf+0x14>
    1ca0:	9204      	str	r2, [sp, #16]
    1ca2:	9302      	str	r3, [sp, #8]
			OUTC('0');
    1ca4:	2030      	movs	r0, #48	; 0x30
    1ca6:	9901      	ldr	r1, [sp, #4]
    1ca8:	47c8      	blx	r9
    1caa:	9a04      	ldr	r2, [sp, #16]
    1cac:	9b02      	ldr	r3, [sp, #8]
    1cae:	e7da      	b.n	1c66 <cbvprintf+0x3ca>
    1cb0:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1cb2:	9901      	ldr	r1, [sp, #4]
    1cb4:	f81b 0b01 	ldrb.w	r0, [fp], #1
    1cb8:	47c8      	blx	r9
    1cba:	9b02      	ldr	r3, [sp, #8]
    1cbc:	e7dc      	b.n	1c78 <cbvprintf+0x3dc>
			OUTC(' ');
    1cbe:	9901      	ldr	r1, [sp, #4]
    1cc0:	2020      	movs	r0, #32
    1cc2:	47c8      	blx	r9
    1cc4:	e7e1      	b.n	1c8a <cbvprintf+0x3ee>
				padding_mode = PAD_ZERO;
    1cc6:	2201      	movs	r2, #1
    1cc8:	e6c7      	b.n	1a5a <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    1cca:	4617      	mov	r7, r2
    1ccc:	e655      	b.n	197a <cbvprintf+0xde>
    1cce:	4614      	mov	r4, r2
    1cd0:	e653      	b.n	197a <cbvprintf+0xde>
				length_mod = 'L';
    1cd2:	234c      	movs	r3, #76	; 0x4c
    1cd4:	e651      	b.n	197a <cbvprintf+0xde>
		}

		goto start;
	}
}
    1cd6:	4640      	mov	r0, r8
    1cd8:	b00d      	add	sp, #52	; 0x34
    1cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cde:	bf00      	nop
    1ce0:	0000985f 	.word	0x0000985f
    1ce4:	0000933d 	.word	0x0000933d
    1ce8:	0000933f 	.word	0x0000933f
    1cec:	00009bf9 	.word	0x00009bf9
    1cf0:	00009347 	.word	0x00009347
    1cf4:	00009341 	.word	0x00009341
    1cf8:	00009344 	.word	0x00009344

00001cfc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1cfc:	b508      	push	{r3, lr}
	__asm__ volatile(
    1cfe:	f04f 0220 	mov.w	r2, #32
    1d02:	f3ef 8311 	mrs	r3, BASEPRI
    1d06:	f382 8812 	msr	BASEPRI_MAX, r2
    1d0a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d0e:	f001 f89b 	bl	2e48 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d12:	4803      	ldr	r0, [pc, #12]	; (1d20 <sys_reboot+0x24>)
    1d14:	f004 f855 	bl	5dc2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d18:	f000 fda2 	bl	2860 <arch_cpu_idle>
    1d1c:	e7fc      	b.n	1d18 <sys_reboot+0x1c>
    1d1e:	bf00      	nop
    1d20:	0000934d 	.word	0x0000934d

00001d24 <nordicsemi_nrf91_init>:
    1d24:	f04f 0220 	mov.w	r2, #32
    1d28:	f3ef 8311 	mrs	r3, BASEPRI
    1d2c:	f382 8812 	msr	BASEPRI_MAX, r2
    1d30:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1d34:	2101      	movs	r1, #1
    1d36:	4a04      	ldr	r2, [pc, #16]	; (1d48 <nordicsemi_nrf91_init+0x24>)
    1d38:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1d3c:	f383 8811 	msr	BASEPRI, r3
    1d40:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d44:	2000      	movs	r0, #0
    1d46:	4770      	bx	lr
    1d48:	50039000 	.word	0x50039000

00001d4c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1d4c:	b120      	cbz	r0, 1d58 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1d4e:	4b03      	ldr	r3, [pc, #12]	; (1d5c <arch_busy_wait+0x10>)
    1d50:	0180      	lsls	r0, r0, #6
    1d52:	f043 0301 	orr.w	r3, r3, #1
    1d56:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d58:	4770      	bx	lr
    1d5a:	bf00      	nop
    1d5c:	000089b0 	.word	0x000089b0

00001d60 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1d60:	4b0d      	ldr	r3, [pc, #52]	; (1d98 <flash_area_open+0x38>)
{
    1d62:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1d64:	681b      	ldr	r3, [r3, #0]
    1d66:	b1a3      	cbz	r3, 1d92 <flash_area_open+0x32>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1d68:	4a0c      	ldr	r2, [pc, #48]	; (1d9c <flash_area_open+0x3c>)
    1d6a:	6815      	ldr	r5, [r2, #0]
    1d6c:	2200      	movs	r2, #0
    1d6e:	42aa      	cmp	r2, r5
    1d70:	db02      	blt.n	1d78 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1d72:	f06f 0001 	mvn.w	r0, #1
    1d76:	e00b      	b.n	1d90 <flash_area_open+0x30>
		if (flash_map[i].fa_id == idx) {
    1d78:	461c      	mov	r4, r3
    1d7a:	f814 6b10 	ldrb.w	r6, [r4], #16
    1d7e:	4286      	cmp	r6, r0
    1d80:	d002      	beq.n	1d88 <flash_area_open+0x28>
	for (int i = 0; i < flash_map_entries; i++) {
    1d82:	4623      	mov	r3, r4
    1d84:	3201      	adds	r2, #1
    1d86:	e7f2      	b.n	1d6e <flash_area_open+0xe>
	if (area == NULL) {
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d0f2      	beq.n	1d72 <flash_area_open+0x12>
	}

	*fap = area;
	return 0;
    1d8c:	2000      	movs	r0, #0
	*fap = area;
    1d8e:	600b      	str	r3, [r1, #0]
}
    1d90:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
    1d92:	f06f 000c 	mvn.w	r0, #12
    1d96:	e7fb      	b.n	1d90 <flash_area_open+0x30>
    1d98:	2000c50c 	.word	0x2000c50c
    1d9c:	000089d0 	.word	0x000089d0

00001da0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	b088      	sub	sp, #32
    1da4:	4605      	mov	r5, r0
    1da6:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1da8:	b2c0      	uxtb	r0, r0
    1daa:	4669      	mov	r1, sp
{
    1dac:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1dae:	f7ff ffd7 	bl	1d60 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1db2:	2800      	cmp	r0, #0
    1db4:	db1f      	blt.n	1df6 <flash_area_get_sectors+0x56>
    1db6:	9b00      	ldr	r3, [sp, #0]
    1db8:	b1eb      	cbz	r3, 1df6 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1dba:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
    1dbc:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1dbe:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1dc0:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1dc2:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
    1dc4:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1dc8:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
    1dca:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
    1dcc:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1dd0:	9205      	str	r2, [sp, #20]
    1dd2:	f003 fa11 	bl	51f8 <z_impl_device_get_binding>
    1dd6:	4605      	mov	r5, r0
	flash_area_close(fa);
    1dd8:	9800      	ldr	r0, [sp, #0]
    1dda:	f004 f8c8 	bl	5f6e <flash_area_close>
	if (flash_dev == NULL) {
    1dde:	b16d      	cbz	r5, 1dfc <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1de0:	4628      	mov	r0, r5
    1de2:	4908      	ldr	r1, [pc, #32]	; (1e04 <flash_area_get_sectors+0x64>)
    1de4:	aa01      	add	r2, sp, #4
    1de6:	f004 fd70 	bl	68ca <flash_page_foreach>
	if (cb_data->status == 0) {
    1dea:	9807      	ldr	r0, [sp, #28]
    1dec:	b908      	cbnz	r0, 1df2 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1dee:	9b05      	ldr	r3, [sp, #20]
    1df0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1df2:	b008      	add	sp, #32
    1df4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1df6:	f06f 0015 	mvn.w	r0, #21
    1dfa:	e7fa      	b.n	1df2 <flash_area_get_sectors+0x52>
		return -ENODEV;
    1dfc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e00:	e7f7      	b.n	1df2 <flash_area_get_sectors+0x52>
    1e02:	bf00      	nop
    1e04:	00006091 	.word	0x00006091

00001e08 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e08:	4801      	ldr	r0, [pc, #4]	; (1e10 <nrf_cc3xx_platform_abort_init+0x8>)
    1e0a:	f003 bbbb 	b.w	5584 <nrf_cc3xx_platform_set_abort>
    1e0e:	bf00      	nop
    1e10:	00008a84 	.word	0x00008a84

00001e14 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    1e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    1e16:	4e25      	ldr	r6, [pc, #148]	; (1eac <boot_uart_fifo_callback+0x98>)
    1e18:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    1e1a:	6883      	ldr	r3, [r0, #8]
    1e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e1e:	b103      	cbz	r3, 1e22 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    1e20:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    1e22:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    1e24:	6883      	ldr	r3, [r0, #8]
    1e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d132      	bne.n	1e92 <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    1e2c:	4c20      	ldr	r4, [pc, #128]	; (1eb0 <boot_uart_fifo_callback+0x9c>)
	return list->head;
    1e2e:	4d21      	ldr	r5, [pc, #132]	; (1eb4 <boot_uart_fifo_callback+0xa0>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    1e30:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    1e32:	6883      	ldr	r3, [r0, #8]
    1e34:	699b      	ldr	r3, [r3, #24]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d02e      	beq.n	1e98 <boot_uart_fifo_callback+0x84>
	return api->fifo_read(dev, rx_data, size);
    1e3a:	2201      	movs	r2, #1
    1e3c:	f10d 0107 	add.w	r1, sp, #7
    1e40:	4798      	blx	r3
		if (rx != 1) {
    1e42:	2801      	cmp	r0, #1
    1e44:	d128      	bne.n	1e98 <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    1e46:	6823      	ldr	r3, [r4, #0]
    1e48:	b943      	cbnz	r3, 1e5c <boot_uart_fifo_callback+0x48>
    1e4a:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1e4c:	b333      	cbz	r3, 1e9c <boot_uart_fifo_callback+0x88>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e4e:	6869      	ldr	r1, [r5, #4]
	return node->next;
    1e50:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e52:	428b      	cmp	r3, r1
	list->head = node;
    1e54:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e56:	d100      	bne.n	1e5a <boot_uart_fifo_callback+0x46>
	list->tail = node;
    1e58:	606a      	str	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    1e5a:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1e5c:	4a16      	ldr	r2, [pc, #88]	; (1eb8 <boot_uart_fifo_callback+0xa4>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    1e5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1e62:	8811      	ldrh	r1, [r2, #0]
    1e64:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1e68:	d204      	bcs.n	1e74 <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    1e6a:	6823      	ldr	r3, [r4, #0]
    1e6c:	1c4f      	adds	r7, r1, #1
    1e6e:	440b      	add	r3, r1
    1e70:	8017      	strh	r7, [r2, #0]
    1e72:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    1e74:	280a      	cmp	r0, #10
    1e76:	d1db      	bne.n	1e30 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    1e78:	2000      	movs	r0, #0
			cmd->len = cur;
    1e7a:	6823      	ldr	r3, [r4, #0]
    1e7c:	8811      	ldrh	r1, [r2, #0]
    1e7e:	6018      	str	r0, [r3, #0]
    1e80:	6059      	str	r1, [r3, #4]
	return list->tail;
    1e82:	490e      	ldr	r1, [pc, #56]	; (1ebc <boot_uart_fifo_callback+0xa8>)
    1e84:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    1e86:	b975      	cbnz	r5, 1ea6 <boot_uart_fifo_callback+0x92>
	list->head = node;
    1e88:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    1e8c:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    1e8e:	6020      	str	r0, [r4, #0]
    1e90:	e7cd      	b.n	1e2e <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    1e92:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    1e94:	2800      	cmp	r0, #0
    1e96:	d1c9      	bne.n	1e2c <boot_uart_fifo_callback+0x18>
		}
	}
}
    1e98:	b003      	add	sp, #12
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				BOOT_LOG_ERR("Not enough memory to store"
    1e9c:	2145      	movs	r1, #69	; 0x45
    1e9e:	4808      	ldr	r0, [pc, #32]	; (1ec0 <boot_uart_fifo_callback+0xac>)
    1ea0:	f004 f858 	bl	5f54 <z_log_minimal_printk>
				return;
    1ea4:	e7f8      	b.n	1e98 <boot_uart_fifo_callback+0x84>
	parent->next = child;
    1ea6:	602b      	str	r3, [r5, #0]
	list->tail = node;
    1ea8:	604b      	str	r3, [r1, #4]
}
    1eaa:	e7ef      	b.n	1e8c <boot_uart_fifo_callback+0x78>
    1eac:	2000dfac 	.word	0x2000dfac
    1eb0:	2000db84 	.word	0x2000db84
    1eb4:	2000db94 	.word	0x2000db94
    1eb8:	2000e08c 	.word	0x2000e08c
    1ebc:	2000db8c 	.word	0x2000db8c
    1ec0:	0000937a 	.word	0x0000937a

00001ec4 <console_out>:
	uart_poll_out(uart_dev, c);
    1ec4:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <console_out+0x14>)
{
    1ec6:	b510      	push	{r4, lr}
    1ec8:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    1eca:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    1ecc:	6883      	ldr	r3, [r0, #8]
    1ece:	b2e1      	uxtb	r1, r4
    1ed0:	685b      	ldr	r3, [r3, #4]
    1ed2:	4798      	blx	r3
}
    1ed4:	4620      	mov	r0, r4
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	2000dfac 	.word	0x2000dfac

00001edc <console_read>:
{
    1edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ede:	4605      	mov	r5, r0
    1ee0:	460c      	mov	r4, r1
    1ee2:	4616      	mov	r6, r2
	__asm__ volatile(
    1ee4:	f04f 0320 	mov.w	r3, #32
    1ee8:	f3ef 8711 	mrs	r7, BASEPRI
    1eec:	f383 8812 	msr	BASEPRI_MAX, r3
    1ef0:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    1ef4:	481c      	ldr	r0, [pc, #112]	; (1f68 <console_read+0x8c>)
    1ef6:	6803      	ldr	r3, [r0, #0]
    1ef8:	b153      	cbz	r3, 1f10 <console_read+0x34>
	return list->tail;
    1efa:	4a1c      	ldr	r2, [pc, #112]	; (1f6c <console_read+0x90>)
    1efc:	6851      	ldr	r1, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    1efe:	4299      	cmp	r1, r3
    1f00:	d006      	beq.n	1f10 <console_read+0x34>
	parent->next = child;
    1f02:	f04f 0c00 	mov.w	ip, #0
    1f06:	f8c3 c000 	str.w	ip, [r3]
Z_GENLIST_APPEND(slist, snode)
    1f0a:	b969      	cbnz	r1, 1f28 <console_read+0x4c>
	list->head = node;
    1f0c:	e9c2 3300 	strd	r3, r3, [r2]
	return list->head;
    1f10:	4b17      	ldr	r3, [pc, #92]	; (1f70 <console_read+0x94>)
    1f12:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
    1f14:	b959      	cbnz	r1, 1f2e <console_read+0x52>
	__asm__ volatile(
    1f16:	f387 8811 	msr	BASEPRI, r7
    1f1a:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    1f1e:	6001      	str	r1, [r0, #0]
		return 0;
    1f20:	2300      	movs	r3, #0
    1f22:	4618      	mov	r0, r3
		*newline = 0;
    1f24:	6033      	str	r3, [r6, #0]
}
    1f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    1f28:	600b      	str	r3, [r1, #0]
	list->tail = node;
    1f2a:	6053      	str	r3, [r2, #4]
}
    1f2c:	e7f0      	b.n	1f10 <console_read+0x34>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f2e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return node->next;
    1f32:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f34:	4561      	cmp	r1, ip
	list->head = node;
    1f36:	601a      	str	r2, [r3, #0]
	list->tail = node;
    1f38:	bf08      	it	eq
    1f3a:	605a      	streq	r2, [r3, #4]
    1f3c:	f387 8811 	msr	BASEPRI, r7
    1f40:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    1f44:	684b      	ldr	r3, [r1, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    1f46:	6001      	str	r1, [r0, #0]
	if (line == NULL) {
    1f48:	3108      	adds	r1, #8
    1f4a:	d0e9      	beq.n	1f20 <console_read+0x44>
	if (len > str_size - 1) {
    1f4c:	3c01      	subs	r4, #1
    1f4e:	429c      	cmp	r4, r3
    1f50:	bfa8      	it	ge
    1f52:	461c      	movge	r4, r3
	memcpy(str, line, len);
    1f54:	4628      	mov	r0, r5
    1f56:	4622      	mov	r2, r4
    1f58:	f004 fb7c 	bl	6654 <memcpy>
	str[len] = '\0';
    1f5c:	2300      	movs	r3, #0
	return len + 1;
    1f5e:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    1f60:	552b      	strb	r3, [r5, r4]
	return len + 1;
    1f62:	2301      	movs	r3, #1
    1f64:	e7de      	b.n	1f24 <console_read+0x48>
    1f66:	bf00      	nop
    1f68:	2000db88 	.word	0x2000db88
    1f6c:	2000db94 	.word	0x2000db94
    1f70:	2000db8c 	.word	0x2000db8c

00001f74 <boot_console_init>:
{
    1f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    1f76:	2500      	movs	r5, #0
    1f78:	4b1b      	ldr	r3, [pc, #108]	; (1fe8 <boot_console_init+0x74>)
	list->head = node;
    1f7a:	4a1c      	ldr	r2, [pc, #112]	; (1fec <boot_console_init+0x78>)
	list->tail = NULL;
    1f7c:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    1f80:	4b1b      	ldr	r3, [pc, #108]	; (1ff0 <boot_console_init+0x7c>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1f82:	4c1c      	ldr	r4, [pc, #112]	; (1ff4 <boot_console_init+0x80>)
    1f84:	481c      	ldr	r0, [pc, #112]	; (1ff8 <boot_console_init+0x84>)
	parent->next = child;
    1f86:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    1f8a:	6013      	str	r3, [r2, #0]
	parent->next = child;
    1f8c:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    1f90:	6019      	str	r1, [r3, #0]
	list->tail = node;
    1f92:	6051      	str	r1, [r2, #4]
    1f94:	6020      	str	r0, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1f96:	f006 fb3a 	bl	860e <z_device_ready>
    1f9a:	b310      	cbz	r0, 1fe2 <boot_console_init+0x6e>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    1f9c:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1f9e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1fa0:	b123      	cbz	r3, 1fac <boot_console_init+0x38>
    1fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1fa4:	b113      	cbz	r3, 1fac <boot_console_init+0x38>
		api->irq_callback_set(dev, cb, user_data);
    1fa6:	462a      	mov	r2, r5
    1fa8:	4914      	ldr	r1, [pc, #80]	; (1ffc <boot_console_init+0x88>)
    1faa:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    1fac:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    1fae:	6883      	ldr	r3, [r0, #8]
    1fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1fb2:	b10b      	cbz	r3, 1fb8 <boot_console_init+0x44>
	return api->irq_rx_ready(dev);
    1fb4:	4798      	blx	r3
    1fb6:	b148      	cbz	r0, 1fcc <boot_console_init+0x58>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    1fb8:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    1fba:	6883      	ldr	r3, [r0, #8]
    1fbc:	699b      	ldr	r3, [r3, #24]
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d0fa      	beq.n	1fb8 <boot_console_init+0x44>
	return api->fifo_read(dev, rx_data, size);
    1fc2:	2201      	movs	r2, #1
    1fc4:	f10d 0107 	add.w	r1, sp, #7
    1fc8:	4798      	blx	r3
    1fca:	e7f4      	b.n	1fb6 <boot_console_init+0x42>
			;
		}
	}

	cur = 0;
    1fcc:	2200      	movs	r2, #0
    1fce:	4b0c      	ldr	r3, [pc, #48]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)

	uart_irq_rx_enable(uart_dev);
    1fd0:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    1fd2:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    1fd4:	6883      	ldr	r3, [r0, #8]
    1fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fd8:	b103      	cbz	r3, 1fdc <boot_console_init+0x68>
		api->irq_rx_enable(dev);
    1fda:	4798      	blx	r3

	return 0;
    1fdc:	2000      	movs	r0, #0
}
    1fde:	b003      	add	sp, #12
    1fe0:	bd30      	pop	{r4, r5, pc}
		return (-1);
    1fe2:	f04f 30ff 	mov.w	r0, #4294967295
	return boot_uart_fifo_init();
    1fe6:	e7fa      	b.n	1fde <boot_console_init+0x6a>
    1fe8:	2000db8c 	.word	0x2000db8c
    1fec:	2000db94 	.word	0x2000db94
    1ff0:	2000db9c 	.word	0x2000db9c
    1ff4:	2000dfac 	.word	0x2000dfac
    1ff8:	000086dc 	.word	0x000086dc
    1ffc:	00001e15 	.word	0x00001e15
    2000:	2000e08c 	.word	0x2000e08c

00002004 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2004:	f640 1306 	movw	r3, #2310	; 0x906
{
    2008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    200c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2108 <boot_serial_output+0x104>
{
    2010:	b0d2      	sub	sp, #328	; 0x148
    bs_hdr->nh_op++;
    2012:	f8d8 0000 	ldr.w	r0, [r8]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2016:	f8ad 300c 	strh.w	r3, [sp, #12]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    201a:	4b3c      	ldr	r3, [pc, #240]	; (210c <boot_serial_output+0x108>)
    201c:	4f3c      	ldr	r7, [pc, #240]	; (2110 <boot_serial_output+0x10c>)
    201e:	681c      	ldr	r4, [r3, #0]
    bs_hdr->nh_op++;
    2020:	7803      	ldrb	r3, [r0, #0]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    2022:	1be4      	subs	r4, r4, r7
    bs_hdr->nh_op++;
    2024:	3301      	adds	r3, #1
    2026:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_flags = 0;
    2028:	2300      	movs	r3, #0
    bs_hdr->nh_len = htons(len);
    202a:	ba62      	rev16	r2, r4
    202c:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    202e:	8882      	ldrh	r2, [r0, #4]
    bs_hdr->nh_flags = 0;
    2030:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2032:	ba52      	rev16	r2, r2
    2034:	8082      	strh	r2, [r0, #4]

#ifdef __ZEPHYR__
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2036:	2108      	movs	r1, #8
    2038:	9300      	str	r3, [sp, #0]
    203a:	f241 0221 	movw	r2, #4129	; 0x1021
    203e:	f003 fe77 	bl	5d30 <crc16>
                 CRC16_INITIAL_CRC, false);
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2042:	2201      	movs	r2, #1
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2044:	4603      	mov	r3, r0
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2046:	4621      	mov	r1, r4
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2048:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    204c:	9200      	str	r2, [sp, #0]
    204e:	4638      	mov	r0, r7
    2050:	f241 0221 	movw	r2, #4129	; 0x1021
    2054:	f003 fe6c 	bl	5d30 <crc16>
    crc = crc16_ccitt(CRC16_INITIAL_CRC, bs_hdr, sizeof(*bs_hdr));
    crc = crc16_ccitt(crc, data, len);
#endif
    crc = htons(crc);

    boot_uf->write(pkt_start, sizeof(pkt_start));
    2058:	4e2e      	ldr	r6, [pc, #184]	; (2114 <boot_serial_output+0x110>)
    205a:	b2a5      	uxth	r5, r4
    205c:	6833      	ldr	r3, [r6, #0]
    crc = htons(crc);
    205e:	ba40      	rev16	r0, r0

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    2060:	350a      	adds	r5, #10
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2062:	685b      	ldr	r3, [r3, #4]
    crc = htons(crc);
    2064:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2068:	2102      	movs	r1, #2
    206a:	a803      	add	r0, sp, #12
    totlen = htons(totlen);
    206c:	ba6d      	rev16	r5, r5
    boot_uf->write(pkt_start, sizeof(pkt_start));
    206e:	4798      	blx	r3
    totlen = htons(totlen);
    2070:	f8ad 5012 	strh.w	r5, [sp, #18]

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    2074:	2502      	movs	r5, #2
    memcpy(buf, &totlen, sizeof(totlen));
    2076:	f10d 0112 	add.w	r1, sp, #18
    207a:	2202      	movs	r2, #2
    207c:	a806      	add	r0, sp, #24
    207e:	f004 fae9 	bl	6654 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2082:	f8d8 1000 	ldr.w	r1, [r8]
    2086:	2208      	movs	r2, #8
    2088:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    208c:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2090:	f004 fae0 	bl	6654 <memcpy>
    totlen += sizeof(*bs_hdr);
    2094:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    2098:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    209a:	3008      	adds	r0, #8
    209c:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    209e:	4622      	mov	r2, r4
    20a0:	4639      	mov	r1, r7
    totlen += sizeof(*bs_hdr);
    20a2:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    20a6:	4418      	add	r0, r3
    20a8:	f004 fad4 	bl	6654 <memcpy>
    totlen += len;
    20ac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20b0:	462a      	mov	r2, r5
    totlen += len;
    20b2:	18e0      	adds	r0, r4, r3
    20b4:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20b6:	ab06      	add	r3, sp, #24
    totlen += len;
    20b8:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20bc:	a904      	add	r1, sp, #16
    20be:	4418      	add	r0, r3
    20c0:	f004 fac8 	bl	6654 <memcpy>
    totlen += sizeof(crc);
    20c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    20c8:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    20ca:	442b      	add	r3, r5
    20cc:	b29b      	uxth	r3, r3
    20ce:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    20d2:	9300      	str	r3, [sp, #0]
    20d4:	21ad      	movs	r1, #173	; 0xad
    20d6:	ab06      	add	r3, sp, #24
    20d8:	a826      	add	r0, sp, #152	; 0x98
    20da:	f7ff f99d 	bl	1418 <base64_encode>
    totlen = enc_len;
    20de:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    20e0:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    20e2:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    20e6:	a826      	add	r0, sp, #152	; 0x98
    20e8:	685b      	ldr	r3, [r3, #4]
    20ea:	b289      	uxth	r1, r1
    20ec:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    20ee:	6833      	ldr	r3, [r6, #0]
    20f0:	4629      	mov	r1, r5
    20f2:	685b      	ldr	r3, [r3, #4]
    20f4:	4808      	ldr	r0, [pc, #32]	; (2118 <boot_serial_output+0x114>)
    20f6:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    20f8:	2149      	movs	r1, #73	; 0x49
    20fa:	4808      	ldr	r0, [pc, #32]	; (211c <boot_serial_output+0x118>)
    20fc:	f003 ff2a 	bl	5f54 <z_log_minimal_printk>
}
    2100:	b052      	add	sp, #328	; 0x148
    2102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2106:	bf00      	nop
    2108:	2000dfbc 	.word	0x2000dfbc
    210c:	2000c514 	.word	0x2000c514
    2110:	2000f98e 	.word	0x2000f98e
    2114:	2000dfc8 	.word	0x2000dfc8
    2118:	000093b8 	.word	0x000093b8
    211c:	000093bb 	.word	0x000093bb

00002120 <bs_rc_rsp>:
{
    2120:	b537      	push	{r0, r1, r2, r4, r5, lr}
    map_start_encode(&cbor_state, 10);
    2122:	4c0e      	ldr	r4, [pc, #56]	; (215c <bs_rc_rsp+0x3c>)
{
    2124:	4605      	mov	r5, r0
    map_start_encode(&cbor_state, 10);
    2126:	210a      	movs	r1, #10
    2128:	4620      	mov	r0, r4
    212a:	f004 f9af 	bl	648c <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    212e:	466b      	mov	r3, sp
    2130:	4a0b      	ldr	r2, [pc, #44]	; (2160 <bs_rc_rsp+0x40>)
    2132:	e892 0003 	ldmia.w	r2, {r0, r1}
    2136:	e883 0003 	stmia.w	r3, {r0, r1}
    213a:	4619      	mov	r1, r3
    213c:	4620      	mov	r0, r4
    213e:	f004 f996 	bl	646e <tstrx_encode>
    uintx32_put(&cbor_state, rc_code);
    2142:	4629      	mov	r1, r5
    2144:	4620      	mov	r0, r4
    2146:	f004 f987 	bl	6458 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    214a:	210a      	movs	r1, #10
    214c:	4620      	mov	r0, r4
    214e:	f004 f9b5 	bl	64bc <map_end_encode>
    boot_serial_output();
    2152:	f7ff ff57 	bl	2004 <boot_serial_output>
}
    2156:	b003      	add	sp, #12
    2158:	bd30      	pop	{r4, r5, pc}
    215a:	bf00      	nop
    215c:	2000c514 	.word	0x2000c514
    2160:	00008980 	.word	0x00008980

00002164 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    2164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2168:	680c      	ldr	r4, [r1, #0]
    216a:	4f1a      	ldr	r7, [pc, #104]	; (21d4 <boot_serial_in_dec.constprop.0+0x70>)
    216c:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    216e:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2170:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2174:	9000      	str	r0, [sp, #0]
    2176:	4b18      	ldr	r3, [pc, #96]	; (21d8 <boot_serial_in_dec.constprop.0+0x74>)
    2178:	1938      	adds	r0, r7, r4
    217a:	aa03      	add	r2, sp, #12
    217c:	3101      	adds	r1, #1
    217e:	f7ff f9c9 	bl	1514 <base64_decode>
    if (err) {
    2182:	4604      	mov	r4, r0
    2184:	bb10      	cbnz	r0, 21cc <boot_serial_in_dec.constprop.0+0x68>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    2186:	682b      	ldr	r3, [r5, #0]
    2188:	9a03      	ldr	r2, [sp, #12]
    218a:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    218c:	2b02      	cmp	r3, #2
    *out_off += rc;
    218e:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    2190:	d918      	bls.n	21c4 <boot_serial_in_dec.constprop.0+0x60>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    2192:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    2194:	3b02      	subs	r3, #2
    2196:	ba76      	rev16	r6, r6
    2198:	b2b6      	uxth	r6, r6
    219a:	429e      	cmp	r6, r3
    219c:	d112      	bne.n	21c4 <boot_serial_in_dec.constprop.0+0x60>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    219e:	f04f 0801 	mov.w	r8, #1
    21a2:	4603      	mov	r3, r0
    21a4:	f241 0221 	movw	r2, #4129	; 0x1021
    21a8:	4631      	mov	r1, r6
    21aa:	f8cd 8000 	str.w	r8, [sp]
    21ae:	1cb8      	adds	r0, r7, #2
    21b0:	f003 fdbe 	bl	5d30 <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    21b4:	b930      	cbnz	r0, 21c4 <boot_serial_in_dec.constprop.0+0x60>
    21b6:	2e02      	cmp	r6, #2
    21b8:	d904      	bls.n	21c4 <boot_serial_in_dec.constprop.0+0x60>
        return 0;
    }
    *out_off -= sizeof(crc);
    21ba:	682b      	ldr	r3, [r5, #0]
    21bc:	1e9a      	subs	r2, r3, #2
    21be:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    21c0:	54fc      	strb	r4, [r7, r3]

    return 1;
    21c2:	4644      	mov	r4, r8
}
    21c4:	4620      	mov	r0, r4
    21c6:	b004      	add	sp, #16
    21c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    21cc:	f04f 34ff 	mov.w	r4, #4294967295
    21d0:	e7f8      	b.n	21c4 <boot_serial_in_dec.constprop.0+0x60>
    21d2:	bf00      	nop
    21d4:	2000fa0e 	.word	0x2000fa0e
    21d8:	2000fc11 	.word	0x2000fc11

000021dc <boot_serial_input>:
{
    21dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len < sizeof(*hdr) ||
    21e0:	2907      	cmp	r1, #7
{
    21e2:	4604      	mov	r4, r0
    21e4:	b0a8      	sub	sp, #160	; 0xa0
    if (len < sizeof(*hdr) ||
    21e6:	f240 80d1 	bls.w	238c <FIH_LABEL_FIH_CALL_END_731+0xd6>
    21ea:	7802      	ldrb	r2, [r0, #0]
    21ec:	f012 05fd 	ands.w	r5, r2, #253	; 0xfd
    21f0:	f040 80cc 	bne.w	238c <FIH_LABEL_FIH_CALL_END_731+0xd6>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    21f4:	8843      	ldrh	r3, [r0, #2]
    21f6:	f1a1 0608 	sub.w	r6, r1, #8
    21fa:	ba5b      	rev16	r3, r3
    21fc:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    21fe:	42b3      	cmp	r3, r6
    2200:	f0c0 80c4 	bcc.w	238c <FIH_LABEL_FIH_CALL_END_731+0xd6>
    bs_hdr = hdr;
    2204:	4ba7      	ldr	r3, [pc, #668]	; (24a4 <FIH_LABEL_FIH_CALL_END_731+0x1ee>)
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    2206:	4fa8      	ldr	r7, [pc, #672]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    bs_hdr = hdr;
    2208:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    220a:	8880      	ldrh	r0, [r0, #4]
    220c:	ba43      	rev16	r3, r0
    220e:	80a3      	strh	r3, [r4, #4]
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    2210:	4ba6      	ldr	r3, [pc, #664]	; (24ac <FIH_LABEL_FIH_CALL_END_731+0x1f6>)
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    2212:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    2216:	603b      	str	r3, [r7, #0]
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    2218:	f103 0380 	add.w	r3, r3, #128	; 0x80
    221c:	60fb      	str	r3, [r7, #12]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    221e:	f040 81f8 	bne.w	2612 <FIH_LABEL_FIH_CALL_END_731+0x35c>
        switch (hdr->nh_id) {
    2222:	f894 8007 	ldrb.w	r8, [r4, #7]
    2226:	f1b8 0f00 	cmp.w	r8, #0
    222a:	d009      	beq.n	2240 <boot_serial_input+0x64>
    222c:	f1b8 0f01 	cmp.w	r8, #1
    2230:	f000 80b1 	beq.w	2396 <FIH_LABEL_FIH_CALL_END_731+0xe0>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2234:	2008      	movs	r0, #8
}
    2236:	b028      	add	sp, #160	; 0xa0
    2238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    223c:	f7ff bf70 	b.w	2120 <bs_rc_rsp>
    map_start_encode(&cbor_state, 1);
    2240:	2101      	movs	r1, #1
    2242:	4638      	mov	r0, r7
    2244:	f004 f922 	bl	648c <map_start_encode>
    tstrx_put(&cbor_state, "images");
    2248:	4a99      	ldr	r2, [pc, #612]	; (24b0 <FIH_LABEL_FIH_CALL_END_731+0x1fa>)
    224a:	ab08      	add	r3, sp, #32
    224c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2250:	e883 0003 	stmia.w	r3, {r0, r1}
    2254:	4619      	mov	r1, r3
    2256:	4638      	mov	r0, r7
    2258:	f004 f909 	bl	646e <tstrx_encode>
    list_start_encode(&cbor_state, 5);
    225c:	4638      	mov	r0, r7
    225e:	2105      	movs	r1, #5
    2260:	f004 f908 	bl	6474 <list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2264:	4644      	mov	r4, r8
            fih_int fih_rc = FIH_FAILURE;
    2266:	4e93      	ldr	r6, [pc, #588]	; (24b4 <FIH_LABEL_FIH_CALL_END_731+0x1fe>)
            if (hdr.ih_magic == IMAGE_MAGIC)
    2268:	4f93      	ldr	r7, [pc, #588]	; (24b8 <FIH_LABEL_FIH_CALL_END_731+0x202>)
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    226a:	f8df 8250 	ldr.w	r8, [pc, #592]	; 24bc <FIH_LABEL_FIH_CALL_END_731+0x206>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    226e:	4621      	mov	r1, r4
    2270:	2000      	movs	r0, #0
    2272:	f003 faf0 	bl	5856 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    2276:	a907      	add	r1, sp, #28
    2278:	b2c0      	uxtb	r0, r0
    227a:	f7ff fd71 	bl	1d60 <flash_area_open>
    227e:	4605      	mov	r5, r0
    2280:	2800      	cmp	r0, #0
    2282:	d178      	bne.n	2376 <FIH_LABEL_FIH_CALL_END_731+0xc0>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    2284:	2320      	movs	r3, #32
    2286:	4601      	mov	r1, r0
    2288:	aa10      	add	r2, sp, #64	; 0x40
    228a:	9807      	ldr	r0, [sp, #28]
    228c:	f003 fe70 	bl	5f70 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    2290:	9b10      	ldr	r3, [sp, #64]	; 0x40
            fih_int fih_rc = FIH_FAILURE;
    2292:	f8d6 9000 	ldr.w	r9, [r6]
            if (hdr.ih_magic == IMAGE_MAGIC)
    2296:	42bb      	cmp	r3, r7
    2298:	d10d      	bne.n	22b6 <FIH_LABEL_FIH_CALL_END_731>

0000229a <FIH_LABEL_FIH_CALL_START_707>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    229a:	2340      	movs	r3, #64	; 0x40
    229c:	9301      	str	r3, [sp, #4]
    229e:	ab18      	add	r3, sp, #96	; 0x60
    22a0:	9300      	str	r3, [sp, #0]
    22a2:	4629      	mov	r1, r5
    22a4:	4628      	mov	r0, r5
    22a6:	e9cd 5503 	strd	r5, r5, [sp, #12]
    22aa:	9b07      	ldr	r3, [sp, #28]
    22ac:	9502      	str	r5, [sp, #8]
    22ae:	aa10      	add	r2, sp, #64	; 0x40
    22b0:	f7fe f980 	bl	5b4 <bootutil_img_validate>
    22b4:	4681      	mov	r9, r0

000022b6 <FIH_LABEL_FIH_CALL_END_731>:
            flash_area_close(fap);
    22b6:	9807      	ldr	r0, [sp, #28]
    22b8:	f003 fe59 	bl	5f6e <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    22bc:	f8d8 3000 	ldr.w	r3, [r8]
    22c0:	454b      	cmp	r3, r9
    22c2:	d158      	bne.n	2376 <FIH_LABEL_FIH_CALL_END_731+0xc0>
            tstrx_put(&cbor_state, "slot");
    22c4:	4d7e      	ldr	r5, [pc, #504]	; (24c0 <FIH_LABEL_FIH_CALL_END_731+0x20a>)
            map_start_encode(&cbor_state, 20);
    22c6:	2114      	movs	r1, #20
    22c8:	4877      	ldr	r0, [pc, #476]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    22ca:	f004 f8df 	bl	648c <map_start_encode>
            tstrx_put(&cbor_state, "slot");
    22ce:	e895 0003 	ldmia.w	r5, {r0, r1}
    22d2:	ab0a      	add	r3, sp, #40	; 0x28
    22d4:	e883 0003 	stmia.w	r3, {r0, r1}
    22d8:	4619      	mov	r1, r3
    22da:	4873      	ldr	r0, [pc, #460]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    22dc:	f004 f8c7 	bl	646e <tstrx_encode>
            uintx32_put(&cbor_state, slot);
    22e0:	4621      	mov	r1, r4
    22e2:	4871      	ldr	r0, [pc, #452]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    22e4:	f004 f8b8 	bl	6458 <uintx32_put>
            tstrx_put(&cbor_state, "version");
    22e8:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    22ec:	ab0c      	add	r3, sp, #48	; 0x30
    off = u32toa(dst, ver->iv_major);
    22ee:	f10d 0960 	add.w	r9, sp, #96	; 0x60
            tstrx_put(&cbor_state, "version");
    22f2:	e883 0003 	stmia.w	r3, {r0, r1}
    22f6:	4619      	mov	r1, r3
    22f8:	486b      	ldr	r0, [pc, #428]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    22fa:	f004 f8b8 	bl	646e <tstrx_encode>
    off = u32toa(dst, ver->iv_major);
    22fe:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    2302:	4648      	mov	r0, r9
    2304:	f003 fef7 	bl	60f6 <u32toa>
    dst[off++] = '.';
    2308:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    230c:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    2310:	1c45      	adds	r5, r0, #1
    2312:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_minor);
    2316:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    231a:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_minor);
    231e:	eb09 0005 	add.w	r0, r9, r5
    2322:	f003 fee8 	bl	60f6 <u32toa>
    2326:	4428      	add	r0, r5
    dst[off++] = '.';
    2328:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    232c:	1c45      	adds	r5, r0, #1
    232e:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_revision);
    2332:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    2336:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_revision);
    233a:	eb09 0005 	add.w	r0, r9, r5
    233e:	f003 feda 	bl	60f6 <u32toa>
    2342:	4405      	add	r5, r0
    dst[off++] = '.';
    2344:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
    2348:	446b      	add	r3, sp
    234a:	3501      	adds	r5, #1
    off += u32toa(dst + off, ver->iv_build_num);
    234c:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    234e:	f803 ac40 	strb.w	sl, [r3, #-64]
    off += u32toa(dst + off, ver->iv_build_num);
    2352:	eb09 0005 	add.w	r0, r9, r5
    2356:	f003 fece 	bl	60f6 <u32toa>
            tstrx_put_term(&cbor_state, (char *)tmpbuf);
    235a:	4648      	mov	r0, r9
    235c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    2360:	f004 f93e 	bl	65e0 <strlen>
    2364:	a90e      	add	r1, sp, #56	; 0x38
    2366:	900f      	str	r0, [sp, #60]	; 0x3c
    2368:	484f      	ldr	r0, [pc, #316]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    236a:	f004 f880 	bl	646e <tstrx_encode>
            map_end_encode(&cbor_state, 20);
    236e:	2114      	movs	r1, #20
    2370:	484d      	ldr	r0, [pc, #308]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    2372:	f004 f8a3 	bl	64bc <map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    2376:	b164      	cbz	r4, 2392 <FIH_LABEL_FIH_CALL_END_731+0xdc>
    list_end_encode(&cbor_state, 5);
    2378:	2105      	movs	r1, #5
    237a:	484b      	ldr	r0, [pc, #300]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    237c:	f004 f892 	bl	64a4 <list_end_encode>
    map_end_encode(&cbor_state, 1);
    2380:	2101      	movs	r1, #1
    2382:	4849      	ldr	r0, [pc, #292]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    2384:	f004 f89a 	bl	64bc <map_end_encode>
    boot_serial_output();
    2388:	f7ff fe3c 	bl	2004 <boot_serial_output>
}
    238c:	b028      	add	sp, #160	; 0xa0
    238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (slot = 0; slot < 2; slot++) {
    2392:	2401      	movs	r4, #1
    2394:	e76b      	b.n	226e <boot_serial_input+0x92>
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2396:	4631      	mov	r1, r6
    2398:	ab0a      	add	r3, sp, #40	; 0x28
    239a:	aa18      	add	r2, sp, #96	; 0x60
    239c:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    23a0:	9508      	str	r5, [sp, #32]
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    23a2:	f000 fa49 	bl	2838 <cbor_decode_Upload>
    if (!result || (len != decoded_len)) {
    23a6:	bb80      	cbnz	r0, 240a <FIH_LABEL_FIH_CALL_END_731+0x154>
        rc = MGMT_ERR_EINVAL;
    23a8:	2403      	movs	r4, #3
    BOOT_LOG_INF("RX: 0x%x", rc);
    23aa:	4622      	mov	r2, r4
    23ac:	2149      	movs	r1, #73	; 0x49
    23ae:	4845      	ldr	r0, [pc, #276]	; (24c4 <FIH_LABEL_FIH_CALL_END_731+0x20e>)
    23b0:	f003 fdd0 	bl	5f54 <z_log_minimal_printk>
    tstrx_put(&cbor_state, "rc");
    23b4:	4d44      	ldr	r5, [pc, #272]	; (24c8 <FIH_LABEL_FIH_CALL_END_731+0x212>)
    map_start_encode(&cbor_state, 10);
    23b6:	210a      	movs	r1, #10
    23b8:	483b      	ldr	r0, [pc, #236]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    23ba:	f004 f867 	bl	648c <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    23be:	e895 0003 	ldmia.w	r5, {r0, r1}
    23c2:	ab10      	add	r3, sp, #64	; 0x40
    23c4:	e883 0003 	stmia.w	r3, {r0, r1}
    23c8:	4619      	mov	r1, r3
    23ca:	4837      	ldr	r0, [pc, #220]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    23cc:	f004 f84f 	bl	646e <tstrx_encode>
    uintx32_put(&cbor_state, rc);
    23d0:	4621      	mov	r1, r4
    23d2:	4835      	ldr	r0, [pc, #212]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    23d4:	f004 f840 	bl	6458 <uintx32_put>
    if (rc == 0) {
    23d8:	b96c      	cbnz	r4, 23f6 <FIH_LABEL_FIH_CALL_END_731+0x140>
        tstrx_put(&cbor_state, "off");
    23da:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
    23de:	ab0e      	add	r3, sp, #56	; 0x38
    23e0:	e883 0003 	stmia.w	r3, {r0, r1}
    23e4:	4619      	mov	r1, r3
    23e6:	4830      	ldr	r0, [pc, #192]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    23e8:	f004 f841 	bl	646e <tstrx_encode>
        uintx32_put(&cbor_state, curr_off);
    23ec:	4b37      	ldr	r3, [pc, #220]	; (24cc <FIH_LABEL_FIH_CALL_END_731+0x216>)
    23ee:	482e      	ldr	r0, [pc, #184]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    23f0:	6819      	ldr	r1, [r3, #0]
    23f2:	f004 f831 	bl	6458 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    23f6:	210a      	movs	r1, #10
    23f8:	482b      	ldr	r0, [pc, #172]	; (24a8 <FIH_LABEL_FIH_CALL_END_731+0x1f2>)
    23fa:	f004 f85f 	bl	64bc <map_end_encode>
    boot_serial_output();
    23fe:	f7ff fe01 	bl	2004 <boot_serial_output>
    flash_area_close(fap);
    2402:	9808      	ldr	r0, [sp, #32]
    2404:	f003 fdb3 	bl	5f6e <flash_area_close>
}
    2408:	e7c0      	b.n	238c <FIH_LABEL_FIH_CALL_END_731+0xd6>
    if (!result || (len != decoded_len)) {
    240a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    240c:	429e      	cmp	r6, r3
    240e:	d1cb      	bne.n	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
    long long int data_len = UINT64_MAX;
    2410:	f04f 34ff 	mov.w	r4, #4294967295
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2414:	462a      	mov	r2, r5
    img_num = 0;
    2416:	4628      	mov	r0, r5
    long long int data_len = UINT64_MAX;
    2418:	46a2      	mov	sl, r4
    long long int off = UINT64_MAX;
    241a:	4626      	mov	r6, r4
    241c:	46a1      	mov	r9, r4
    const uint8_t *img_data = NULL;
    241e:	46a8      	mov	r8, r5
    2420:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    2422:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2424:	42ba      	cmp	r2, r7
    2426:	d126      	bne.n	2476 <FIH_LABEL_FIH_CALL_END_731+0x1c0>
    if (off == UINT64_MAX || img_data == NULL) {
    2428:	f1b9 3fff 	cmp.w	r9, #4294967295
    242c:	bf08      	it	eq
    242e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    2432:	d0b9      	beq.n	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
    2434:	f1b8 0f00 	cmp.w	r8, #0
    2438:	d0b6      	beq.n	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    243a:	2100      	movs	r1, #0
    243c:	f003 fa0b 	bl	5856 <flash_area_id_from_multi_image_slot>
    2440:	a908      	add	r1, sp, #32
    2442:	b2c0      	uxtb	r0, r0
    2444:	f7ff fc8c 	bl	1d60 <flash_area_open>
    if (rc) {
    2448:	2800      	cmp	r0, #0
    244a:	d1ad      	bne.n	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
    if (off == 0) {
    244c:	ea56 0309 	orrs.w	r3, r6, r9
    2450:	4f1e      	ldr	r7, [pc, #120]	; (24cc <FIH_LABEL_FIH_CALL_END_731+0x216>)
    2452:	d108      	bne.n	2466 <FIH_LABEL_FIH_CALL_END_731+0x1b0>
	return (uint32_t)fa->fa_size;
    2454:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    2456:	6038      	str	r0, [r7, #0]
        if (data_len > flash_area_get_size(fap)) {
    2458:	689b      	ldr	r3, [r3, #8]
    245a:	42a3      	cmp	r3, r4
    245c:	eb70 000a 	sbcs.w	r0, r0, sl
    2460:	dba2      	blt.n	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
        img_size = data_len;
    2462:	4b1b      	ldr	r3, [pc, #108]	; (24d0 <FIH_LABEL_FIH_CALL_END_731+0x21a>)
    2464:	601c      	str	r4, [r3, #0]
    if (off != curr_off) {
    2466:	2400      	movs	r4, #0
    2468:	683b      	ldr	r3, [r7, #0]
    246a:	454c      	cmp	r4, r9
    246c:	bf08      	it	eq
    246e:	42b3      	cmpeq	r3, r6
    2470:	d030      	beq.n	24d4 <FIH_LABEL_FIH_CALL_END_731+0x21e>
        rc = 0;
    2472:	2400      	movs	r4, #0
    2474:	e799      	b.n	23aa <FIH_LABEL_FIH_CALL_END_731+0xf4>
        switch(member->_Member_choice) {
    2476:	7a19      	ldrb	r1, [r3, #8]
    2478:	2903      	cmp	r1, #3
    247a:	d804      	bhi.n	2486 <FIH_LABEL_FIH_CALL_END_731+0x1d0>
    247c:	e8df f001 	tbb	[pc, r1]
    2480:	0d090602 	.word	0x0d090602
                img_num = member->_Member_image;
    2484:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2486:	3201      	adds	r2, #1
    2488:	330c      	adds	r3, #12
    248a:	e7cb      	b.n	2424 <FIH_LABEL_FIH_CALL_END_731+0x16e>
                slen = member->_Member_data.len;
    248c:	e9d3 8500 	ldrd	r8, r5, [r3]
                break;
    2490:	e7f9      	b.n	2486 <FIH_LABEL_FIH_CALL_END_731+0x1d0>
                data_len = member->_Member_len;
    2492:	681c      	ldr	r4, [r3, #0]
    2494:	ea4f 7ae4 	mov.w	sl, r4, asr #31
                break;
    2498:	e7f5      	b.n	2486 <FIH_LABEL_FIH_CALL_END_731+0x1d0>
                off = member->_Member_off;
    249a:	681e      	ldr	r6, [r3, #0]
    249c:	ea4f 79e6 	mov.w	r9, r6, asr #31
                break;
    24a0:	e7f1      	b.n	2486 <FIH_LABEL_FIH_CALL_END_731+0x1d0>
    24a2:	bf00      	nop
    24a4:	2000dfbc 	.word	0x2000dfbc
    24a8:	2000c514 	.word	0x2000c514
    24ac:	2000f98e 	.word	0x2000f98e
    24b0:	00008988 	.word	0x00008988
    24b4:	2000c500 	.word	0x2000c500
    24b8:	96f3b83d 	.word	0x96f3b83d
    24bc:	2000c71c 	.word	0x2000c71c
    24c0:	00008990 	.word	0x00008990
    24c4:	0000948e 	.word	0x0000948e
    24c8:	00008980 	.word	0x00008980
    24cc:	2000dfc4 	.word	0x2000dfc4
    24d0:	2000dfc0 	.word	0x2000dfc0
    if (curr_off + img_blen > img_size) {
    24d4:	f8df a160 	ldr.w	sl, [pc, #352]	; 2638 <FIH_LABEL_FIH_CALL_END_731+0x382>
    24d8:	442b      	add	r3, r5
    24da:	f8da 2000 	ldr.w	r2, [sl]
    24de:	4293      	cmp	r3, r2
    24e0:	f63f af62 	bhi.w	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
    rem_bytes = img_blen % flash_area_align(fap);
    24e4:	9808      	ldr	r0, [sp, #32]
    24e6:	f003 fdc1 	bl	606c <flash_area_align>
    24ea:	fbb5 f3f0 	udiv	r3, r5, r0
    24ee:	fb03 5010 	mls	r0, r3, r0, r5
    24f2:	b2c6      	uxtb	r6, r0
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    24f4:	6838      	ldr	r0, [r7, #0]
    24f6:	f8da 3000 	ldr.w	r3, [sl]
    24fa:	1942      	adds	r2, r0, r5
    24fc:	429a      	cmp	r2, r3
    24fe:	d202      	bcs.n	2506 <FIH_LABEL_FIH_CALL_END_731+0x250>
    2500:	b10e      	cbz	r6, 2506 <FIH_LABEL_FIH_CALL_END_731+0x250>
        img_blen -= rem_bytes;
    2502:	1bad      	subs	r5, r5, r6
        rem_bytes = 0;
    2504:	4626      	mov	r6, r4
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    2506:	a90c      	add	r1, sp, #48	; 0x30
    2508:	4428      	add	r0, r5
    250a:	f7fe f839 	bl	580 <flash_area_sector_from_off>
    if (rc) {
    250e:	4604      	mov	r4, r0
    2510:	b120      	cbz	r0, 251c <FIH_LABEL_FIH_CALL_END_731+0x266>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    2512:	2145      	movs	r1, #69	; 0x45
    2514:	4849      	ldr	r0, [pc, #292]	; (263c <FIH_LABEL_FIH_CALL_END_731+0x386>)
                BOOT_LOG_ERR("Unable to determine flash sector of"
    2516:	f003 fd1d 	bl	5f54 <z_log_minimal_printk>
                goto out;
    251a:	e746      	b.n	23aa <FIH_LABEL_FIH_CALL_END_731+0xf4>
    if (off_last != flash_sector_get_off(&sector)) {
    251c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 2640 <FIH_LABEL_FIH_CALL_END_731+0x38a>
	return fs->fs_off;
    2520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2522:	f8d9 3000 	ldr.w	r3, [r9]
    2526:	429a      	cmp	r2, r3
    2528:	d012      	beq.n	2550 <FIH_LABEL_FIH_CALL_END_731+0x29a>
        BOOT_LOG_INF("Erasing sector at offset 0x%x", flash_sector_get_off(&sector));
    252a:	2149      	movs	r1, #73	; 0x49
    252c:	4845      	ldr	r0, [pc, #276]	; (2644 <FIH_LABEL_FIH_CALL_END_731+0x38e>)
        off_last = flash_sector_get_off(&sector);
    252e:	f8c9 2000 	str.w	r2, [r9]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", flash_sector_get_off(&sector));
    2532:	f003 fd0f 	bl	5f54 <z_log_minimal_printk>
        rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    2536:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    253a:	9808      	ldr	r0, [sp, #32]
    253c:	f003 fd67 	bl	600e <flash_area_erase>
        if (rc) {
    2540:	4604      	mov	r4, r0
    2542:	b128      	cbz	r0, 2550 <FIH_LABEL_FIH_CALL_END_731+0x29a>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    2544:	4622      	mov	r2, r4
    2546:	2145      	movs	r1, #69	; 0x45
    2548:	483f      	ldr	r0, [pc, #252]	; (2648 <FIH_LABEL_FIH_CALL_END_731+0x392>)
    254a:	f003 fd03 	bl	5f54 <z_log_minimal_printk>
                    goto out;
    254e:	e72c      	b.n	23aa <FIH_LABEL_FIH_CALL_END_731+0xf4>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    2550:	683a      	ldr	r2, [r7, #0]
    2552:	2149      	movs	r1, #73	; 0x49
    2554:	483d      	ldr	r0, [pc, #244]	; (264c <FIH_LABEL_FIH_CALL_END_731+0x396>)
    2556:	18ab      	adds	r3, r5, r2
    2558:	f003 fcfc 	bl	5f54 <z_log_minimal_printk>
    if (rem_bytes) {
    255c:	2e00      	cmp	r6, #0
    255e:	d03f      	beq.n	25e0 <FIH_LABEL_FIH_CALL_END_731+0x32a>
        if (w_size) {
    2560:	1bac      	subs	r4, r5, r6
    2562:	d00d      	beq.n	2580 <FIH_LABEL_FIH_CALL_END_731+0x2ca>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    2564:	4623      	mov	r3, r4
    2566:	4642      	mov	r2, r8
    2568:	6839      	ldr	r1, [r7, #0]
    256a:	9808      	ldr	r0, [sp, #32]
    256c:	f003 fd1c 	bl	5fa8 <flash_area_write>
            if (rc) {
    2570:	2800      	cmp	r0, #0
    2572:	f47f af19 	bne.w	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
            img_blen -= w_size;
    2576:	4635      	mov	r5, r6
            curr_off += w_size;
    2578:	683b      	ldr	r3, [r7, #0]
            img_data += w_size;
    257a:	44a0      	add	r8, r4
            curr_off += w_size;
    257c:	4423      	add	r3, r4
    257e:	603b      	str	r3, [r7, #0]
            memcpy(wbs_aligned, img_data, rem_bytes);
    2580:	4632      	mov	r2, r6
    2582:	4641      	mov	r1, r8
    2584:	a810      	add	r0, sp, #64	; 0x40
    2586:	f004 f865 	bl	6654 <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    258a:	9808      	ldr	r0, [sp, #32]
    258c:	f003 fd77 	bl	607e <flash_area_erased_val>
    2590:	ab10      	add	r3, sp, #64	; 0x40
    2592:	4601      	mov	r1, r0
    2594:	f1c6 0208 	rsb	r2, r6, #8
    2598:	1998      	adds	r0, r3, r6
    259a:	f004 f866 	bl	666a <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    259e:	9c08      	ldr	r4, [sp, #32]
    25a0:	683e      	ldr	r6, [r7, #0]
    25a2:	4620      	mov	r0, r4
    25a4:	f003 fd62 	bl	606c <flash_area_align>
    25a8:	4631      	mov	r1, r6
    25aa:	4603      	mov	r3, r0
    25ac:	4620      	mov	r0, r4
    25ae:	aa10      	add	r2, sp, #64	; 0x40
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    25b0:	f003 fcfa 	bl	5fa8 <flash_area_write>
    if (rc == 0) {
    25b4:	2800      	cmp	r0, #0
    25b6:	f47f aef7 	bne.w	23a8 <FIH_LABEL_FIH_CALL_END_731+0xf2>
        curr_off += img_blen;
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	441d      	add	r5, r3
        if (curr_off == img_size) {
    25be:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_blen;
    25c2:	603d      	str	r5, [r7, #0]
        if (curr_off == img_size) {
    25c4:	429d      	cmp	r5, r3
    25c6:	f47f af54 	bne.w	2472 <FIH_LABEL_FIH_CALL_END_731+0x1bc>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    25ca:	9808      	ldr	r0, [sp, #32]
    25cc:	f003 f9f9 	bl	59c2 <boot_status_off>
    25d0:	a90c      	add	r1, sp, #48	; 0x30
    25d2:	f7fd ffd5 	bl	580 <flash_area_sector_from_off>
            if (rc) {
    25d6:	4604      	mov	r4, r0
    25d8:	b138      	cbz	r0, 25ea <FIH_LABEL_FIH_CALL_END_731+0x334>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    25da:	2145      	movs	r1, #69	; 0x45
    25dc:	481c      	ldr	r0, [pc, #112]	; (2650 <FIH_LABEL_FIH_CALL_END_731+0x39a>)
    25de:	e79a      	b.n	2516 <FIH_LABEL_FIH_CALL_END_731+0x260>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    25e0:	462b      	mov	r3, r5
    25e2:	4642      	mov	r2, r8
    25e4:	6839      	ldr	r1, [r7, #0]
    25e6:	9808      	ldr	r0, [sp, #32]
    25e8:	e7e2      	b.n	25b0 <FIH_LABEL_FIH_CALL_END_731+0x2fa>
    25ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            if (off_last < flash_sector_get_off(&sector)) {
    25ec:	f8d9 3000 	ldr.w	r3, [r9]
    25f0:	429a      	cmp	r2, r3
    25f2:	f67f af3e 	bls.w	2472 <FIH_LABEL_FIH_CALL_END_731+0x1bc>
                BOOT_LOG_INF("Erasing sector at offset 0x%x",
    25f6:	2149      	movs	r1, #73	; 0x49
    25f8:	4812      	ldr	r0, [pc, #72]	; (2644 <FIH_LABEL_FIH_CALL_END_731+0x38e>)
    25fa:	f003 fcab 	bl	5f54 <z_log_minimal_printk>
                rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    25fe:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    2602:	9808      	ldr	r0, [sp, #32]
    2604:	f003 fd03 	bl	600e <flash_area_erase>
                if (rc) {
    2608:	4604      	mov	r4, r0
    260a:	2800      	cmp	r0, #0
    260c:	f43f aecd 	beq.w	23aa <FIH_LABEL_FIH_CALL_END_731+0xf4>
    2610:	e798      	b.n	2544 <FIH_LABEL_FIH_CALL_END_731+0x28e>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    2612:	2800      	cmp	r0, #0
    2614:	f47f ae0e 	bne.w	2234 <boot_serial_input+0x58>
        switch (hdr->nh_id) {
    2618:	79e3      	ldrb	r3, [r4, #7]
    261a:	2b01      	cmp	r3, #1
    261c:	f43f ae0b 	beq.w	2236 <boot_serial_input+0x5a>
    2620:	2b05      	cmp	r3, #5
    2622:	f47f ae07 	bne.w	2234 <boot_serial_input+0x58>
    bs_rc_rsp(0);
    2626:	f7ff fd7b 	bl	2120 <bs_rc_rsp>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    262a:	480a      	ldr	r0, [pc, #40]	; (2654 <FIH_LABEL_FIH_CALL_END_731+0x39e>)
    262c:	f005 ffff 	bl	862e <z_impl_k_busy_wait>
    sys_reboot(SYS_REBOOT_COLD);
    2630:	2001      	movs	r0, #1
    2632:	f7ff fb63 	bl	1cfc <sys_reboot>
    2636:	bf00      	nop
    2638:	2000dfc0 	.word	0x2000dfc0
    263c:	000093c3 	.word	0x000093c3
    2640:	2000c510 	.word	0x2000c510
    2644:	000093ee 	.word	0x000093ee
    2648:	00009411 	.word	0x00009411
    264c:	00009434 	.word	0x00009434
    2650:	00009454 	.word	0x00009454
    2654:	0003d090 	.word	0x0003d090

00002658 <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    2658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int rc;
    int off;
    int dec_off = 0;
    265a:	2400      	movs	r4, #0
{
    265c:	4606      	mov	r6, r0
    int full_line;
    int max_input;

    boot_uf = f;
    265e:	4b23      	ldr	r3, [pc, #140]	; (26ec <boot_serial_start+0x94>)
    2660:	4d23      	ldr	r5, [pc, #140]	; (26f0 <boot_serial_start+0x98>)

    off = 0;
    while (1) {
        MCUBOOT_CPU_IDLE();
        MCUBOOT_WATCHDOG_FEED();
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2662:	4f24      	ldr	r7, [pc, #144]	; (26f4 <boot_serial_start+0x9c>)
    int dec_off = 0;
    2664:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    2666:	6018      	str	r0, [r3, #0]
    2668:	f000 f8fa 	bl	2860 <arch_cpu_idle>
    266c:	4b22      	ldr	r3, [pc, #136]	; (26f8 <boot_serial_start+0xa0>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    266e:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2672:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    2676:	aa01      	add	r2, sp, #4
    2678:	f8c3 5604 	str.w	r5, [r3, #1540]	; 0x604
    267c:	3101      	adds	r1, #1
    267e:	f8c3 5608 	str.w	r5, [r3, #1544]	; 0x608
    2682:	1938      	adds	r0, r7, r4
    2684:	f8c3 560c 	str.w	r5, [r3, #1548]	; 0x60c
    2688:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
    268c:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    2690:	f8c3 5618 	str.w	r5, [r3, #1560]	; 0x618
    2694:	f8c3 561c 	str.w	r5, [r3, #1564]	; 0x61c
    2698:	6833      	ldr	r3, [r6, #0]
    269a:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    269c:	2800      	cmp	r0, #0
    269e:	9b01      	ldr	r3, [sp, #4]
    26a0:	dc01      	bgt.n	26a6 <boot_serial_start+0x4e>
    26a2:	2b00      	cmp	r3, #0
    26a4:	d0e0      	beq.n	2668 <boot_serial_start+0x10>
            continue;
        }
        off += rc;
    26a6:	4404      	add	r4, r0
        if (!full_line) {
    26a8:	b92b      	cbnz	r3, 26b6 <boot_serial_start+0x5e>
            if (off == max_input) {
    26aa:	f240 2301 	movw	r3, #513	; 0x201
    26ae:	429c      	cmp	r4, r3
    26b0:	d1da      	bne.n	2668 <boot_serial_start+0x10>

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
        }
        off = 0;
    26b2:	2400      	movs	r4, #0
    26b4:	e7d8      	b.n	2668 <boot_serial_start+0x10>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    26b6:	783b      	ldrb	r3, [r7, #0]
    26b8:	2b06      	cmp	r3, #6
    26ba:	d109      	bne.n	26d0 <boot_serial_start+0x78>
    26bc:	787b      	ldrb	r3, [r7, #1]
    26be:	2b09      	cmp	r3, #9
    26c0:	d10b      	bne.n	26da <boot_serial_start+0x82>
            dec_off = 0;
    26c2:	2300      	movs	r3, #0
    26c4:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    26c6:	4669      	mov	r1, sp
    26c8:	1ea0      	subs	r0, r4, #2
    26ca:	f7ff fd4b 	bl	2164 <boot_serial_in_dec.constprop.0>
    26ce:	e004      	b.n	26da <boot_serial_start+0x82>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    26d0:	2b04      	cmp	r3, #4
    26d2:	d102      	bne.n	26da <boot_serial_start+0x82>
    26d4:	787b      	ldrb	r3, [r7, #1]
    26d6:	2b14      	cmp	r3, #20
    26d8:	d0f5      	beq.n	26c6 <boot_serial_start+0x6e>
        if (rc == 1) {
    26da:	2801      	cmp	r0, #1
    26dc:	d1e9      	bne.n	26b2 <boot_serial_start+0x5a>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    26de:	9900      	ldr	r1, [sp, #0]
    26e0:	4806      	ldr	r0, [pc, #24]	; (26fc <boot_serial_start+0xa4>)
    26e2:	3902      	subs	r1, #2
    26e4:	f7ff fd7a 	bl	21dc <boot_serial_input>
    26e8:	e7e3      	b.n	26b2 <boot_serial_start+0x5a>
    26ea:	bf00      	nop
    26ec:	2000dfc8 	.word	0x2000dfc8
    26f0:	6e524635 	.word	0x6e524635
    26f4:	2000fc0f 	.word	0x2000fc0f
    26f8:	50018000 	.word	0x50018000
    26fc:	2000fa10 	.word	0x2000fa10

00002700 <decode_Upload>:
	return tmp_result;
}

static bool decode_Upload(
		cbor_state_t *state, struct Upload *result)
{
    2700:	b530      	push	{r4, r5, lr}
    2702:	b085      	sub	sp, #20
    2704:	4605      	mov	r5, r0
    2706:	460c      	mov	r4, r1
	cbor_print("%s\n", __func__);
	bool int_res;

	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    2708:	f003 fddd 	bl	62c6 <map_start_decode>
    270c:	b920      	cbnz	r0, 2718 <decode_Upload+0x18>
    270e:	2400      	movs	r4, #0

	if (!tmp_result)
		cbor_trace();

	return tmp_result;
}
    2710:	f004 0001 	and.w	r0, r4, #1
    2714:	b005      	add	sp, #20
    2716:	bd30      	pop	{r4, r5, pc}
	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    2718:	230c      	movs	r3, #12
    271a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    271e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2722:	2105      	movs	r1, #5
    2724:	2001      	movs	r0, #1
    2726:	4b05      	ldr	r3, [pc, #20]	; (273c <decode_Upload+0x3c>)
    2728:	9500      	str	r5, [sp, #0]
    272a:	f003 fddc 	bl	62e6 <multi_decode>
    272e:	4604      	mov	r4, r0
    2730:	4628      	mov	r0, r5
    2732:	f003 fdd6 	bl	62e2 <map_end_decode>
    2736:	2800      	cmp	r0, #0
    2738:	d0e9      	beq.n	270e <decode_Upload+0xe>
    273a:	e7e9      	b.n	2710 <decode_Upload+0x10>
    273c:	00002741 	.word	0x00002741

00002740 <decode_Member>:
{
    2740:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2742:	4604      	mov	r4, r0
    2744:	460d      	mov	r5, r1
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2746:	f003 fef6 	bl	6536 <union_start_code>
    274a:	b910      	cbnz	r0, 2752 <decode_Member+0x12>
    274c:	2000      	movs	r0, #0
}
    274e:	b002      	add	sp, #8
    2750:	bd70      	pop	{r4, r5, r6, pc}
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2752:	4b34      	ldr	r3, [pc, #208]	; (2824 <CONFIG_MAIN_STACK_SIZE+0x24>)
    2754:	4669      	mov	r1, sp
    2756:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2758:	2305      	movs	r3, #5
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    275a:	4620      	mov	r0, r4
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    275c:	9301      	str	r3, [sp, #4]
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    275e:	f003 fdaf 	bl	62c0 <tstrx_expect>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2762:	b158      	cbz	r0, 277c <decode_Member+0x3c>
	&& (intx32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2764:	4629      	mov	r1, r5
    2766:	4620      	mov	r0, r4
    2768:	f003 fd5e 	bl	6228 <intx32_decode>
    276c:	b130      	cbz	r0, 277c <decode_Member+0x3c>
    276e:	2300      	movs	r3, #0
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    2770:	722b      	strb	r3, [r5, #8]
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    2772:	4620      	mov	r0, r4
    2774:	f003 fee6 	bl	6544 <union_end_code>
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2778:	2001      	movs	r0, #1
    277a:	e7e8      	b.n	274e <decode_Member+0xe>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    277c:	4620      	mov	r0, r4
    277e:	f003 fedd 	bl	653c <union_elem_code>
    2782:	b178      	cbz	r0, 27a4 <decode_Member+0x64>
    2784:	4b28      	ldr	r3, [pc, #160]	; (2828 <CONFIG_MAIN_STACK_SIZE+0x28>)
    2786:	4669      	mov	r1, sp
    2788:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    278a:	2304      	movs	r3, #4
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    278c:	4620      	mov	r0, r4
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    278e:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2790:	f003 fd96 	bl	62c0 <tstrx_expect>
    2794:	b130      	cbz	r0, 27a4 <decode_Member+0x64>
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    2796:	4629      	mov	r1, r5
    2798:	4620      	mov	r0, r4
    279a:	f003 fd8e 	bl	62ba <bstrx_decode>
    279e:	b108      	cbz	r0, 27a4 <decode_Member+0x64>
    27a0:	2301      	movs	r3, #1
    27a2:	e7e5      	b.n	2770 <decode_Member+0x30>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    27a4:	4620      	mov	r0, r4
    27a6:	f003 fec9 	bl	653c <union_elem_code>
    27aa:	b178      	cbz	r0, 27cc <decode_Member+0x8c>
    27ac:	4b1f      	ldr	r3, [pc, #124]	; (282c <CONFIG_MAIN_STACK_SIZE+0x2c>)
    27ae:	4669      	mov	r1, sp
    27b0:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    27b2:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    27b4:	4620      	mov	r0, r4
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    27b6:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    27b8:	f003 fd82 	bl	62c0 <tstrx_expect>
    27bc:	b130      	cbz	r0, 27cc <decode_Member+0x8c>
	&& (intx32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    27be:	4629      	mov	r1, r5
    27c0:	4620      	mov	r0, r4
    27c2:	f003 fd31 	bl	6228 <intx32_decode>
    27c6:	b108      	cbz	r0, 27cc <decode_Member+0x8c>
    27c8:	2302      	movs	r3, #2
    27ca:	e7d1      	b.n	2770 <decode_Member+0x30>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    27cc:	4620      	mov	r0, r4
    27ce:	f003 feb5 	bl	653c <union_elem_code>
    27d2:	b178      	cbz	r0, 27f4 <decode_Member+0xb4>
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    27d4:	2603      	movs	r6, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    27d6:	4b16      	ldr	r3, [pc, #88]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    27d8:	4669      	mov	r1, sp
    27da:	4620      	mov	r0, r4
    27dc:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    27de:	9601      	str	r6, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    27e0:	f003 fd6e 	bl	62c0 <tstrx_expect>
    27e4:	b130      	cbz	r0, 27f4 <decode_Member+0xb4>
	&& (intx32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    27e6:	4629      	mov	r1, r5
    27e8:	4620      	mov	r0, r4
    27ea:	f003 fd1d 	bl	6228 <intx32_decode>
    27ee:	b108      	cbz	r0, 27f4 <decode_Member+0xb4>
    27f0:	722e      	strb	r6, [r5, #8]
    27f2:	e7be      	b.n	2772 <decode_Member+0x32>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    27f4:	4620      	mov	r0, r4
    27f6:	f003 fea1 	bl	653c <union_elem_code>
    27fa:	b178      	cbz	r0, 281c <CONFIG_MAIN_STACK_SIZE+0x1c>
    27fc:	4b0d      	ldr	r3, [pc, #52]	; (2834 <CONFIG_MAIN_STACK_SIZE+0x34>)
    27fe:	4669      	mov	r1, sp
    2800:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2802:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2804:	4620      	mov	r0, r4
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2806:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2808:	f003 fd5a 	bl	62c0 <tstrx_expect>
    280c:	b130      	cbz	r0, 281c <CONFIG_MAIN_STACK_SIZE+0x1c>
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    280e:	4629      	mov	r1, r5
    2810:	4620      	mov	r0, r4
    2812:	f003 fd52 	bl	62ba <bstrx_decode>
    2816:	b108      	cbz	r0, 281c <CONFIG_MAIN_STACK_SIZE+0x1c>
    2818:	2304      	movs	r3, #4
    281a:	e7a9      	b.n	2770 <decode_Member+0x30>
    281c:	4620      	mov	r0, r4
    281e:	f003 fe91 	bl	6544 <union_end_code>
    2822:	e793      	b.n	274c <decode_Member+0xc>
    2824:	00009104 	.word	0x00009104
    2828:	000094b7 	.word	0x000094b7
    282c:	000094bc 	.word	0x000094bc
    2830:	0000949f 	.word	0x0000949f
    2834:	000094c0 	.word	0x000094c0

00002838 <cbor_decode_Upload>:

bool cbor_decode_Upload(
		const uint8_t *payload, uint32_t payload_len,
		struct Upload *result,
		uint32_t *payload_len_out)
{
    2838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return entry_function(payload, payload_len, (const void *)result,
    283a:	f04f 0c02 	mov.w	ip, #2
    283e:	2401      	movs	r4, #1
    2840:	e9cd 4c01 	strd	r4, ip, [sp, #4]
    2844:	4c02      	ldr	r4, [pc, #8]	; (2850 <cbor_decode_Upload+0x18>)
    2846:	9400      	str	r4, [sp, #0]
    2848:	f003 fe80 	bl	654c <entry_function>
		payload_len_out, (void *)decode_Upload,
		1, 2);
}
    284c:	b004      	add	sp, #16
    284e:	bd10      	pop	{r4, pc}
    2850:	00002701 	.word	0x00002701

00002854 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2854:	4901      	ldr	r1, [pc, #4]	; (285c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2856:	2210      	movs	r2, #16
	str	r2, [r1]
    2858:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    285a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    285c:	e000ed10 	.word	0xe000ed10

00002860 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2860:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2862:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2864:	f380 8811 	msr	BASEPRI, r0
	isb
    2868:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    286c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2870:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2872:	b662      	cpsie	i
	isb
    2874:	f3bf 8f6f 	isb	sy

	bx	lr
    2878:	4770      	bx	lr
    287a:	bf00      	nop

0000287c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    287c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    287e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2880:	f381 8811 	msr	BASEPRI, r1

	wfe
    2884:	bf20      	wfe

	msr	BASEPRI, r0
    2886:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    288a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    288c:	4770      	bx	lr
    288e:	bf00      	nop

00002890 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2890:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2892:	4605      	mov	r5, r0

	if (esf != NULL) {
    2894:	460c      	mov	r4, r1
    2896:	b1c9      	cbz	r1, 28cc <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2898:	688b      	ldr	r3, [r1, #8]
    289a:	4810      	ldr	r0, [pc, #64]	; (28dc <z_arm_fatal_error+0x4c>)
    289c:	9300      	str	r3, [sp, #0]
    289e:	e9d1 2300 	ldrd	r2, r3, [r1]
    28a2:	2145      	movs	r1, #69	; 0x45
    28a4:	f003 fb56 	bl	5f54 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    28a8:	6963      	ldr	r3, [r4, #20]
    28aa:	2145      	movs	r1, #69	; 0x45
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    28b2:	480b      	ldr	r0, [pc, #44]	; (28e0 <z_arm_fatal_error+0x50>)
    28b4:	f003 fb4e 	bl	5f54 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    28b8:	2145      	movs	r1, #69	; 0x45
    28ba:	69e2      	ldr	r2, [r4, #28]
    28bc:	4809      	ldr	r0, [pc, #36]	; (28e4 <z_arm_fatal_error+0x54>)
    28be:	f003 fb49 	bl	5f54 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    28c2:	2145      	movs	r1, #69	; 0x45
    28c4:	69a2      	ldr	r2, [r4, #24]
    28c6:	4808      	ldr	r0, [pc, #32]	; (28e8 <z_arm_fatal_error+0x58>)
    28c8:	f003 fb44 	bl	5f54 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    28cc:	4621      	mov	r1, r4
    28ce:	4628      	mov	r0, r5
}
    28d0:	b003      	add	sp, #12
    28d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    28d6:	f002 bcb9 	b.w	524c <z_fatal_error>
    28da:	bf00      	nop
    28dc:	000094c4 	.word	0x000094c4
    28e0:	000094f8 	.word	0x000094f8
    28e4:	0000952c 	.word	0x0000952c
    28e8:	00009540 	.word	0x00009540

000028ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    28ec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    28ee:	2800      	cmp	r0, #0
    28f0:	db07      	blt.n	2902 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28f2:	2301      	movs	r3, #1
    28f4:	0941      	lsrs	r1, r0, #5
    28f6:	4a03      	ldr	r2, [pc, #12]	; (2904 <arch_irq_enable+0x18>)
    28f8:	f000 001f 	and.w	r0, r0, #31
    28fc:	4083      	lsls	r3, r0
    28fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2902:	4770      	bx	lr
    2904:	e000e100 	.word	0xe000e100

00002908 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2908:	4b05      	ldr	r3, [pc, #20]	; (2920 <arch_irq_is_enabled+0x18>)
    290a:	0942      	lsrs	r2, r0, #5
    290c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2910:	2301      	movs	r3, #1
    2912:	f000 001f 	and.w	r0, r0, #31
    2916:	fa03 f000 	lsl.w	r0, r3, r0
}
    291a:	4010      	ands	r0, r2
    291c:	4770      	bx	lr
    291e:	bf00      	nop
    2920:	e000e100 	.word	0xe000e100

00002924 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2924:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2926:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    2928:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    292c:	bfac      	ite	ge
    292e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2932:	4b06      	ldrlt	r3, [pc, #24]	; (294c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2934:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2938:	b2c9      	uxtb	r1, r1
    293a:	bfab      	itete	ge
    293c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2940:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2944:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2948:	5419      	strblt	r1, [r3, r0]
}
    294a:	4770      	bx	lr
    294c:	e000ed14 	.word	0xe000ed14

00002950 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2950:	bf30      	wfi
    b z_SysNmiOnReset
    2952:	f7ff bffd 	b.w	2950 <z_SysNmiOnReset>
    2956:	bf00      	nop

00002958 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2958:	4a0b      	ldr	r2, [pc, #44]	; (2988 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    295a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    295c:	4b0b      	ldr	r3, [pc, #44]	; (298c <z_arm_prep_c+0x34>)
    295e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2962:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2968:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    296c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2970:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2978:	f002 fcbe 	bl	52f8 <z_bss_zero>
	z_data_copy();
    297c:	f002 fd00 	bl	5380 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2980:	f000 fa26 	bl	2dd0 <z_arm_interrupt_init>
	z_cstart();
    2984:	f002 fcc2 	bl	530c <z_cstart>
    2988:	00000000 	.word	0x00000000
    298c:	e000ed00 	.word	0xe000ed00

00002990 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2990:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2994:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2996:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    299a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    299e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    29a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    29a4:	2902      	cmp	r1, #2
    beq _oops
    29a6:	d0ff      	beq.n	29a8 <_oops>

000029a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    29a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    29aa:	f003 fe01 	bl	65b0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    29ae:	bd01      	pop	{r0, pc}

000029b0 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    29b0:	4604      	mov	r4, r0
    29b2:	4608      	mov	r0, r1
    29b4:	4611      	mov	r1, r2
    29b6:	461a      	mov	r2, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    29b8:	2300      	movs	r3, #0
    29ba:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    29be:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <loop+0x2>)
    29c0:	2520      	movs	r5, #32
    29c2:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    29c6:	f386 880b 	msr	PSPLIM, r6
    29ca:	f383 8809 	msr	PSP, r3
    29ce:	b663      	cpsie	if
    29d0:	f04f 0300 	mov.w	r3, #0
    29d4:	f383 8811 	msr	BASEPRI, r3
    29d8:	f3bf 8f6f 	isb	sy
    29dc:	47a0      	blx	r4
    29de:	f385 8811 	msr	BASEPRI, r5
    29e2:	f3bf 8f6f 	isb	sy

000029e6 <loop>:
    29e6:	e7fe      	b.n	29e6 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    29e8:	20012e58 	.word	0x20012e58

000029ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    29ec:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    29ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    29f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    29f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    29fa:	4904      	ldr	r1, [pc, #16]	; (2a0c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    29fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    29fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2a00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2a02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2a06:	4902      	ldr	r1, [pc, #8]	; (2a10 <_isr_wrapper+0x24>)
	bx r1
    2a08:	4708      	bx	r1
    2a0a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2a0c:	0000870c 	.word	0x0000870c
	ldr r1, =z_arm_int_exit
    2a10:	00002a15 	.word	0x00002a15

00002a14 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2a14:	4770      	bx	lr
    2a16:	bf00      	nop

00002a18 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2a18:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2a1a:	4c21      	ldr	r4, [pc, #132]	; (2aa0 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2a1c:	2145      	movs	r1, #69	; 0x45
    2a1e:	4821      	ldr	r0, [pc, #132]	; (2aa4 <usage_fault.constprop.0+0x8c>)
    2a20:	f003 fa98 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2a24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a26:	019d      	lsls	r5, r3, #6
    2a28:	d503      	bpl.n	2a32 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2a2a:	2145      	movs	r1, #69	; 0x45
    2a2c:	481e      	ldr	r0, [pc, #120]	; (2aa8 <usage_fault.constprop.0+0x90>)
    2a2e:	f003 fa91 	bl	5f54 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2a32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a34:	01dc      	lsls	r4, r3, #7
    2a36:	d503      	bpl.n	2a40 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2a38:	2145      	movs	r1, #69	; 0x45
    2a3a:	481c      	ldr	r0, [pc, #112]	; (2aac <usage_fault.constprop.0+0x94>)
    2a3c:	f003 fa8a 	bl	5f54 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2a40:	4d17      	ldr	r5, [pc, #92]	; (2aa0 <usage_fault.constprop.0+0x88>)
    2a42:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2a44:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2a48:	d004      	beq.n	2a54 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2a4a:	2145      	movs	r1, #69	; 0x45
    2a4c:	4818      	ldr	r0, [pc, #96]	; (2ab0 <usage_fault.constprop.0+0x98>)
    2a4e:	f003 fa81 	bl	5f54 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2a52:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2a54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a56:	0318      	lsls	r0, r3, #12
    2a58:	d503      	bpl.n	2a62 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2a5a:	2145      	movs	r1, #69	; 0x45
    2a5c:	4815      	ldr	r0, [pc, #84]	; (2ab4 <usage_fault.constprop.0+0x9c>)
    2a5e:	f003 fa79 	bl	5f54 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2a62:	4d0f      	ldr	r5, [pc, #60]	; (2aa0 <usage_fault.constprop.0+0x88>)
    2a64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a66:	0359      	lsls	r1, r3, #13
    2a68:	d503      	bpl.n	2a72 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2a6a:	2145      	movs	r1, #69	; 0x45
    2a6c:	4812      	ldr	r0, [pc, #72]	; (2ab8 <usage_fault.constprop.0+0xa0>)
    2a6e:	f003 fa71 	bl	5f54 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2a72:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a74:	039a      	lsls	r2, r3, #14
    2a76:	d503      	bpl.n	2a80 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2a78:	2145      	movs	r1, #69	; 0x45
    2a7a:	4810      	ldr	r0, [pc, #64]	; (2abc <usage_fault.constprop.0+0xa4>)
    2a7c:	f003 fa6a 	bl	5f54 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2a80:	4d07      	ldr	r5, [pc, #28]	; (2aa0 <usage_fault.constprop.0+0x88>)
    2a82:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a84:	03db      	lsls	r3, r3, #15
    2a86:	d503      	bpl.n	2a90 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2a88:	2145      	movs	r1, #69	; 0x45
    2a8a:	480d      	ldr	r0, [pc, #52]	; (2ac0 <usage_fault.constprop.0+0xa8>)
    2a8c:	f003 fa62 	bl	5f54 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a90:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2a92:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a94:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2a98:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2a9c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2a9e:	bd38      	pop	{r3, r4, r5, pc}
    2aa0:	e000ed00 	.word	0xe000ed00
    2aa4:	00009573 	.word	0x00009573
    2aa8:	00009590 	.word	0x00009590
    2aac:	000095a8 	.word	0x000095a8
    2ab0:	000095c7 	.word	0x000095c7
    2ab4:	000095f6 	.word	0x000095f6
    2ab8:	00009619 	.word	0x00009619
    2abc:	00009643 	.word	0x00009643
    2ac0:	00009662 	.word	0x00009662

00002ac4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2ac4:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ac6:	4c23      	ldr	r4, [pc, #140]	; (2b54 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2ac8:	4606      	mov	r6, r0
    2aca:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2acc:	4822      	ldr	r0, [pc, #136]	; (2b58 <bus_fault.constprop.0+0x94>)
    2ace:	2145      	movs	r1, #69	; 0x45
    2ad0:	f003 fa40 	bl	5f54 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ad6:	04d9      	lsls	r1, r3, #19
    2ad8:	d503      	bpl.n	2ae2 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2ada:	2145      	movs	r1, #69	; 0x45
    2adc:	481f      	ldr	r0, [pc, #124]	; (2b5c <bus_fault.constprop.0+0x98>)
    2ade:	f003 fa39 	bl	5f54 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ae4:	051a      	lsls	r2, r3, #20
    2ae6:	d503      	bpl.n	2af0 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2ae8:	2145      	movs	r1, #69	; 0x45
    2aea:	481d      	ldr	r0, [pc, #116]	; (2b60 <bus_fault.constprop.0+0x9c>)
    2aec:	f003 fa32 	bl	5f54 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2af0:	4c18      	ldr	r4, [pc, #96]	; (2b54 <bus_fault.constprop.0+0x90>)
    2af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2af4:	059b      	lsls	r3, r3, #22
    2af6:	d510      	bpl.n	2b1a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2af8:	481a      	ldr	r0, [pc, #104]	; (2b64 <bus_fault.constprop.0+0xa0>)
    2afa:	2145      	movs	r1, #69	; 0x45
    2afc:	f003 fa2a 	bl	5f54 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    2b00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b04:	0418      	lsls	r0, r3, #16
    2b06:	d508      	bpl.n	2b1a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2b08:	2145      	movs	r1, #69	; 0x45
    2b0a:	4817      	ldr	r0, [pc, #92]	; (2b68 <bus_fault.constprop.0+0xa4>)
    2b0c:	f003 fa22 	bl	5f54 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2b10:	b11e      	cbz	r6, 2b1a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2b18:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2b1a:	4c0e      	ldr	r4, [pc, #56]	; (2b54 <bus_fault.constprop.0+0x90>)
    2b1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b1e:	0559      	lsls	r1, r3, #21
    2b20:	d503      	bpl.n	2b2a <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2b22:	2145      	movs	r1, #69	; 0x45
    2b24:	4811      	ldr	r0, [pc, #68]	; (2b6c <bus_fault.constprop.0+0xa8>)
    2b26:	f003 fa15 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2b2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b2c:	05da      	lsls	r2, r3, #23
    2b2e:	d50b      	bpl.n	2b48 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2b30:	2145      	movs	r1, #69	; 0x45
    2b32:	480f      	ldr	r0, [pc, #60]	; (2b70 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b34:	f003 fa0e 	bl	5f54 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2b38:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2b3a:	4a06      	ldr	r2, [pc, #24]	; (2b54 <bus_fault.constprop.0+0x90>)
    2b3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b3e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2b42:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b44:	7028      	strb	r0, [r5, #0]
}
    2b46:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b4a:	049b      	lsls	r3, r3, #18
    2b4c:	d5f4      	bpl.n	2b38 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b4e:	2145      	movs	r1, #69	; 0x45
    2b50:	4808      	ldr	r0, [pc, #32]	; (2b74 <bus_fault.constprop.0+0xb0>)
    2b52:	e7ef      	b.n	2b34 <bus_fault.constprop.0+0x70>
    2b54:	e000ed00 	.word	0xe000ed00
    2b58:	00009692 	.word	0x00009692
    2b5c:	000096ad 	.word	0x000096ad
    2b60:	000096c3 	.word	0x000096c3
    2b64:	000096db 	.word	0x000096db
    2b68:	000096f9 	.word	0x000096f9
    2b6c:	00009713 	.word	0x00009713
    2b70:	00009733 	.word	0x00009733
    2b74:	00009750 	.word	0x00009750

00002b78 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2b78:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b7a:	4c22      	ldr	r4, [pc, #136]	; (2c04 <mem_manage_fault.constprop.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2b7c:	4606      	mov	r6, r0
    2b7e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2b80:	4821      	ldr	r0, [pc, #132]	; (2c08 <mem_manage_fault.constprop.0+0x90>)
    2b82:	2145      	movs	r1, #69	; 0x45
    2b84:	f003 f9e6 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b8a:	06d8      	lsls	r0, r3, #27
    2b8c:	d503      	bpl.n	2b96 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2b8e:	2145      	movs	r1, #69	; 0x45
    2b90:	481e      	ldr	r0, [pc, #120]	; (2c0c <mem_manage_fault.constprop.0+0x94>)
    2b92:	f003 f9df 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b98:	0719      	lsls	r1, r3, #28
    2b9a:	d503      	bpl.n	2ba4 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2b9c:	2145      	movs	r1, #69	; 0x45
    2b9e:	481c      	ldr	r0, [pc, #112]	; (2c10 <mem_manage_fault.constprop.0+0x98>)
    2ba0:	f003 f9d8 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2ba4:	4c17      	ldr	r4, [pc, #92]	; (2c04 <mem_manage_fault.constprop.0+0x8c>)
    2ba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ba8:	079a      	lsls	r2, r3, #30
    2baa:	d510      	bpl.n	2bce <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2bac:	2145      	movs	r1, #69	; 0x45
    2bae:	4819      	ldr	r0, [pc, #100]	; (2c14 <mem_manage_fault.constprop.0+0x9c>)
    2bb0:	f003 f9d0 	bl	5f54 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    2bb4:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2bb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bb8:	061b      	lsls	r3, r3, #24
    2bba:	d508      	bpl.n	2bce <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2bbc:	2145      	movs	r1, #69	; 0x45
    2bbe:	4816      	ldr	r0, [pc, #88]	; (2c18 <mem_manage_fault.constprop.0+0xa0>)
    2bc0:	f003 f9c8 	bl	5f54 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2bc4:	b11e      	cbz	r6, 2bce <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2bc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2bcc:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2bce:	4c0d      	ldr	r4, [pc, #52]	; (2c04 <mem_manage_fault.constprop.0+0x8c>)
    2bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bd2:	07d8      	lsls	r0, r3, #31
    2bd4:	d503      	bpl.n	2bde <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2bd6:	2145      	movs	r1, #69	; 0x45
    2bd8:	4810      	ldr	r0, [pc, #64]	; (2c1c <mem_manage_fault.constprop.0+0xa4>)
    2bda:	f003 f9bb 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2be0:	0699      	lsls	r1, r3, #26
    2be2:	d503      	bpl.n	2bec <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    2be4:	2145      	movs	r1, #69	; 0x45
    2be6:	480e      	ldr	r0, [pc, #56]	; (2c20 <mem_manage_fault.constprop.0+0xa8>)
    2be8:	f003 f9b4 	bl	5f54 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2bec:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2bee:	4b05      	ldr	r3, [pc, #20]	; (2c04 <mem_manage_fault.constprop.0+0x8c>)
    2bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bf2:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2bf4:	bf58      	it	pl
    2bf6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bfa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2bfe:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2c00:	7028      	strb	r0, [r5, #0]
}
    2c02:	bd70      	pop	{r4, r5, r6, pc}
    2c04:	e000ed00 	.word	0xe000ed00
    2c08:	00009784 	.word	0x00009784
    2c0c:	0000979f 	.word	0x0000979f
    2c10:	000096c3 	.word	0x000096c3
    2c14:	000097d7 	.word	0x000097d7
    2c18:	000097f4 	.word	0x000097f4
    2c1c:	0000980f 	.word	0x0000980f
    2c20:	00009750 	.word	0x00009750

00002c24 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c28:	4b53      	ldr	r3, [pc, #332]	; (2d78 <z_arm_fault+0x154>)
{
    2c2a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c2c:	685f      	ldr	r7, [r3, #4]
    2c2e:	2600      	movs	r6, #0
{
    2c30:	b08a      	sub	sp, #40	; 0x28
    2c32:	f3c7 0408 	ubfx	r4, r7, #0, #9
    2c36:	f386 8811 	msr	BASEPRI, r6
    2c3a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c3e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c42:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c46:	d107      	bne.n	2c58 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c48:	f002 030c 	and.w	r3, r2, #12
    2c4c:	2b08      	cmp	r3, #8
    2c4e:	d113      	bne.n	2c78 <z_arm_fault+0x54>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c50:	2145      	movs	r1, #69	; 0x45
    2c52:	484a      	ldr	r0, [pc, #296]	; (2d7c <z_arm_fault+0x158>)
    2c54:	f003 f97e 	bl	5f54 <z_log_minimal_printk>
	*nested_exc = false;
    2c58:	2600      	movs	r6, #0
		return NULL;
    2c5a:	4635      	mov	r5, r6
	*recoverable = false;
    2c5c:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    2c60:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    2c62:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    2c66:	2b09      	cmp	r3, #9
    2c68:	d874      	bhi.n	2d54 <z_arm_fault+0x130>
    2c6a:	e8df f003 	tbb	[pc, r3]
    2c6e:	680a      	.short	0x680a
    2c70:	7373646c 	.word	0x7373646c
    2c74:	70737373 	.word	0x70737373
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c78:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2c7a:	bf4c      	ite	mi
    2c7c:	460d      	movmi	r5, r1
			*nested_exc = true;
    2c7e:	2601      	movpl	r6, #1
    2c80:	e7ec      	b.n	2c5c <z_arm_fault+0x38>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c82:	4c3d      	ldr	r4, [pc, #244]	; (2d78 <z_arm_fault+0x154>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    2c84:	2145      	movs	r1, #69	; 0x45
    2c86:	483e      	ldr	r0, [pc, #248]	; (2d80 <z_arm_fault+0x15c>)
    2c88:	f003 f964 	bl	5f54 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	*recoverable = false;
    2c8e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c92:	079a      	lsls	r2, r3, #30
    2c94:	d505      	bpl.n	2ca2 <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    2c96:	2145      	movs	r1, #69	; 0x45
    2c98:	483a      	ldr	r0, [pc, #232]	; (2d84 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    2c9a:	f003 f95b 	bl	5f54 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2c9e:	2400      	movs	r4, #0
    2ca0:	e022      	b.n	2ce8 <z_arm_fault+0xc4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	da02      	bge.n	2cae <z_arm_fault+0x8a>
		PR_EXC("  Debug event");
    2ca8:	2145      	movs	r1, #69	; 0x45
    2caa:	4837      	ldr	r0, [pc, #220]	; (2d88 <z_arm_fault+0x164>)
    2cac:	e7f5      	b.n	2c9a <z_arm_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2cae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cb0:	005b      	lsls	r3, r3, #1
    2cb2:	d5f4      	bpl.n	2c9e <z_arm_fault+0x7a>
		PR_EXC("  Fault escalation (see below)");
    2cb4:	2145      	movs	r1, #69	; 0x45
    2cb6:	4835      	ldr	r0, [pc, #212]	; (2d8c <z_arm_fault+0x168>)
    2cb8:	f003 f94c 	bl	5f54 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    2cbc:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2cbe:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2cc2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2cc6:	429a      	cmp	r2, r3
    2cc8:	d008      	beq.n	2cdc <z_arm_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    2cca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2cce:	b32b      	cbz	r3, 2d1c <z_arm_fault+0xf8>
			reason = mem_manage_fault(esf, 1, recoverable);
    2cd0:	2001      	movs	r0, #1
    2cd2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2cd6:	f7ff ff4f 	bl	2b78 <mem_manage_fault.constprop.0>
    2cda:	e02e      	b.n	2d3a <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2cdc:	2145      	movs	r1, #69	; 0x45
    2cde:	682a      	ldr	r2, [r5, #0]
    2ce0:	482b      	ldr	r0, [pc, #172]	; (2d90 <z_arm_fault+0x16c>)
    2ce2:	f003 f937 	bl	5f54 <z_log_minimal_printk>
			reason = esf->basic.r0;
    2ce6:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2cec:	b99b      	cbnz	r3, 2d16 <z_arm_fault+0xf2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2cee:	2220      	movs	r2, #32
    2cf0:	4629      	mov	r1, r5
    2cf2:	a802      	add	r0, sp, #8
    2cf4:	f003 fcae 	bl	6654 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2cfa:	2e00      	cmp	r6, #0
    2cfc:	d037      	beq.n	2d6e <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2d02:	b922      	cbnz	r2, 2d0e <z_arm_fault+0xea>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2d04:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d08:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d0c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2d0e:	4620      	mov	r0, r4
    2d10:	a902      	add	r1, sp, #8
    2d12:	f7ff fdbd 	bl	2890 <z_arm_fatal_error>
}
    2d16:	b00a      	add	sp, #40	; 0x28
    2d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_BFSR != 0) {
    2d1c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    2d20:	b12b      	cbz	r3, 2d2e <z_arm_fault+0x10a>
			reason = bus_fault(esf, 1, recoverable);
    2d22:	2001      	movs	r0, #1
    2d24:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2d28:	f7ff fecc 	bl	2ac4 <bus_fault.constprop.0>
    2d2c:	e005      	b.n	2d3a <z_arm_fault+0x116>
		} else if (SCB_UFSR != 0) {
    2d2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    2d30:	b29b      	uxth	r3, r3
    2d32:	2b00      	cmp	r3, #0
    2d34:	d0b3      	beq.n	2c9e <z_arm_fault+0x7a>
			reason = usage_fault(esf);
    2d36:	f7ff fe6f 	bl	2a18 <usage_fault.constprop.0>
    2d3a:	4604      	mov	r4, r0
    2d3c:	e7d4      	b.n	2ce8 <z_arm_fault+0xc4>
		reason = mem_manage_fault(esf, 0, recoverable);
    2d3e:	2000      	movs	r0, #0
    2d40:	f10d 0107 	add.w	r1, sp, #7
    2d44:	e7c7      	b.n	2cd6 <z_arm_fault+0xb2>
		reason = bus_fault(esf, 0, recoverable);
    2d46:	2000      	movs	r0, #0
    2d48:	f10d 0107 	add.w	r1, sp, #7
    2d4c:	e7ec      	b.n	2d28 <z_arm_fault+0x104>
	PR_FAULT_INFO(
    2d4e:	2145      	movs	r1, #69	; 0x45
    2d50:	4810      	ldr	r0, [pc, #64]	; (2d94 <z_arm_fault+0x170>)
    2d52:	e7a2      	b.n	2c9a <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    2d54:	4910      	ldr	r1, [pc, #64]	; (2d98 <z_arm_fault+0x174>)
    2d56:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    2d5a:	4a10      	ldr	r2, [pc, #64]	; (2d9c <z_arm_fault+0x178>)
    2d5c:	4810      	ldr	r0, [pc, #64]	; (2da0 <z_arm_fault+0x17c>)
    2d5e:	bf08      	it	eq
    2d60:	460a      	moveq	r2, r1
    2d62:	f1a4 0310 	sub.w	r3, r4, #16
    2d66:	2145      	movs	r1, #69	; 0x45
    2d68:	f003 f8f4 	bl	5f54 <z_log_minimal_printk>
}
    2d6c:	e797      	b.n	2c9e <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d6e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2d72:	f023 0301 	bic.w	r3, r3, #1
    2d76:	e7c9      	b.n	2d0c <z_arm_fault+0xe8>
    2d78:	e000ed00 	.word	0xe000ed00
    2d7c:	00009861 	.word	0x00009861
    2d80:	00009891 	.word	0x00009891
    2d84:	000098ad 	.word	0x000098ad
    2d88:	000098d3 	.word	0x000098d3
    2d8c:	000098e6 	.word	0x000098e6
    2d90:	0000990a 	.word	0x0000990a
    2d94:	0000992b 	.word	0x0000992b
    2d98:	00009833 	.word	0x00009833
    2d9c:	00009848 	.word	0x00009848
    2da0:	00009954 	.word	0x00009954

00002da4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2da4:	4b04      	ldr	r3, [pc, #16]	; (2db8 <z_arm_fault_init+0x14>)
    2da6:	695a      	ldr	r2, [r3, #20]
    2da8:	f042 0210 	orr.w	r2, r2, #16
    2dac:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2dae:	695a      	ldr	r2, [r3, #20]
    2db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2db4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2db6:	4770      	bx	lr
    2db8:	e000ed00 	.word	0xe000ed00

00002dbc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2dbc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2dc0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2dc4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2dc6:	4672      	mov	r2, lr
	bl z_arm_fault
    2dc8:	f7ff ff2c 	bl	2c24 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2dcc:	bd01      	pop	{r0, pc}
    2dce:	bf00      	nop

00002dd0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2dd0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2dd2:	2120      	movs	r1, #32
    2dd4:	4803      	ldr	r0, [pc, #12]	; (2de4 <z_arm_interrupt_init+0x14>)
    2dd6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2dd8:	3301      	adds	r3, #1
    2dda:	2b41      	cmp	r3, #65	; 0x41
    2ddc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2de0:	d1f9      	bne.n	2dd6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2de2:	4770      	bx	lr
    2de4:	e000e100 	.word	0xe000e100

00002de8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2de8:	2000      	movs	r0, #0
    msr CONTROL, r0
    2dea:	f380 8814 	msr	CONTROL, r0
    isb
    2dee:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2df2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2df4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2df8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2dfc:	f005 fc1c 	bl	8638 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2e00:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2e02:	490e      	ldr	r1, [pc, #56]	; (2e3c <__start+0x54>)
    str r0, [r1]
    2e04:	6008      	str	r0, [r1, #0]
    dsb
    2e06:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e0a:	480d      	ldr	r0, [pc, #52]	; (2e40 <__start+0x58>)
    msr msp, r0
    2e0c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2e10:	f000 f83e 	bl	2e90 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2e14:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2e16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2e1a:	480a      	ldr	r0, [pc, #40]	; (2e44 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2e20:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2e22:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2e26:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2e2a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2e2c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2e2e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2e32:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2e36:	f7ff fd8f 	bl	2958 <z_arm_prep_c>
    2e3a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2e3c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e40:	20012e58 	.word	0x20012e58
    ldr r0, =z_interrupt_stacks
    2e44:	2000fe58 	.word	0x2000fe58

00002e48 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2e48:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e4c:	4905      	ldr	r1, [pc, #20]	; (2e64 <sys_arch_reboot+0x1c>)
    2e4e:	4b06      	ldr	r3, [pc, #24]	; (2e68 <sys_arch_reboot+0x20>)
    2e50:	68ca      	ldr	r2, [r1, #12]
    2e52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e58:	60cb      	str	r3, [r1, #12]
    2e5a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e5e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e60:	e7fd      	b.n	2e5e <sys_arch_reboot+0x16>
    2e62:	bf00      	nop
    2e64:	e000ed00 	.word	0xe000ed00
    2e68:	05fa0004 	.word	0x05fa0004

00002e6c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2e6c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2e6e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2e70:	4906      	ldr	r1, [pc, #24]	; (2e8c <z_arm_clear_arm_mpu_config+0x20>)
    2e72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    2e76:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    2e7a:	4293      	cmp	r3, r2
    2e7c:	db00      	blt.n	2e80 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2e7e:	4770      	bx	lr
  mpu->RNR = rnr;
    2e80:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    2e84:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2e88:	3301      	adds	r3, #1
    2e8a:	e7f6      	b.n	2e7a <z_arm_clear_arm_mpu_config+0xe>
    2e8c:	e000ed00 	.word	0xe000ed00

00002e90 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2e90:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2e92:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2e94:	2400      	movs	r4, #0
    2e96:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2e9a:	f7ff ffe7 	bl	2e6c <z_arm_clear_arm_mpu_config>
    2e9e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2ea0:	f04f 30ff 	mov.w	r0, #4294967295
    2ea4:	4a0c      	ldr	r2, [pc, #48]	; (2ed8 <z_arm_init_arch_hw_at_boot+0x48>)
    2ea6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2eaa:	3301      	adds	r3, #1
    2eac:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2eae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2eb2:	d1f8      	bne.n	2ea6 <z_arm_init_arch_hw_at_boot+0x16>
    2eb4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2eb6:	f04f 30ff 	mov.w	r0, #4294967295
    2eba:	4a07      	ldr	r2, [pc, #28]	; (2ed8 <z_arm_init_arch_hw_at_boot+0x48>)
    2ebc:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2ec0:	3301      	adds	r3, #1
    2ec2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2ec4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2ec8:	d1f8      	bne.n	2ebc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2eca:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2ecc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ed0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2ed4:	bd10      	pop	{r4, pc}
    2ed6:	bf00      	nop
    2ed8:	e000e100 	.word	0xe000e100

00002edc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2edc:	2101      	movs	r1, #1
    2ede:	4b02      	ldr	r3, [pc, #8]	; (2ee8 <z_arm_configure_static_mpu_regions+0xc>)
    2ee0:	4a02      	ldr	r2, [pc, #8]	; (2eec <z_arm_configure_static_mpu_regions+0x10>)
    2ee2:	4803      	ldr	r0, [pc, #12]	; (2ef0 <z_arm_configure_static_mpu_regions+0x14>)
    2ee4:	f000 b916 	b.w	3114 <arm_core_mpu_configure_static_mpu_regions>
    2ee8:	20040000 	.word	0x20040000
    2eec:	2000c500 	.word	0x2000c500
    2ef0:	00008a8c 	.word	0x00008a8c

00002ef4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2ef4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2ef6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2ef8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2efa:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    2efe:	f004 021f 	and.w	r2, r4, #31
    2f02:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2f04:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2f06:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2f08:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2f0c:	4905      	ldr	r1, [pc, #20]	; (2f24 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2f0e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2f12:	f043 0301 	orr.w	r3, r3, #1
    2f16:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    2f1a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    2f1e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2f22:	bd10      	pop	{r4, pc}
    2f24:	e000ed00 	.word	0xe000ed00

00002f28 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2f28:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
		&new_region->attr, new_region->start, new_region->size);
    2f2a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2f2c:	680c      	ldr	r4, [r1, #0]
{
    2f2e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2f30:	890a      	ldrh	r2, [r1, #8]
    2f32:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    2f34:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f36:	3b01      	subs	r3, #1
    2f38:	f024 041f 	bic.w	r4, r4, #31
    2f3c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2f3e:	f002 021f 	and.w	r2, r2, #31
    2f42:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f46:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2f4a:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f4c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2f4e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f52:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    2f54:	d909      	bls.n	2f6a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f56:	4602      	mov	r2, r0
    2f58:	2145      	movs	r1, #69	; 0x45
    2f5a:	4806      	ldr	r0, [pc, #24]	; (2f74 <mpu_configure_region+0x4c>)
    2f5c:	f002 fffa 	bl	5f54 <z_log_minimal_printk>
    2f60:	f06f 0415 	mvn.w	r4, #21

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2f64:	4620      	mov	r0, r4
    2f66:	b005      	add	sp, #20
    2f68:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2f6a:	4669      	mov	r1, sp
    2f6c:	f7ff ffc2 	bl	2ef4 <region_init>
	return region_allocate_and_init(index,
    2f70:	e7f8      	b.n	2f64 <mpu_configure_region+0x3c>
    2f72:	bf00      	nop
    2f74:	00009970 	.word	0x00009970

00002f78 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f7c:	4689      	mov	r9, r1
    2f7e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2f80:	4606      	mov	r6, r0
    2f82:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2f86:	4d54      	ldr	r5, [pc, #336]	; (30d8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2f88:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2f8a:	45c8      	cmp	r8, r9
    2f8c:	da27      	bge.n	2fde <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    2f8e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    2f92:	f1ba 0f00 	cmp.w	sl, #0
    2f96:	d045      	beq.n	3024 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    2f98:	f1ba 0f1f 	cmp.w	sl, #31
    2f9c:	d918      	bls.n	2fd0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    2f9e:	f01a 0f1f 	tst.w	sl, #31
    2fa2:	d115      	bne.n	2fd0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    2fa4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    2fa8:	f01b 0f1f 	tst.w	fp, #31
    2fac:	d110      	bne.n	2fd0 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2fae:	4658      	mov	r0, fp
    2fb0:	f003 fb0d 	bl	65ce <arm_cmse_mpu_region_get>
    2fb4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2fb6:	eb0a 000b 	add.w	r0, sl, fp
    2fba:	3801      	subs	r0, #1
    2fbc:	f003 fb07 	bl	65ce <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2fc0:	4287      	cmp	r7, r0
    2fc2:	d010      	beq.n	2fe6 <mpu_configure_regions_and_partition.constprop.0+0x6e>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    2fc4:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2fc8:	463a      	mov	r2, r7
    2fca:	2145      	movs	r1, #69	; 0x45
    2fcc:	4843      	ldr	r0, [pc, #268]	; (30dc <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2fce:	e002      	b.n	2fd6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2fd0:	4642      	mov	r2, r8
    2fd2:	2145      	movs	r1, #69	; 0x45
    2fd4:	4842      	ldr	r0, [pc, #264]	; (30e0 <mpu_configure_regions_and_partition.constprop.0+0x168>)
			LOG_ERR("Invalid underlying region index %u",
    2fd6:	f002 ffbd 	bl	5f54 <z_log_minimal_printk>
			return -EINVAL;
    2fda:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2fde:	4620      	mov	r0, r4
    2fe0:	b005      	add	sp, #20
    2fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2fe6:	f117 0f16 	cmn.w	r7, #22
    2fea:	d0ed      	beq.n	2fc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    2fec:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2fee:	42bb      	cmp	r3, r7
    2ff0:	dbea      	blt.n	2fc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    2ff2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2ff6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    2ffa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2ffe:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3002:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3006:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    300a:	e9d6 3200 	ldrd	r3, r2, [r6]
    300e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    3010:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3012:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    3016:	d11d      	bne.n	3054 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    3018:	45d3      	cmp	fp, sl
    301a:	d107      	bne.n	302c <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    301c:	4631      	mov	r1, r6
    301e:	b2f8      	uxtb	r0, r7
    3020:	f7ff ff82 	bl	2f28 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    3024:	f108 0801 	add.w	r8, r8, #1
    3028:	360c      	adds	r6, #12
    302a:	e7ae      	b.n	2f8a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    302c:	4631      	mov	r1, r6
	MPU->RNR = index;
    302e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3032:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    3036:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    303a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    303e:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3040:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    3044:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    3046:	f7ff ff6f 	bl	2f28 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    304a:	f110 0f16 	cmn.w	r0, #22
    304e:	d0c4      	beq.n	2fda <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    3050:	1c44      	adds	r4, r0, #1
    3052:	e7e7      	b.n	3024 <mpu_configure_regions_and_partition.constprop.0+0xac>
	MPU->RNR = index;
    3054:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3058:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    305c:	3b01      	subs	r3, #1
		| (limit & MPU_RLAR_LIMIT_Msk);
    305e:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3062:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    3066:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    3068:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    306a:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    306c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    306e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    3072:	d0e8      	beq.n	3046 <mpu_configure_regions_and_partition.constprop.0+0xce>
				mpu_configure_region(reg_index, &regions[i]);
    3074:	f7ff ff58 	bl	2f28 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3078:	f110 0f16 	cmn.w	r0, #22
    307c:	d0ad      	beq.n	2fda <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    307e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    3082:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    3086:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    308a:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    308e:	f362 0304 	bfi	r3, r2, #0, #5
    3092:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3096:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    309a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    309e:	085b      	lsrs	r3, r3, #1
    30a0:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    30a4:	e9d6 3100 	ldrd	r3, r1, [r6]
    30a8:	440b      	add	r3, r1
    30aa:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    30ac:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    30b0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    30b2:	445b      	add	r3, fp
    30b4:	eba3 030a 	sub.w	r3, r3, sl
    30b8:	b2c0      	uxtb	r0, r0
    30ba:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    30be:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    30c0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    30c4:	9303      	str	r3, [sp, #12]
    30c6:	d903      	bls.n	30d0 <mpu_configure_regions_and_partition.constprop.0+0x158>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    30c8:	4602      	mov	r2, r0
    30ca:	2145      	movs	r1, #69	; 0x45
    30cc:	4805      	ldr	r0, [pc, #20]	; (30e4 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    30ce:	e782      	b.n	2fd6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    30d0:	4669      	mov	r1, sp
    30d2:	f7ff ff0f 	bl	2ef4 <region_init>
    30d6:	e7bb      	b.n	3050 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    30d8:	e000ed00 	.word	0xe000ed00
    30dc:	000099c3 	.word	0x000099c3
    30e0:	0000999b 	.word	0x0000999b
    30e4:	00009970 	.word	0x00009970

000030e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    30e8:	2205      	movs	r2, #5
    30ea:	4b04      	ldr	r3, [pc, #16]	; (30fc <arm_core_mpu_enable+0x14>)
    30ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    30f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30f4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    30f8:	4770      	bx	lr
    30fa:	bf00      	nop
    30fc:	e000ed00 	.word	0xe000ed00

00003100 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3100:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3104:	2200      	movs	r2, #0
    3106:	4b02      	ldr	r3, [pc, #8]	; (3110 <arm_core_mpu_disable+0x10>)
    3108:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    310c:	4770      	bx	lr
    310e:	bf00      	nop
    3110:	e000ed00 	.word	0xe000ed00

00003114 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3114:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3116:	4c03      	ldr	r4, [pc, #12]	; (3124 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3118:	7822      	ldrb	r2, [r4, #0]
    311a:	f7ff ff2d 	bl	2f78 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    311e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3120:	bd10      	pop	{r4, pc}
    3122:	bf00      	nop
    3124:	2000fe10 	.word	0x2000fe10

00003128 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3128:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    312a:	4d0e      	ldr	r5, [pc, #56]	; (3164 <z_arm_mpu_init+0x3c>)
    312c:	682c      	ldr	r4, [r5, #0]
    312e:	2c10      	cmp	r4, #16
    3130:	d815      	bhi.n	315e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3132:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    3134:	f7ff ffe4 	bl	3100 <arm_core_mpu_disable>
	MPU->MAIR0 =
    3138:	4b0b      	ldr	r3, [pc, #44]	; (3168 <z_arm_mpu_init+0x40>)
    313a:	4a0c      	ldr	r2, [pc, #48]	; (316c <z_arm_mpu_init+0x44>)
    313c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3140:	4284      	cmp	r4, r0
    3142:	d105      	bne.n	3150 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3144:	4b0a      	ldr	r3, [pc, #40]	; (3170 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3146:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    3148:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    314a:	f7ff ffcd 	bl	30e8 <arm_core_mpu_enable>
}
    314e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3150:	6869      	ldr	r1, [r5, #4]
    3152:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3156:	f7ff fecd 	bl	2ef4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    315a:	3001      	adds	r0, #1
    315c:	e7f0      	b.n	3140 <z_arm_mpu_init+0x18>
		return -1;
    315e:	f04f 30ff 	mov.w	r0, #4294967295
    3162:	e7f4      	b.n	314e <z_arm_mpu_init+0x26>
    3164:	00008a98 	.word	0x00008a98
    3168:	e000ed00 	.word	0xe000ed00
    316c:	0044ffaa 	.word	0x0044ffaa
    3170:	2000fe10 	.word	0x2000fe10

00003174 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3174:	4b08      	ldr	r3, [pc, #32]	; (3198 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3176:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3178:	1ac3      	subs	r3, r0, r3
{
    317a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    317c:	4907      	ldr	r1, [pc, #28]	; (319c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    317e:	109b      	asrs	r3, r3, #2
{
    3180:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3182:	4359      	muls	r1, r3
    3184:	2240      	movs	r2, #64	; 0x40
    3186:	4806      	ldr	r0, [pc, #24]	; (31a0 <onoff_stop+0x2c>)
    3188:	f003 fa94 	bl	66b4 <stop>
	notify(mgr, res);
    318c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    318e:	4601      	mov	r1, r0
	notify(mgr, res);
    3190:	4620      	mov	r0, r4
}
    3192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3196:	4718      	bx	r3
    3198:	2000dfe0 	.word	0x2000dfe0
    319c:	b6db6db7 	.word	0xb6db6db7
    31a0:	00008694 	.word	0x00008694

000031a4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31a4:	2340      	movs	r3, #64	; 0x40
{
    31a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    31a8:	4c0b      	ldr	r4, [pc, #44]	; (31d8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31aa:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    31ac:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31ae:	460b      	mov	r3, r1
{
    31b0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31b2:	490a      	ldr	r1, [pc, #40]	; (31dc <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    31b4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31b6:	4361      	muls	r1, r4
{
    31b8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31ba:	4a09      	ldr	r2, [pc, #36]	; (31e0 <onoff_start+0x3c>)
    31bc:	4809      	ldr	r0, [pc, #36]	; (31e4 <onoff_start+0x40>)
    31be:	f003 faa5 	bl	670c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    31c2:	1e01      	subs	r1, r0, #0
    31c4:	da05      	bge.n	31d2 <onoff_start+0x2e>
		notify(mgr, err);
    31c6:	4630      	mov	r0, r6
    31c8:	462b      	mov	r3, r5
	}
}
    31ca:	b002      	add	sp, #8
    31cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    31d0:	4718      	bx	r3
}
    31d2:	b002      	add	sp, #8
    31d4:	bd70      	pop	{r4, r5, r6, pc}
    31d6:	bf00      	nop
    31d8:	2000dfe0 	.word	0x2000dfe0
    31dc:	b6db6db7 	.word	0xb6db6db7
    31e0:	0000677d 	.word	0x0000677d
    31e4:	00008694 	.word	0x00008694

000031e8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    31e8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31ea:	2200      	movs	r2, #0
    31ec:	2101      	movs	r1, #1
{
    31ee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31f0:	2005      	movs	r0, #5
    31f2:	f7ff fb97 	bl	2924 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    31f6:	2005      	movs	r0, #5
    31f8:	f7ff fb78 	bl	28ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    31fc:	480f      	ldr	r0, [pc, #60]	; (323c <clk_init+0x54>)
    31fe:	f001 fc01 	bl	4a04 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3202:	4b0f      	ldr	r3, [pc, #60]	; (3240 <clk_init+0x58>)
    3204:	4298      	cmp	r0, r3
    3206:	d115      	bne.n	3234 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3208:	f005 f984 	bl	8514 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    320c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    320e:	490d      	ldr	r1, [pc, #52]	; (3244 <clk_init+0x5c>)
    3210:	4630      	mov	r0, r6
    3212:	f002 fe33 	bl	5e7c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3216:	2800      	cmp	r0, #0
    3218:	db0b      	blt.n	3232 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    321a:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    321c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    321e:	4909      	ldr	r1, [pc, #36]	; (3244 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3220:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3222:	f104 001c 	add.w	r0, r4, #28
    3226:	f002 fe29 	bl	5e7c <onoff_manager_init>
		if (err < 0) {
    322a:	2800      	cmp	r0, #0
    322c:	db01      	blt.n	3232 <clk_init+0x4a>
	}

	return 0;
    322e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3230:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    3232:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3234:	f06f 0004 	mvn.w	r0, #4
    3238:	e7fb      	b.n	3232 <clk_init+0x4a>
    323a:	bf00      	nop
    323c:	0000327d 	.word	0x0000327d
    3240:	0bad0000 	.word	0x0bad0000
    3244:	00008ac0 	.word	0x00008ac0

00003248 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3248:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    324a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    324c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    324e:	434b      	muls	r3, r1
    3250:	4808      	ldr	r0, [pc, #32]	; (3274 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    3252:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3254:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    3256:	3340      	adds	r3, #64	; 0x40
    3258:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    325a:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    325e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3260:	f003 fa15 	bl	668e <set_on_state>
	if (callback) {
    3264:	b12d      	cbz	r5, 3272 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3266:	4632      	mov	r2, r6
    3268:	462b      	mov	r3, r5
}
    326a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    326e:	4802      	ldr	r0, [pc, #8]	; (3278 <clkstarted_handle.constprop.0+0x30>)
    3270:	4718      	bx	r3
}
    3272:	bd70      	pop	{r4, r5, r6, pc}
    3274:	2000dfe0 	.word	0x2000dfe0
    3278:	00008694 	.word	0x00008694

0000327c <clock_event_handler>:
	switch (event) {
    327c:	b110      	cbz	r0, 3284 <clock_event_handler+0x8>
    327e:	2801      	cmp	r0, #1
    3280:	d004      	beq.n	328c <clock_event_handler+0x10>
    3282:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3284:	4b03      	ldr	r3, [pc, #12]	; (3294 <clock_event_handler+0x18>)
    3286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3288:	075b      	lsls	r3, r3, #29
    328a:	d101      	bne.n	3290 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    328c:	f7ff bfdc 	b.w	3248 <clkstarted_handle.constprop.0>
}
    3290:	4770      	bx	lr
    3292:	bf00      	nop
    3294:	2000dfe0 	.word	0x2000dfe0

00003298 <generic_hfclk_start>:
{
    3298:	b508      	push	{r3, lr}
	__asm__ volatile(
    329a:	f04f 0320 	mov.w	r3, #32
    329e:	f3ef 8111 	mrs	r1, BASEPRI
    32a2:	f383 8812 	msr	BASEPRI_MAX, r3
    32a6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    32aa:	4a12      	ldr	r2, [pc, #72]	; (32f4 <generic_hfclk_start+0x5c>)
    32ac:	6813      	ldr	r3, [r2, #0]
    32ae:	f043 0002 	orr.w	r0, r3, #2
    32b2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    32b4:	07da      	lsls	r2, r3, #31
    32b6:	d408      	bmi.n	32ca <generic_hfclk_start+0x32>
	__asm__ volatile(
    32b8:	f381 8811 	msr	BASEPRI, r1
    32bc:	f3bf 8f6f 	isb	sy
}
    32c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    32c4:	2001      	movs	r0, #1
    32c6:	f005 b930 	b.w	852a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    32ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    32ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    32d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    32d6:	07d3      	lsls	r3, r2, #31
    32d8:	d5ee      	bpl.n	32b8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    32da:	4807      	ldr	r0, [pc, #28]	; (32f8 <generic_hfclk_start+0x60>)
    32dc:	f003 f9d7 	bl	668e <set_on_state>
    32e0:	f381 8811 	msr	BASEPRI, r1
    32e4:	f3bf 8f6f 	isb	sy
}
    32e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    32ec:	2000      	movs	r0, #0
    32ee:	f7ff bfab 	b.w	3248 <clkstarted_handle.constprop.0>
    32f2:	bf00      	nop
    32f4:	2000e030 	.word	0x2000e030
    32f8:	2000e020 	.word	0x2000e020

000032fc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    32fc:	4b07      	ldr	r3, [pc, #28]	; (331c <generic_hfclk_stop+0x20>)
    32fe:	e8d3 2fef 	ldaex	r2, [r3]
    3302:	f022 0102 	bic.w	r1, r2, #2
    3306:	e8c3 1fe0 	stlex	r0, r1, [r3]
    330a:	2800      	cmp	r0, #0
    330c:	d1f7      	bne.n	32fe <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    330e:	07d3      	lsls	r3, r2, #31
    3310:	d402      	bmi.n	3318 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3312:	2001      	movs	r0, #1
    3314:	f005 b939 	b.w	858a <nrfx_clock_stop>
}
    3318:	4770      	bx	lr
    331a:	bf00      	nop
    331c:	2000e030 	.word	0x2000e030

00003320 <z_nrf_clock_control_lf_on>:
{
    3320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3324:	2201      	movs	r2, #1
    3326:	4607      	mov	r7, r0
    3328:	4934      	ldr	r1, [pc, #208]	; (33fc <z_nrf_clock_control_lf_on+0xdc>)
    332a:	e8d1 3fef 	ldaex	r3, [r1]
    332e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3332:	2800      	cmp	r0, #0
    3334:	d1f9      	bne.n	332a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    3336:	b933      	cbnz	r3, 3346 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3338:	4931      	ldr	r1, [pc, #196]	; (3400 <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    333a:	4832      	ldr	r0, [pc, #200]	; (3404 <z_nrf_clock_control_lf_on+0xe4>)
    333c:	604b      	str	r3, [r1, #4]
    333e:	60cb      	str	r3, [r1, #12]
    3340:	608a      	str	r2, [r1, #8]
    3342:	f002 fdae 	bl	5ea2 <onoff_request>
	switch (start_mode) {
    3346:	1e7b      	subs	r3, r7, #1
    3348:	2b01      	cmp	r3, #1
    334a:	d82d      	bhi.n	33a8 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    334c:	2f01      	cmp	r7, #1
    334e:	d107      	bne.n	3360 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3350:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3354:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3358:	f003 0303 	and.w	r3, r3, #3
    335c:	2b02      	cmp	r3, #2
    335e:	d023      	beq.n	33a8 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3360:	f005 f95f 	bl	8622 <k_is_in_isr>
    3364:	4605      	mov	r5, r0
    3366:	bb08      	cbnz	r0, 33ac <z_nrf_clock_control_lf_on+0x8c>
	return !z_sys_post_kernel;
    3368:	4b27      	ldr	r3, [pc, #156]	; (3408 <z_nrf_clock_control_lf_on+0xe8>)
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	b1f3      	cbz	r3, 33ac <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    336e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3372:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3374:	4606      	mov	r6, r0
    3376:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    337a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    337e:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3382:	f8df 9088 	ldr.w	r9, [pc, #136]	; 340c <z_nrf_clock_control_lf_on+0xec>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3386:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    338a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    338e:	03d2      	lsls	r2, r2, #15
    3390:	d516      	bpl.n	33c0 <z_nrf_clock_control_lf_on+0xa0>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3392:	f003 0303 	and.w	r3, r3, #3
    3396:	2b02      	cmp	r3, #2
    3398:	d001      	beq.n	339e <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    339a:	2f01      	cmp	r7, #1
    339c:	d110      	bne.n	33c0 <z_nrf_clock_control_lf_on+0xa0>
	if (isr_mode) {
    339e:	b33d      	cbz	r5, 33f0 <z_nrf_clock_control_lf_on+0xd0>
    33a0:	f386 8811 	msr	BASEPRI, r6
    33a4:	f3bf 8f6f 	isb	sy
}
    33a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    33ac:	f04f 0320 	mov.w	r3, #32
    33b0:	f3ef 8611 	mrs	r6, BASEPRI
    33b4:	f383 8812 	msr	BASEPRI_MAX, r3
    33b8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    33bc:	2501      	movs	r5, #1
    33be:	e7dc      	b.n	337a <z_nrf_clock_control_lf_on+0x5a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    33c0:	4630      	mov	r0, r6
    33c2:	f7ff fa5b 	bl	287c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    33c6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    33ca:	b2db      	uxtb	r3, r3
    33cc:	2b01      	cmp	r3, #1
    33ce:	d1da      	bne.n	3386 <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    33d0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    33d4:	2a00      	cmp	r2, #0
    33d6:	d0d6      	beq.n	3386 <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33d8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    33dc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    33e0:	2202      	movs	r2, #2
    33e2:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    33e6:	2220      	movs	r2, #32
    33e8:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33ec:	60a3      	str	r3, [r4, #8]
}
    33ee:	e7ca      	b.n	3386 <z_nrf_clock_control_lf_on+0x66>
    p_reg->INTENSET = mask;
    33f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33f4:	2202      	movs	r2, #2
    33f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    33fa:	e7d5      	b.n	33a8 <z_nrf_clock_control_lf_on+0x88>
    33fc:	2000dfdc 	.word	0x2000dfdc
    3400:	2000dfcc 	.word	0x2000dfcc
    3404:	2000dffc 	.word	0x2000dffc
    3408:	2000fe51 	.word	0x2000fe51
    340c:	e000e100 	.word	0xe000e100

00003410 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3410:	b530      	push	{r4, r5, lr}
	return port->config;
    3412:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3414:	f001 041f 	and.w	r4, r1, #31
    3418:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    341a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
    341e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3420:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3424:	d104      	bne.n	3430 <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
    3426:	4620      	mov	r0, r4
    3428:	f001 fd8e 	bl	4f48 <nrfx_gpiote_trigger_disable>

		return 0;
    342c:	2000      	movs	r0, #0
    342e:	e044      	b.n	34ba <gpio_nrfx_pin_interrupt_configure+0xaa>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
    3430:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3432:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3436:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    343a:	d114      	bne.n	3466 <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    343c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3440:	bf0c      	ite	eq
    3442:	2304      	moveq	r3, #4
    3444:	2305      	movne	r3, #5
    3446:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    344a:	2300      	movs	r3, #0
    344c:	4620      	mov	r0, r4
    344e:	4619      	mov	r1, r3
    3450:	aa02      	add	r2, sp, #8
    3452:	f001 fba1 	bl	4b98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3456:	4b1d      	ldr	r3, [pc, #116]	; (34cc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    3458:	4298      	cmp	r0, r3
    345a:	d134      	bne.n	34c6 <gpio_nrfx_pin_interrupt_configure+0xb6>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
    345c:	2101      	movs	r1, #1
    345e:	4620      	mov	r0, r4
    3460:	f001 fd2e 	bl	4ec0 <nrfx_gpiote_trigger_enable>

	return 0;
    3464:	e7e2      	b.n	342c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3466:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    346a:	d028      	beq.n	34be <gpio_nrfx_pin_interrupt_configure+0xae>
    346c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3470:	bf14      	ite	ne
    3472:	2301      	movne	r3, #1
    3474:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3476:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    347a:	6883      	ldr	r3, [r0, #8]
    347c:	40cb      	lsrs	r3, r1
    347e:	07d9      	lsls	r1, r3, #31
    3480:	d4e3      	bmi.n	344a <gpio_nrfx_pin_interrupt_configure+0x3a>
    3482:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3486:	d1e0      	bne.n	344a <gpio_nrfx_pin_interrupt_configure+0x3a>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3488:	4a11      	ldr	r2, [pc, #68]	; (34d0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    348a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    348e:	3380      	adds	r3, #128	; 0x80
    3490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3494:	07db      	lsls	r3, r3, #31
    3496:	d4d8      	bmi.n	344a <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3498:	f10d 0507 	add.w	r5, sp, #7
    349c:	4629      	mov	r1, r5
    349e:	4620      	mov	r0, r4
    34a0:	f001 fcba 	bl	4e18 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    34a4:	4b0b      	ldr	r3, [pc, #44]	; (34d4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    34a6:	4298      	cmp	r0, r3
    34a8:	d10b      	bne.n	34c2 <gpio_nrfx_pin_interrupt_configure+0xb2>
			err = nrfx_gpiote_channel_alloc(&ch);
    34aa:	4628      	mov	r0, r5
    34ac:	f001 fd02 	bl	4eb4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    34b0:	4b06      	ldr	r3, [pc, #24]	; (34cc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    34b2:	4298      	cmp	r0, r3
    34b4:	d005      	beq.n	34c2 <gpio_nrfx_pin_interrupt_configure+0xb2>
				return -ENOMEM;
    34b6:	f06f 000b 	mvn.w	r0, #11
}
    34ba:	b005      	add	sp, #20
    34bc:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    34be:	2303      	movs	r3, #3
    34c0:	e7d9      	b.n	3476 <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
    34c2:	9503      	str	r5, [sp, #12]
    34c4:	e7c1      	b.n	344a <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
    34c6:	f06f 0004 	mvn.w	r0, #4
    34ca:	e7f6      	b.n	34ba <gpio_nrfx_pin_interrupt_configure+0xaa>
    34cc:	0bad0000 	.word	0x0bad0000
    34d0:	50842500 	.word	0x50842500
    34d4:	0bad0004 	.word	0x0bad0004

000034d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    34d8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    34da:	f001 fcdb 	bl	4e94 <nrfx_gpiote_is_init>
    34de:	4604      	mov	r4, r0
    34e0:	b968      	cbnz	r0, 34fe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    34e2:	f001 fcaf 	bl	4e44 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    34e6:	4b08      	ldr	r3, [pc, #32]	; (3508 <gpio_nrfx_init+0x30>)
    34e8:	4298      	cmp	r0, r3
    34ea:	d10a      	bne.n	3502 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    34ec:	4621      	mov	r1, r4
    34ee:	4807      	ldr	r0, [pc, #28]	; (350c <gpio_nrfx_init+0x34>)
    34f0:	f001 fc8c 	bl	4e0c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    34f4:	4622      	mov	r2, r4
    34f6:	2105      	movs	r1, #5
    34f8:	200d      	movs	r0, #13
    34fa:	f7ff fa13 	bl	2924 <z_arm_irq_priority_set>
		return 0;
    34fe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3500:	bd10      	pop	{r4, pc}
		return -EIO;
    3502:	f06f 0004 	mvn.w	r0, #4
    3506:	e7fb      	b.n	3500 <gpio_nrfx_init+0x28>
    3508:	0bad0000 	.word	0x0bad0000
    350c:	00003511 	.word	0x00003511

00003510 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3510:	0943      	lsrs	r3, r0, #5
{
    3512:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3514:	d107      	bne.n	3526 <nrfx_gpio_handler+0x16>
	return list->head;
    3516:	4b0b      	ldr	r3, [pc, #44]	; (3544 <nrfx_gpio_handler+0x34>)
    3518:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    351a:	b121      	cbz	r1, 3526 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    351c:	2501      	movs	r5, #1
	return node->next;
    351e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3520:	4e09      	ldr	r6, [pc, #36]	; (3548 <nrfx_gpio_handler+0x38>)
    3522:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3524:	b901      	cbnz	r1, 3528 <nrfx_gpio_handler+0x18>
}
    3526:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3528:	688a      	ldr	r2, [r1, #8]
    352a:	402a      	ands	r2, r5
    352c:	d002      	beq.n	3534 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    352e:	4630      	mov	r0, r6
    3530:	684b      	ldr	r3, [r1, #4]
    3532:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3534:	b11c      	cbz	r4, 353e <nrfx_gpio_handler+0x2e>
    3536:	6823      	ldr	r3, [r4, #0]
    3538:	4621      	mov	r1, r4
    353a:	461c      	mov	r4, r3
    353c:	e7f2      	b.n	3524 <nrfx_gpio_handler+0x14>
    353e:	4623      	mov	r3, r4
    3540:	e7fa      	b.n	3538 <nrfx_gpio_handler+0x28>
    3542:	bf00      	nop
    3544:	2000e034 	.word	0x2000e034
    3548:	000086ac 	.word	0x000086ac

0000354c <gpio_nrfx_pin_configure>:
{
    354c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3550:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3552:	f001 051f 	and.w	r5, r1, #31
    3556:	7b3b      	ldrb	r3, [r7, #12]
{
    3558:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    355a:	4614      	mov	r4, r2
{
    355c:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    355e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3562:	b9d2      	cbnz	r2, 359a <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3564:	a902      	add	r1, sp, #8
    3566:	4628      	mov	r0, r5
    3568:	f001 fc56 	bl	4e18 <nrfx_gpiote_channel_get>
    356c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    356e:	4628      	mov	r0, r5
    3570:	f001 fd12 	bl	4f98 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3574:	4b43      	ldr	r3, [pc, #268]	; (3684 <gpio_nrfx_pin_configure+0x138>)
    3576:	4298      	cmp	r0, r3
    3578:	d004      	beq.n	3584 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    357a:	f06f 0004 	mvn.w	r0, #4
}
    357e:	b005      	add	sp, #20
    3580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3584:	4284      	cmp	r4, r0
    3586:	d001      	beq.n	358c <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3588:	2000      	movs	r0, #0
    358a:	e7f8      	b.n	357e <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    358c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3590:	f001 fc8a 	bl	4ea8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3594:	42a0      	cmp	r0, r4
    3596:	d0f7      	beq.n	3588 <gpio_nrfx_pin_configure+0x3c>
    3598:	e7ef      	b.n	357a <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    359a:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    359e:	f10d 0103 	add.w	r1, sp, #3
    35a2:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    35a4:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    35a8:	f001 fc36 	bl	4e18 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    35ac:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    35ae:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    35b0:	4649      	mov	r1, r9
    35b2:	4628      	mov	r0, r5
    35b4:	aa02      	add	r2, sp, #8
    35b6:	f001 faef 	bl	4b98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    35ba:	4b32      	ldr	r3, [pc, #200]	; (3684 <gpio_nrfx_pin_configure+0x138>)
    35bc:	4298      	cmp	r0, r3
    35be:	d002      	beq.n	35c6 <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    35c0:	f06f 0015 	mvn.w	r0, #21
    35c4:	e7db      	b.n	357e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    35c6:	4580      	cmp	r8, r0
    35c8:	d103      	bne.n	35d2 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    35ca:	f89d 0003 	ldrb.w	r0, [sp, #3]
    35ce:	f001 fc6b 	bl	4ea8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    35d2:	05a3      	lsls	r3, r4, #22
    35d4:	d547      	bpl.n	3666 <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    35d6:	4b2c      	ldr	r3, [pc, #176]	; (3688 <gpio_nrfx_pin_configure+0x13c>)
    35d8:	4a2c      	ldr	r2, [pc, #176]	; (368c <gpio_nrfx_pin_configure+0x140>)
    35da:	4023      	ands	r3, r4
    35dc:	4293      	cmp	r3, r2
    35de:	d018      	beq.n	3612 <gpio_nrfx_pin_configure+0xc6>
    35e0:	d80c      	bhi.n	35fc <gpio_nrfx_pin_configure+0xb0>
    35e2:	2b06      	cmp	r3, #6
    35e4:	d016      	beq.n	3614 <gpio_nrfx_pin_configure+0xc8>
    35e6:	d804      	bhi.n	35f2 <gpio_nrfx_pin_configure+0xa6>
    35e8:	b1a3      	cbz	r3, 3614 <gpio_nrfx_pin_configure+0xc8>
    35ea:	2b02      	cmp	r3, #2
    35ec:	d1e8      	bne.n	35c0 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    35ee:	2304      	movs	r3, #4
    35f0:	e010      	b.n	3614 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    35f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    35f6:	d1e3      	bne.n	35c0 <gpio_nrfx_pin_configure+0x74>
    35f8:	2301      	movs	r3, #1
    35fa:	e00b      	b.n	3614 <gpio_nrfx_pin_configure+0xc8>
    35fc:	4a24      	ldr	r2, [pc, #144]	; (3690 <gpio_nrfx_pin_configure+0x144>)
    35fe:	4293      	cmp	r3, r2
    3600:	d026      	beq.n	3650 <gpio_nrfx_pin_configure+0x104>
    3602:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3606:	d025      	beq.n	3654 <gpio_nrfx_pin_configure+0x108>
    3608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    360c:	d1d8      	bne.n	35c0 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    360e:	2302      	movs	r3, #2
    3610:	e000      	b.n	3614 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0D1;
    3612:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3614:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3618:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    361c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3620:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3622:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    3626:	bf4c      	ite	mi
    3628:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    362a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    362e:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3630:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3634:	d510      	bpl.n	3658 <gpio_nrfx_pin_configure+0x10c>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3636:	2301      	movs	r3, #1
    3638:	687a      	ldr	r2, [r7, #4]
    363a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    363c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    363e:	2200      	movs	r2, #0
    3640:	4628      	mov	r0, r5
    3642:	a901      	add	r1, sp, #4
    3644:	f001 fb52 	bl	4cec <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3648:	4b0e      	ldr	r3, [pc, #56]	; (3684 <gpio_nrfx_pin_configure+0x138>)
    364a:	4298      	cmp	r0, r3
    364c:	d09c      	beq.n	3588 <gpio_nrfx_pin_configure+0x3c>
    364e:	e7b7      	b.n	35c0 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    3650:	2305      	movs	r3, #5
    3652:	e7df      	b.n	3614 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    3654:	2303      	movs	r3, #3
    3656:	e7dd      	b.n	3614 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3658:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    365a:	bf41      	itttt	mi
    365c:	2301      	movmi	r3, #1
    365e:	687a      	ldrmi	r2, [r7, #4]
    3660:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3662:	60d3      	strmi	r3, [r2, #12]
}
    3664:	e7eb      	b.n	363e <gpio_nrfx_pin_configure+0xf2>
	if (flags & GPIO_PULL_UP) {
    3666:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3668:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    366c:	bf4c      	ite	mi
    366e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3670:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3674:	461a      	mov	r2, r3
    3676:	4628      	mov	r0, r5
    3678:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    367a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    367e:	f001 fa8b 	bl	4b98 <nrfx_gpiote_input_configure>
    3682:	e7e1      	b.n	3648 <gpio_nrfx_pin_configure+0xfc>
    3684:	0bad0000 	.word	0x0bad0000
    3688:	00f00006 	.word	0x00f00006
    368c:	00100006 	.word	0x00100006
    3690:	00400002 	.word	0x00400002

00003694 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3694:	4b02      	ldr	r3, [pc, #8]	; (36a0 <flash_nrf_pages_layout+0xc>)
    3696:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3698:	2301      	movs	r3, #1
    369a:	6013      	str	r3, [r2, #0]
}
    369c:	4770      	bx	lr
    369e:	bf00      	nop
    36a0:	2000e040 	.word	0x2000e040

000036a4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    36a4:	4800      	ldr	r0, [pc, #0]	; (36a8 <flash_nrf_get_parameters+0x4>)
    36a6:	4770      	bx	lr
    36a8:	00008b48 	.word	0x00008b48

000036ac <flash_nrf_erase>:
{
    36ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ae:	460e      	mov	r6, r1
    36b0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    36b2:	f004 ffa5 	bl	8600 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    36b6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    36b8:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    36ba:	4630      	mov	r0, r6
    36bc:	f003 f8b7 	bl	682e <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    36c0:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    36c2:	b300      	cbz	r0, 3706 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    36c4:	fbb6 f3f5 	udiv	r3, r6, r5
    36c8:	fb05 6313 	mls	r3, r5, r3, r6
    36cc:	b923      	cbnz	r3, 36d8 <flash_nrf_erase+0x2c>
    36ce:	fbb4 f3f5 	udiv	r3, r4, r5
    36d2:	fb05 4313 	mls	r3, r5, r3, r4
    36d6:	b143      	cbz	r3, 36ea <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    36d8:	4623      	mov	r3, r4
    36da:	4632      	mov	r2, r6
    36dc:	2145      	movs	r1, #69	; 0x45
    36de:	480c      	ldr	r0, [pc, #48]	; (3710 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    36e0:	f002 fc38 	bl	5f54 <z_log_minimal_printk>
			return -EINVAL;
    36e4:	f06f 0015 	mvn.w	r0, #21
    36e8:	e002      	b.n	36f0 <flash_nrf_erase+0x44>
		if (!n_pages) {
    36ea:	42a5      	cmp	r5, r4
    36ec:	d901      	bls.n	36f2 <flash_nrf_erase+0x46>
			return 0;
    36ee:	2000      	movs	r0, #0
}
    36f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    36f2:	f004 ff85 	bl	8600 <nrfx_nvmc_flash_page_size_get>
    36f6:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    36f8:	4638      	mov	r0, r7
    36fa:	f001 fd2f 	bl	515c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    36fe:	1b64      	subs	r4, r4, r5
    3700:	442f      	add	r7, r5
    3702:	d1f9      	bne.n	36f8 <flash_nrf_erase+0x4c>
    3704:	e7f3      	b.n	36ee <flash_nrf_erase+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3706:	4623      	mov	r3, r4
    3708:	4632      	mov	r2, r6
    370a:	2145      	movs	r1, #69	; 0x45
    370c:	4801      	ldr	r0, [pc, #4]	; (3714 <flash_nrf_erase+0x68>)
    370e:	e7e7      	b.n	36e0 <flash_nrf_erase+0x34>
    3710:	00009a1a 	.word	0x00009a1a
    3714:	00009a3e 	.word	0x00009a3e

00003718 <nrf_flash_init>:
{
    3718:	b510      	push	{r4, lr}
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    371a:	f004 ff74 	bl	8606 <nrfx_nvmc_flash_page_count_get>
    371e:	4c03      	ldr	r4, [pc, #12]	; (372c <nrf_flash_init+0x14>)
    3720:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3722:	f004 ff6d 	bl	8600 <nrfx_nvmc_flash_page_size_get>
    3726:	6060      	str	r0, [r4, #4]
}
    3728:	2000      	movs	r0, #0
    372a:	bd10      	pop	{r4, pc}
    372c:	2000e040 	.word	0x2000e040

00003730 <flash_nrf_read>:
{
    3730:	b570      	push	{r4, r5, r6, lr}
    3732:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    3734:	4619      	mov	r1, r3
    3736:	4628      	mov	r0, r5
{
    3738:	4616      	mov	r6, r2
    373a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    373c:	f003 f877 	bl	682e <is_regular_addr_valid>
    3740:	b940      	cbnz	r0, 3754 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3742:	4808      	ldr	r0, [pc, #32]	; (3764 <flash_nrf_read+0x34>)
    3744:	4623      	mov	r3, r4
    3746:	462a      	mov	r2, r5
    3748:	2145      	movs	r1, #69	; 0x45
    374a:	f002 fc03 	bl	5f54 <z_log_minimal_printk>
    374e:	f06f 0015 	mvn.w	r0, #21
}
    3752:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    3754:	b124      	cbz	r4, 3760 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    3756:	4622      	mov	r2, r4
    3758:	4629      	mov	r1, r5
    375a:	4630      	mov	r0, r6
    375c:	f002 ff7a 	bl	6654 <memcpy>
		return 0;
    3760:	2000      	movs	r0, #0
    3762:	e7f6      	b.n	3752 <flash_nrf_read+0x22>
    3764:	00009a3e 	.word	0x00009a3e

00003768 <flash_nrf_write>:
{
    3768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    376a:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    376c:	4619      	mov	r1, r3
    376e:	4630      	mov	r0, r6
{
    3770:	4617      	mov	r7, r2
    3772:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
    3774:	f003 f85b 	bl	682e <is_regular_addr_valid>
    3778:	b940      	cbnz	r0, 378c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    377a:	462b      	mov	r3, r5
    377c:	4632      	mov	r2, r6
    377e:	2145      	movs	r1, #69	; 0x45
    3780:	4811      	ldr	r0, [pc, #68]	; (37c8 <flash_nrf_write+0x60>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3782:	f002 fbe7 	bl	5f54 <z_log_minimal_printk>
		return -EINVAL;
    3786:	f06f 0015 	mvn.w	r0, #21
}
    378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    378c:	ea46 0405 	orr.w	r4, r6, r5
    3790:	f014 0403 	ands.w	r4, r4, #3
    3794:	d004      	beq.n	37a0 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3796:	462b      	mov	r3, r5
    3798:	4632      	mov	r2, r6
    379a:	2145      	movs	r1, #69	; 0x45
    379c:	480b      	ldr	r0, [pc, #44]	; (37cc <flash_nrf_write+0x64>)
    379e:	e7f0      	b.n	3782 <flash_nrf_write+0x1a>
	if (!len) {
    37a0:	b14d      	cbz	r5, 37b6 <flash_nrf_write+0x4e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    37a2:	192b      	adds	r3, r5, r4
    37a4:	2b03      	cmp	r3, #3
    37a6:	eba6 0004 	sub.w	r0, r6, r4
    37aa:	d806      	bhi.n	37ba <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    37ac:	4a08      	ldr	r2, [pc, #32]	; (37d0 <flash_nrf_write+0x68>)
    37ae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    37b2:	07db      	lsls	r3, r3, #31
    37b4:	d5fb      	bpl.n	37ae <flash_nrf_write+0x46>
	return ret;
    37b6:	2000      	movs	r0, #0
    37b8:	e7e7      	b.n	378a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    37ba:	1b3b      	subs	r3, r7, r4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    37bc:	6819      	ldr	r1, [r3, #0]
    37be:	f001 fceb 	bl	5198 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    37c2:	3c04      	subs	r4, #4
}
    37c4:	e7ed      	b.n	37a2 <flash_nrf_write+0x3a>
    37c6:	bf00      	nop
    37c8:	00009a3e 	.word	0x00009a3e
    37cc:	00009a60 	.word	0x00009a60
    37d0:	50039000 	.word	0x50039000

000037d4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    37d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37d6:	4605      	mov	r5, r0
    37d8:	460f      	mov	r7, r1
	return dev->data;
    37da:	6906      	ldr	r6, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    37dc:	f004 ff21 	bl	8622 <k_is_in_isr>
    37e0:	b990      	cbnz	r0, 3808 <uarte_nrfx_poll_out+0x34>
	return !z_sys_post_kernel;
    37e2:	4b1e      	ldr	r3, [pc, #120]	; (385c <uarte_nrfx_poll_out+0x88>)
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	b17b      	cbz	r3, 3808 <uarte_nrfx_poll_out+0x34>
{
    37e8:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    37ea:	6868      	ldr	r0, [r5, #4]
    37ec:	f003 f961 	bl	6ab2 <is_tx_ready.isra.0>
    37f0:	b9d8      	cbnz	r0, 382a <uarte_nrfx_poll_out+0x56>
    37f2:	2001      	movs	r0, #1
    37f4:	f004 fe8c 	bl	8510 <nrfx_busy_wait>
    37f8:	3c01      	subs	r4, #1
    37fa:	d1f6      	bne.n	37ea <uarte_nrfx_poll_out+0x16>
    37fc:	e7f4      	b.n	37e8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    37fe:	f384 8811 	msr	BASEPRI, r4
    3802:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3806:	e7ef      	b.n	37e8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3808:	f04f 0320 	mov.w	r3, #32
    380c:	f3ef 8411 	mrs	r4, BASEPRI
    3810:	f383 8812 	msr	BASEPRI_MAX, r3
    3814:	f3bf 8f6f 	isb	sy
	int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3818:	6868      	ldr	r0, [r5, #4]
    381a:	f003 f94a 	bl	6ab2 <is_tx_ready.isra.0>
    381e:	b988      	cbnz	r0, 3844 <uarte_nrfx_poll_out+0x70>
	__asm__ volatile(
    3820:	f384 8811 	msr	BASEPRI, r4
    3824:	f3bf 8f6f 	isb	sy
}
    3828:	e7ee      	b.n	3808 <uarte_nrfx_poll_out+0x34>
	__asm__ volatile(
    382a:	f04f 0320 	mov.w	r3, #32
    382e:	f3ef 8411 	mrs	r4, BASEPRI
    3832:	f383 8812 	msr	BASEPRI_MAX, r3
    3836:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    383a:	6868      	ldr	r0, [r5, #4]
    383c:	f003 f939 	bl	6ab2 <is_tx_ready.isra.0>
    3840:	2800      	cmp	r0, #0
    3842:	d0dc      	beq.n	37fe <uarte_nrfx_poll_out+0x2a>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3844:	4631      	mov	r1, r6
    3846:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    384a:	2201      	movs	r2, #1
    384c:	6868      	ldr	r0, [r5, #4]
    384e:	f003 f915 	bl	6a7c <tx_start.isra.0>
	__asm__ volatile(
    3852:	f384 8811 	msr	BASEPRI, r4
    3856:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    385a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    385c:	2000fe51 	.word	0x2000fe51

00003860 <uarte_nrfx_configure>:
{
    3860:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    3862:	794b      	ldrb	r3, [r1, #5]
    3864:	2b01      	cmp	r3, #1
    3866:	d026      	beq.n	38b6 <uarte_nrfx_configure+0x56>
    3868:	2b03      	cmp	r3, #3
    386a:	d121      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    386c:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    386e:	798b      	ldrb	r3, [r1, #6]
    3870:	2b03      	cmp	r3, #3
    3872:	d11d      	bne.n	38b0 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    3874:	79cc      	ldrb	r4, [r1, #7]
    3876:	b10c      	cbz	r4, 387c <uarte_nrfx_configure+0x1c>
    3878:	2c01      	cmp	r4, #1
    387a:	d119      	bne.n	38b0 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    387c:	790a      	ldrb	r2, [r1, #4]
    387e:	b112      	cbz	r2, 3886 <uarte_nrfx_configure+0x26>
    3880:	2a02      	cmp	r2, #2
    3882:	d115      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3884:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3886:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3888:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    388a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    388e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3890:	d065      	beq.n	395e <uarte_nrfx_configure+0xfe>
    3892:	d82d      	bhi.n	38f0 <uarte_nrfx_configure+0x90>
    3894:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3898:	d064      	beq.n	3964 <uarte_nrfx_configure+0x104>
    389a:	d816      	bhi.n	38ca <uarte_nrfx_configure+0x6a>
    389c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    38a0:	d062      	beq.n	3968 <uarte_nrfx_configure+0x108>
    38a2:	d80a      	bhi.n	38ba <uarte_nrfx_configure+0x5a>
    38a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    38a8:	d061      	beq.n	396e <uarte_nrfx_configure+0x10e>
    38aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    38ae:	d061      	beq.n	3974 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    38b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    38b4:	e052      	b.n	395c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    38b6:	2600      	movs	r6, #0
    38b8:	e7d9      	b.n	386e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    38ba:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    38be:	d05c      	beq.n	397a <uarte_nrfx_configure+0x11a>
    38c0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    38c4:	d1f4      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    38c6:	4b37      	ldr	r3, [pc, #220]	; (39a4 <uarte_nrfx_configure+0x144>)
    38c8:	e03c      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38ca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    38ce:	d057      	beq.n	3980 <uarte_nrfx_configure+0x120>
    38d0:	d807      	bhi.n	38e2 <uarte_nrfx_configure+0x82>
    38d2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    38d6:	d055      	beq.n	3984 <uarte_nrfx_configure+0x124>
    38d8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    38dc:	d1e8      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    38de:	4b32      	ldr	r3, [pc, #200]	; (39a8 <uarte_nrfx_configure+0x148>)
    38e0:	e030      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38e2:	f647 2712 	movw	r7, #31250	; 0x7a12
    38e6:	42bb      	cmp	r3, r7
    38e8:	d1e2      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    38ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    38ee:	e029      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38f0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    38f4:	d048      	beq.n	3988 <uarte_nrfx_configure+0x128>
    38f6:	d813      	bhi.n	3920 <uarte_nrfx_configure+0xc0>
    38f8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    38fc:	d047      	beq.n	398e <uarte_nrfx_configure+0x12e>
    38fe:	d809      	bhi.n	3914 <uarte_nrfx_configure+0xb4>
    3900:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3904:	42bb      	cmp	r3, r7
    3906:	d044      	beq.n	3992 <uarte_nrfx_configure+0x132>
    3908:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    390c:	d1d0      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    390e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3912:	e017      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3914:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3918:	d1ca      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    391a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    391e:	e011      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3920:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3924:	d038      	beq.n	3998 <uarte_nrfx_configure+0x138>
    3926:	d808      	bhi.n	393a <uarte_nrfx_configure+0xda>
    3928:	4f20      	ldr	r7, [pc, #128]	; (39ac <uarte_nrfx_configure+0x14c>)
    392a:	42bb      	cmp	r3, r7
    392c:	d037      	beq.n	399e <uarte_nrfx_configure+0x13e>
    392e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3932:	d1bd      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3934:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3938:	e004      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    393a:	4f1d      	ldr	r7, [pc, #116]	; (39b0 <uarte_nrfx_configure+0x150>)
    393c:	42bb      	cmp	r3, r7
    393e:	d1b7      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3944:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	get_dev_data(dev)->uart_config = *cfg;
    3948:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    394a:	4334      	orrs	r4, r6
    394c:	4322      	orrs	r2, r4
    394e:	3304      	adds	r3, #4
    3950:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3952:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3956:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    395a:	2000      	movs	r0, #0
}
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    395e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3962:	e7ef      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3964:	4b13      	ldr	r3, [pc, #76]	; (39b4 <uarte_nrfx_configure+0x154>)
    3966:	e7ed      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3968:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    396c:	e7ea      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    396e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3972:	e7e7      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3974:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3978:	e7e4      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    397a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    397e:	e7e1      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3980:	4b0d      	ldr	r3, [pc, #52]	; (39b8 <uarte_nrfx_configure+0x158>)
    3982:	e7df      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3984:	4b0d      	ldr	r3, [pc, #52]	; (39bc <uarte_nrfx_configure+0x15c>)
    3986:	e7dd      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3988:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    398c:	e7da      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    398e:	4b0c      	ldr	r3, [pc, #48]	; (39c0 <uarte_nrfx_configure+0x160>)
    3990:	e7d8      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3992:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3996:	e7d5      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3998:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    399c:	e7d2      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    399e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    39a2:	e7cf      	b.n	3944 <uarte_nrfx_configure+0xe4>
    39a4:	0013b000 	.word	0x0013b000
    39a8:	004ea000 	.word	0x004ea000
    39ac:	0003d090 	.word	0x0003d090
    39b0:	000f4240 	.word	0x000f4240
    39b4:	00275000 	.word	0x00275000
    39b8:	0075c000 	.word	0x0075c000
    39bc:	003af000 	.word	0x003af000
    39c0:	013a9000 	.word	0x013a9000

000039c4 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    39c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    39c8:	2300      	movs	r3, #0
	return dev->config;
    39ca:	6847      	ldr	r7, [r0, #4]
	return dev->data;
    39cc:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    39ce:	683c      	ldr	r4, [r7, #0]
    39d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    39d4:	6028      	str	r0, [r5, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    39d6:	6843      	ldr	r3, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    39d8:	68de      	ldr	r6, [r3, #12]
    39da:	1c71      	adds	r1, r6, #1
    39dc:	d00b      	beq.n	39f6 <uarte_instance_init.constprop.0+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39de:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    39e0:	f8df c134 	ldr.w	ip, [pc, #308]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    *p_pin = pin_number & 0x1F;
    39e4:	f006 021f 	and.w	r2, r6, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39e8:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    39ea:	f8cc 1008 	str.w	r1, [ip, #8]
    reg->PIN_CNF[pin_number] = cnf;
    39ee:	2103      	movs	r1, #3
    39f0:	3280      	adds	r2, #128	; 0x80
    39f2:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    39f6:	6919      	ldr	r1, [r3, #16]
    39f8:	1c4a      	adds	r2, r1, #1
    39fa:	d00f      	beq.n	3a1c <uarte_instance_init.constprop.0+0x58>
			nrf_gpio_cfg_input(cfg->rx_pin,
    39fc:	7f1a      	ldrb	r2, [r3, #28]
    39fe:	f8df e118 	ldr.w	lr, [pc, #280]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    3a02:	2a00      	cmp	r2, #0
    3a04:	bf0c      	ite	eq
    3a06:	f04f 0c00 	moveq.w	ip, #0
    3a0a:	f04f 0c03 	movne.w	ip, #3
    *p_pin = pin_number & 0x1F;
    3a0e:	f001 021f 	and.w	r2, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3a16:	3280      	adds	r2, #128	; 0x80
    3a18:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a1c:	f8d3 c014 	ldr.w	ip, [r3, #20]
    3a20:	f1bc 3fff 	cmp.w	ip, #4294967295
    3a24:	d00e      	beq.n	3a44 <uarte_instance_init.constprop.0+0x80>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a26:	f04f 0e01 	mov.w	lr, #1
    p_reg->OUTSET = set_mask;
    3a2a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    *p_pin = pin_number & 0x1F;
    3a2e:	f00c 021f 	and.w	r2, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a32:	fa0e fe02 	lsl.w	lr, lr, r2
    p_reg->OUTSET = set_mask;
    3a36:	f8c8 e008 	str.w	lr, [r8, #8]
    reg->PIN_CNF[pin_number] = cnf;
    3a3a:	f04f 0e03 	mov.w	lr, #3
    3a3e:	3280      	adds	r2, #128	; 0x80
    3a40:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a44:	f8d3 e018 	ldr.w	lr, [r3, #24]
    3a48:	f1be 3fff 	cmp.w	lr, #4294967295
    3a4c:	d00f      	beq.n	3a6e <uarte_instance_init.constprop.0+0xaa>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3a4e:	7f5a      	ldrb	r2, [r3, #29]
    3a50:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    3a54:	2a00      	cmp	r2, #0
    3a56:	bf0c      	ite	eq
    3a58:	f04f 0800 	moveq.w	r8, #0
    3a5c:	f04f 0803 	movne.w	r8, #3
    *p_pin = pin_number & 0x1F;
    3a60:	f00e 021f 	and.w	r2, lr, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a64:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3a68:	3280      	adds	r2, #128	; 0x80
    3a6a:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3a6e:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    3a70:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3a74:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
    3a78:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3a7c:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
    3a7e:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    3a82:	f7ff feed 	bl	3860 <uarte_nrfx_configure>
	if (err) {
    3a86:	4606      	mov	r6, r0
    3a88:	b978      	cbnz	r0, 3aaa <uarte_instance_init.constprop.0+0xe6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3a8a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3a8c:	0799      	lsls	r1, r3, #30
    3a8e:	d51b      	bpl.n	3ac8 <uarte_instance_init.constprop.0+0x104>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3a90:	f105 0016 	add.w	r0, r5, #22
    3a94:	f000 fffa 	bl	4a8c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3a98:	4b20      	ldr	r3, [pc, #128]	; (3b1c <uarte_instance_init.constprop.0+0x158>)
    3a9a:	4298      	cmp	r0, r3
    3a9c:	d008      	beq.n	3ab0 <uarte_instance_init.constprop.0+0xec>
		LOG_ERR("Failed to allocate PPI Channel");
    3a9e:	2145      	movs	r1, #69	; 0x45
    3aa0:	481f      	ldr	r0, [pc, #124]	; (3b20 <uarte_instance_init.constprop.0+0x15c>)
    3aa2:	f002 fa57 	bl	5f54 <z_log_minimal_printk>
		return -EIO;
    3aa6:	f06f 0604 	mvn.w	r6, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3aaa:	4630      	mov	r0, r6
    3aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3ab0:	7daa      	ldrb	r2, [r5, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3ab2:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    3ab6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3aba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3abe:	2301      	movs	r3, #1
    3ac0:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3ac2:	4a18      	ldr	r2, [pc, #96]	; (3b24 <uarte_instance_init.constprop.0+0x160>)
    3ac4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3ac8:	2308      	movs	r3, #8
    3aca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3ace:	7a3b      	ldrb	r3, [r7, #8]
    3ad0:	b95b      	cbnz	r3, 3aea <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ad2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3ad6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3ada:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3ade:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3ae2:	2301      	movs	r3, #1
    3ae4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ae8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3aea:	687b      	ldr	r3, [r7, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3aec:	3514      	adds	r5, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3aee:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3af0:	bf5c      	itt	pl
    3af2:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3af6:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3afa:	06db      	lsls	r3, r3, #27
    3afc:	bf44      	itt	mi
    3afe:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3b02:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    3b06:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3b08:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3b0c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b10:	2301      	movs	r3, #1
    3b12:	60a3      	str	r3, [r4, #8]
    3b14:	60e3      	str	r3, [r4, #12]
	return 0;
    3b16:	e7c8      	b.n	3aaa <uarte_instance_init.constprop.0+0xe6>
    3b18:	50842500 	.word	0x50842500
    3b1c:	0bad0000 	.word	0x0bad0000
    3b20:	00009a8d 	.word	0x00009a8d
    3b24:	50017000 	.word	0x50017000

00003b28 <compare_int_lock>:
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b28:	2301      	movs	r3, #1
    3b2a:	4083      	lsls	r3, r0
{
    3b2c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b2e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b30:	4a0b      	ldr	r2, [pc, #44]	; (3b60 <compare_int_lock+0x38>)
    3b32:	e8d2 1fef 	ldaex	r1, [r2]
    3b36:	ea01 0504 	and.w	r5, r1, r4
    3b3a:	e8c2 5fe6 	stlex	r6, r5, [r2]
    3b3e:	2e00      	cmp	r6, #0
    3b40:	d1f7      	bne.n	3b32 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b46:	4082      	lsls	r2, r0
    3b48:	4806      	ldr	r0, [pc, #24]	; (3b64 <compare_int_lock+0x3c>)
    3b4a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3b4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b52:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b56:	420b      	tst	r3, r1
}
    3b58:	bf14      	ite	ne
    3b5a:	2001      	movne	r0, #1
    3b5c:	2000      	moveq	r0, #0
    3b5e:	bd70      	pop	{r4, r5, r6, pc}
    3b60:	2000e04c 	.word	0x2000e04c
    3b64:	50015000 	.word	0x50015000

00003b68 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b68:	491b      	ldr	r1, [pc, #108]	; (3bd8 <sys_clock_timeout_handler+0x70>)
{
    3b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b6c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3b6e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b72:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3b74:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3b78:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b7c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3b7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3b82:	d30f      	bcc.n	3ba4 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3b84:	f001 fc5c 	bl	5440 <sys_clock_announce>
    return p_reg->CC[ch];
    3b88:	00a3      	lsls	r3, r4, #2
    3b8a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3b8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    3b92:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3b96:	4295      	cmp	r5, r2
    3b98:	d11d      	bne.n	3bd6 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    3b9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3b9e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    3ba2:	e012      	b.n	3bca <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3ba4:	4b0d      	ldr	r3, [pc, #52]	; (3bdc <sys_clock_timeout_handler+0x74>)
    3ba6:	681b      	ldr	r3, [r3, #0]
    3ba8:	0a1a      	lsrs	r2, r3, #8
    3baa:	061b      	lsls	r3, r3, #24
    3bac:	195e      	adds	r6, r3, r5
    3bae:	4b0c      	ldr	r3, [pc, #48]	; (3be0 <sys_clock_timeout_handler+0x78>)
    3bb0:	f142 0700 	adc.w	r7, r2, #0
    3bb4:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3bb8:	f001 fc42 	bl	5440 <sys_clock_announce>
    return p_reg->CC[ch];
    3bbc:	4a09      	ldr	r2, [pc, #36]	; (3be4 <sys_clock_timeout_handler+0x7c>)
    3bbe:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    3bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    3bc6:	429d      	cmp	r5, r3
    3bc8:	d105      	bne.n	3bd6 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    3bce:	4a05      	ldr	r2, [pc, #20]	; (3be4 <sys_clock_timeout_handler+0x7c>)
    3bd0:	40a3      	lsls	r3, r4
    3bd2:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bd8:	2000c680 	.word	0x2000c680
    3bdc:	2000e050 	.word	0x2000e050
    3be0:	2000c688 	.word	0x2000c688
    3be4:	50015000 	.word	0x50015000

00003be8 <compare_int_unlock>:
	if (key) {
    3be8:	b1d9      	cbz	r1, 3c22 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    3bea:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3bec:	4a0d      	ldr	r2, [pc, #52]	; (3c24 <compare_int_unlock+0x3c>)
    3bee:	4083      	lsls	r3, r0
    3bf0:	e8d2 cfef 	ldaex	ip, [r2]
    3bf4:	ea4c 0c03 	orr.w	ip, ip, r3
    3bf8:	e8c2 cfe1 	stlex	r1, ip, [r2]
    3bfc:	2900      	cmp	r1, #0
    3bfe:	d1f7      	bne.n	3bf0 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3c04:	4a08      	ldr	r2, [pc, #32]	; (3c28 <compare_int_unlock+0x40>)
    3c06:	4083      	lsls	r3, r0
    3c08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c0c:	4b07      	ldr	r3, [pc, #28]	; (3c2c <compare_int_unlock+0x44>)
    3c0e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3c12:	40c3      	lsrs	r3, r0
    3c14:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c16:	bf42      	ittt	mi
    3c18:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3c1c:	4b04      	ldrmi	r3, [pc, #16]	; (3c30 <compare_int_unlock+0x48>)
    3c1e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3c22:	4770      	bx	lr
    3c24:	2000e04c 	.word	0x2000e04c
    3c28:	50015000 	.word	0x50015000
    3c2c:	2000e048 	.word	0x2000e048
    3c30:	e000e100 	.word	0xe000e100

00003c34 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3c34:	4b0d      	ldr	r3, [pc, #52]	; (3c6c <z_nrf_rtc_timer_read+0x38>)
    3c36:	6818      	ldr	r0, [r3, #0]
    3c38:	0a01      	lsrs	r1, r0, #8
    3c3a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3c3c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3c40:	4b0b      	ldr	r3, [pc, #44]	; (3c70 <z_nrf_rtc_timer_read+0x3c>)
    3c42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3c46:	1818      	adds	r0, r3, r0
    3c48:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c50:	d20a      	bcs.n	3c68 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3c52:	4b08      	ldr	r3, [pc, #32]	; (3c74 <z_nrf_rtc_timer_read+0x40>)
    3c54:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c58:	4290      	cmp	r0, r2
    3c5a:	eb71 0303 	sbcs.w	r3, r1, r3
    3c5e:	d203      	bcs.n	3c68 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3c60:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3c64:	f141 0100 	adc.w	r1, r1, #0
}
    3c68:	4770      	bx	lr
    3c6a:	bf00      	nop
    3c6c:	2000e050 	.word	0x2000e050
    3c70:	50015000 	.word	0x50015000
    3c74:	2000c688 	.word	0x2000c688

00003c78 <compare_set>:
{
    3c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c7c:	4614      	mov	r4, r2
    3c7e:	461d      	mov	r5, r3
    3c80:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    3c82:	f7ff ff51 	bl	3b28 <compare_int_lock>
    3c86:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3c88:	f7ff ffd4 	bl	3c34 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3c8c:	42a0      	cmp	r0, r4
    3c8e:	eb71 0305 	sbcs.w	r3, r1, r5
    3c92:	d27a      	bcs.n	3d8a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    3c94:	4b44      	ldr	r3, [pc, #272]	; (3da8 <compare_set+0x130>)
    3c96:	1a20      	subs	r0, r4, r0
    3c98:	eb65 0101 	sbc.w	r1, r5, r1
    3c9c:	4298      	cmp	r0, r3
    3c9e:	f171 0100 	sbcs.w	r1, r1, #0
    3ca2:	d27d      	bcs.n	3da0 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
    3ca4:	4b41      	ldr	r3, [pc, #260]	; (3dac <compare_set+0x134>)
    3ca6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    3caa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3cae:	429d      	cmp	r5, r3
    3cb0:	bf08      	it	eq
    3cb2:	4294      	cmpeq	r4, r2
    3cb4:	d054      	beq.n	3d60 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    3cba:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3cbe:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cc0:	2100      	movs	r1, #0
    3cc2:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3cc6:	f107 0850 	add.w	r8, r7, #80	; 0x50
    3cca:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    3cce:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cd2:	40bb      	lsls	r3, r7
    3cd4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    3cd8:	fa1f f888 	uxth.w	r8, r8
    3cdc:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    3ce0:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3ce2:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3ce6:	4b32      	ldr	r3, [pc, #200]	; (3db0 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ce8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
     return p_reg->COUNTER;
    3cec:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3cf0:	eba0 000a 	sub.w	r0, r0, sl
    3cf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3cf8:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3cfc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3cfe:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
    3d02:	d104      	bne.n	3d0e <compare_set+0x96>
    3d04:	2013      	movs	r0, #19
    3d06:	f004 fc92 	bl	862e <z_impl_k_busy_wait>
    3d0a:	2100      	movs	r1, #0
    3d0c:	4b28      	ldr	r3, [pc, #160]	; (3db0 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3d0e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3d12:	eba6 000c 	sub.w	r0, r6, ip
    3d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3d1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d1e:	bf88      	it	hi
    3d20:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d22:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
    3d26:	9a01      	ldr	r2, [sp, #4]
    3d28:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d2c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    3d30:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    3d34:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3d38:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    3d3c:	4582      	cmp	sl, r0
    3d3e:	d006      	beq.n	3d4e <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    3d40:	1a30      	subs	r0, r6, r0
    3d42:	3802      	subs	r0, #2
    3d44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3d48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d4c:	d81b      	bhi.n	3d86 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    3d4e:	eba6 060b 	sub.w	r6, r6, fp
    3d52:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3d56:	1936      	adds	r6, r6, r4
    3d58:	f145 0300 	adc.w	r3, r5, #0
    3d5c:	4634      	mov	r4, r6
    3d5e:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    3d60:	4912      	ldr	r1, [pc, #72]	; (3dac <compare_set+0x134>)
	cc_data[chan].callback = handler;
    3d62:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3d64:	eb01 1207 	add.w	r2, r1, r7, lsl #4
    3d68:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    3d6c:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    3d6e:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
    3d70:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d74:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    3d76:	4638      	mov	r0, r7
    3d78:	9900      	ldr	r1, [sp, #0]
    3d7a:	f7ff ff35 	bl	3be8 <compare_int_unlock>
}
    3d7e:	4620      	mov	r0, r4
    3d80:	b003      	add	sp, #12
    3d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d86:	4630      	mov	r0, r6
    3d88:	e7b0      	b.n	3cec <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3d8a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3d8c:	4a09      	ldr	r2, [pc, #36]	; (3db4 <compare_set+0x13c>)
    3d8e:	40bb      	lsls	r3, r7
    3d90:	e8d2 0fef 	ldaex	r0, [r2]
    3d94:	4318      	orrs	r0, r3
    3d96:	e8c2 0fe1 	stlex	r1, r0, [r2]
    3d9a:	2900      	cmp	r1, #0
    3d9c:	d0e0      	beq.n	3d60 <compare_set+0xe8>
    3d9e:	e7f7      	b.n	3d90 <compare_set+0x118>
			return -EINVAL;
    3da0:	f06f 0415 	mvn.w	r4, #21
    3da4:	e7e7      	b.n	3d76 <compare_set+0xfe>
    3da6:	bf00      	nop
    3da8:	01000001 	.word	0x01000001
    3dac:	2000c670 	.word	0x2000c670
    3db0:	50015000 	.word	0x50015000
    3db4:	2000e048 	.word	0x2000e048

00003db8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    3dba:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3dbc:	f04f 30ff 	mov.w	r0, #4294967295
    3dc0:	f04f 31ff 	mov.w	r1, #4294967295
    3dc4:	4d16      	ldr	r5, [pc, #88]	; (3e20 <sys_clock_driver_init+0x68>)
    3dc6:	4b17      	ldr	r3, [pc, #92]	; (3e24 <sys_clock_driver_init+0x6c>)
    3dc8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3dcc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3dd4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3dd6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3dda:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3dde:	4b12      	ldr	r3, [pc, #72]	; (3e28 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3de0:	2101      	movs	r1, #1
    3de2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3de6:	2015      	movs	r0, #21
    3de8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3dec:	4622      	mov	r2, r4
    3dee:	f7fe fd99 	bl	2924 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3df2:	2015      	movs	r0, #21
    3df4:	f7fe fd7a 	bl	28ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3df8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3dfa:	4a0c      	ldr	r2, [pc, #48]	; (3e2c <sys_clock_driver_init+0x74>)
    3dfc:	60ab      	str	r3, [r5, #8]
    3dfe:	602b      	str	r3, [r5, #0]
    3e00:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3e02:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <sys_clock_driver_init+0x78>)
    3e04:	4a0b      	ldr	r2, [pc, #44]	; (3e34 <sys_clock_driver_init+0x7c>)
    3e06:	9300      	str	r3, [sp, #0]
    3e08:	4620      	mov	r0, r4
    3e0a:	2300      	movs	r3, #0
    3e0c:	9401      	str	r4, [sp, #4]
    3e0e:	f7ff ff33 	bl	3c78 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3e12:	4630      	mov	r0, r6
    3e14:	f7ff fa84 	bl	3320 <z_nrf_clock_control_lf_on>

	return 0;
}
    3e18:	4620      	mov	r0, r4
    3e1a:	b002      	add	sp, #8
    3e1c:	bd70      	pop	{r4, r5, r6, pc}
    3e1e:	bf00      	nop
    3e20:	50015000 	.word	0x50015000
    3e24:	2000c670 	.word	0x2000c670
    3e28:	e000e100 	.word	0xe000e100
    3e2c:	2000e04c 	.word	0x2000e04c
    3e30:	00003b69 	.word	0x00003b69
    3e34:	007fffff 	.word	0x007fffff

00003e38 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    3e38:	4b32      	ldr	r3, [pc, #200]	; (3f04 <rtc_nrf_isr+0xcc>)
{
    3e3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3e3e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3e42:	0792      	lsls	r2, r2, #30
    3e44:	d50b      	bpl.n	3e5e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3e4a:	b142      	cbz	r2, 3e5e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e4c:	2200      	movs	r2, #0
    3e4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    3e52:	4a2d      	ldr	r2, [pc, #180]	; (3f08 <rtc_nrf_isr+0xd0>)
    3e54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3e58:	6813      	ldr	r3, [r2, #0]
    3e5a:	3301      	adds	r3, #1
    3e5c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3e5e:	f04f 0320 	mov.w	r3, #32
    3e62:	f3ef 8211 	mrs	r2, BASEPRI
    3e66:	f383 8812 	msr	BASEPRI_MAX, r3
    3e6a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3e6e:	4c25      	ldr	r4, [pc, #148]	; (3f04 <rtc_nrf_isr+0xcc>)
    3e70:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3e74:	03db      	lsls	r3, r3, #15
    3e76:	d525      	bpl.n	3ec4 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e78:	4b24      	ldr	r3, [pc, #144]	; (3f0c <rtc_nrf_isr+0xd4>)
    3e7a:	e8d3 1fef 	ldaex	r1, [r3]
    3e7e:	f021 0001 	bic.w	r0, r1, #1
    3e82:	e8c3 0fe5 	stlex	r5, r0, [r3]
    3e86:	2d00      	cmp	r5, #0
    3e88:	d1f7      	bne.n	3e7a <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3e8a:	b911      	cbnz	r1, 3e92 <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e8c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3e90:	b1c3      	cbz	r3, 3ec4 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e92:	2500      	movs	r5, #0
    3e94:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3e98:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    3e9c:	f382 8811 	msr	BASEPRI, r2
    3ea0:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    3ea4:	f7ff fec6 	bl	3c34 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3ea8:	f04f 0320 	mov.w	r3, #32
    3eac:	f3ef 8211 	mrs	r2, BASEPRI
    3eb0:	f383 8812 	msr	BASEPRI_MAX, r3
    3eb4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3eb8:	4b15      	ldr	r3, [pc, #84]	; (3f10 <rtc_nrf_isr+0xd8>)
    3eba:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3ebe:	42b0      	cmp	r0, r6
    3ec0:	41b9      	sbcs	r1, r7
    3ec2:	d206      	bcs.n	3ed2 <rtc_nrf_isr+0x9a>
	__asm__ volatile(
    3ec4:	f382 8811 	msr	BASEPRI, r2
    3ec8:	f3bf 8f6f 	isb	sy
}
    3ecc:	b003      	add	sp, #12
    3ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ed2:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    3ed6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3eda:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    3ede:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ee0:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    3ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ee8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    3eec:	f382 8811 	msr	BASEPRI, r2
    3ef0:	f3bf 8f6f 	isb	sy
		if (handler) {
    3ef4:	2900      	cmp	r1, #0
    3ef6:	d0e9      	beq.n	3ecc <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    3ef8:	9000      	str	r0, [sp, #0]
    3efa:	4632      	mov	r2, r6
    3efc:	463b      	mov	r3, r7
    3efe:	4628      	mov	r0, r5
    3f00:	4788      	blx	r1
}
    3f02:	e7e3      	b.n	3ecc <rtc_nrf_isr+0x94>
    3f04:	50015000 	.word	0x50015000
    3f08:	2000e050 	.word	0x2000e050
    3f0c:	2000e048 	.word	0x2000e048
    3f10:	2000c670 	.word	0x2000c670

00003f14 <sys_clock_set_timeout>:
{
    3f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f16:	4e13      	ldr	r6, [pc, #76]	; (3f64 <sys_clock_set_timeout+0x50>)
    3f18:	f1b0 3fff 	cmp.w	r0, #4294967295
    3f1c:	bf14      	ite	ne
    3f1e:	4604      	movne	r4, r0
    3f20:	4634      	moveq	r4, r6
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3f22:	f7ff fe87 	bl	3c34 <z_nrf_rtc_timer_read>
    3f26:	4b10      	ldr	r3, [pc, #64]	; (3f68 <sys_clock_set_timeout+0x54>)
    3f28:	e9d3 5300 	ldrd	r5, r3, [r3]
    3f2c:	1b40      	subs	r0, r0, r5
	if (unannounced >= COUNTER_HALF_SPAN) {
    3f2e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f32:	d215      	bcs.n	3f60 <sys_clock_set_timeout+0x4c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f34:	1e61      	subs	r1, r4, #1
    3f36:	42b1      	cmp	r1, r6
    3f38:	bfa8      	it	ge
    3f3a:	4631      	movge	r1, r6
    3f3c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3f40:	1c42      	adds	r2, r0, #1
    3f42:	440a      	add	r2, r1
	if (cyc > MAX_CYCLES) {
    3f44:	42b2      	cmp	r2, r6
    3f46:	bf28      	it	cs
    3f48:	4632      	movcs	r2, r6
	uint64_t target_time = cyc + last_count;
    3f4a:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3f4c:	4907      	ldr	r1, [pc, #28]	; (3f6c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    3f4e:	1952      	adds	r2, r2, r5
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3f50:	9001      	str	r0, [sp, #4]
    3f52:	9100      	str	r1, [sp, #0]
    3f54:	f143 0300 	adc.w	r3, r3, #0
    3f58:	f7ff fe8e 	bl	3c78 <compare_set>
}
    3f5c:	b002      	add	sp, #8
    3f5e:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    3f60:	2100      	movs	r1, #0
    3f62:	e7ed      	b.n	3f40 <sys_clock_set_timeout+0x2c>
    3f64:	007fffff 	.word	0x007fffff
    3f68:	2000c680 	.word	0x2000c680
    3f6c:	00003b69 	.word	0x00003b69

00003f70 <sys_clock_elapsed>:
{
    3f70:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3f72:	f7ff fe5f 	bl	3c34 <z_nrf_rtc_timer_read>
    3f76:	4b02      	ldr	r3, [pc, #8]	; (3f80 <sys_clock_elapsed+0x10>)
    3f78:	681b      	ldr	r3, [r3, #0]
}
    3f7a:	1ac0      	subs	r0, r0, r3
    3f7c:	bd08      	pop	{r3, pc}
    3f7e:	bf00      	nop
    3f80:	2000c680 	.word	0x2000c680

00003f84 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3f84:	4803      	ldr	r0, [pc, #12]	; (3f94 <k_sys_fatal_error_handler+0x10>)
    3f86:	2145      	movs	r1, #69	; 0x45
{
    3f88:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3f8a:	f001 ffe3 	bl	5f54 <z_log_minimal_printk>
		sys_arch_reboot(0);
    3f8e:	2000      	movs	r0, #0
    3f90:	f7fe ff5a 	bl	2e48 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3f94:	00009acf 	.word	0x00009acf

00003f98 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3f98:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3f9a:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3f9c:	4a04      	ldr	r2, [pc, #16]	; (3fb0 <boot_write_magic+0x18>)
    3f9e:	2310      	movs	r3, #16
    3fa0:	3910      	subs	r1, #16
    3fa2:	f002 f801 	bl	5fa8 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3fa6:	3800      	subs	r0, #0
    3fa8:	bf18      	it	ne
    3faa:	2001      	movne	r0, #1
    3fac:	bd08      	pop	{r3, pc}
    3fae:	bf00      	nop
    3fb0:	00008bdc 	.word	0x00008bdc

00003fb4 <boot_read_swap_state>:
{
    3fb4:	b530      	push	{r4, r5, lr}
    3fb6:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3fb8:	6881      	ldr	r1, [r0, #8]
{
    3fba:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3fbc:	2310      	movs	r3, #16
    3fbe:	aa02      	add	r2, sp, #8
    3fc0:	3910      	subs	r1, #16
{
    3fc2:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3fc4:	f001 ffd4 	bl	5f70 <flash_area_read>
    if (rc < 0) {
    3fc8:	2800      	cmp	r0, #0
    3fca:	da02      	bge.n	3fd2 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3fcc:	2001      	movs	r0, #1
}
    3fce:	b007      	add	sp, #28
    3fd0:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3fd2:	2210      	movs	r2, #16
    3fd4:	4620      	mov	r0, r4
    3fd6:	a902      	add	r1, sp, #8
    3fd8:	f002 fe4f 	bl	6c7a <bootutil_buffer_is_erased>
    3fdc:	bba8      	cbnz	r0, 404a <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    3fde:	2210      	movs	r2, #16
    3fe0:	491b      	ldr	r1, [pc, #108]	; (4050 <boot_read_swap_state+0x9c>)
    3fe2:	a802      	add	r0, sp, #8
    3fe4:	f002 fb0f 	bl	6606 <memcmp>
    return BOOT_MAGIC_BAD;
    3fe8:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    3fea:	bf0c      	ite	eq
    3fec:	2301      	moveq	r3, #1
    3fee:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    3ff0:	702b      	strb	r3, [r5, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    3ff2:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3ff4:	2301      	movs	r3, #1
    3ff6:	4620      	mov	r0, r4
    3ff8:	f10d 0207 	add.w	r2, sp, #7
    3ffc:	3928      	subs	r1, #40	; 0x28
    3ffe:	f001 ffb7 	bl	5f70 <flash_area_read>
    if (rc < 0) {
    4002:	2800      	cmp	r0, #0
    4004:	dbe2      	blt.n	3fcc <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4006:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    400a:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    400c:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4010:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4012:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4014:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    4016:	2201      	movs	r2, #1
    4018:	f10d 0107 	add.w	r1, sp, #7
    401c:	f002 fe2d 	bl	6c7a <bootutil_buffer_is_erased>
    4020:	b910      	cbnz	r0, 4028 <boot_read_swap_state+0x74>
    4022:	786b      	ldrb	r3, [r5, #1]
    4024:	2b04      	cmp	r3, #4
    4026:	d903      	bls.n	4030 <boot_read_swap_state+0x7c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    4028:	2301      	movs	r3, #1
    402a:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    402c:	2300      	movs	r3, #0
    402e:	712b      	strb	r3, [r5, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    4030:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    4032:	4620      	mov	r0, r4
    4034:	3a20      	subs	r2, #32
    4036:	1ca9      	adds	r1, r5, #2
    4038:	f002 fe32 	bl	6ca0 <boot_read_flag>
    if (rc) {
    403c:	2800      	cmp	r0, #0
    403e:	d1c5      	bne.n	3fcc <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    4040:	4620      	mov	r0, r4
    4042:	1ce9      	adds	r1, r5, #3
    4044:	f002 fe85 	bl	6d52 <boot_read_image_ok>
    4048:	e7c1      	b.n	3fce <boot_read_swap_state+0x1a>
    404a:	2303      	movs	r3, #3
    404c:	e7d0      	b.n	3ff0 <boot_read_swap_state+0x3c>
    404e:	bf00      	nop
    4050:	00008bdc 	.word	0x00008bdc

00004054 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    4054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4056:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4058:	4669      	mov	r1, sp
    405a:	2002      	movs	r0, #2
    405c:	f002 fe7d 	bl	6d5a <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    4060:	4604      	mov	r4, r0
    4062:	b110      	cbz	r0, 406a <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    4064:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    4066:	b004      	add	sp, #16
    4068:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    406a:	2007      	movs	r0, #7
    406c:	a902      	add	r1, sp, #8
    406e:	f002 fe74 	bl	6d5a <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    4072:	2801      	cmp	r0, #1
    4074:	d136      	bne.n	40e4 <boot_swap_type_multi+0x90>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    4076:	462a      	mov	r2, r5
    4078:	2149      	movs	r1, #73	; 0x49
    407a:	4828      	ldr	r0, [pc, #160]	; (411c <boot_swap_type_multi+0xc8>)
    407c:	f001 ff6a 	bl	5f54 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    4080:	4b27      	ldr	r3, [pc, #156]	; (4120 <boot_swap_type_multi+0xcc>)
        secondary_slot.image_num = 0;
    4082:	f88d 400c 	strb.w	r4, [sp, #12]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    4086:	9302      	str	r3, [sp, #8]
            boot_magic_compatible_check(table->magic_secondary_slot,
    4088:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    408a:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    408e:	f89d 6008 	ldrb.w	r6, [sp, #8]
    4092:	4c24      	ldr	r4, [pc, #144]	; (4124 <boot_swap_type_multi+0xd0>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    4094:	4629      	mov	r1, r5
    4096:	7820      	ldrb	r0, [r4, #0]
    4098:	f002 fde1 	bl	6c5e <boot_magic_compatible_check>
    409c:	b348      	cbz	r0, 40f2 <boot_swap_type_multi+0x9e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    409e:	4631      	mov	r1, r6
    40a0:	7860      	ldrb	r0, [r4, #1]
    40a2:	f002 fddc 	bl	6c5e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    40a6:	b320      	cbz	r0, 40f2 <boot_swap_type_multi+0x9e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    40a8:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    40aa:	2b04      	cmp	r3, #4
    40ac:	d003      	beq.n	40b6 <boot_swap_type_multi+0x62>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    40ae:	f89d 1003 	ldrb.w	r1, [sp, #3]
    40b2:	4299      	cmp	r1, r3
    40b4:	d11d      	bne.n	40f2 <boot_swap_type_multi+0x9e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    40b6:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    40b8:	2b04      	cmp	r3, #4
    40ba:	d003      	beq.n	40c4 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    40bc:	f89d 100b 	ldrb.w	r1, [sp, #11]
    40c0:	4299      	cmp	r1, r3
    40c2:	d116      	bne.n	40f2 <boot_swap_type_multi+0x9e>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    40c4:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    40c6:	2b04      	cmp	r3, #4
    40c8:	d10f      	bne.n	40ea <boot_swap_type_multi+0x96>
            BOOT_LOG_INF("Swap type: %s",
    40ca:	7963      	ldrb	r3, [r4, #5]
    40cc:	2b02      	cmp	r3, #2
    40ce:	d11b      	bne.n	4108 <boot_swap_type_multi+0xb4>
    40d0:	4a15      	ldr	r2, [pc, #84]	; (4128 <boot_swap_type_multi+0xd4>)
    40d2:	4816      	ldr	r0, [pc, #88]	; (412c <boot_swap_type_multi+0xd8>)
    40d4:	2149      	movs	r1, #73	; 0x49
    40d6:	f001 ff3d 	bl	5f54 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    40da:	7960      	ldrb	r0, [r4, #5]
    40dc:	1e83      	subs	r3, r0, #2
    40de:	2b02      	cmp	r3, #2
    40e0:	d9c1      	bls.n	4066 <boot_swap_type_multi+0x12>
    40e2:	e7bf      	b.n	4064 <boot_swap_type_multi+0x10>
    } else if (rc) {
    40e4:	2800      	cmp	r0, #0
    40e6:	d0cf      	beq.n	4088 <boot_swap_type_multi+0x34>
    40e8:	e7bc      	b.n	4064 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    40ea:	f89d 1002 	ldrb.w	r1, [sp, #2]
    40ee:	4299      	cmp	r1, r3
    40f0:	d0eb      	beq.n	40ca <boot_swap_type_multi+0x76>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    40f2:	3201      	adds	r2, #1
    40f4:	2a03      	cmp	r2, #3
    40f6:	f104 0406 	add.w	r4, r4, #6
    40fa:	d1cb      	bne.n	4094 <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
    40fc:	480c      	ldr	r0, [pc, #48]	; (4130 <boot_swap_type_multi+0xdc>)
    40fe:	2149      	movs	r1, #73	; 0x49
    4100:	f001 ff28 	bl	5f54 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    4104:	2001      	movs	r0, #1
    4106:	e7ae      	b.n	4066 <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    4108:	2b03      	cmp	r3, #3
    410a:	d005      	beq.n	4118 <boot_swap_type_multi+0xc4>
    410c:	4a09      	ldr	r2, [pc, #36]	; (4134 <boot_swap_type_multi+0xe0>)
    410e:	490a      	ldr	r1, [pc, #40]	; (4138 <boot_swap_type_multi+0xe4>)
    4110:	2b04      	cmp	r3, #4
    4112:	bf08      	it	eq
    4114:	460a      	moveq	r2, r1
    4116:	e7dc      	b.n	40d2 <boot_swap_type_multi+0x7e>
    4118:	4a08      	ldr	r2, [pc, #32]	; (413c <boot_swap_type_multi+0xe8>)
    411a:	e7da      	b.n	40d2 <boot_swap_type_multi+0x7e>
    411c:	00009b14 	.word	0x00009b14
    4120:	03030103 	.word	0x03030103
    4124:	00009b87 	.word	0x00009b87
    4128:	00009af6 	.word	0x00009af6
    412c:	00009b5f 	.word	0x00009b5f
    4130:	00009b72 	.word	0x00009b72
    4134:	00009afb 	.word	0x00009afb
    4138:	00009b0d 	.word	0x00009b0d
    413c:	00009af1 	.word	0x00009af1

00004140 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    4140:	6801      	ldr	r1, [r0, #0]
    4142:	4a0e      	ldr	r2, [pc, #56]	; (417c <verify_header+0x3c>)
{
    4144:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    4146:	4291      	cmp	r1, r2
    4148:	d115      	bne.n	4176 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    414a:	69c1      	ldr	r1, [r0, #28]
    414c:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    4150:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    4154:	4291      	cmp	r1, r2
    4156:	d10e      	bne.n	4176 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    4158:	6882      	ldr	r2, [r0, #8]
    415a:	2a01      	cmp	r2, #1
    415c:	d80b      	bhi.n	4176 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    415e:	68c2      	ldr	r2, [r0, #12]
    4160:	b112      	cbz	r2, 4168 <verify_header+0x28>
    4162:	6901      	ldr	r1, [r0, #16]
    4164:	428a      	cmp	r2, r1
    4166:	d006      	beq.n	4176 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    4168:	6958      	ldr	r0, [r3, #20]
    416a:	b128      	cbz	r0, 4178 <verify_header+0x38>
    416c:	699b      	ldr	r3, [r3, #24]
    416e:	1a1b      	subs	r3, r3, r0
    4170:	4258      	negs	r0, r3
    4172:	4158      	adcs	r0, r3
    4174:	4770      	bx	lr
        return( 1 );
    4176:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    4178:	4770      	bx	lr
    417a:	bf00      	nop
    417c:	ff00aa55 	.word	0xff00aa55

00004180 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    4180:	4b0d      	ldr	r3, [pc, #52]	; (41b8 <verify_chain+0x38>)
{
    4182:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    4184:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    4186:	b1a6      	cbz	r6, 41b2 <verify_chain+0x32>
    4188:	4630      	mov	r0, r6
    418a:	f7ff ffd9 	bl	4140 <verify_header>
    418e:	4604      	mov	r4, r0
    4190:	b978      	cbnz	r0, 41b2 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    4192:	68f3      	ldr	r3, [r6, #12]
    4194:	b96b      	cbnz	r3, 41b2 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    4196:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    4198:	b90d      	cbnz	r5, 419e <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    419a:	4620      	mov	r0, r4
    419c:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    419e:	4628      	mov	r0, r5
    41a0:	f7ff ffce 	bl	4140 <verify_header>
    41a4:	b928      	cbnz	r0, 41b2 <verify_chain+0x32>
        if( cur->prev != prv )
    41a6:	68eb      	ldr	r3, [r5, #12]
    41a8:	42b3      	cmp	r3, r6
    41aa:	d102      	bne.n	41b2 <verify_chain+0x32>
        cur = cur->next;
    41ac:	462e      	mov	r6, r5
    41ae:	692d      	ldr	r5, [r5, #16]
    41b0:	e7f2      	b.n	4198 <verify_chain+0x18>
        return( 1 );
    41b2:	2401      	movs	r4, #1
    41b4:	e7f1      	b.n	419a <verify_chain+0x1a>
    41b6:	bf00      	nop
    41b8:	2000e054 	.word	0x2000e054

000041bc <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    41bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    41c0:	4f40      	ldr	r7, [pc, #256]	; (42c4 <buffer_alloc_calloc+0x108>)
    41c2:	683c      	ldr	r4, [r7, #0]
    41c4:	b1d4      	cbz	r4, 41fc <buffer_alloc_calloc+0x40>
    41c6:	68bc      	ldr	r4, [r7, #8]
    41c8:	b1c4      	cbz	r4, 41fc <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    41ca:	2800      	cmp	r0, #0
    41cc:	d04d      	beq.n	426a <buffer_alloc_calloc+0xae>
    41ce:	2900      	cmp	r1, #0
    41d0:	d04b      	beq.n	426a <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    41d2:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    41d6:	fbb5 f0f0 	udiv	r0, r5, r0
    41da:	4288      	cmp	r0, r1
    41dc:	d145      	bne.n	426a <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    41de:	1d28      	adds	r0, r5, #4
    41e0:	d843      	bhi.n	426a <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    41e2:	07a9      	lsls	r1, r5, #30
    41e4:	d00d      	beq.n	4202 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    41e6:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    41ea:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    41ec:	68fc      	ldr	r4, [r7, #12]
    41ee:	e003      	b.n	41f8 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    41f0:	6863      	ldr	r3, [r4, #4]
    41f2:	42b3      	cmp	r3, r6
    41f4:	d23b      	bcs.n	426e <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    41f6:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    41f8:	2c00      	cmp	r4, #0
    41fa:	d1f9      	bne.n	41f0 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    41fc:	4620      	mov	r0, r4
    41fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4202:	462e      	mov	r6, r5
    4204:	e7f2      	b.n	41ec <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    4206:	60f8      	str	r0, [r7, #12]
    4208:	e044      	b.n	4294 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    420a:	f106 0c20 	add.w	ip, r6, #32
    420e:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    4212:	3920      	subs	r1, #32
    4214:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    4216:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
    4218:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 42c8 <buffer_alloc_calloc+0x10c>
    new->prev = cur;
    421c:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
    4220:	6921      	ldr	r1, [r4, #16]
    4222:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    4224:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    4228:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 42cc <buffer_alloc_calloc+0x110>
    422c:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    4230:	b101      	cbz	r1, 4234 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    4232:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    4234:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    4238:	b1aa      	cbz	r2, 4266 <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    423a:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    423c:	699a      	ldr	r2, [r3, #24]
    423e:	b102      	cbz	r2, 4242 <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    4240:	6153      	str	r3, [r2, #20]
    cur->next = new;
    4242:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    4244:	2300      	movs	r3, #0
    cur->alloc = 1;
    4246:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
    424a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    424e:	693b      	ldr	r3, [r7, #16]
    cur->size = len;
    4250:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4254:	07db      	lsls	r3, r3, #31
    4256:	d52d      	bpl.n	42b4 <buffer_alloc_calloc+0xf8>
    4258:	f7ff ff92 	bl	4180 <verify_chain>
    425c:	b350      	cbz	r0, 42b4 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    425e:	4b1c      	ldr	r3, [pc, #112]	; (42d0 <buffer_alloc_calloc+0x114>)
    4260:	4648      	mov	r0, r9
    4262:	681b      	ldr	r3, [r3, #0]
    4264:	e025      	b.n	42b2 <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    4266:	60fb      	str	r3, [r7, #12]
    4268:	e7e8      	b.n	423c <buffer_alloc_calloc+0x80>
        return( NULL );
    426a:	2400      	movs	r4, #0
    426c:	e7c6      	b.n	41fc <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    426e:	68a3      	ldr	r3, [r4, #8]
    4270:	b11b      	cbz	r3, 427a <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    4272:	4b17      	ldr	r3, [pc, #92]	; (42d0 <buffer_alloc_calloc+0x114>)
    4274:	2001      	movs	r0, #1
    4276:	681b      	ldr	r3, [r3, #0]
    4278:	4798      	blx	r3
            cur->prev_free->next_free = cur->next_free;
    427a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    if( cur->size - len < sizeof(memory_header) +
    427e:	6861      	ldr	r1, [r4, #4]
    4280:	f104 0820 	add.w	r8, r4, #32
    4284:	1b89      	subs	r1, r1, r6
    4286:	2923      	cmp	r1, #35	; 0x23
    4288:	d8bf      	bhi.n	420a <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    428a:	2301      	movs	r3, #1
    428c:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    428e:	2a00      	cmp	r2, #0
    4290:	d0b9      	beq.n	4206 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    4292:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    4294:	69a3      	ldr	r3, [r4, #24]
    4296:	b103      	cbz	r3, 429a <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    4298:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    429a:	2300      	movs	r3, #0
        cur->next_free = NULL;
    429c:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    42a0:	693b      	ldr	r3, [r7, #16]
    42a2:	07da      	lsls	r2, r3, #31
    42a4:	d506      	bpl.n	42b4 <buffer_alloc_calloc+0xf8>
    42a6:	f7ff ff6b 	bl	4180 <verify_chain>
    42aa:	b118      	cbz	r0, 42b4 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    42ac:	2001      	movs	r0, #1
    42ae:	4b08      	ldr	r3, [pc, #32]	; (42d0 <buffer_alloc_calloc+0x114>)
    42b0:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    42b2:	4798      	blx	r3
    memset( ret, 0, original_len );
    42b4:	462a      	mov	r2, r5
    42b6:	2100      	movs	r1, #0
    42b8:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    42ba:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    42bc:	f002 f9d5 	bl	666a <memset>
    return( ret );
    42c0:	e79c      	b.n	41fc <buffer_alloc_calloc+0x40>
    42c2:	bf00      	nop
    42c4:	2000e054 	.word	0x2000e054
    42c8:	ff00aa55 	.word	0xff00aa55
    42cc:	ee119966 	.word	0xee119966
    42d0:	2000c580 	.word	0x2000c580

000042d4 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    42d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    42d8:	4605      	mov	r5, r0
    42da:	2800      	cmp	r0, #0
    42dc:	d07d      	beq.n	43da <buffer_alloc_free+0x106>
    42de:	4f40      	ldr	r7, [pc, #256]	; (43e0 <buffer_alloc_free+0x10c>)
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d079      	beq.n	43da <buffer_alloc_free+0x106>
    42e6:	68ba      	ldr	r2, [r7, #8]
    42e8:	2a00      	cmp	r2, #0
    42ea:	d076      	beq.n	43da <buffer_alloc_free+0x106>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    42ec:	4283      	cmp	r3, r0
    42ee:	d803      	bhi.n	42f8 <buffer_alloc_free+0x24>
    42f0:	687a      	ldr	r2, [r7, #4]
    42f2:	4413      	add	r3, r2
    42f4:	4298      	cmp	r0, r3
    42f6:	d303      	bcc.n	4300 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    42f8:	4b3a      	ldr	r3, [pc, #232]	; (43e4 <buffer_alloc_free+0x110>)
    42fa:	2001      	movs	r0, #1
    42fc:	681b      	ldr	r3, [r3, #0]
    42fe:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    4300:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    4304:	4620      	mov	r0, r4
    4306:	f7ff ff1b 	bl	4140 <verify_header>
    430a:	b118      	cbz	r0, 4314 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    430c:	4b35      	ldr	r3, [pc, #212]	; (43e4 <buffer_alloc_free+0x110>)
    430e:	2001      	movs	r0, #1
    4310:	681b      	ldr	r3, [r3, #0]
    4312:	4798      	blx	r3

    if( hdr->alloc != 1 )
    4314:	f855 3c18 	ldr.w	r3, [r5, #-24]
    4318:	2b01      	cmp	r3, #1
    431a:	d003      	beq.n	4324 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    431c:	4b31      	ldr	r3, [pc, #196]	; (43e4 <buffer_alloc_free+0x110>)
    431e:	2001      	movs	r0, #1
    4320:	681b      	ldr	r3, [r3, #0]
    4322:	4798      	blx	r3
        memset( old, 0, sizeof(memory_header) );
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    4324:	e955 6005 	ldrd	r6, r0, [r5, #-20]
    hdr->alloc = 0;
    4328:	2300      	movs	r3, #0
    432a:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    432e:	b946      	cbnz	r6, 4342 <buffer_alloc_free+0x6e>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    4330:	b108      	cbz	r0, 4336 <buffer_alloc_free+0x62>
    4332:	6883      	ldr	r3, [r0, #8]
    4334:	b1eb      	cbz	r3, 4372 <buffer_alloc_free+0x9e>
    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    {
        hdr->next_free = heap.first_free;
    4336:	68fb      	ldr	r3, [r7, #12]
    4338:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    433a:	b103      	cbz	r3, 433e <buffer_alloc_free+0x6a>
            heap.first_free->prev_free = hdr;
    433c:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    433e:	60fc      	str	r4, [r7, #12]
    4340:	e031      	b.n	43a6 <buffer_alloc_free+0xd2>
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    4342:	68b3      	ldr	r3, [r6, #8]
    4344:	2b00      	cmp	r3, #0
    4346:	d1f3      	bne.n	4330 <buffer_alloc_free+0x5c>
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    4348:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    434c:	6873      	ldr	r3, [r6, #4]
    434e:	3220      	adds	r2, #32
    4350:	4413      	add	r3, r2
    4352:	6073      	str	r3, [r6, #4]
        hdr->prev->next = hdr->next;
    4354:	6130      	str	r0, [r6, #16]
        if( hdr->next != NULL )
    4356:	b100      	cbz	r0, 435a <buffer_alloc_free+0x86>
            hdr->next->prev = hdr;
    4358:	60c6      	str	r6, [r0, #12]
        memset( old, 0, sizeof(memory_header) );
    435a:	2220      	movs	r2, #32
    435c:	2100      	movs	r1, #0
    435e:	4620      	mov	r0, r4
    4360:	f002 f983 	bl	666a <memset>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    4364:	6930      	ldr	r0, [r6, #16]
    4366:	2800      	cmp	r0, #0
    4368:	d033      	beq.n	43d2 <buffer_alloc_free+0xfe>
    436a:	6883      	ldr	r3, [r0, #8]
    436c:	2b00      	cmp	r3, #0
    436e:	d130      	bne.n	43d2 <buffer_alloc_free+0xfe>
    4370:	4634      	mov	r4, r6
        hdr->size += sizeof(memory_header) + hdr->next->size;
    4372:	6842      	ldr	r2, [r0, #4]
    4374:	6863      	ldr	r3, [r4, #4]
    4376:	4413      	add	r3, r2
    4378:	3320      	adds	r3, #32
    437a:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    437c:	6903      	ldr	r3, [r0, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    437e:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->next = hdr->next->next;
    4382:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4384:	b9da      	cbnz	r2, 43be <buffer_alloc_free+0xea>
    4386:	bb01      	cbnz	r1, 43ca <buffer_alloc_free+0xf6>
        hdr->prev_free = old->prev_free;
    4388:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    438a:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    438c:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    438e:	61a1      	str	r1, [r4, #24]
        if( hdr->prev_free != NULL )
    4390:	b1ea      	cbz	r2, 43ce <buffer_alloc_free+0xfa>
            hdr->prev_free->next_free = hdr;
    4392:	6194      	str	r4, [r2, #24]
        if( hdr->next_free != NULL )
    4394:	69a2      	ldr	r2, [r4, #24]
    4396:	b102      	cbz	r2, 439a <buffer_alloc_free+0xc6>
            hdr->next_free->prev_free = hdr;
    4398:	6154      	str	r4, [r2, #20]
        if( hdr->next != NULL )
    439a:	b103      	cbz	r3, 439e <buffer_alloc_free+0xca>
            hdr->next->prev = hdr;
    439c:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    439e:	2220      	movs	r2, #32
    43a0:	2100      	movs	r1, #0
    43a2:	f002 f962 	bl	666a <memset>
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    43a6:	693b      	ldr	r3, [r7, #16]
    43a8:	079b      	lsls	r3, r3, #30
    43aa:	d516      	bpl.n	43da <buffer_alloc_free+0x106>
    43ac:	f7ff fee8 	bl	4180 <verify_chain>
    43b0:	b198      	cbz	r0, 43da <buffer_alloc_free+0x106>
        mbedtls_exit( 1 );
}
    43b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    43b6:	4b0b      	ldr	r3, [pc, #44]	; (43e4 <buffer_alloc_free+0x110>)
    43b8:	2001      	movs	r0, #1
    43ba:	681b      	ldr	r3, [r3, #0]
    43bc:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    43be:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    43c0:	69a1      	ldr	r1, [r4, #24]
    43c2:	2900      	cmp	r1, #0
    43c4:	d0e0      	beq.n	4388 <buffer_alloc_free+0xb4>
                hdr->next_free->prev_free = hdr->prev_free;
    43c6:	614a      	str	r2, [r1, #20]
    43c8:	e7de      	b.n	4388 <buffer_alloc_free+0xb4>
                heap.first_free = hdr->next_free;
    43ca:	60f9      	str	r1, [r7, #12]
    43cc:	e7f8      	b.n	43c0 <buffer_alloc_free+0xec>
            heap.first_free = hdr;
    43ce:	60fc      	str	r4, [r7, #12]
    43d0:	e7e0      	b.n	4394 <buffer_alloc_free+0xc0>
    if( old == NULL )
    43d2:	2c00      	cmp	r4, #0
    43d4:	d1e7      	bne.n	43a6 <buffer_alloc_free+0xd2>
    43d6:	4634      	mov	r4, r6
    43d8:	e7ad      	b.n	4336 <buffer_alloc_free+0x62>
}
    43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43de:	bf00      	nop
    43e0:	2000e054 	.word	0x2000e054
    43e4:	2000c580 	.word	0x2000c580

000043e8 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    43e8:	b538      	push	{r3, r4, r5, lr}
    43ea:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    43ec:	2214      	movs	r2, #20
    43ee:	2100      	movs	r1, #0
{
    43f0:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    43f2:	4812      	ldr	r0, [pc, #72]	; (443c <mbedtls_memory_buffer_alloc_init+0x54>)
    43f4:	f002 f939 	bl	666a <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    43f8:	4911      	ldr	r1, [pc, #68]	; (4440 <mbedtls_memory_buffer_alloc_init+0x58>)
    43fa:	4812      	ldr	r0, [pc, #72]	; (4444 <mbedtls_memory_buffer_alloc_init+0x5c>)
    43fc:	f000 f832 	bl	4464 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4400:	2d23      	cmp	r5, #35	; 0x23
    4402:	d91a      	bls.n	443a <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4404:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4408:	bf1f      	itttt	ne
    440a:	3d04      	subne	r5, #4
    440c:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    440e:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4412:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    4414:	462a      	mov	r2, r5
    4416:	2100      	movs	r1, #0
    4418:	4620      	mov	r0, r4
    441a:	f002 f926 	bl	666a <memset>

    heap.buf = buf;
    441e:	4b07      	ldr	r3, [pc, #28]	; (443c <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    4420:	4a09      	ldr	r2, [pc, #36]	; (4448 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
    4422:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
    4426:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
    4428:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    442a:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    442e:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    4430:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    4434:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    4436:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    4438:	60dc      	str	r4, [r3, #12]
}
    443a:	bd38      	pop	{r3, r4, r5, pc}
    443c:	2000e054 	.word	0x2000e054
    4440:	000042d5 	.word	0x000042d5
    4444:	000041bd 	.word	0x000041bd
    4448:	ff00aa55 	.word	0xff00aa55

0000444c <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    444c:	4b01      	ldr	r3, [pc, #4]	; (4454 <mbedtls_calloc+0x8>)
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	4718      	bx	r3
    4452:	bf00      	nop
    4454:	2000c588 	.word	0x2000c588

00004458 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    4458:	4b01      	ldr	r3, [pc, #4]	; (4460 <mbedtls_free+0x8>)
    445a:	681b      	ldr	r3, [r3, #0]
    445c:	4718      	bx	r3
    445e:	bf00      	nop
    4460:	2000c584 	.word	0x2000c584

00004464 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    4464:	4b02      	ldr	r3, [pc, #8]	; (4470 <mbedtls_platform_set_calloc_free+0xc>)
    4466:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    4468:	4b02      	ldr	r3, [pc, #8]	; (4474 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    446a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    446c:	6019      	str	r1, [r3, #0]
}
    446e:	4770      	bx	lr
    4470:	2000c588 	.word	0x2000c588
    4474:	2000c584 	.word	0x2000c584

00004478 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    4478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    447a:	f100 0608 	add.w	r6, r0, #8
    447e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    4480:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    4482:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    4484:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    4486:	f003 f84b 	bl	7520 <mbedtls_mpi_size>
    448a:	4287      	cmp	r7, r0
    448c:	d14b      	bne.n	4526 <rsa_check_context.constprop.0+0xae>
    448e:	6863      	ldr	r3, [r4, #4]
    4490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4494:	d847      	bhi.n	4526 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    4496:	2100      	movs	r1, #0
    4498:	4630      	mov	r0, r6
    449a:	f003 f9a2 	bl	77e2 <mbedtls_mpi_cmp_int>
    449e:	2800      	cmp	r0, #0
    44a0:	dd41      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    44a2:	2100      	movs	r1, #0
    44a4:	4630      	mov	r0, r6
    44a6:	f003 f80d 	bl	74c4 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    44aa:	b3e0      	cbz	r0, 4526 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    44ac:	b945      	cbnz	r5, 44c0 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    44ae:	4629      	mov	r1, r5
    44b0:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    44b4:	f003 f995 	bl	77e2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    44b8:	2800      	cmp	r0, #0
    44ba:	dd34      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    44bc:	2000      	movs	r0, #0
}
    44be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    44c0:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    44c4:	2100      	movs	r1, #0
    44c6:	4628      	mov	r0, r5
    44c8:	f003 f98b 	bl	77e2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    44cc:	2800      	cmp	r0, #0
    44ce:	dd2a      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    44d0:	2100      	movs	r1, #0
    44d2:	4628      	mov	r0, r5
    44d4:	f002 fff6 	bl	74c4 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    44d8:	b328      	cbz	r0, 4526 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    44da:	f104 0538 	add.w	r5, r4, #56	; 0x38
    44de:	2100      	movs	r1, #0
    44e0:	4628      	mov	r0, r5
    44e2:	f003 f97e 	bl	77e2 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    44e6:	2800      	cmp	r0, #0
    44e8:	dd1d      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    44ea:	2100      	movs	r1, #0
    44ec:	4628      	mov	r0, r5
    44ee:	f002 ffe9 	bl	74c4 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    44f2:	b1c0      	cbz	r0, 4526 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    44f4:	2100      	movs	r1, #0
    44f6:	f104 0014 	add.w	r0, r4, #20
    44fa:	f003 f972 	bl	77e2 <mbedtls_mpi_cmp_int>
    44fe:	2800      	cmp	r0, #0
    4500:	dd11      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    4502:	2100      	movs	r1, #0
    4504:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4508:	f003 f96b 	bl	77e2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    450c:	2800      	cmp	r0, #0
    450e:	dd0a      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    4510:	2100      	movs	r1, #0
    4512:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4516:	f003 f964 	bl	77e2 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    451a:	2800      	cmp	r0, #0
    451c:	dd03      	ble.n	4526 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    451e:	2100      	movs	r1, #0
    4520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4524:	e7c6      	b.n	44b4 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4526:	4801      	ldr	r0, [pc, #4]	; (452c <rsa_check_context.constprop.0+0xb4>)
    4528:	e7c9      	b.n	44be <rsa_check_context.constprop.0+0x46>
    452a:	bf00      	nop
    452c:	ffffbf80 	.word	0xffffbf80

00004530 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    4530:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    4532:	2100      	movs	r1, #0
{
    4534:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    4536:	f7ff ff9f 	bl	4478 <rsa_check_context.constprop.0>
    453a:	4605      	mov	r5, r0
    453c:	b110      	cbz	r0, 4544 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    453e:	4d0e      	ldr	r5, [pc, #56]	; (4578 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    4540:	4628      	mov	r0, r5
    4542:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    4544:	f104 0608 	add.w	r6, r4, #8
    4548:	4630      	mov	r0, r6
    454a:	f002 ffcb 	bl	74e4 <mbedtls_mpi_bitlen>
    454e:	287f      	cmp	r0, #127	; 0x7f
    4550:	d9f5      	bls.n	453e <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4552:	3414      	adds	r4, #20
    4554:	4629      	mov	r1, r5
    4556:	4620      	mov	r0, r4
    4558:	f002 ffb4 	bl	74c4 <mbedtls_mpi_get_bit>
    455c:	2800      	cmp	r0, #0
    455e:	d0ee      	beq.n	453e <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    4560:	4620      	mov	r0, r4
    4562:	f002 ffbf 	bl	74e4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4566:	2801      	cmp	r0, #1
    4568:	d9e9      	bls.n	453e <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    456a:	4631      	mov	r1, r6
    456c:	4620      	mov	r0, r4
    456e:	f003 f8f7 	bl	7760 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    4572:	2800      	cmp	r0, #0
    4574:	dbe4      	blt.n	4540 <mbedtls_rsa_check_pubkey+0x10>
    4576:	e7e2      	b.n	453e <mbedtls_rsa_check_pubkey+0xe>
    4578:	ffffbe00 	.word	0xffffbe00

0000457c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    457c:	b5f0      	push	{r4, r5, r6, r7, lr}
    457e:	460c      	mov	r4, r1
    4580:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    4582:	2100      	movs	r1, #0
{
    4584:	4605      	mov	r5, r0
    4586:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    4588:	f7ff ff76 	bl	4478 <rsa_check_context.constprop.0>
    458c:	2800      	cmp	r0, #0
    458e:	d139      	bne.n	4604 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    4590:	a803      	add	r0, sp, #12
    4592:	f002 febd 	bl	7310 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    4596:	4621      	mov	r1, r4
    4598:	686a      	ldr	r2, [r5, #4]
    459a:	a803      	add	r0, sp, #12
    459c:	f002 ffc6 	bl	752c <mbedtls_mpi_read_binary>
    45a0:	4604      	mov	r4, r0
    45a2:	b118      	cbz	r0, 45ac <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    45a4:	a803      	add	r0, sp, #12
    45a6:	f002 feb9 	bl	731c <mbedtls_mpi_free>

    if( ret != 0 )
    45aa:	e00c      	b.n	45c6 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    45ac:	f105 0408 	add.w	r4, r5, #8
    45b0:	4621      	mov	r1, r4
    45b2:	a803      	add	r0, sp, #12
    45b4:	f003 f8d4 	bl	7760 <mbedtls_mpi_cmp_mpi>
    45b8:	2800      	cmp	r0, #0
    45ba:	db07      	blt.n	45cc <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    45bc:	a803      	add	r0, sp, #12
    45be:	f002 fead 	bl	731c <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    45c2:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    45c6:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    45ca:	e018      	b.n	45fe <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    45cc:	f105 0368 	add.w	r3, r5, #104	; 0x68
    45d0:	a903      	add	r1, sp, #12
    olen = ctx->len;
    45d2:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    45d4:	4608      	mov	r0, r1
    45d6:	9300      	str	r3, [sp, #0]
    45d8:	f105 0214 	add.w	r2, r5, #20
    45dc:	4623      	mov	r3, r4
    45de:	f003 fc19 	bl	7e14 <mbedtls_mpi_exp_mod>
    45e2:	4604      	mov	r4, r0
    45e4:	2800      	cmp	r0, #0
    45e6:	d1dd      	bne.n	45a4 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    45e8:	463a      	mov	r2, r7
    45ea:	4631      	mov	r1, r6
    45ec:	a803      	add	r0, sp, #12
    45ee:	f002 ffbe 	bl	756e <mbedtls_mpi_write_binary>
    45f2:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    45f4:	a803      	add	r0, sp, #12
    45f6:	f002 fe91 	bl	731c <mbedtls_mpi_free>
    if( ret != 0 )
    45fa:	2c00      	cmp	r4, #0
    45fc:	d1e3      	bne.n	45c6 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    45fe:	4620      	mov	r0, r4
    4600:	b007      	add	sp, #28
    4602:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4604:	4c00      	ldr	r4, [pc, #0]	; (4608 <mbedtls_rsa_public+0x8c>)
    4606:	e7fa      	b.n	45fe <mbedtls_rsa_public+0x82>
    4608:	ffffbf80 	.word	0xffffbf80

0000460c <mbedtls_sha256_starts>:
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    460c:	4a23      	ldr	r2, [pc, #140]	; (469c <mbedtls_sha256_starts+0x90>)
{
    460e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
    4612:	f1b1 0800 	subs.w	r8, r1, #0
    4616:	bf18      	it	ne
    4618:	4696      	movne	lr, r2
    461a:	4a21      	ldr	r2, [pc, #132]	; (46a0 <mbedtls_sha256_starts+0x94>)
    461c:	4921      	ldr	r1, [pc, #132]	; (46a4 <mbedtls_sha256_starts+0x98>)
    461e:	bf18      	it	ne
    4620:	4694      	movne	ip, r2
    4622:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    4626:	bf08      	it	eq
    4628:	468e      	moveq	lr, r1
    462a:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    462e:	491e      	ldr	r1, [pc, #120]	; (46a8 <mbedtls_sha256_starts+0x9c>)
    4630:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    4634:	bf08      	it	eq
    4636:	468c      	moveq	ip, r1
    4638:	491c      	ldr	r1, [pc, #112]	; (46ac <mbedtls_sha256_starts+0xa0>)
    463a:	bf18      	it	ne
    463c:	4611      	movne	r1, r2
    463e:	4a1c      	ldr	r2, [pc, #112]	; (46b0 <mbedtls_sha256_starts+0xa4>)
    4640:	4f1c      	ldr	r7, [pc, #112]	; (46b4 <mbedtls_sha256_starts+0xa8>)
    4642:	bf18      	it	ne
    4644:	4617      	movne	r7, r2
    4646:	4a1c      	ldr	r2, [pc, #112]	; (46b8 <mbedtls_sha256_starts+0xac>)
    4648:	4e1c      	ldr	r6, [pc, #112]	; (46bc <mbedtls_sha256_starts+0xb0>)
    464a:	bf18      	it	ne
    464c:	4616      	movne	r6, r2
    464e:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    4652:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    4656:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    465a:	4d19      	ldr	r5, [pc, #100]	; (46c0 <mbedtls_sha256_starts+0xb4>)
    465c:	bf18      	it	ne
    465e:	4615      	movne	r5, r2
    4660:	4a18      	ldr	r2, [pc, #96]	; (46c4 <mbedtls_sha256_starts+0xb8>)
{
    4662:	4603      	mov	r3, r0
    if( is224 == 0 )
    4664:	4c18      	ldr	r4, [pc, #96]	; (46c8 <mbedtls_sha256_starts+0xbc>)
    4666:	4819      	ldr	r0, [pc, #100]	; (46cc <mbedtls_sha256_starts+0xc0>)
    4668:	bf18      	it	ne
    466a:	4614      	movne	r4, r2
    466c:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    4670:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    4674:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    4678:	bf18      	it	ne
    467a:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    467c:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    467e:	e9c3 ec02 	strd	lr, ip, [r3, #8]
    ctx->total[1] = 0;
    4682:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    4686:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    468a:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    468e:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    4692:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68

    return( 0 );
}
    4696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    469a:	bf00      	nop
    469c:	c1059ed8 	.word	0xc1059ed8
    46a0:	367cd507 	.word	0x367cd507
    46a4:	6a09e667 	.word	0x6a09e667
    46a8:	bb67ae85 	.word	0xbb67ae85
    46ac:	3c6ef372 	.word	0x3c6ef372
    46b0:	f70e5939 	.word	0xf70e5939
    46b4:	a54ff53a 	.word	0xa54ff53a
    46b8:	ffc00b31 	.word	0xffc00b31
    46bc:	510e527f 	.word	0x510e527f
    46c0:	9b05688c 	.word	0x9b05688c
    46c4:	64f98fa7 	.word	0x64f98fa7
    46c8:	1f83d9ab 	.word	0x1f83d9ab
    46cc:	befa4fa4 	.word	0xbefa4fa4

000046d0 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    46d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46d4:	b0d1      	sub	sp, #324	; 0x144
    46d6:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    46da:	465a      	mov	r2, fp
    46dc:	1d03      	adds	r3, r0, #4
    46de:	9301      	str	r3, [sp, #4]
    46e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
    46e4:	9303      	str	r3, [sp, #12]
    46e6:	9b01      	ldr	r3, [sp, #4]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    46e8:	f853 0f04 	ldr.w	r0, [r3, #4]!
    46ec:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    46f0:	9803      	ldr	r0, [sp, #12]
    46f2:	4298      	cmp	r0, r3
    46f4:	d1f8      	bne.n	46e8 <mbedtls_internal_sha256_process+0x18>
    46f6:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    46fa:	f04f 0900 	mov.w	r9, #0
    46fe:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    4700:	ad4c      	add	r5, sp, #304	; 0x130
    4702:	9302      	str	r3, [sp, #8]
    4704:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    4708:	9304      	str	r3, [sp, #16]
    470a:	4b42      	ldr	r3, [pc, #264]	; (4814 <mbedtls_internal_sha256_process+0x144>)
    470c:	aa06      	add	r2, sp, #24
    470e:	9305      	str	r3, [sp, #20]
    4710:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    4714:	f1b9 0f0f 	cmp.w	r9, #15
    4718:	d863      	bhi.n	47e2 <mbedtls_internal_sha256_process+0x112>
            GET_UINT32_BE( local.W[i], data, 4 * i );
    471a:	784c      	ldrb	r4, [r1, #1]
    471c:	780b      	ldrb	r3, [r1, #0]
    471e:	0424      	lsls	r4, r4, #16
    4720:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    4724:	78cb      	ldrb	r3, [r1, #3]
    4726:	4323      	orrs	r3, r4
    4728:	788c      	ldrb	r4, [r1, #2]
    472a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    472e:	ea4f 2af5 	mov.w	sl, r5, ror #11
    4732:	ea8c 0408 	eor.w	r4, ip, r8
    4736:	9e05      	ldr	r6, [sp, #20]
    4738:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    473c:	402c      	ands	r4, r5
    473e:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    4742:	ea84 040c 	eor.w	r4, r4, ip
    4746:	4454      	add	r4, sl
    4748:	f856 ab04 	ldr.w	sl, [r6], #4
    474c:	6093      	str	r3, [r2, #8]
    474e:	4454      	add	r4, sl
    4750:	4423      	add	r3, r4
    4752:	9c02      	ldr	r4, [sp, #8]
    4754:	ea4f 3a70 	mov.w	sl, r0, ror #13
    4758:	4423      	add	r3, r4
    475a:	ea40 0407 	orr.w	r4, r0, r7
    475e:	9605      	str	r6, [sp, #20]
    4760:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    4764:	ea04 040e 	and.w	r4, r4, lr
    4768:	ea00 0607 	and.w	r6, r0, r7
    476c:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    4770:	4334      	orrs	r4, r6
    4772:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    4774:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4778:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    477c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4780:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    4782:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4786:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    4788:	f101 0104 	add.w	r1, r1, #4
    478c:	f8cd c008 	str.w	ip, [sp, #8]
    4790:	f8cd e010 	str.w	lr, [sp, #16]
    4794:	d11e      	bne.n	47d4 <mbedtls_internal_sha256_process+0x104>
    4796:	e9cd 3406 	strd	r3, r4, [sp, #24]
    479a:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    479e:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    47a2:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    47a6:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    47aa:	9a01      	ldr	r2, [sp, #4]
    47ac:	f852 3f04 	ldr.w	r3, [r2, #4]!
    47b0:	9201      	str	r2, [sp, #4]
    47b2:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    47b6:	4413      	add	r3, r2
    47b8:	9a01      	ldr	r2, [sp, #4]
    47ba:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    47bc:	9b03      	ldr	r3, [sp, #12]
    47be:	4293      	cmp	r3, r2
    47c0:	d1f3      	bne.n	47aa <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    47c2:	a806      	add	r0, sp, #24
    47c4:	f44f 7194 	mov.w	r1, #296	; 0x128
    47c8:	f000 fee4 	bl	5594 <mbedtls_platform_zeroize>

    return( 0 );
}
    47cc:	2000      	movs	r0, #0
    47ce:	b051      	add	sp, #324	; 0x144
    47d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47d4:	46be      	mov	lr, r7
    47d6:	46c4      	mov	ip, r8
    47d8:	4607      	mov	r7, r0
    47da:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    47dc:	4618      	mov	r0, r3
    47de:	4655      	mov	r5, sl
    47e0:	e798      	b.n	4714 <mbedtls_internal_sha256_process+0x44>
            R( i );
    47e2:	6813      	ldr	r3, [r2, #0]
    47e4:	f852 4c38 	ldr.w	r4, [r2, #-56]
    47e8:	ea4f 4af3 	mov.w	sl, r3, ror #19
    47ec:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    47f0:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    47f4:	f852 3c14 	ldr.w	r3, [r2, #-20]
    47f8:	f852 6c34 	ldr.w	r6, [r2, #-52]
    47fc:	4423      	add	r3, r4
    47fe:	f852 4c34 	ldr.w	r4, [r2, #-52]
    4802:	4453      	add	r3, sl
    4804:	ea4f 44b4 	mov.w	r4, r4, ror #18
    4808:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    480c:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    4810:	4423      	add	r3, r4
    4812:	e78c      	b.n	472e <mbedtls_internal_sha256_process+0x5e>
    4814:	00008bec 	.word	0x00008bec

00004818 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    4818:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    481a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    481e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4822:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    4826:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    482a:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    482c:	bf01      	itttt	eq
    482e:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    4832:	2200      	moveq	r2, #0
    4834:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    4838:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    483c:	f003 fe57 	bl	84ee <nrf91_errata_14>
    4840:	b128      	cbz	r0, 484e <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    4842:	2201      	movs	r2, #1
    4844:	4b4c      	ldr	r3, [pc, #304]	; (4978 <SystemInit+0x160>)
    4846:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    484a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    484e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4852:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4856:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    485a:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    485e:	2a09      	cmp	r2, #9
    4860:	d105      	bne.n	486e <SystemInit+0x56>
            {
                switch(var2)
    4862:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4864:	bf1e      	ittt	ne
    4866:	2201      	movne	r2, #1
    4868:	4b43      	ldrne	r3, [pc, #268]	; (4978 <SystemInit+0x160>)
    486a:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    486e:	f003 fe3e 	bl	84ee <nrf91_errata_14>
    4872:	b118      	cbz	r0, 487c <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4874:	220e      	movs	r2, #14
    4876:	4b41      	ldr	r3, [pc, #260]	; (497c <SystemInit+0x164>)
    4878:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    487c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4880:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4884:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4888:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    488c:	2a09      	cmp	r2, #9
    488e:	d106      	bne.n	489e <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4890:	2200      	movs	r2, #0
    4892:	4b39      	ldr	r3, [pc, #228]	; (4978 <SystemInit+0x160>)
    4894:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4898:	2201      	movs	r2, #1
    489a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    489e:	2200      	movs	r2, #0
    48a0:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48a2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    48a6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    48aa:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48ae:	3101      	adds	r1, #1
    48b0:	d008      	beq.n	48c4 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    48b2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48b6:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    48b8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    48c0:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48c2:	d1ed      	bne.n	48a0 <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    48c4:	4b2e      	ldr	r3, [pc, #184]	; (4980 <SystemInit+0x168>)
    48c6:	69da      	ldr	r2, [r3, #28]
    48c8:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    48cc:	07d1      	lsls	r1, r2, #31
    48ce:	d543      	bpl.n	4958 <SystemInit+0x140>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48d0:	4b2c      	ldr	r3, [pc, #176]	; (4984 <SystemInit+0x16c>)
    48d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48d6:	2a01      	cmp	r2, #1
    48d8:	d1fb      	bne.n	48d2 <SystemInit+0xba>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    48da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48e2:	2a01      	cmp	r2, #1
    48e4:	d1fb      	bne.n	48de <SystemInit+0xc6>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    48e6:	4b26      	ldr	r3, [pc, #152]	; (4980 <SystemInit+0x168>)
    48e8:	69da      	ldr	r2, [r3, #28]
    48ea:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    48ee:	07d2      	lsls	r2, r2, #31
    48f0:	d50a      	bpl.n	4908 <SystemInit+0xf0>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    48f2:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    48f4:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    48f8:	61da      	str	r2, [r3, #28]
    48fa:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48fe:	4a21      	ldr	r2, [pc, #132]	; (4984 <SystemInit+0x16c>)
    4900:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4904:	2b01      	cmp	r3, #1
    4906:	d1fb      	bne.n	4900 <SystemInit+0xe8>
        uint32_t val = *word;
    4908:	4a1d      	ldr	r2, [pc, #116]	; (4980 <SystemInit+0x168>)
    490a:	6a13      	ldr	r3, [r2, #32]
    490c:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    4910:	3301      	adds	r3, #1
    4912:	d10c      	bne.n	492e <SystemInit+0x116>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    4914:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    4916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    491a:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    491e:	6213      	str	r3, [r2, #32]
    4920:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4924:	4a17      	ldr	r2, [pc, #92]	; (4984 <SystemInit+0x16c>)
    4926:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    492a:	2b01      	cmp	r3, #1
    492c:	d1fb      	bne.n	4926 <SystemInit+0x10e>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    492e:	2200      	movs	r2, #0
    4930:	4b14      	ldr	r3, [pc, #80]	; (4984 <SystemInit+0x16c>)
    4932:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4936:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    493a:	2a01      	cmp	r2, #1
    493c:	d1fb      	bne.n	4936 <SystemInit+0x11e>
    493e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4942:	4911      	ldr	r1, [pc, #68]	; (4988 <SystemInit+0x170>)
    4944:	4b11      	ldr	r3, [pc, #68]	; (498c <SystemInit+0x174>)
    4946:	68ca      	ldr	r2, [r1, #12]
    4948:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    494c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    494e:	60cb      	str	r3, [r1, #12]
    4950:	f3bf 8f4f 	dsb	sy
    __NOP();
    4954:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4956:	e7fd      	b.n	4954 <SystemInit+0x13c>
        uint32_t val = *word;
    4958:	6a1b      	ldr	r3, [r3, #32]
    495a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    495e:	3301      	adds	r3, #1
    4960:	d0b6      	beq.n	48d0 <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    4962:	4a09      	ldr	r2, [pc, #36]	; (4988 <SystemInit+0x170>)
    4964:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4968:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    496c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    4970:	4b07      	ldr	r3, [pc, #28]	; (4990 <SystemInit+0x178>)
    4972:	4a08      	ldr	r2, [pc, #32]	; (4994 <SystemInit+0x17c>)
    4974:	601a      	str	r2, [r3, #0]
}
    4976:	bd08      	pop	{r3, pc}
    4978:	50004000 	.word	0x50004000
    497c:	5003a000 	.word	0x5003a000
    4980:	00ff8000 	.word	0x00ff8000
    4984:	50039000 	.word	0x50039000
    4988:	e000ed00 	.word	0xe000ed00
    498c:	05fa0004 	.word	0x05fa0004
    4990:	2000c58c 	.word	0x2000c58c
    4994:	03d09000 	.word	0x03d09000

00004998 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4998:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    499a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    499c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    499e:	fab2 f382 	clz	r3, r2
    49a2:	f1c3 031f 	rsb	r3, r3, #31
        new_mask = prev_mask & ~NRFX_BIT(idx);
    49a6:	fa05 f403 	lsl.w	r4, r5, r3
    49aa:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    49ae:	e8d0 6fef 	ldaex	r6, [r0]
    49b2:	4296      	cmp	r6, r2
    49b4:	d104      	bne.n	49c0 <nrfx_flag32_alloc+0x28>
    49b6:	e8c0 4fec 	stlex	ip, r4, [r0]
    49ba:	f1bc 0f00 	cmp.w	ip, #0
    49be:	d1f6      	bne.n	49ae <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    49c0:	d1ec      	bne.n	499c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    49c2:	4801      	ldr	r0, [pc, #4]	; (49c8 <nrfx_flag32_alloc+0x30>)
    *p_flag = idx;
    49c4:	700b      	strb	r3, [r1, #0]
}
    49c6:	bd70      	pop	{r4, r5, r6, pc}
    49c8:	0bad0000 	.word	0x0bad0000

000049cc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    49cc:	6803      	ldr	r3, [r0, #0]
{
    49ce:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    49d0:	40cb      	lsrs	r3, r1
    49d2:	07db      	lsls	r3, r3, #31
    49d4:	d410      	bmi.n	49f8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    49d6:	2301      	movs	r3, #1
    49d8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    49da:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    49dc:	ea43 0102 	orr.w	r1, r3, r2
    49e0:	e8d0 4fef 	ldaex	r4, [r0]
    49e4:	4294      	cmp	r4, r2
    49e6:	d104      	bne.n	49f2 <nrfx_flag32_free+0x26>
    49e8:	e8c0 1fec 	stlex	ip, r1, [r0]
    49ec:	f1bc 0f00 	cmp.w	ip, #0
    49f0:	d1f6      	bne.n	49e0 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    49f2:	d1f2      	bne.n	49da <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    49f4:	4801      	ldr	r0, [pc, #4]	; (49fc <nrfx_flag32_free+0x30>)
}
    49f6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    49f8:	4801      	ldr	r0, [pc, #4]	; (4a00 <nrfx_flag32_free+0x34>)
    49fa:	e7fc      	b.n	49f6 <nrfx_flag32_free+0x2a>
    49fc:	0bad0000 	.word	0x0bad0000
    4a00:	0bad0004 	.word	0x0bad0004

00004a04 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4a04:	4b04      	ldr	r3, [pc, #16]	; (4a18 <nrfx_clock_init+0x14>)
    4a06:	791a      	ldrb	r2, [r3, #4]
    4a08:	b922      	cbnz	r2, 4a14 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4a0a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4a0c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4a0e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4a10:	4802      	ldr	r0, [pc, #8]	; (4a1c <nrfx_clock_init+0x18>)
    4a12:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4a14:	4802      	ldr	r0, [pc, #8]	; (4a20 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4a16:	4770      	bx	lr
    4a18:	2000e068 	.word	0x2000e068
    4a1c:	0bad0000 	.word	0x0bad0000
    4a20:	0bad000c 	.word	0x0bad000c

00004a24 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4a2c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4a2e:	b152      	cbz	r2, 4a46 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a30:	2000      	movs	r0, #0
    4a32:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4a36:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4a3a:	2201      	movs	r2, #1
    4a3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4a40:	4b11      	ldr	r3, [pc, #68]	; (4a88 <nrfx_power_clock_irq_handler+0x64>)
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4a4e:	b18a      	cbz	r2, 4a74 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a50:	2200      	movs	r2, #0
    4a52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a56:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a5a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a5e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4a62:	f002 0203 	and.w	r2, r2, #3
    4a66:	2a01      	cmp	r2, #1
    4a68:	f04f 0102 	mov.w	r1, #2
    4a6c:	d103      	bne.n	4a76 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a6e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a72:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a74:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4a76:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a7a:	4b03      	ldr	r3, [pc, #12]	; (4a88 <nrfx_power_clock_irq_handler+0x64>)
    4a7c:	2001      	movs	r0, #1
}
    4a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	4718      	bx	r3
    4a86:	bf00      	nop
    4a88:	2000e068 	.word	0x2000e068

00004a8c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4a8c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4a8e:	4801      	ldr	r0, [pc, #4]	; (4a94 <nrfx_dppi_channel_alloc+0x8>)
    4a90:	f7ff bf82 	b.w	4998 <nrfx_flag32_alloc>
    4a94:	2000c590 	.word	0x2000c590

00004a98 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a98:	4a06      	ldr	r2, [pc, #24]	; (4ab4 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    4a9a:	f000 001f 	and.w	r0, r0, #31
    4a9e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4aa2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    4aa6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4aae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4ab2:	4770      	bx	lr
    4ab4:	50842500 	.word	0x50842500

00004ab8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4ab8:	4b03      	ldr	r3, [pc, #12]	; (4ac8 <pin_in_use_by_te+0x10>)
    4aba:	3008      	adds	r0, #8
    4abc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4ac0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4ac4:	4770      	bx	lr
    4ac6:	bf00      	nop
    4ac8:	2000c594 	.word	0x2000c594

00004acc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4acc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ace:	4c0d      	ldr	r4, [pc, #52]	; (4b04 <call_handler+0x38>)
    4ad0:	f100 0308 	add.w	r3, r0, #8
    4ad4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4ad8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ada:	05da      	lsls	r2, r3, #23
{
    4adc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ade:	d507      	bpl.n	4af0 <call_handler+0x24>
    4ae0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4ae4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4ae8:	6852      	ldr	r2, [r2, #4]
    4aea:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4aee:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4af0:	68a3      	ldr	r3, [r4, #8]
    4af2:	b12b      	cbz	r3, 4b00 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4af4:	4631      	mov	r1, r6
    4af6:	4628      	mov	r0, r5
    4af8:	68e2      	ldr	r2, [r4, #12]
    }
}
    4afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4afe:	4718      	bx	r3
}
    4b00:	bd70      	pop	{r4, r5, r6, pc}
    4b02:	bf00      	nop
    4b04:	2000c594 	.word	0x2000c594

00004b08 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b08:	4a12      	ldr	r2, [pc, #72]	; (4b54 <release_handler+0x4c>)
    4b0a:	3008      	adds	r0, #8
    4b0c:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    4b10:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b12:	05d9      	lsls	r1, r3, #23
    4b14:	d51b      	bpl.n	4b4e <release_handler+0x46>
    4b16:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4b1a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4b1e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b22:	2000      	movs	r0, #0
    4b24:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4b28:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4b2c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b30:	d003      	beq.n	4b3a <release_handler+0x32>
    4b32:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4b36:	4299      	cmp	r1, r3
    4b38:	d009      	beq.n	4b4e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b3a:	3001      	adds	r0, #1
    4b3c:	2820      	cmp	r0, #32
    4b3e:	d1f3      	bne.n	4b28 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4b40:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b42:	4805      	ldr	r0, [pc, #20]	; (4b58 <release_handler+0x50>)
}
    4b44:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    4b46:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b4a:	f7ff bf3f 	b.w	49cc <nrfx_flag32_free>
}
    4b4e:	bc10      	pop	{r4}
    4b50:	4770      	bx	lr
    4b52:	bf00      	nop
    4b54:	2000c594 	.word	0x2000c594
    4b58:	2000c5e8 	.word	0x2000c5e8

00004b5c <pin_handler_trigger_uninit>:
{
    4b5c:	b538      	push	{r3, r4, r5, lr}
    4b5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4b60:	f7ff ffaa 	bl	4ab8 <pin_in_use_by_te>
    4b64:	4c0b      	ldr	r4, [pc, #44]	; (4b94 <pin_handler_trigger_uninit+0x38>)
    4b66:	f102 0508 	add.w	r5, r2, #8
    4b6a:	b160      	cbz	r0, 4b86 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b6c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4b6e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b72:	0b5b      	lsrs	r3, r3, #13
    4b74:	009b      	lsls	r3, r3, #2
    4b76:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4b7a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4b7e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4b82:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4b86:	4610      	mov	r0, r2
    4b88:	f7ff ffbe 	bl	4b08 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b8c:	2300      	movs	r3, #0
    4b8e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b92:	bd38      	pop	{r3, r4, r5, pc}
    4b94:	2000c594 	.word	0x2000c594

00004b98 <nrfx_gpiote_input_configure>:
{
    4b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4b9c:	4604      	mov	r4, r0
    4b9e:	461d      	mov	r5, r3
    if (p_input_config)
    4ba0:	b309      	cbz	r1, 4be6 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ba2:	4f4d      	ldr	r7, [pc, #308]	; (4cd8 <nrfx_gpiote_input_configure+0x140>)
    4ba4:	f100 0808 	add.w	r8, r0, #8
    4ba8:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4bac:	07b3      	lsls	r3, r6, #30
    4bae:	d506      	bpl.n	4bbe <nrfx_gpiote_input_configure+0x26>
    4bb0:	f7ff ff82 	bl	4ab8 <pin_in_use_by_te>
    4bb4:	b118      	cbz	r0, 4bbe <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4bb6:	4849      	ldr	r0, [pc, #292]	; (4cdc <nrfx_gpiote_input_configure+0x144>)
}
    4bb8:	b002      	add	sp, #8
    4bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bbe:	4848      	ldr	r0, [pc, #288]	; (4ce0 <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
    4bc0:	f004 031f 	and.w	r3, r4, #31
    4bc4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bc8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4bcc:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4bce:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4bd2:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4bd6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4bda:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    4bde:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4be2:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    4be6:	b192      	cbz	r2, 4c0e <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4be8:	4e3b      	ldr	r6, [pc, #236]	; (4cd8 <nrfx_gpiote_input_configure+0x140>)
    4bea:	f104 0708 	add.w	r7, r4, #8
    4bee:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4bf2:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    4bf4:	0788      	lsls	r0, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4bf6:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    4bf8:	d50c      	bpl.n	4c14 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    4bfa:	2a00      	cmp	r2, #0
    4bfc:	d1db      	bne.n	4bb6 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4bfe:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    4c02:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4c06:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    4c0a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    4c0e:	bbcd      	cbnz	r5, 4c84 <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
    4c10:	4834      	ldr	r0, [pc, #208]	; (4ce4 <nrfx_gpiote_input_configure+0x14c>)
    4c12:	e7d1      	b.n	4bb8 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4c14:	f021 0120 	bic.w	r1, r1, #32
    4c18:	04c9      	lsls	r1, r1, #19
    4c1a:	0cc9      	lsrs	r1, r1, #19
    4c1c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    4c20:	2a00      	cmp	r2, #0
    4c22:	d0ec      	beq.n	4bfe <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    4c24:	2b03      	cmp	r3, #3
    4c26:	d8c6      	bhi.n	4bb6 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4c28:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4c2c:	4662      	mov	r2, ip
    4c2e:	0092      	lsls	r2, r2, #2
    4c30:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4c34:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4c38:	b923      	cbnz	r3, 4c44 <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
    4c3a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4c3e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    4c42:	e7dc      	b.n	4bfe <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4c44:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c48:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4c4c:	f020 0003 	bic.w	r0, r0, #3
    4c50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c54:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4c58:	f041 0120 	orr.w	r1, r1, #32
    4c5c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4c60:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4c64:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c68:	0220      	lsls	r0, r4, #8
    4c6a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4c6e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    4c72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    4c76:	ea40 000e 	orr.w	r0, r0, lr
    4c7a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4c7e:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    4c82:	e7bc      	b.n	4bfe <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
    4c84:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c86:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c8a:	f7ff ff3d 	bl	4b08 <release_handler>
    if (!handler)
    4c8e:	2e00      	cmp	r6, #0
    4c90:	d0be      	beq.n	4c10 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c92:	4d11      	ldr	r5, [pc, #68]	; (4cd8 <nrfx_gpiote_input_configure+0x140>)
    4c94:	e9d5 2300 	ldrd	r2, r3, [r5]
    4c98:	4296      	cmp	r6, r2
    4c9a:	d101      	bne.n	4ca0 <nrfx_gpiote_input_configure+0x108>
    4c9c:	429f      	cmp	r7, r3
    4c9e:	d018      	beq.n	4cd2 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4ca0:	4811      	ldr	r0, [pc, #68]	; (4ce8 <nrfx_gpiote_input_configure+0x150>)
    4ca2:	f10d 0107 	add.w	r1, sp, #7
    4ca6:	f7ff fe77 	bl	4998 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4caa:	4b0e      	ldr	r3, [pc, #56]	; (4ce4 <nrfx_gpiote_input_configure+0x14c>)
    4cac:	4298      	cmp	r0, r3
    4cae:	d183      	bne.n	4bb8 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4cb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4cb4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cb8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4cba:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cbc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4cc0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cc4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4ccc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4cd0:	e79e      	b.n	4c10 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4cd2:	2200      	movs	r2, #0
    4cd4:	e7ee      	b.n	4cb4 <nrfx_gpiote_input_configure+0x11c>
    4cd6:	bf00      	nop
    4cd8:	2000c594 	.word	0x2000c594
    4cdc:	0bad0004 	.word	0x0bad0004
    4ce0:	50842500 	.word	0x50842500
    4ce4:	0bad0000 	.word	0x0bad0000
    4ce8:	2000c5e8 	.word	0x2000c5e8

00004cec <nrfx_gpiote_output_configure>:
{
    4cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cf0:	4604      	mov	r4, r0
    if (p_config)
    4cf2:	2900      	cmp	r1, #0
    4cf4:	d040      	beq.n	4d78 <nrfx_gpiote_output_configure+0x8c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cf6:	4e41      	ldr	r6, [pc, #260]	; (4dfc <nrfx_gpiote_output_configure+0x110>)
    4cf8:	f100 0708 	add.w	r7, r0, #8
    4cfc:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4d00:	07ab      	lsls	r3, r5, #30
    4d02:	d405      	bmi.n	4d10 <nrfx_gpiote_output_configure+0x24>
    4d04:	f7ff fed8 	bl	4ab8 <pin_in_use_by_te>
    4d08:	b110      	cbz	r0, 4d10 <nrfx_gpiote_output_configure+0x24>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d0a:	483d      	ldr	r0, [pc, #244]	; (4e00 <nrfx_gpiote_output_configure+0x114>)
}
    4d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4d10:	f015 0f1c 	tst.w	r5, #28
    4d14:	d002      	beq.n	4d1c <nrfx_gpiote_output_configure+0x30>
    4d16:	784b      	ldrb	r3, [r1, #1]
    4d18:	2b01      	cmp	r3, #1
    4d1a:	d0f6      	beq.n	4d0a <nrfx_gpiote_output_configure+0x1e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d1c:	4839      	ldr	r0, [pc, #228]	; (4e04 <nrfx_gpiote_output_configure+0x118>)
    *p_pin = pin_number & 0x1F;
    4d1e:	f004 031f 	and.w	r3, r4, #31
    4d22:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4d26:	1c4b      	adds	r3, r1, #1
    4d28:	bf14      	ite	ne
    4d2a:	2001      	movne	r0, #1
    4d2c:	2000      	moveq	r0, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d2e:	f111 0e02 	adds.w	lr, r1, #2
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4d32:	ea4f 0040 	mov.w	r0, r0, lsl #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d36:	f8dc 8200 	ldr.w	r8, [ip, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4d3a:	bf0c      	ite	eq
    4d3c:	f040 0001 	orreq.w	r0, r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4d40:	f040 000d 	orrne.w	r0, r0, #13
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d44:	f440 60e0 	orr.w	r0, r0, #1792	; 0x700
    cnf &= ~to_update;
    4d48:	ea28 0000 	bic.w	r0, r8, r0
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d4c:	b10b      	cbz	r3, 4d52 <nrfx_gpiote_output_configure+0x66>
    4d4e:	784b      	ldrb	r3, [r1, #1]
    4d50:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d52:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4d56:	f1be 0f00 	cmp.w	lr, #0
    4d5a:	d003      	beq.n	4d64 <nrfx_gpiote_output_configure+0x78>
    4d5c:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d60:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4d64:	7809      	ldrb	r1, [r1, #0]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4d66:	f045 0503 	orr.w	r5, r5, #3
    4d6a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d6e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    4d70:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
    4d74:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4d78:	b90a      	cbnz	r2, 4d7e <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    4d7a:	4823      	ldr	r0, [pc, #140]	; (4e08 <nrfx_gpiote_output_configure+0x11c>)
    4d7c:	e7c6      	b.n	4d0c <nrfx_gpiote_output_configure+0x20>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d7e:	4e1f      	ldr	r6, [pc, #124]	; (4dfc <nrfx_gpiote_output_configure+0x110>)
    4d80:	f104 0708 	add.w	r7, r4, #8
    4d84:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4d88:	0783      	lsls	r3, r0, #30
    4d8a:	d5be      	bpl.n	4d0a <nrfx_gpiote_output_configure+0x1e>
        uint32_t ch = p_task_config->task_ch;
    4d8c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4d90:	2300      	movs	r3, #0
    4d92:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4d94:	f020 0020 	bic.w	r0, r0, #32
    4d98:	0089      	lsls	r1, r1, #2
    4d9a:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4d9e:	04c0      	lsls	r0, r0, #19
    4da0:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4da4:	0cc0      	lsrs	r0, r0, #19
    4da6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4daa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4dae:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4db2:	7855      	ldrb	r5, [r2, #1]
    4db4:	2d00      	cmp	r5, #0
    4db6:	d0e0      	beq.n	4d7a <nrfx_gpiote_output_configure+0x8e>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4db8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4dbc:	7892      	ldrb	r2, [r2, #2]
    4dbe:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4dc2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4dc6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dca:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4dce:	0223      	lsls	r3, r4, #8
    4dd0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4dd4:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dd6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4dda:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4dde:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4de0:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4de2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4de6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dea:	4313      	orrs	r3, r2
    4dec:	f040 0020 	orr.w	r0, r0, #32
    4df0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4df4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4df8:	e7bf      	b.n	4d7a <nrfx_gpiote_output_configure+0x8e>
    4dfa:	bf00      	nop
    4dfc:	2000c594 	.word	0x2000c594
    4e00:	0bad0004 	.word	0x0bad0004
    4e04:	50842500 	.word	0x50842500
    4e08:	0bad0000 	.word	0x0bad0000

00004e0c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4e0c:	4b01      	ldr	r3, [pc, #4]	; (4e14 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4e0e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4e12:	4770      	bx	lr
    4e14:	2000c594 	.word	0x2000c594

00004e18 <nrfx_gpiote_channel_get>:
{
    4e18:	b508      	push	{r3, lr}
    4e1a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4e1c:	f7ff fe4c 	bl	4ab8 <pin_in_use_by_te>
    4e20:	b138      	cbz	r0, 4e32 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e22:	4b05      	ldr	r3, [pc, #20]	; (4e38 <nrfx_gpiote_channel_get+0x20>)
    4e24:	3208      	adds	r2, #8
    4e26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4e2a:	4804      	ldr	r0, [pc, #16]	; (4e3c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e2c:	0b5b      	lsrs	r3, r3, #13
    4e2e:	700b      	strb	r3, [r1, #0]
}
    4e30:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4e32:	4803      	ldr	r0, [pc, #12]	; (4e40 <nrfx_gpiote_channel_get+0x28>)
    4e34:	e7fc      	b.n	4e30 <nrfx_gpiote_channel_get+0x18>
    4e36:	bf00      	nop
    4e38:	2000c594 	.word	0x2000c594
    4e3c:	0bad0000 	.word	0x0bad0000
    4e40:	0bad0004 	.word	0x0bad0004

00004e44 <nrfx_gpiote_init>:
{
    4e44:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4e46:	4c0f      	ldr	r4, [pc, #60]	; (4e84 <nrfx_gpiote_init+0x40>)
    4e48:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4e4c:	b9bd      	cbnz	r5, 4e7e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4e4e:	2240      	movs	r2, #64	; 0x40
    4e50:	4629      	mov	r1, r5
    4e52:	f104 0010 	add.w	r0, r4, #16
    4e56:	f001 fc08 	bl	666a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4e5a:	200d      	movs	r0, #13
    4e5c:	f7fd fd46 	bl	28ec <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e60:	4b09      	ldr	r3, [pc, #36]	; (4e88 <nrfx_gpiote_init+0x44>)
    return err_code;
    4e62:	480a      	ldr	r0, [pc, #40]	; (4e8c <nrfx_gpiote_init+0x48>)
    4e64:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4e68:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4e6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4e70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4e74:	2301      	movs	r3, #1
    4e76:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4e7a:	6563      	str	r3, [r4, #84]	; 0x54
}
    4e7c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4e7e:	4804      	ldr	r0, [pc, #16]	; (4e90 <nrfx_gpiote_init+0x4c>)
    4e80:	e7fc      	b.n	4e7c <nrfx_gpiote_init+0x38>
    4e82:	bf00      	nop
    4e84:	2000c594 	.word	0x2000c594
    4e88:	5000d000 	.word	0x5000d000
    4e8c:	0bad0000 	.word	0x0bad0000
    4e90:	0bad0005 	.word	0x0bad0005

00004e94 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4e94:	4b03      	ldr	r3, [pc, #12]	; (4ea4 <nrfx_gpiote_is_init+0x10>)
    4e96:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4e9a:	3800      	subs	r0, #0
    4e9c:	bf18      	it	ne
    4e9e:	2001      	movne	r0, #1
    4ea0:	4770      	bx	lr
    4ea2:	bf00      	nop
    4ea4:	2000c594 	.word	0x2000c594

00004ea8 <nrfx_gpiote_channel_free>:
{
    4ea8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4eaa:	4801      	ldr	r0, [pc, #4]	; (4eb0 <nrfx_gpiote_channel_free+0x8>)
    4eac:	f7ff bd8e 	b.w	49cc <nrfx_flag32_free>
    4eb0:	2000c5e4 	.word	0x2000c5e4

00004eb4 <nrfx_gpiote_channel_alloc>:
{
    4eb4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4eb6:	4801      	ldr	r0, [pc, #4]	; (4ebc <nrfx_gpiote_channel_alloc+0x8>)
    4eb8:	f7ff bd6e 	b.w	4998 <nrfx_flag32_alloc>
    4ebc:	2000c5e4 	.word	0x2000c5e4

00004ec0 <nrfx_gpiote_trigger_enable>:
{
    4ec0:	4602      	mov	r2, r0
    4ec2:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ec4:	f7ff fdf8 	bl	4ab8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ec8:	4b1c      	ldr	r3, [pc, #112]	; (4f3c <nrfx_gpiote_trigger_enable+0x7c>)
    4eca:	f102 0408 	add.w	r4, r2, #8
    4ece:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ed2:	b1e0      	cbz	r0, 4f0e <nrfx_gpiote_trigger_enable+0x4e>
    4ed4:	f013 0402 	ands.w	r4, r3, #2
    4ed8:	d119      	bne.n	4f0e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4eda:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4edc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4ede:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4ee2:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4ee6:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4eea:	6004      	str	r4, [r0, #0]
    4eec:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4ef0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4ef2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4ef6:	f040 0001 	orr.w	r0, r0, #1
    4efa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4efe:	b129      	cbz	r1, 4f0c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4f00:	2201      	movs	r2, #1
    4f02:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4f06:	4a0e      	ldr	r2, [pc, #56]	; (4f40 <nrfx_gpiote_trigger_enable+0x80>)
    4f08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4f0c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4f0e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4f12:	2b04      	cmp	r3, #4
    4f14:	d00e      	beq.n	4f34 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4f16:	2b05      	cmp	r3, #5
    4f18:	d00e      	beq.n	4f38 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    4f1a:	4b0a      	ldr	r3, [pc, #40]	; (4f44 <nrfx_gpiote_trigger_enable+0x84>)
    4f1c:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    4f1e:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4f22:	40d9      	lsrs	r1, r3
    4f24:	f001 0101 	and.w	r1, r1, #1
    4f28:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4f2a:	4610      	mov	r0, r2
}
    4f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4f30:	f7ff bdb2 	b.w	4a98 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4f34:	2103      	movs	r1, #3
    4f36:	e7f8      	b.n	4f2a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4f38:	2102      	movs	r1, #2
    4f3a:	e7f6      	b.n	4f2a <nrfx_gpiote_trigger_enable+0x6a>
    4f3c:	2000c594 	.word	0x2000c594
    4f40:	5000d000 	.word	0x5000d000
    4f44:	50842500 	.word	0x50842500

00004f48 <nrfx_gpiote_trigger_disable>:
{
    4f48:	b508      	push	{r3, lr}
    4f4a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f4c:	f7ff fdb4 	bl	4ab8 <pin_in_use_by_te>
    4f50:	b1c0      	cbz	r0, 4f84 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4f52:	4b0f      	ldr	r3, [pc, #60]	; (4f90 <nrfx_gpiote_trigger_disable+0x48>)
    4f54:	f102 0108 	add.w	r1, r2, #8
    4f58:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f5c:	0799      	lsls	r1, r3, #30
    4f5e:	d411      	bmi.n	4f84 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f60:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f62:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f64:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4f66:	490b      	ldr	r1, [pc, #44]	; (4f94 <nrfx_gpiote_trigger_disable+0x4c>)
    4f68:	009b      	lsls	r3, r3, #2
    4f6a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4f6e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f72:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4f76:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4f7a:	f022 0203 	bic.w	r2, r2, #3
    4f7e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4f82:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f84:	2100      	movs	r1, #0
}
    4f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f8a:	4610      	mov	r0, r2
    4f8c:	f7ff bd84 	b.w	4a98 <nrf_gpio_cfg_sense_set>
    4f90:	2000c594 	.word	0x2000c594
    4f94:	5000d000 	.word	0x5000d000

00004f98 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f98:	4b0c      	ldr	r3, [pc, #48]	; (4fcc <nrfx_gpiote_pin_uninit+0x34>)
    4f9a:	f100 0208 	add.w	r2, r0, #8
    4f9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4fa2:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    4fa4:	07db      	lsls	r3, r3, #31
{
    4fa6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4fa8:	d50d      	bpl.n	4fc6 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    4faa:	f7ff ffcd 	bl	4f48 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4fae:	4620      	mov	r0, r4
    4fb0:	f7ff fdd4 	bl	4b5c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4fb4:	2202      	movs	r2, #2
    4fb6:	4b06      	ldr	r3, [pc, #24]	; (4fd0 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    4fb8:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4fbc:	3480      	adds	r4, #128	; 0x80
    4fbe:	4805      	ldr	r0, [pc, #20]	; (4fd4 <nrfx_gpiote_pin_uninit+0x3c>)
    4fc0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4fc4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4fc6:	4804      	ldr	r0, [pc, #16]	; (4fd8 <nrfx_gpiote_pin_uninit+0x40>)
    4fc8:	e7fc      	b.n	4fc4 <nrfx_gpiote_pin_uninit+0x2c>
    4fca:	bf00      	nop
    4fcc:	2000c594 	.word	0x2000c594
    4fd0:	50842500 	.word	0x50842500
    4fd4:	0bad0000 	.word	0x0bad0000
    4fd8:	0bad0004 	.word	0x0bad0004

00004fdc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4fe0:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4fe2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fe4:	462c      	mov	r4, r5
{
    4fe6:	4b4d      	ldr	r3, [pc, #308]	; (511c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4fe8:	484d      	ldr	r0, [pc, #308]	; (5120 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fea:	494e      	ldr	r1, [pc, #312]	; (5124 <nrfx_gpiote_irq_handler+0x148>)
{
    4fec:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fee:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4ff0:	b136      	cbz	r6, 5000 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4ff2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4ff6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ff8:	bf1e      	ittt	ne
    4ffa:	601c      	strne	r4, [r3, #0]
    4ffc:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4ffe:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5000:	3304      	adds	r3, #4
    5002:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5004:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5008:	d1f1      	bne.n	4fee <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    500a:	4f45      	ldr	r7, [pc, #276]	; (5120 <nrfx_gpiote_irq_handler+0x144>)
    500c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5010:	b193      	cbz	r3, 5038 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    5012:	4e45      	ldr	r6, [pc, #276]	; (5128 <nrfx_gpiote_irq_handler+0x14c>)
    5014:	6a33      	ldr	r3, [r6, #32]
    5016:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    5018:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    501a:	f04f 0a01 	mov.w	sl, #1
    501e:	f10d 090c 	add.w	r9, sp, #12
            while (latch[i])
    5022:	9803      	ldr	r0, [sp, #12]
    5024:	b970      	cbnz	r0, 5044 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5026:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    502a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    502e:	6a33      	ldr	r3, [r6, #32]
    5030:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    5032:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    5034:	2b00      	cmp	r3, #0
    5036:	d1f0      	bne.n	501a <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    5038:	2401      	movs	r4, #1
    while (mask)
    503a:	2d00      	cmp	r5, #0
    503c:	d156      	bne.n	50ec <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    503e:	b005      	add	sp, #20
    5040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    5044:	fa90 fba0 	rbit	fp, r0
    5048:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    504c:	4a37      	ldr	r2, [pc, #220]	; (512c <nrfx_gpiote_irq_handler+0x150>)
    504e:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5052:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    5056:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    505a:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    505e:	f819 300c 	ldrb.w	r3, [r9, ip]
    5062:	fa0a f404 	lsl.w	r4, sl, r4
    5066:	ea23 0304 	bic.w	r3, r3, r4
    506a:	f809 300c 	strb.w	r3, [r9, ip]
    506e:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5072:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    5076:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    507a:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    507c:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    507e:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    5082:	d518      	bpl.n	50b6 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    5084:	4611      	mov	r1, r2
    5086:	4658      	mov	r0, fp
    5088:	9301      	str	r3, [sp, #4]
    508a:	f7ff fd1f 	bl	4acc <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	b2e4      	uxtb	r4, r4
    5092:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5096:	f3c3 4301 	ubfx	r3, r3, #16, #2
    509a:	429c      	cmp	r4, r3
    509c:	d107      	bne.n	50ae <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    509e:	2100      	movs	r1, #0
    50a0:	4658      	mov	r0, fp
    50a2:	f7ff fcf9 	bl	4a98 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    50a6:	4621      	mov	r1, r4
    50a8:	4658      	mov	r0, fp
    50aa:	f7ff fcf5 	bl	4a98 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    50ae:	fa0a f00b 	lsl.w	r0, sl, fp
    50b2:	6230      	str	r0, [r6, #32]
}
    50b4:	e7b5      	b.n	5022 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    50b6:	2c02      	cmp	r4, #2
    50b8:	d10c      	bne.n	50d4 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    50ba:	2103      	movs	r1, #3
    50bc:	4658      	mov	r0, fp
    50be:	f7ff fceb 	bl	4a98 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50c2:	f008 0305 	and.w	r3, r8, #5
    50c6:	2b01      	cmp	r3, #1
    50c8:	d1f1      	bne.n	50ae <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    50ca:	4641      	mov	r1, r8
    50cc:	4658      	mov	r0, fp
    50ce:	f7ff fcfd 	bl	4acc <call_handler>
    50d2:	e7ec      	b.n	50ae <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    50d4:	2102      	movs	r1, #2
    50d6:	4658      	mov	r0, fp
    50d8:	9201      	str	r2, [sp, #4]
    50da:	f7ff fcdd 	bl	4a98 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50de:	9a01      	ldr	r2, [sp, #4]
    50e0:	2a03      	cmp	r2, #3
    50e2:	d0f2      	beq.n	50ca <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    50e4:	2c03      	cmp	r4, #3
    50e6:	d1e2      	bne.n	50ae <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    50e8:	428a      	cmp	r2, r1
    50ea:	e7ed      	b.n	50c8 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    50ec:	fa95 f3a5 	rbit	r3, r5
    50f0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    50f4:	fa04 f203 	lsl.w	r2, r4, r3
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    50fe:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5102:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5106:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    510a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    510e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    5112:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5116:	f7ff fcd9 	bl	4acc <call_handler>
    511a:	e78e      	b.n	503a <nrfx_gpiote_irq_handler+0x5e>
    511c:	5000d100 	.word	0x5000d100
    5120:	5000d000 	.word	0x5000d000
    5124:	5000d120 	.word	0x5000d120
    5128:	50842500 	.word	0x50842500
    512c:	2000c594 	.word	0x2000c594

00005130 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    5130:	2200      	movs	r2, #0
    5132:	4b03      	ldr	r3, [pc, #12]	; (5140 <nvmc_readonly_mode_set+0x10>)
    5134:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    5138:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    513c:	4770      	bx	lr
    513e:	bf00      	nop
    5140:	50039000 	.word	0x50039000

00005144 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    5144:	4a04      	ldr	r2, [pc, #16]	; (5158 <nvmc_word_write+0x14>)
    5146:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    514a:	07db      	lsls	r3, r3, #31
    514c:	d5fb      	bpl.n	5146 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    514e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    5150:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    5154:	4770      	bx	lr
    5156:	bf00      	nop
    5158:	50039000 	.word	0x50039000

0000515c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    515c:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    515e:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    5162:	b983      	cbnz	r3, 5186 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    5164:	2202      	movs	r2, #2
    5166:	4b09      	ldr	r3, [pc, #36]	; (518c <nrfx_nvmc_page_erase+0x30>)
    5168:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    516c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    5170:	f04f 32ff 	mov.w	r2, #4294967295
    5174:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5176:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    517a:	07d2      	lsls	r2, r2, #31
    517c:	d5fb      	bpl.n	5176 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    517e:	f7ff ffd7 	bl	5130 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    5182:	4803      	ldr	r0, [pc, #12]	; (5190 <nrfx_nvmc_page_erase+0x34>)
}
    5184:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    5186:	4803      	ldr	r0, [pc, #12]	; (5194 <nrfx_nvmc_page_erase+0x38>)
    5188:	e7fc      	b.n	5184 <nrfx_nvmc_page_erase+0x28>
    518a:	bf00      	nop
    518c:	50039000 	.word	0x50039000
    5190:	0bad0000 	.word	0x0bad0000
    5194:	0bad000a 	.word	0x0bad000a

00005198 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    5198:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    519a:	b508      	push	{r3, lr}
    519c:	4b05      	ldr	r3, [pc, #20]	; (51b4 <nrfx_nvmc_word_write+0x1c>)
    519e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    51a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    51a6:	f7ff ffcd 	bl	5144 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    51aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    51ae:	f7ff bfbf 	b.w	5130 <nvmc_readonly_mode_set>
    51b2:	bf00      	nop
    51b4:	50039000 	.word	0x50039000

000051b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51b8:	4b0e      	ldr	r3, [pc, #56]	; (51f4 <z_sys_init_run_level+0x3c>)
{
    51ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    51c0:	3001      	adds	r0, #1
    51c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    51c6:	42a6      	cmp	r6, r4
    51c8:	d800      	bhi.n	51cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    51ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    51cc:	e9d4 3500 	ldrd	r3, r5, [r4]
    51d0:	4628      	mov	r0, r5
    51d2:	4798      	blx	r3
		if (dev != NULL) {
    51d4:	b165      	cbz	r5, 51f0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    51d6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    51d8:	b130      	cbz	r0, 51e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    51da:	2800      	cmp	r0, #0
    51dc:	bfb8      	it	lt
    51de:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    51e0:	28ff      	cmp	r0, #255	; 0xff
    51e2:	bfa8      	it	ge
    51e4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    51e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    51e8:	785a      	ldrb	r2, [r3, #1]
    51ea:	f042 0201 	orr.w	r2, r2, #1
    51ee:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51f0:	3408      	adds	r4, #8
    51f2:	e7e8      	b.n	51c6 <z_sys_init_run_level+0xe>
    51f4:	00008cec 	.word	0x00008cec

000051f8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    51f8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    51fa:	4605      	mov	r5, r0
    51fc:	b910      	cbnz	r0, 5204 <z_impl_device_get_binding+0xc>
		return NULL;
    51fe:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5200:	4620      	mov	r0, r4
    5202:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5204:	7803      	ldrb	r3, [r0, #0]
    5206:	2b00      	cmp	r3, #0
    5208:	d0f9      	beq.n	51fe <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    520a:	4c0e      	ldr	r4, [pc, #56]	; (5244 <z_impl_device_get_binding+0x4c>)
    520c:	4e0e      	ldr	r6, [pc, #56]	; (5248 <z_impl_device_get_binding+0x50>)
    520e:	42b4      	cmp	r4, r6
    5210:	d108      	bne.n	5224 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    5212:	4c0c      	ldr	r4, [pc, #48]	; (5244 <z_impl_device_get_binding+0x4c>)
    5214:	42b4      	cmp	r4, r6
    5216:	d0f2      	beq.n	51fe <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5218:	4620      	mov	r0, r4
    521a:	f003 f9f8 	bl	860e <z_device_ready>
    521e:	b950      	cbnz	r0, 5236 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5220:	3418      	adds	r4, #24
    5222:	e7f7      	b.n	5214 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    5224:	4620      	mov	r0, r4
    5226:	f003 f9f2 	bl	860e <z_device_ready>
    522a:	b110      	cbz	r0, 5232 <z_impl_device_get_binding+0x3a>
    522c:	6823      	ldr	r3, [r4, #0]
    522e:	42ab      	cmp	r3, r5
    5230:	d0e6      	beq.n	5200 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5232:	3418      	adds	r4, #24
    5234:	e7eb      	b.n	520e <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5236:	4628      	mov	r0, r5
    5238:	6821      	ldr	r1, [r4, #0]
    523a:	f001 f9d8 	bl	65ee <strcmp>
    523e:	2800      	cmp	r0, #0
    5240:	d1ee      	bne.n	5220 <z_impl_device_get_binding+0x28>
    5242:	e7dd      	b.n	5200 <z_impl_device_get_binding+0x8>
    5244:	00008694 	.word	0x00008694
    5248:	0000870c 	.word	0x0000870c

0000524c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    524c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    524e:	4604      	mov	r4, r0
    5250:	460d      	mov	r5, r1
	__asm__ volatile(
    5252:	f04f 0320 	mov.w	r3, #32
    5256:	f3ef 8611 	mrs	r6, BASEPRI
    525a:	f383 8812 	msr	BASEPRI_MAX, r3
    525e:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5262:	2200      	movs	r2, #0
    5264:	2804      	cmp	r0, #4
    5266:	bf96      	itet	ls
    5268:	4b11      	ldrls	r3, [pc, #68]	; (52b0 <z_fatal_error+0x64>)
    526a:	4b12      	ldrhi	r3, [pc, #72]	; (52b4 <z_fatal_error+0x68>)
    526c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
    5270:	9200      	str	r2, [sp, #0]
    5272:	2145      	movs	r1, #69	; 0x45
    5274:	4602      	mov	r2, r0
    5276:	4810      	ldr	r0, [pc, #64]	; (52b8 <z_fatal_error+0x6c>)
    5278:	f000 fe6c 	bl	5f54 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    527c:	b13d      	cbz	r5, 528e <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    527e:	69eb      	ldr	r3, [r5, #28]
    5280:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5284:	b11b      	cbz	r3, 528e <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    5286:	2145      	movs	r1, #69	; 0x45
    5288:	480c      	ldr	r0, [pc, #48]	; (52bc <z_fatal_error+0x70>)
    528a:	f000 fe63 	bl	5f54 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    528e:	2200      	movs	r2, #0
    5290:	4b0b      	ldr	r3, [pc, #44]	; (52c0 <z_fatal_error+0x74>)
    5292:	2145      	movs	r1, #69	; 0x45
    5294:	480b      	ldr	r0, [pc, #44]	; (52c4 <z_fatal_error+0x78>)
    5296:	f000 fe5d 	bl	5f54 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    529a:	4629      	mov	r1, r5
    529c:	4620      	mov	r0, r4
    529e:	f7fe fe71 	bl	3f84 <k_sys_fatal_error_handler>
	__asm__ volatile(
    52a2:	f386 8811 	msr	BASEPRI, r6
    52a6:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    52aa:	b002      	add	sp, #8
    52ac:	bd70      	pop	{r4, r5, r6, pc}
    52ae:	bf00      	nop
    52b0:	00008d00 	.word	0x00008d00
    52b4:	00009b99 	.word	0x00009b99
    52b8:	00009ba7 	.word	0x00009ba7
    52bc:	00009bd4 	.word	0x00009bd4
    52c0:	00009bfa 	.word	0x00009bfa
    52c4:	00009c02 	.word	0x00009c02

000052c8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    52c8:	2201      	movs	r2, #1
{
    52ca:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    52cc:	4b08      	ldr	r3, [pc, #32]	; (52f0 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    52ce:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    52d0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    52d2:	f7ff ff71 	bl	51b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    52d6:	f003 f9ae 	bl	8636 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    52da:	2003      	movs	r0, #3
    52dc:	f7ff ff6c 	bl	51b8 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    52e0:	f7fb f898 	bl	414 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    52e4:	4a03      	ldr	r2, [pc, #12]	; (52f4 <bg_thread_main+0x2c>)
    52e6:	7b13      	ldrb	r3, [r2, #12]
    52e8:	f023 0301 	bic.w	r3, r3, #1
    52ec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    52ee:	bd08      	pop	{r3, pc}
    52f0:	2000fe51 	.word	0x2000fe51
    52f4:	2000c690 	.word	0x2000c690

000052f8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    52f8:	4802      	ldr	r0, [pc, #8]	; (5304 <z_bss_zero+0xc>)
    52fa:	4a03      	ldr	r2, [pc, #12]	; (5308 <z_bss_zero+0x10>)
    52fc:	2100      	movs	r1, #0
    52fe:	1a12      	subs	r2, r2, r0
    5300:	f001 b9b3 	b.w	666a <memset>
    5304:	2000c670 	.word	0x2000c670
    5308:	2000fe54 	.word	0x2000fe54

0000530c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    530c:	b508      	push	{r3, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    530e:	4b19      	ldr	r3, [pc, #100]	; (5374 <z_cstart+0x68>)
	uint32_t msp =
    5310:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5314:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    5318:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    531c:	2500      	movs	r5, #0
    531e:	23e0      	movs	r3, #224	; 0xe0
    5320:	4c15      	ldr	r4, [pc, #84]	; (5378 <z_cstart+0x6c>)
    5322:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5326:	77e5      	strb	r5, [r4, #31]
    5328:	7625      	strb	r5, [r4, #24]
    532a:	7665      	strb	r5, [r4, #25]
    532c:	76a5      	strb	r5, [r4, #26]
    532e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5332:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5334:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5338:	6263      	str	r3, [r4, #36]	; 0x24
    533a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    533e:	f7fd fd31 	bl	2da4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5342:	f7fd fa87 	bl	2854 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5346:	f04f 33ff 	mov.w	r3, #4294967295
    534a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    534c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    534e:	f7fd feeb 	bl	3128 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5352:	f7fd fdc3 	bl	2edc <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5356:	f003 f959 	bl	860c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    535a:	4628      	mov	r0, r5
    535c:	f7ff ff2c 	bl	51b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5360:	2001      	movs	r0, #1
    5362:	f7ff ff29 	bl	51b8 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    5366:	462b      	mov	r3, r5
    5368:	462a      	mov	r2, r5
    536a:	4629      	mov	r1, r5
    536c:	4803      	ldr	r0, [pc, #12]	; (537c <z_cstart+0x70>)
    536e:	f7fd fb1f 	bl	29b0 <z_arm_switch_to_main_no_multithreading>
    5372:	bf00      	nop
    5374:	2000fe58 	.word	0x2000fe58
    5378:	e000ed00 	.word	0xe000ed00
    537c:	000052c9 	.word	0x000052c9

00005380 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5380:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5382:	4806      	ldr	r0, [pc, #24]	; (539c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5384:	4a06      	ldr	r2, [pc, #24]	; (53a0 <z_data_copy+0x20>)
    5386:	4907      	ldr	r1, [pc, #28]	; (53a4 <z_data_copy+0x24>)
    5388:	1a12      	subs	r2, r2, r0
    538a:	f001 f963 	bl	6654 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    538e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5392:	4a05      	ldr	r2, [pc, #20]	; (53a8 <z_data_copy+0x28>)
    5394:	4905      	ldr	r1, [pc, #20]	; (53ac <z_data_copy+0x2c>)
    5396:	4806      	ldr	r0, [pc, #24]	; (53b0 <z_data_copy+0x30>)
    5398:	f001 b95c 	b.w	6654 <memcpy>
    539c:	2000c500 	.word	0x2000c500
    53a0:	2000c66c 	.word	0x2000c66c
    53a4:	00009c84 	.word	0x00009c84
    53a8:	00000000 	.word	0x00000000
    53ac:	00009c6c 	.word	0x00009c6c
    53b0:	2000c500 	.word	0x2000c500

000053b4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    53b4:	4b03      	ldr	r3, [pc, #12]	; (53c4 <elapsed+0x10>)
    53b6:	681b      	ldr	r3, [r3, #0]
    53b8:	b90b      	cbnz	r3, 53be <elapsed+0xa>
    53ba:	f7fe bdd9 	b.w	3f70 <sys_clock_elapsed>
}
    53be:	2000      	movs	r0, #0
    53c0:	4770      	bx	lr
    53c2:	bf00      	nop
    53c4:	2000e070 	.word	0x2000e070

000053c8 <next_timeout>:
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    53c8:	4b0f      	ldr	r3, [pc, #60]	; (5408 <next_timeout+0x40>)

static int32_t next_timeout(void)
{
    53ca:	b510      	push	{r4, lr}
    53cc:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53ce:	429c      	cmp	r4, r3
    53d0:	d104      	bne.n	53dc <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    53d2:	f7ff ffef 	bl	53b4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    53d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    53da:	e012      	b.n	5402 <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
    53dc:	f7ff ffea 	bl	53b4 <elapsed>
    53e0:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
    53e2:	2c00      	cmp	r4, #0
    53e4:	d0f7      	beq.n	53d6 <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    53e6:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    53ea:	1a40      	subs	r0, r0, r1
    53ec:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    53f0:	2801      	cmp	r0, #1
    53f2:	f173 0200 	sbcs.w	r2, r3, #0
    53f6:	db05      	blt.n	5404 <next_timeout+0x3c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    53f8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    53fc:	f173 0300 	sbcs.w	r3, r3, #0
    5400:	dae9      	bge.n	53d6 <next_timeout+0xe>
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5402:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5404:	2000      	movs	r0, #0
	return ret;
    5406:	e7fc      	b.n	5402 <next_timeout+0x3a>
    5408:	2000c5f0 	.word	0x2000c5f0

0000540c <remove_timeout>:
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    540c:	4a0b      	ldr	r2, [pc, #44]	; (543c <remove_timeout+0x30>)
{
    540e:	b530      	push	{r4, r5, lr}
    5410:	6852      	ldr	r2, [r2, #4]
    5412:	6803      	ldr	r3, [r0, #0]
    5414:	4290      	cmp	r0, r2
    5416:	d009      	beq.n	542c <remove_timeout+0x20>
	if (next(t) != NULL) {
    5418:	b143      	cbz	r3, 542c <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    541a:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    541e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5422:	1912      	adds	r2, r2, r4
    5424:	eb41 0105 	adc.w	r1, r1, r5
    5428:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    542c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    542e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5430:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5432:	2300      	movs	r3, #0
	node->prev = NULL;
    5434:	e9c0 3300 	strd	r3, r3, [r0]
}
    5438:	bd30      	pop	{r4, r5, pc}
    543a:	bf00      	nop
    543c:	2000c5f0 	.word	0x2000c5f0

00005440 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
    5444:	f04f 0320 	mov.w	r3, #32
    5448:	f3ef 8411 	mrs	r4, BASEPRI
    544c:	f383 8812 	msr	BASEPRI_MAX, r3
    5450:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5454:	4e23      	ldr	r6, [pc, #140]	; (54e4 <sys_clock_announce+0xa4>)
	return list->head == list;
    5456:	f8df 8090 	ldr.w	r8, [pc, #144]	; 54e8 <sys_clock_announce+0xa8>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    545a:	4d24      	ldr	r5, [pc, #144]	; (54ec <sys_clock_announce+0xac>)
	announce_remaining = ticks;
    545c:	6030      	str	r0, [r6, #0]
    545e:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5462:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5464:	4540      	cmp	r0, r8
    5466:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    546a:	e9d5 1e00 	ldrd	r1, lr, [r5]
    546e:	d00b      	beq.n	5488 <sys_clock_announce+0x48>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5470:	b150      	cbz	r0, 5488 <sys_clock_announce+0x48>
    5472:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5476:	429a      	cmp	r2, r3
    5478:	eb77 090c 	sbcs.w	r9, r7, ip
    547c:	da16      	bge.n	54ac <sys_clock_announce+0x6c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    547e:	1a9b      	subs	r3, r3, r2
    5480:	eb6c 0c07 	sbc.w	ip, ip, r7
    5484:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5488:	1851      	adds	r1, r2, r1
    548a:	eb4e 0707 	adc.w	r7, lr, r7
    548e:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
    5492:	2500      	movs	r5, #0
    5494:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5496:	f7ff ff97 	bl	53c8 <next_timeout>
    549a:	4629      	mov	r1, r5
    549c:	f7fe fd3a 	bl	3f14 <sys_clock_set_timeout>
	__asm__ volatile(
    54a0:	f384 8811 	msr	BASEPRI, r4
    54a4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    54a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    54ac:	1859      	adds	r1, r3, r1
    54ae:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    54b2:	1ad3      	subs	r3, r2, r3
    54b4:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    54b6:	2200      	movs	r2, #0
    54b8:	2300      	movs	r3, #0
    54ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    54be:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    54c2:	f7ff ffa3 	bl	540c <remove_timeout>
    54c6:	f384 8811 	msr	BASEPRI, r4
    54ca:	f3bf 8f6f 	isb	sy
		t->fn(t);
    54ce:	6883      	ldr	r3, [r0, #8]
    54d0:	4798      	blx	r3
	__asm__ volatile(
    54d2:	f04f 0320 	mov.w	r3, #32
    54d6:	f3ef 8411 	mrs	r4, BASEPRI
    54da:	f383 8812 	msr	BASEPRI_MAX, r3
    54de:	f3bf 8f6f 	isb	sy
	return k;
    54e2:	e7bc      	b.n	545e <sys_clock_announce+0x1e>
    54e4:	2000e070 	.word	0x2000e070
    54e8:	2000c5f0 	.word	0x2000c5f0
    54ec:	2000c710 	.word	0x2000c710

000054f0 <nrf_cc3xx_platform_init_no_rng>:
    54f0:	b510      	push	{r4, lr}
    54f2:	4c0a      	ldr	r4, [pc, #40]	; (551c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    54f4:	6823      	ldr	r3, [r4, #0]
    54f6:	b11b      	cbz	r3, 5500 <nrf_cc3xx_platform_init_no_rng+0x10>
    54f8:	2301      	movs	r3, #1
    54fa:	2000      	movs	r0, #0
    54fc:	6023      	str	r3, [r4, #0]
    54fe:	bd10      	pop	{r4, pc}
    5500:	f000 f852 	bl	55a8 <CC_LibInitNoRng>
    5504:	2800      	cmp	r0, #0
    5506:	d0f7      	beq.n	54f8 <nrf_cc3xx_platform_init_no_rng+0x8>
    5508:	3801      	subs	r0, #1
    550a:	2806      	cmp	r0, #6
    550c:	d803      	bhi.n	5516 <nrf_cc3xx_platform_init_no_rng+0x26>
    550e:	4b04      	ldr	r3, [pc, #16]	; (5520 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5510:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5514:	bd10      	pop	{r4, pc}
    5516:	4803      	ldr	r0, [pc, #12]	; (5524 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5518:	bd10      	pop	{r4, pc}
    551a:	bf00      	nop
    551c:	2000e074 	.word	0x2000e074
    5520:	00008d14 	.word	0x00008d14
    5524:	ffff8ffe 	.word	0xffff8ffe

00005528 <nrf_cc3xx_platform_abort>:
    5528:	f3bf 8f4f 	dsb	sy
    552c:	4905      	ldr	r1, [pc, #20]	; (5544 <nrf_cc3xx_platform_abort+0x1c>)
    552e:	4b06      	ldr	r3, [pc, #24]	; (5548 <nrf_cc3xx_platform_abort+0x20>)
    5530:	68ca      	ldr	r2, [r1, #12]
    5532:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5536:	4313      	orrs	r3, r2
    5538:	60cb      	str	r3, [r1, #12]
    553a:	f3bf 8f4f 	dsb	sy
    553e:	bf00      	nop
    5540:	e7fd      	b.n	553e <nrf_cc3xx_platform_abort+0x16>
    5542:	bf00      	nop
    5544:	e000ed00 	.word	0xe000ed00
    5548:	05fa0004 	.word	0x05fa0004

0000554c <CC_PalAbort>:
    554c:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5550:	2100      	movs	r1, #0
    5552:	b430      	push	{r4, r5}
    5554:	4a06      	ldr	r2, [pc, #24]	; (5570 <CC_PalAbort+0x24>)
    5556:	4d07      	ldr	r5, [pc, #28]	; (5574 <CC_PalAbort+0x28>)
    5558:	4c07      	ldr	r4, [pc, #28]	; (5578 <CC_PalAbort+0x2c>)
    555a:	602b      	str	r3, [r5, #0]
    555c:	6013      	str	r3, [r2, #0]
    555e:	6023      	str	r3, [r4, #0]
    5560:	4a06      	ldr	r2, [pc, #24]	; (557c <CC_PalAbort+0x30>)
    5562:	4c07      	ldr	r4, [pc, #28]	; (5580 <CC_PalAbort+0x34>)
    5564:	60eb      	str	r3, [r5, #12]
    5566:	6863      	ldr	r3, [r4, #4]
    5568:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    556c:	bc30      	pop	{r4, r5}
    556e:	4718      	bx	r3
    5570:	50841404 	.word	0x50841404
    5574:	50841400 	.word	0x50841400
    5578:	50841408 	.word	0x50841408
    557c:	50840000 	.word	0x50840000
    5580:	2000c5f8 	.word	0x2000c5f8

00005584 <nrf_cc3xx_platform_set_abort>:
    5584:	4b02      	ldr	r3, [pc, #8]	; (5590 <nrf_cc3xx_platform_set_abort+0xc>)
    5586:	e9d0 1200 	ldrd	r1, r2, [r0]
    558a:	e9c3 1200 	strd	r1, r2, [r3]
    558e:	4770      	bx	lr
    5590:	2000c5f8 	.word	0x2000c5f8

00005594 <mbedtls_platform_zeroize>:
    5594:	b138      	cbz	r0, 55a6 <mbedtls_platform_zeroize+0x12>
    5596:	b131      	cbz	r1, 55a6 <mbedtls_platform_zeroize+0x12>
    5598:	2200      	movs	r2, #0
    559a:	4401      	add	r1, r0
    559c:	4603      	mov	r3, r0
    559e:	3001      	adds	r0, #1
    55a0:	4288      	cmp	r0, r1
    55a2:	701a      	strb	r2, [r3, #0]
    55a4:	d1fa      	bne.n	559c <mbedtls_platform_zeroize+0x8>
    55a6:	4770      	bx	lr

000055a8 <CC_LibInitNoRng>:
    55a8:	b510      	push	{r4, lr}
    55aa:	f000 f833 	bl	5614 <CC_HalInit>
    55ae:	b120      	cbz	r0, 55ba <CC_LibInitNoRng+0x12>
    55b0:	2403      	movs	r4, #3
    55b2:	f000 f867 	bl	5684 <CC_PalTerminate>
    55b6:	4620      	mov	r0, r4
    55b8:	bd10      	pop	{r4, pc}
    55ba:	f000 f835 	bl	5628 <CC_PalInit>
    55be:	b990      	cbnz	r0, 55e6 <CC_LibInitNoRng+0x3e>
    55c0:	f000 f8b0 	bl	5724 <CC_PalPowerSaveModeSelect>
    55c4:	b990      	cbnz	r0, 55ec <CC_LibInitNoRng+0x44>
    55c6:	4b0f      	ldr	r3, [pc, #60]	; (5604 <CC_LibInitNoRng+0x5c>)
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	0e1b      	lsrs	r3, r3, #24
    55cc:	2bf0      	cmp	r3, #240	; 0xf0
    55ce:	d108      	bne.n	55e2 <CC_LibInitNoRng+0x3a>
    55d0:	4a0d      	ldr	r2, [pc, #52]	; (5608 <CC_LibInitNoRng+0x60>)
    55d2:	4b0e      	ldr	r3, [pc, #56]	; (560c <CC_LibInitNoRng+0x64>)
    55d4:	6812      	ldr	r2, [r2, #0]
    55d6:	429a      	cmp	r2, r3
    55d8:	d00a      	beq.n	55f0 <CC_LibInitNoRng+0x48>
    55da:	2407      	movs	r4, #7
    55dc:	f000 f81c 	bl	5618 <CC_HalTerminate>
    55e0:	e7e7      	b.n	55b2 <CC_LibInitNoRng+0xa>
    55e2:	2406      	movs	r4, #6
    55e4:	e7fa      	b.n	55dc <CC_LibInitNoRng+0x34>
    55e6:	2404      	movs	r4, #4
    55e8:	4620      	mov	r0, r4
    55ea:	bd10      	pop	{r4, pc}
    55ec:	2400      	movs	r4, #0
    55ee:	e7f5      	b.n	55dc <CC_LibInitNoRng+0x34>
    55f0:	2001      	movs	r0, #1
    55f2:	f000 f897 	bl	5724 <CC_PalPowerSaveModeSelect>
    55f6:	4604      	mov	r4, r0
    55f8:	2800      	cmp	r0, #0
    55fa:	d1f7      	bne.n	55ec <CC_LibInitNoRng+0x44>
    55fc:	4b04      	ldr	r3, [pc, #16]	; (5610 <CC_LibInitNoRng+0x68>)
    55fe:	6018      	str	r0, [r3, #0]
    5600:	e7d9      	b.n	55b6 <CC_LibInitNoRng+0xe>
    5602:	bf00      	nop
    5604:	50841928 	.word	0x50841928
    5608:	50841a24 	.word	0x50841a24
    560c:	20e00000 	.word	0x20e00000
    5610:	50841a0c 	.word	0x50841a0c

00005614 <CC_HalInit>:
    5614:	2000      	movs	r0, #0
    5616:	4770      	bx	lr

00005618 <CC_HalTerminate>:
    5618:	2000      	movs	r0, #0
    561a:	4770      	bx	lr

0000561c <CC_HalMaskInterrupt>:
    561c:	4b01      	ldr	r3, [pc, #4]	; (5624 <CC_HalMaskInterrupt+0x8>)
    561e:	6018      	str	r0, [r3, #0]
    5620:	4770      	bx	lr
    5622:	bf00      	nop
    5624:	50841a04 	.word	0x50841a04

00005628 <CC_PalInit>:
    5628:	b510      	push	{r4, lr}
    562a:	4811      	ldr	r0, [pc, #68]	; (5670 <CC_PalInit+0x48>)
    562c:	f000 f848 	bl	56c0 <CC_PalMutexCreate>
    5630:	b100      	cbz	r0, 5634 <CC_PalInit+0xc>
    5632:	bd10      	pop	{r4, pc}
    5634:	480f      	ldr	r0, [pc, #60]	; (5674 <CC_PalInit+0x4c>)
    5636:	f000 f843 	bl	56c0 <CC_PalMutexCreate>
    563a:	2800      	cmp	r0, #0
    563c:	d1f9      	bne.n	5632 <CC_PalInit+0xa>
    563e:	4c0e      	ldr	r4, [pc, #56]	; (5678 <CC_PalInit+0x50>)
    5640:	4620      	mov	r0, r4
    5642:	f000 f83d 	bl	56c0 <CC_PalMutexCreate>
    5646:	2800      	cmp	r0, #0
    5648:	d1f3      	bne.n	5632 <CC_PalInit+0xa>
    564a:	4b0c      	ldr	r3, [pc, #48]	; (567c <CC_PalInit+0x54>)
    564c:	480c      	ldr	r0, [pc, #48]	; (5680 <CC_PalInit+0x58>)
    564e:	601c      	str	r4, [r3, #0]
    5650:	f000 f836 	bl	56c0 <CC_PalMutexCreate>
    5654:	4601      	mov	r1, r0
    5656:	2800      	cmp	r0, #0
    5658:	d1eb      	bne.n	5632 <CC_PalInit+0xa>
    565a:	f000 f82d 	bl	56b8 <CC_PalDmaInit>
    565e:	4604      	mov	r4, r0
    5660:	b108      	cbz	r0, 5666 <CC_PalInit+0x3e>
    5662:	4620      	mov	r0, r4
    5664:	bd10      	pop	{r4, pc}
    5666:	f000 f83f 	bl	56e8 <CC_PalPowerSaveModeInit>
    566a:	4620      	mov	r0, r4
    566c:	e7fa      	b.n	5664 <CC_PalInit+0x3c>
    566e:	bf00      	nop
    5670:	2000c60c 	.word	0x2000c60c
    5674:	2000c600 	.word	0x2000c600
    5678:	2000c608 	.word	0x2000c608
    567c:	2000c610 	.word	0x2000c610
    5680:	2000c604 	.word	0x2000c604

00005684 <CC_PalTerminate>:
    5684:	b508      	push	{r3, lr}
    5686:	4808      	ldr	r0, [pc, #32]	; (56a8 <CC_PalTerminate+0x24>)
    5688:	f000 f824 	bl	56d4 <CC_PalMutexDestroy>
    568c:	4807      	ldr	r0, [pc, #28]	; (56ac <CC_PalTerminate+0x28>)
    568e:	f000 f821 	bl	56d4 <CC_PalMutexDestroy>
    5692:	4807      	ldr	r0, [pc, #28]	; (56b0 <CC_PalTerminate+0x2c>)
    5694:	f000 f81e 	bl	56d4 <CC_PalMutexDestroy>
    5698:	4806      	ldr	r0, [pc, #24]	; (56b4 <CC_PalTerminate+0x30>)
    569a:	f000 f81b 	bl	56d4 <CC_PalMutexDestroy>
    569e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    56a2:	f000 b80b 	b.w	56bc <CC_PalDmaTerminate>
    56a6:	bf00      	nop
    56a8:	2000c60c 	.word	0x2000c60c
    56ac:	2000c600 	.word	0x2000c600
    56b0:	2000c608 	.word	0x2000c608
    56b4:	2000c604 	.word	0x2000c604

000056b8 <CC_PalDmaInit>:
    56b8:	2000      	movs	r0, #0
    56ba:	4770      	bx	lr

000056bc <CC_PalDmaTerminate>:
    56bc:	4770      	bx	lr
    56be:	bf00      	nop

000056c0 <CC_PalMutexCreate>:
    56c0:	b508      	push	{r3, lr}
    56c2:	4b03      	ldr	r3, [pc, #12]	; (56d0 <CC_PalMutexCreate+0x10>)
    56c4:	6802      	ldr	r2, [r0, #0]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	6810      	ldr	r0, [r2, #0]
    56ca:	4798      	blx	r3
    56cc:	2000      	movs	r0, #0
    56ce:	bd08      	pop	{r3, pc}
    56d0:	2000c61c 	.word	0x2000c61c

000056d4 <CC_PalMutexDestroy>:
    56d4:	b508      	push	{r3, lr}
    56d6:	4b03      	ldr	r3, [pc, #12]	; (56e4 <CC_PalMutexDestroy+0x10>)
    56d8:	6802      	ldr	r2, [r0, #0]
    56da:	685b      	ldr	r3, [r3, #4]
    56dc:	6810      	ldr	r0, [r2, #0]
    56de:	4798      	blx	r3
    56e0:	2000      	movs	r0, #0
    56e2:	bd08      	pop	{r3, pc}
    56e4:	2000c61c 	.word	0x2000c61c

000056e8 <CC_PalPowerSaveModeInit>:
    56e8:	b570      	push	{r4, r5, r6, lr}
    56ea:	4c09      	ldr	r4, [pc, #36]	; (5710 <CC_PalPowerSaveModeInit+0x28>)
    56ec:	4d09      	ldr	r5, [pc, #36]	; (5714 <CC_PalPowerSaveModeInit+0x2c>)
    56ee:	6920      	ldr	r0, [r4, #16]
    56f0:	68ab      	ldr	r3, [r5, #8]
    56f2:	4798      	blx	r3
    56f4:	b118      	cbz	r0, 56fe <CC_PalPowerSaveModeInit+0x16>
    56f6:	4b08      	ldr	r3, [pc, #32]	; (5718 <CC_PalPowerSaveModeInit+0x30>)
    56f8:	4808      	ldr	r0, [pc, #32]	; (571c <CC_PalPowerSaveModeInit+0x34>)
    56fa:	685b      	ldr	r3, [r3, #4]
    56fc:	4798      	blx	r3
    56fe:	2100      	movs	r1, #0
    5700:	4a07      	ldr	r2, [pc, #28]	; (5720 <CC_PalPowerSaveModeInit+0x38>)
    5702:	68eb      	ldr	r3, [r5, #12]
    5704:	6011      	str	r1, [r2, #0]
    5706:	6920      	ldr	r0, [r4, #16]
    5708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    570c:	4718      	bx	r3
    570e:	bf00      	nop
    5710:	2000c62c 	.word	0x2000c62c
    5714:	2000c61c 	.word	0x2000c61c
    5718:	2000c5f8 	.word	0x2000c5f8
    571c:	00008d30 	.word	0x00008d30
    5720:	2000e078 	.word	0x2000e078

00005724 <CC_PalPowerSaveModeSelect>:
    5724:	b570      	push	{r4, r5, r6, lr}
    5726:	4d1a      	ldr	r5, [pc, #104]	; (5790 <CC_PalPowerSaveModeSelect+0x6c>)
    5728:	4e1a      	ldr	r6, [pc, #104]	; (5794 <CC_PalPowerSaveModeSelect+0x70>)
    572a:	4604      	mov	r4, r0
    572c:	68b2      	ldr	r2, [r6, #8]
    572e:	6928      	ldr	r0, [r5, #16]
    5730:	4790      	blx	r2
    5732:	b9f0      	cbnz	r0, 5772 <CC_PalPowerSaveModeSelect+0x4e>
    5734:	b15c      	cbz	r4, 574e <CC_PalPowerSaveModeSelect+0x2a>
    5736:	4c18      	ldr	r4, [pc, #96]	; (5798 <CC_PalPowerSaveModeSelect+0x74>)
    5738:	6823      	ldr	r3, [r4, #0]
    573a:	b1ab      	cbz	r3, 5768 <CC_PalPowerSaveModeSelect+0x44>
    573c:	2b01      	cmp	r3, #1
    573e:	d01a      	beq.n	5776 <CC_PalPowerSaveModeSelect+0x52>
    5740:	3b01      	subs	r3, #1
    5742:	6023      	str	r3, [r4, #0]
    5744:	6928      	ldr	r0, [r5, #16]
    5746:	68f3      	ldr	r3, [r6, #12]
    5748:	4798      	blx	r3
    574a:	2000      	movs	r0, #0
    574c:	bd70      	pop	{r4, r5, r6, pc}
    574e:	4c12      	ldr	r4, [pc, #72]	; (5798 <CC_PalPowerSaveModeSelect+0x74>)
    5750:	6821      	ldr	r1, [r4, #0]
    5752:	b939      	cbnz	r1, 5764 <CC_PalPowerSaveModeSelect+0x40>
    5754:	2001      	movs	r0, #1
    5756:	4b11      	ldr	r3, [pc, #68]	; (579c <CC_PalPowerSaveModeSelect+0x78>)
    5758:	4a11      	ldr	r2, [pc, #68]	; (57a0 <CC_PalPowerSaveModeSelect+0x7c>)
    575a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    575e:	6813      	ldr	r3, [r2, #0]
    5760:	2b00      	cmp	r3, #0
    5762:	d1fc      	bne.n	575e <CC_PalPowerSaveModeSelect+0x3a>
    5764:	3101      	adds	r1, #1
    5766:	6021      	str	r1, [r4, #0]
    5768:	68f3      	ldr	r3, [r6, #12]
    576a:	6928      	ldr	r0, [r5, #16]
    576c:	4798      	blx	r3
    576e:	2000      	movs	r0, #0
    5770:	bd70      	pop	{r4, r5, r6, pc}
    5772:	480c      	ldr	r0, [pc, #48]	; (57a4 <CC_PalPowerSaveModeSelect+0x80>)
    5774:	bd70      	pop	{r4, r5, r6, pc}
    5776:	4a0a      	ldr	r2, [pc, #40]	; (57a0 <CC_PalPowerSaveModeSelect+0x7c>)
    5778:	6813      	ldr	r3, [r2, #0]
    577a:	2b00      	cmp	r3, #0
    577c:	d1fc      	bne.n	5778 <CC_PalPowerSaveModeSelect+0x54>
    577e:	4a07      	ldr	r2, [pc, #28]	; (579c <CC_PalPowerSaveModeSelect+0x78>)
    5780:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5784:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5788:	f7ff ff48 	bl	561c <CC_HalMaskInterrupt>
    578c:	6823      	ldr	r3, [r4, #0]
    578e:	e7d7      	b.n	5740 <CC_PalPowerSaveModeSelect+0x1c>
    5790:	2000c62c 	.word	0x2000c62c
    5794:	2000c61c 	.word	0x2000c61c
    5798:	2000e078 	.word	0x2000e078
    579c:	50840000 	.word	0x50840000
    57a0:	50841910 	.word	0x50841910
    57a4:	ffff8fe9 	.word	0xffff8fe9

000057a8 <mutex_free>:
    57a8:	b510      	push	{r4, lr}
    57aa:	4604      	mov	r4, r0
    57ac:	b130      	cbz	r0, 57bc <mutex_free+0x14>
    57ae:	6863      	ldr	r3, [r4, #4]
    57b0:	06db      	lsls	r3, r3, #27
    57b2:	d502      	bpl.n	57ba <mutex_free+0x12>
    57b4:	2300      	movs	r3, #0
    57b6:	6023      	str	r3, [r4, #0]
    57b8:	6063      	str	r3, [r4, #4]
    57ba:	bd10      	pop	{r4, pc}
    57bc:	4b02      	ldr	r3, [pc, #8]	; (57c8 <mutex_free+0x20>)
    57be:	4803      	ldr	r0, [pc, #12]	; (57cc <mutex_free+0x24>)
    57c0:	685b      	ldr	r3, [r3, #4]
    57c2:	4798      	blx	r3
    57c4:	e7f3      	b.n	57ae <mutex_free+0x6>
    57c6:	bf00      	nop
    57c8:	2000c5f8 	.word	0x2000c5f8
    57cc:	00008d50 	.word	0x00008d50

000057d0 <mutex_unlock>:
    57d0:	b168      	cbz	r0, 57ee <mutex_unlock+0x1e>
    57d2:	6843      	ldr	r3, [r0, #4]
    57d4:	b13b      	cbz	r3, 57e6 <mutex_unlock+0x16>
    57d6:	06db      	lsls	r3, r3, #27
    57d8:	d507      	bpl.n	57ea <mutex_unlock+0x1a>
    57da:	f3bf 8f5f 	dmb	sy
    57de:	2300      	movs	r3, #0
    57e0:	6003      	str	r3, [r0, #0]
    57e2:	4618      	mov	r0, r3
    57e4:	4770      	bx	lr
    57e6:	4803      	ldr	r0, [pc, #12]	; (57f4 <mutex_unlock+0x24>)
    57e8:	4770      	bx	lr
    57ea:	4803      	ldr	r0, [pc, #12]	; (57f8 <mutex_unlock+0x28>)
    57ec:	4770      	bx	lr
    57ee:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    57f2:	4770      	bx	lr
    57f4:	ffff8fea 	.word	0xffff8fea
    57f8:	ffff8fe9 	.word	0xffff8fe9

000057fc <mutex_init>:
    57fc:	b510      	push	{r4, lr}
    57fe:	4604      	mov	r4, r0
    5800:	b120      	cbz	r0, 580c <mutex_init+0x10>
    5802:	2200      	movs	r2, #0
    5804:	2311      	movs	r3, #17
    5806:	6022      	str	r2, [r4, #0]
    5808:	6063      	str	r3, [r4, #4]
    580a:	bd10      	pop	{r4, pc}
    580c:	4801      	ldr	r0, [pc, #4]	; (5814 <mutex_init+0x18>)
    580e:	f7ff fe9d 	bl	554c <CC_PalAbort>
    5812:	e7f6      	b.n	5802 <mutex_init+0x6>
    5814:	00008d78 	.word	0x00008d78

00005818 <mutex_lock>:
    5818:	b1a0      	cbz	r0, 5844 <mutex_lock+0x2c>
    581a:	6843      	ldr	r3, [r0, #4]
    581c:	b183      	cbz	r3, 5840 <mutex_lock+0x28>
    581e:	06db      	lsls	r3, r3, #27
    5820:	d50c      	bpl.n	583c <mutex_lock+0x24>
    5822:	2201      	movs	r2, #1
    5824:	e8d0 3fef 	ldaex	r3, [r0]
    5828:	e8c0 2fe1 	stlex	r1, r2, [r0]
    582c:	2900      	cmp	r1, #0
    582e:	d1f9      	bne.n	5824 <mutex_lock+0xc>
    5830:	2b01      	cmp	r3, #1
    5832:	d0f7      	beq.n	5824 <mutex_lock+0xc>
    5834:	f3bf 8f5f 	dmb	sy
    5838:	2000      	movs	r0, #0
    583a:	4770      	bx	lr
    583c:	4803      	ldr	r0, [pc, #12]	; (584c <mutex_lock+0x34>)
    583e:	4770      	bx	lr
    5840:	4803      	ldr	r0, [pc, #12]	; (5850 <mutex_lock+0x38>)
    5842:	4770      	bx	lr
    5844:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5848:	4770      	bx	lr
    584a:	bf00      	nop
    584c:	ffff8fe9 	.word	0xffff8fe9
    5850:	ffff8fea 	.word	0xffff8fea

00005854 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5854:	4770      	bx	lr

00005856 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    5856:	b129      	cbz	r1, 5864 <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    5858:	2901      	cmp	r1, #1
    585a:	bf0c      	ite	eq
    585c:	2007      	moveq	r0, #7
    585e:	f06f 0015 	mvnne.w	r0, #21
    5862:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5864:	2002      	movs	r0, #2
}
    5866:	4770      	bx	lr

00005868 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    5868:	2000      	movs	r0, #0
    586a:	4770      	bx	lr

0000586c <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    586c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5870:	460e      	mov	r6, r1
    5872:	4617      	mov	r7, r2
    5874:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5876:	4604      	mov	r4, r0
    5878:	b928      	cbnz	r0, 5886 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    587a:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    587e:	4640      	mov	r0, r8
    5880:	b003      	add	sp, #12
    5882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5886:	2900      	cmp	r1, #0
    5888:	d0f7      	beq.n	587a <bootutil_tlv_iter_begin+0xe>
    588a:	2a00      	cmp	r2, #0
    588c:	d0f5      	beq.n	587a <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    588e:	68cb      	ldr	r3, [r1, #12]
    5890:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5892:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5894:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5896:	2304      	movs	r3, #4
    5898:	4629      	mov	r1, r5
    589a:	eb0d 0203 	add.w	r2, sp, r3
    589e:	f000 fb67 	bl	5f70 <flash_area_read>
    58a2:	4680      	mov	r8, r0
    58a4:	2800      	cmp	r0, #0
    58a6:	d1e8      	bne.n	587a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    58a8:	f646 1208 	movw	r2, #26888	; 0x6908
    58ac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    58b0:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    58b2:	4291      	cmp	r1, r2
    58b4:	d123      	bne.n	58fe <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    58b6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    58ba:	4299      	cmp	r1, r3
    58bc:	d1dd      	bne.n	587a <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    58be:	2304      	movs	r3, #4
    58c0:	4638      	mov	r0, r7
    58c2:	eb0d 0203 	add.w	r2, sp, r3
    58c6:	4429      	add	r1, r5
    58c8:	f000 fb52 	bl	5f70 <flash_area_read>
    58cc:	2800      	cmp	r0, #0
    58ce:	d1d4      	bne.n	587a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    58d0:	f646 1307 	movw	r3, #26887	; 0x6907
    58d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    58d8:	429a      	cmp	r2, r3
    58da:	d1ce      	bne.n	587a <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    58dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    58e4:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    58e6:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    58e8:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    58ec:	442b      	add	r3, r5
    58ee:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    58f0:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58f2:	4413      	add	r3, r2
    it->type = type;
    58f4:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58f8:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    58fa:	6125      	str	r5, [r4, #16]
    return 0;
    58fc:	e7bf      	b.n	587e <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    58fe:	2b00      	cmp	r3, #0
    5900:	d0e6      	beq.n	58d0 <bootutil_tlv_iter_begin+0x64>
    5902:	e7ba      	b.n	587a <bootutil_tlv_iter_begin+0xe>

00005904 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5908:	460f      	mov	r7, r1
    590a:	4690      	mov	r8, r2
    590c:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    590e:	4604      	mov	r4, r0
    5910:	b920      	cbnz	r0, 591c <bootutil_tlv_iter_next+0x18>
        return -1;
    5912:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5916:	b003      	add	sp, #12
    5918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    591c:	6803      	ldr	r3, [r0, #0]
    591e:	2b00      	cmp	r3, #0
    5920:	d0f7      	beq.n	5912 <bootutil_tlv_iter_next+0xe>
    5922:	6843      	ldr	r3, [r0, #4]
    5924:	2b00      	cmp	r3, #0
    5926:	d0f4      	beq.n	5912 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5928:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    592c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5930:	429a      	cmp	r2, r3
    5932:	d216      	bcs.n	5962 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5934:	6823      	ldr	r3, [r4, #0]
    5936:	895b      	ldrh	r3, [r3, #10]
    5938:	b123      	cbz	r3, 5944 <bootutil_tlv_iter_next+0x40>
    593a:	68e3      	ldr	r3, [r4, #12]
    593c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    593e:	bf04      	itt	eq
    5940:	3304      	addeq	r3, #4
    5942:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5944:	2304      	movs	r3, #4
    5946:	6921      	ldr	r1, [r4, #16]
    5948:	6860      	ldr	r0, [r4, #4]
    594a:	eb0d 0203 	add.w	r2, sp, r3
    594e:	f000 fb0f 	bl	5f70 <flash_area_read>
        if (rc) {
    5952:	2800      	cmp	r0, #0
    5954:	d1dd      	bne.n	5912 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5956:	7aa3      	ldrb	r3, [r4, #10]
    5958:	6925      	ldr	r5, [r4, #16]
    595a:	b123      	cbz	r3, 5966 <bootutil_tlv_iter_next+0x62>
    595c:	68e3      	ldr	r3, [r4, #12]
    595e:	42ab      	cmp	r3, r5
    5960:	d801      	bhi.n	5966 <bootutil_tlv_iter_next+0x62>
            return 1;
    5962:	2001      	movs	r0, #1
    5964:	e7d7      	b.n	5916 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5966:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5968:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    596c:	4549      	cmp	r1, r9
    596e:	f102 0304 	add.w	r3, r2, #4
    5972:	d003      	beq.n	597c <bootutil_tlv_iter_next+0x78>
    5974:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5978:	458c      	cmp	ip, r1
    597a:	d10b      	bne.n	5994 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    597c:	b116      	cbz	r6, 5984 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    597e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5982:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5984:	3504      	adds	r5, #4
    5986:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5988:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    598c:	6922      	ldr	r2, [r4, #16]
    598e:	441a      	add	r2, r3
    5990:	6122      	str	r2, [r4, #16]
            return 0;
    5992:	e7c0      	b.n	5916 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5994:	442b      	add	r3, r5
    5996:	6123      	str	r3, [r4, #16]
    5998:	e7c8      	b.n	592c <bootutil_tlv_iter_next+0x28>

0000599a <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    599a:	f000 be34 	b.w	6606 <memcmp>

0000599e <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    599e:	f44f 7340 	mov.w	r3, #768	; 0x300
    59a2:	4358      	muls	r0, r3
}
    59a4:	3030      	adds	r0, #48	; 0x30
    59a6:	4770      	bx	lr

000059a8 <boot_status_entries>:
	return fa->fa_id;
    59a8:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    59aa:	2b02      	cmp	r3, #2
    59ac:	d006      	beq.n	59bc <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    59ae:	2b07      	cmp	r3, #7
    59b0:	bf14      	ite	ne
    59b2:	f04f 30ff 	movne.w	r0, #4294967295
    59b6:	f44f 7040 	moveq.w	r0, #768	; 0x300
    59ba:	4770      	bx	lr
    59bc:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    59c0:	4770      	bx	lr

000059c2 <boot_status_off>:
{
    59c2:	b510      	push	{r4, lr}
    59c4:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    59c6:	f000 fb51 	bl	606c <flash_area_align>
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    59ca:	b2c3      	uxtb	r3, r0
}
    59cc:	f44f 7040 	mov.w	r0, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    59d0:	68a2      	ldr	r2, [r4, #8]
    59d2:	3a30      	subs	r2, #48	; 0x30
}
    59d4:	fb00 2013 	mls	r0, r0, r3, r2
    59d8:	bd10      	pop	{r4, pc}

000059da <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    59da:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    59dc:	2201      	movs	r2, #1
    59de:	3920      	subs	r1, #32
    59e0:	f001 b9a8 	b.w	6d34 <boot_write_trailer_flag>

000059e4 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    59e4:	b513      	push	{r0, r1, r4, lr}
    59e6:	4604      	mov	r4, r0
    59e8:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    59ea:	f001 f935 	bl	6c58 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    59ee:	2304      	movs	r3, #4
    59f0:	f1a0 0108 	sub.w	r1, r0, #8
    59f4:	eb0d 0203 	add.w	r2, sp, r3
    59f8:	4620      	mov	r0, r4
    59fa:	f001 f96d 	bl	6cd8 <boot_write_trailer>
}
    59fe:	b002      	add	sp, #8
    5a00:	bd10      	pop	{r4, pc}

00005a02 <boot_read_image_headers>:
{
    5a02:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a04:	4613      	mov	r3, r2
{
    5a06:	460e      	mov	r6, r1
    5a08:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a0a:	2100      	movs	r1, #0
    5a0c:	4602      	mov	r2, r0
{
    5a0e:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a10:	f7fb fa28 	bl	e64 <boot_read_image_header>
        if (rc != 0) {
    5a14:	b950      	cbnz	r0, 5a2c <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a16:	462b      	mov	r3, r5
    5a18:	2101      	movs	r1, #1
    5a1a:	4620      	mov	r0, r4
    5a1c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    5a20:	f7fb fa20 	bl	e64 <boot_read_image_header>
        if (rc != 0) {
    5a24:	b110      	cbz	r0, 5a2c <boot_read_image_headers+0x2a>
                return 0;
    5a26:	2e00      	cmp	r6, #0
    5a28:	bf08      	it	eq
    5a2a:	2000      	moveq	r0, #0
}
    5a2c:	bd70      	pop	{r4, r5, r6, pc}

00005a2e <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5a30:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5a32:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5a34:	460d      	mov	r5, r1
    5a36:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5a38:	f7ff ff0d 	bl	5856 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5a3c:	4669      	mov	r1, sp
    5a3e:	b2c0      	uxtb	r0, r0
    5a40:	f7fc f98e 	bl	1d60 <flash_area_open>
    if (rc != 0) {
    5a44:	bb30      	cbnz	r0, 5a94 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5a46:	232c      	movs	r3, #44	; 0x2c
    5a48:	fb03 4405 	mla	r4, r3, r5, r4
    5a4c:	68e3      	ldr	r3, [r4, #12]
    5a4e:	8925      	ldrh	r5, [r4, #8]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5a50:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5a52:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5a54:	2304      	movs	r3, #4
    5a56:	4629      	mov	r1, r5
    5a58:	eb0d 0203 	add.w	r2, sp, r3
    5a5c:	f000 fa88 	bl	5f70 <flash_area_read>
    5a60:	b9c0      	cbnz	r0, 5a94 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a62:	f646 1308 	movw	r3, #26888	; 0x6908
    5a66:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5a6a:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a6c:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5a6e:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a70:	d115      	bne.n	5a9e <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    5a72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a76:	429c      	cmp	r4, r3
    5a78:	d10c      	bne.n	5a94 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5a7a:	2304      	movs	r3, #4
    5a7c:	1961      	adds	r1, r4, r5
    5a7e:	eb0d 0203 	add.w	r2, sp, r3
    5a82:	f000 fa75 	bl	5f70 <flash_area_read>
    5a86:	b928      	cbnz	r0, 5a94 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5a88:	f646 1307 	movw	r3, #26887	; 0x6907
    5a8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5a90:	429a      	cmp	r2, r3
    5a92:	d007      	beq.n	5aa4 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    5a94:	9800      	ldr	r0, [sp, #0]
    5a96:	f000 fa6a 	bl	5f6e <flash_area_close>
}
    5a9a:	b002      	add	sp, #8
    5a9c:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    5a9e:	2c00      	cmp	r4, #0
    5aa0:	d0f2      	beq.n	5a88 <boot_read_image_size.constprop.0.isra.0+0x5a>
    5aa2:	e7f7      	b.n	5a94 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5aa4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5aa8:	4421      	add	r1, r4
    5aaa:	4429      	add	r1, r5
    5aac:	6031      	str	r1, [r6, #0]
    rc = 0;
    5aae:	e7f1      	b.n	5a94 <boot_read_image_size.constprop.0.isra.0+0x66>

00005ab0 <boot_read_sectors>:
{
    5ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5ab2:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    5ab6:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ab8:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5aba:	a901      	add	r1, sp, #4
    5abc:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5abe:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ac0:	f7fc f96e 	bl	1da0 <flash_area_get_sectors>
    if (rc != 0) {
    5ac4:	b958      	cbnz	r0, 5ade <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    5ac6:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ac8:	2007      	movs	r0, #7
    5aca:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5acc:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ace:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5ad0:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ad2:	f7fc f965 	bl	1da0 <flash_area_get_sectors>
    if (rc != 0) {
    5ad6:	4605      	mov	r5, r0
    5ad8:	b128      	cbz	r0, 5ae6 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    5ada:	2509      	movs	r5, #9
    5adc:	e000      	b.n	5ae0 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    5ade:	2501      	movs	r5, #1
}
    5ae0:	4628      	mov	r0, r5
    5ae2:	b003      	add	sp, #12
    5ae4:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5ae6:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5ae8:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5aea:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5aec:	f000 fabe 	bl	606c <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5af0:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5af2:	e7f5      	b.n	5ae0 <boot_read_sectors+0x30>

00005af4 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5af4:	2301      	movs	r3, #1
    5af6:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5af8:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5afc:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5afe:	2300      	movs	r3, #0
    bs->source = 0;
    5b00:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5b04:	4770      	bx	lr

00005b06 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5b06:	7943      	ldrb	r3, [r0, #5]
    5b08:	2b01      	cmp	r3, #1
    5b0a:	d107      	bne.n	5b1c <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5b0c:	6803      	ldr	r3, [r0, #0]
    5b0e:	2b01      	cmp	r3, #1
    5b10:	d104      	bne.n	5b1c <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5b12:	7900      	ldrb	r0, [r0, #4]
    5b14:	1e43      	subs	r3, r0, #1
    5b16:	4258      	negs	r0, r3
    5b18:	4158      	adcs	r0, r3
    5b1a:	4770      	bx	lr
    5b1c:	2000      	movs	r0, #0
}
    5b1e:	4770      	bx	lr

00005b20 <boot_write_status>:
{
    5b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5b22:	4606      	mov	r6, r0
    5b24:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5b26:	2002      	movs	r0, #2
    5b28:	a901      	add	r1, sp, #4
    5b2a:	f7fc f919 	bl	1d60 <flash_area_open>
    if (rc != 0) {
    5b2e:	bb38      	cbnz	r0, 5b80 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5b30:	9801      	ldr	r0, [sp, #4]
    5b32:	f7ff ff46 	bl	59c2 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5b36:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5b38:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5b3a:	4628      	mov	r0, r5
    5b3c:	f000 f8e5 	bl	5d0a <boot_status_internal_off>
    off = boot_status_off(fap) +
    5b40:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5b42:	9801      	ldr	r0, [sp, #4]
    5b44:	f000 fa92 	bl	606c <flash_area_align>
    5b48:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5b4a:	9801      	ldr	r0, [sp, #4]
    5b4c:	f000 fa97 	bl	607e <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5b50:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5b52:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5b54:	eb0d 0002 	add.w	r0, sp, r2
    5b58:	f000 fd87 	bl	666a <memset>
    buf[0] = bs->state;
    5b5c:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5b5e:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5b60:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    5b64:	9801      	ldr	r0, [sp, #4]
    5b66:	b2f3      	uxtb	r3, r6
    5b68:	aa02      	add	r2, sp, #8
    5b6a:	f000 fa1d 	bl	5fa8 <flash_area_write>
    if (rc != 0) {
    5b6e:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5b70:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    5b72:	bf18      	it	ne
    5b74:	2401      	movne	r4, #1
    flash_area_close(fap);
    5b76:	f000 f9fa 	bl	5f6e <flash_area_close>
}
    5b7a:	4620      	mov	r0, r4
    5b7c:	b004      	add	sp, #16
    5b7e:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5b80:	2401      	movs	r4, #1
    5b82:	e7fa      	b.n	5b7a <boot_write_status+0x5a>

00005b84 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5b84:	f000 ba43 	b.w	600e <flash_area_erase>

00005b88 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b8c:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5b8e:	2100      	movs	r1, #0
{
    5b90:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5b92:	4608      	mov	r0, r1
    5b94:	f7ff fe5f 	bl	5856 <flash_area_id_from_multi_image_slot>
    5b98:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5b9a:	2101      	movs	r1, #1
    5b9c:	2000      	movs	r0, #0
    5b9e:	f7ff fe5a 	bl	5856 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5ba2:	7833      	ldrb	r3, [r6, #0]
    5ba4:	429c      	cmp	r4, r3
    5ba6:	d021      	beq.n	5bec <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5ba8:	4298      	cmp	r0, r3
    5baa:	d121      	bne.n	5bf0 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5bac:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    5bae:	232c      	movs	r3, #44	; 0x2c
    5bb0:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5bb4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5bb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5bb8:	f7ff fef1 	bl	599e <boot_trailer_sz>
    total_sz = 0;
    5bbc:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5bc0:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5bc2:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5bc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5bc6:	4630      	mov	r0, r6
    5bc8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5bcc:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    5bd0:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5bd4:	681b      	ldr	r3, [r3, #0]
    5bd6:	464a      	mov	r2, r9
    5bd8:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5bda:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5bdc:	f7ff ffd2 	bl	5b84 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5be0:	45b8      	cmp	r8, r7
        sector--;
    5be2:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    5be6:	d3ed      	bcc.n	5bc4 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5bec:	2500      	movs	r5, #0
    5bee:	e7de      	b.n	5bae <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5bf0:	2001      	movs	r0, #1
    5bf2:	e7f9      	b.n	5be8 <swap_erase_trailer_sectors+0x60>

00005bf4 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5bf6:	4615      	mov	r5, r2
    5bf8:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5bfa:	2007      	movs	r0, #7
    5bfc:	4669      	mov	r1, sp
    5bfe:	f001 f8ac 	bl	6d5a <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5c02:	79e9      	ldrb	r1, [r5, #7]
    5c04:	2901      	cmp	r1, #1
    5c06:	d003      	beq.n	5c10 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5c08:	2200      	movs	r2, #0
    5c0a:	4620      	mov	r0, r4
    5c0c:	f001 f8b9 	bl	6d82 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5c10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c14:	2b01      	cmp	r3, #1
    5c16:	d102      	bne.n	5c1e <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5c18:	4620      	mov	r0, r4
    5c1a:	f001 f895 	bl	6d48 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5c1e:	68a9      	ldr	r1, [r5, #8]
    5c20:	4620      	mov	r0, r4
    5c22:	f7ff fedf 	bl	59e4 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5c26:	4620      	mov	r0, r4
    5c28:	f7fe f9b6 	bl	3f98 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5c2c:	2000      	movs	r0, #0
    5c2e:	b003      	add	sp, #12
    5c30:	bd30      	pop	{r4, r5, pc}

00005c32 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5c34:	460d      	mov	r5, r1
    5c36:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5c38:	f7fb f9fe 	bl	1038 <swap_status_source>
    5c3c:	4604      	mov	r4, r0
    5c3e:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5c40:	b350      	cbz	r0, 5c98 <swap_read_status+0x66>
    5c42:	2802      	cmp	r0, #2
    5c44:	d12d      	bne.n	5ca2 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5c46:	a901      	add	r1, sp, #4
    5c48:	f7fc f88a 	bl	1d60 <flash_area_open>
    if (rc != 0) {
    5c4c:	bb58      	cbnz	r0, 5ca6 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5c4e:	462a      	mov	r2, r5
    5c50:	4631      	mov	r1, r6
    5c52:	9801      	ldr	r0, [sp, #4]
    5c54:	f7fb f954 	bl	f00 <swap_read_status_bytes>
    if (rc == 0) {
    5c58:	4604      	mov	r4, r0
    5c5a:	b9d0      	cbnz	r0, 5c92 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    5c5c:	9801      	ldr	r0, [sp, #4]
    5c5e:	f000 fffb 	bl	6c58 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5c62:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5c64:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5c66:	f10d 0203 	add.w	r2, sp, #3
    5c6a:	9801      	ldr	r0, [sp, #4]
    5c6c:	f000 f980 	bl	5f70 <flash_area_read>
        if (rc != 0) {
    5c70:	4604      	mov	r4, r0
    5c72:	b9a0      	cbnz	r0, 5c9e <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5c74:	2201      	movs	r2, #1
    5c76:	9801      	ldr	r0, [sp, #4]
    5c78:	f10d 0103 	add.w	r1, sp, #3
    5c7c:	f000 fffd 	bl	6c7a <bootutil_buffer_is_erased>
    5c80:	b110      	cbz	r0, 5c88 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5c82:	2301      	movs	r3, #1
    5c84:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5c88:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c8c:	f003 030f 	and.w	r3, r3, #15
    5c90:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5c92:	9801      	ldr	r0, [sp, #4]
    5c94:	f000 f96b 	bl	5f6e <flash_area_close>

    return rc;
}
    5c98:	4620      	mov	r0, r4
    5c9a:	b002      	add	sp, #8
    5c9c:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5c9e:	2401      	movs	r4, #1
    5ca0:	e7f7      	b.n	5c92 <swap_read_status+0x60>
    switch (bs->source) {
    5ca2:	2407      	movs	r4, #7
    5ca4:	e7f8      	b.n	5c98 <swap_read_status+0x66>
        return BOOT_EFLASH;
    5ca6:	2401      	movs	r4, #1
    5ca8:	e7f6      	b.n	5c98 <swap_read_status+0x66>

00005caa <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5caa:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5cac:	2002      	movs	r0, #2
    5cae:	a901      	add	r1, sp, #4
    5cb0:	f7fc f856 	bl	1d60 <flash_area_open>
            &fap);
    if (rc != 0) {
    5cb4:	b948      	cbnz	r0, 5cca <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5cb6:	9801      	ldr	r0, [sp, #4]
    5cb8:	f7ff fe8f 	bl	59da <boot_write_copy_done>
    5cbc:	4604      	mov	r4, r0
    flash_area_close(fap);
    5cbe:	9801      	ldr	r0, [sp, #4]
    5cc0:	f000 f955 	bl	5f6e <flash_area_close>
    return rc;
}
    5cc4:	4620      	mov	r0, r4
    5cc6:	b002      	add	sp, #8
    5cc8:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5cca:	2401      	movs	r4, #1
    5ccc:	e7fa      	b.n	5cc4 <swap_set_copy_done+0x1a>

00005cce <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5cce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5cd0:	2002      	movs	r0, #2
    5cd2:	a901      	add	r1, sp, #4
    5cd4:	f7fc f844 	bl	1d60 <flash_area_open>
            &fap);
    if (rc != 0) {
    5cd8:	b9a8      	cbnz	r0, 5d06 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5cda:	9801      	ldr	r0, [sp, #4]
    5cdc:	a902      	add	r1, sp, #8
    5cde:	f7fe f969 	bl	3fb4 <boot_read_swap_state>
    if (rc != 0) {
    5ce2:	4604      	mov	r4, r0
    5ce4:	b968      	cbnz	r0, 5d02 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5ce6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5cea:	2b03      	cmp	r3, #3
    5cec:	d103      	bne.n	5cf6 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5cee:	9801      	ldr	r0, [sp, #4]
    5cf0:	f001 f82a 	bl	6d48 <boot_write_image_ok>
    5cf4:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5cf6:	9801      	ldr	r0, [sp, #4]
    5cf8:	f000 f939 	bl	5f6e <flash_area_close>
    return rc;
}
    5cfc:	4620      	mov	r0, r4
    5cfe:	b004      	add	sp, #16
    5d00:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5d02:	2401      	movs	r4, #1
    5d04:	e7f7      	b.n	5cf6 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5d06:	2401      	movs	r4, #1
    5d08:	e7f8      	b.n	5cfc <swap_set_image_ok+0x2e>

00005d0a <boot_status_internal_off>:
{
    5d0a:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5d0c:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5d0e:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5d10:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5d12:	bf06      	itte	eq
    5d14:	2300      	moveq	r3, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5d16:	460c      	moveq	r4, r1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5d18:	020b      	lslne	r3, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5d1a:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5d1e:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5d22:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5d24:	bf18      	it	ne
    5d26:	004c      	lslne	r4, r1, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5d28:	3a01      	subs	r2, #1
}
    5d2a:	fb04 3002 	mla	r0, r4, r2, r3
    5d2e:	bd10      	pop	{r4, pc}

00005d30 <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    5d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    5d34:	f04f 0c80 	mov.w	ip, #128	; 0x80
{
    5d38:	4607      	mov	r7, r0
	uint16_t crc = initial_value;
    5d3a:	4618      	mov	r0, r3
	for (i = 0; i < len + padding; i++) {
    5d3c:	2300      	movs	r3, #0
    5d3e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    5d42:	eb01 0646 	add.w	r6, r1, r6, lsl #1
    5d46:	429e      	cmp	r6, r3
    5d48:	d819      	bhi.n	5d7e <crc16+0x4e>
			}
		}
	}

	return crc;
}
    5d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d4e:	4620      	mov	r0, r4
			crc = (crc << 1U);
    5d50:	0044      	lsls	r4, r0, #1
			if (i < len) {
    5d52:	428b      	cmp	r3, r1
			crc = (crc << 1U);
    5d54:	b2a4      	uxth	r4, r4
			if (i < len) {
    5d56:	d208      	bcs.n	5d6a <crc16+0x3a>
				crc |= !!(src[i] & (0x80U >> b));
    5d58:	f817 8003 	ldrb.w	r8, [r7, r3]
    5d5c:	fa2c fe05 	lsr.w	lr, ip, r5
    5d60:	ea18 0f0e 	tst.w	r8, lr
    5d64:	bf18      	it	ne
    5d66:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    5d6a:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
    5d6c:	f105 0501 	add.w	r5, r5, #1
				crc = crc ^ polynomial;
    5d70:	bf48      	it	mi
    5d72:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    5d74:	2d08      	cmp	r5, #8
    5d76:	d1ea      	bne.n	5d4e <crc16+0x1e>
	for (i = 0; i < len + padding; i++) {
    5d78:	4620      	mov	r0, r4
    5d7a:	3301      	adds	r3, #1
    5d7c:	e7e3      	b.n	5d46 <crc16+0x16>
		for (b = 0; b < 8; b++) {
    5d7e:	2500      	movs	r5, #0
    5d80:	e7e6      	b.n	5d50 <crc16+0x20>

00005d82 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5d82:	4603      	mov	r3, r0
    5d84:	b158      	cbz	r0, 5d9e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5d86:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5d88:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5d8c:	2a01      	cmp	r2, #1
    5d8e:	d003      	beq.n	5d98 <sys_notify_validate+0x16>
    5d90:	2a03      	cmp	r2, #3
    5d92:	d104      	bne.n	5d9e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5d94:	6802      	ldr	r2, [r0, #0]
    5d96:	b112      	cbz	r2, 5d9e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5d98:	2000      	movs	r0, #0
    5d9a:	6098      	str	r0, [r3, #8]
    5d9c:	4770      	bx	lr
    5d9e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5da2:	4770      	bx	lr

00005da4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5da4:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5da6:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5da8:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5dac:	2a03      	cmp	r2, #3
    5dae:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5db2:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5db4:	bf14      	ite	ne
    5db6:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5db8:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5dba:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5dbc:	4770      	bx	lr

00005dbe <arch_printk_char_out>:
}
    5dbe:	2000      	movs	r0, #0
    5dc0:	4770      	bx	lr

00005dc2 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    5dc2:	b40f      	push	{r0, r1, r2, r3}
    5dc4:	b507      	push	{r0, r1, r2, lr}
    5dc6:	a904      	add	r1, sp, #16
    5dc8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5dcc:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5dce:	f7fb fc49 	bl	1664 <vprintk>
	}
	va_end(ap);
}
    5dd2:	b003      	add	sp, #12
    5dd4:	f85d eb04 	ldr.w	lr, [sp], #4
    5dd8:	b004      	add	sp, #16
    5dda:	4770      	bx	lr

00005ddc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5ddc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5dde:	f013 0307 	ands.w	r3, r3, #7
    5de2:	d105      	bne.n	5df0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5de4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5de6:	2b00      	cmp	r3, #0
    5de8:	bf0c      	ite	eq
    5dea:	2000      	moveq	r0, #0
    5dec:	2003      	movne	r0, #3
    5dee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5df0:	2b02      	cmp	r3, #2
    5df2:	d105      	bne.n	5e00 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5df4:	8b40      	ldrh	r0, [r0, #26]
    5df6:	fab0 f080 	clz	r0, r0
    5dfa:	0940      	lsrs	r0, r0, #5
    5dfc:	0080      	lsls	r0, r0, #2
    5dfe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5e00:	2b01      	cmp	r3, #1
    5e02:	d105      	bne.n	5e10 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5e04:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5e06:	2b00      	cmp	r3, #0
    5e08:	bf0c      	ite	eq
    5e0a:	2000      	moveq	r0, #0
    5e0c:	2005      	movne	r0, #5
    5e0e:	4770      	bx	lr
	int evt = EVT_NOP;
    5e10:	2000      	movs	r0, #0
}
    5e12:	4770      	bx	lr

00005e14 <validate_args>:
{
    5e14:	b510      	push	{r4, lr}
    5e16:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5e18:	b100      	cbz	r0, 5e1c <validate_args+0x8>
    5e1a:	b911      	cbnz	r1, 5e22 <validate_args+0xe>
		return -EINVAL;
    5e1c:	f06f 0015 	mvn.w	r0, #21
}
    5e20:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    5e22:	1d08      	adds	r0, r1, #4
    5e24:	f7ff ffad 	bl	5d82 <sys_notify_validate>
	if ((rv == 0)
    5e28:	2800      	cmp	r0, #0
    5e2a:	d1f9      	bne.n	5e20 <validate_args+0xc>
	    && ((cli->notify.flags
    5e2c:	68a3      	ldr	r3, [r4, #8]
    5e2e:	2b03      	cmp	r3, #3
    5e30:	d9f6      	bls.n	5e20 <validate_args+0xc>
    5e32:	e7f3      	b.n	5e1c <validate_args+0x8>

00005e34 <notify_one>:
{
    5e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e38:	460d      	mov	r5, r1
    5e3a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5e3c:	4619      	mov	r1, r3
    5e3e:	1d28      	adds	r0, r5, #4
{
    5e40:	4690      	mov	r8, r2
    5e42:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5e44:	f7ff ffae 	bl	5da4 <sys_notify_finalize>
	if (cb) {
    5e48:	4604      	mov	r4, r0
    5e4a:	b138      	cbz	r0, 5e5c <notify_one+0x28>
		cb(mgr, cli, state, res);
    5e4c:	4633      	mov	r3, r6
    5e4e:	4642      	mov	r2, r8
    5e50:	4629      	mov	r1, r5
    5e52:	4638      	mov	r0, r7
    5e54:	46a4      	mov	ip, r4
}
    5e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5e5a:	4760      	bx	ip
}
    5e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005e60 <transition_complete>:
{
    5e60:	b410      	push	{r4}
    5e62:	f04f 0420 	mov.w	r4, #32
    5e66:	f3ef 8211 	mrs	r2, BASEPRI
    5e6a:	f384 8812 	msr	BASEPRI_MAX, r4
    5e6e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5e72:	6141      	str	r1, [r0, #20]
}
    5e74:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5e76:	2101      	movs	r1, #1
    5e78:	f7fb bc02 	b.w	1680 <process_event>

00005e7c <onoff_manager_init>:
{
    5e7c:	b538      	push	{r3, r4, r5, lr}
    5e7e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5e80:	4605      	mov	r5, r0
    5e82:	b158      	cbz	r0, 5e9c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5e84:	b151      	cbz	r1, 5e9c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5e86:	680b      	ldr	r3, [r1, #0]
    5e88:	b143      	cbz	r3, 5e9c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5e8a:	684b      	ldr	r3, [r1, #4]
    5e8c:	b133      	cbz	r3, 5e9c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5e8e:	221c      	movs	r2, #28
    5e90:	2100      	movs	r1, #0
    5e92:	f000 fbea 	bl	666a <memset>
	return 0;
    5e96:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5e98:	612c      	str	r4, [r5, #16]
}
    5e9a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5e9c:	f06f 0015 	mvn.w	r0, #21
    5ea0:	e7fb      	b.n	5e9a <onoff_manager_init+0x1e>

00005ea2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5ea2:	b570      	push	{r4, r5, r6, lr}
    5ea4:	4605      	mov	r5, r0
    5ea6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5ea8:	f7ff ffb4 	bl	5e14 <validate_args>

	if (rv < 0) {
    5eac:	1e04      	subs	r4, r0, #0
    5eae:	db15      	blt.n	5edc <onoff_request+0x3a>
    5eb0:	f04f 0320 	mov.w	r3, #32
    5eb4:	f3ef 8211 	mrs	r2, BASEPRI
    5eb8:	f383 8812 	msr	BASEPRI_MAX, r3
    5ebc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5ec4:	8b6b      	ldrh	r3, [r5, #26]
    5ec6:	8b2c      	ldrh	r4, [r5, #24]
    5ec8:	428b      	cmp	r3, r1
    5eca:	f004 0407 	and.w	r4, r4, #7
    5ece:	d107      	bne.n	5ee0 <onoff_request+0x3e>
	__asm__ volatile(
    5ed0:	f382 8811 	msr	BASEPRI, r2
    5ed4:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    5ed8:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5edc:	4620      	mov	r0, r4
    5ede:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5ee0:	2c02      	cmp	r4, #2
    5ee2:	d10c      	bne.n	5efe <onoff_request+0x5c>
		mgr->refs += 1U;
    5ee4:	3301      	adds	r3, #1
    5ee6:	836b      	strh	r3, [r5, #26]
    5ee8:	f382 8811 	msr	BASEPRI, r2
    5eec:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    5ef0:	2300      	movs	r3, #0
    5ef2:	4622      	mov	r2, r4
    5ef4:	4631      	mov	r1, r6
    5ef6:	4628      	mov	r0, r5
    5ef8:	f7ff ff9c 	bl	5e34 <notify_one>
    5efc:	e7ee      	b.n	5edc <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5efe:	2c06      	cmp	r4, #6
    5f00:	d814      	bhi.n	5f2c <onoff_request+0x8a>
    5f02:	e8df f004 	tbb	[pc, r4]
    5f06:	1304      	.short	0x1304
    5f08:	1a041313 	.word	0x1a041313
    5f0c:	04          	.byte	0x04
    5f0d:	00          	.byte	0x00
	parent->next = child;
    5f0e:	2300      	movs	r3, #0
    5f10:	6033      	str	r3, [r6, #0]
	return list->tail;
    5f12:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    5f14:	b93b      	cbnz	r3, 5f26 <onoff_request+0x84>
	list->head = node;
    5f16:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5f1a:	b9ac      	cbnz	r4, 5f48 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5f1c:	2102      	movs	r1, #2
    5f1e:	4628      	mov	r0, r5
    5f20:	f7fb fbae 	bl	1680 <process_event>
    5f24:	e7da      	b.n	5edc <onoff_request+0x3a>
	parent->next = child;
    5f26:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5f28:	606e      	str	r6, [r5, #4]
}
    5f2a:	e7f6      	b.n	5f1a <onoff_request+0x78>
    5f2c:	f382 8811 	msr	BASEPRI, r2
    5f30:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5f34:	f06f 0404 	mvn.w	r4, #4
    5f38:	e7d0      	b.n	5edc <onoff_request+0x3a>
    5f3a:	f382 8811 	msr	BASEPRI, r2
    5f3e:	f3bf 8f6f 	isb	sy
    5f42:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5f46:	e7c9      	b.n	5edc <onoff_request+0x3a>
    5f48:	f382 8811 	msr	BASEPRI, r2
    5f4c:	f3bf 8f6f 	isb	sy
		if (notify) {
    5f50:	e7c4      	b.n	5edc <onoff_request+0x3a>

00005f52 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5f52:	4770      	bx	lr

00005f54 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    5f54:	b40f      	push	{r0, r1, r2, r3}
    5f56:	b507      	push	{r0, r1, r2, lr}
    5f58:	a904      	add	r1, sp, #16
    5f5a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5f5e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    5f60:	f7fb fb80 	bl	1664 <vprintk>
	va_end(ap);
}
    5f64:	b003      	add	sp, #12
    5f66:	f85d eb04 	ldr.w	lr, [sp], #4
    5f6a:	b004      	add	sp, #16
    5f6c:	4770      	bx	lr

00005f6e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    5f6e:	4770      	bx	lr

00005f70 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    5f74:	1e0c      	subs	r4, r1, #0
    5f76:	4605      	mov	r5, r0
    5f78:	4617      	mov	r7, r2
    5f7a:	461e      	mov	r6, r3
    5f7c:	db10      	blt.n	5fa0 <flash_area_read+0x30>
    5f7e:	6882      	ldr	r2, [r0, #8]
    5f80:	18e3      	adds	r3, r4, r3
    5f82:	4293      	cmp	r3, r2
    5f84:	d80c      	bhi.n	5fa0 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    5f86:	68c0      	ldr	r0, [r0, #12]
    5f88:	f7ff f936 	bl	51f8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    5f8c:	6869      	ldr	r1, [r5, #4]
    5f8e:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    5f90:	6883      	ldr	r3, [r0, #8]
    5f92:	463a      	mov	r2, r7
    5f94:	681c      	ldr	r4, [r3, #0]
    5f96:	4633      	mov	r3, r6
    5f98:	46a4      	mov	ip, r4
}
    5f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f9e:	4760      	bx	ip
    5fa0:	f06f 0015 	mvn.w	r0, #21
    5fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005fa8 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fac:	f1b1 0900 	subs.w	r9, r1, #0
    5fb0:	4680      	mov	r8, r0
    5fb2:	4617      	mov	r7, r2
    5fb4:	461e      	mov	r6, r3
    5fb6:	db27      	blt.n	6008 <flash_area_write+0x60>
    5fb8:	6882      	ldr	r2, [r0, #8]
    5fba:	444b      	add	r3, r9
    5fbc:	4293      	cmp	r3, r2
    5fbe:	d823      	bhi.n	6008 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5fc0:	68c0      	ldr	r0, [r0, #12]
    5fc2:	f7ff f919 	bl	51f8 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    5fc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5fca:	4605      	mov	r5, r0
    5fcc:	4499      	add	r9, r3
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    5fce:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    5fd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    5fd6:	b96b      	cbnz	r3, 5ff4 <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    5fd8:	4633      	mov	r3, r6
    5fda:	f8d8 4004 	ldr.w	r4, [r8, #4]
    5fde:	463a      	mov	r2, r7
    5fe0:	4649      	mov	r1, r9
    5fe2:	4628      	mov	r0, r5
    5fe4:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    5fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    5fea:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    5fec:	b943      	cbnz	r3, 6000 <flash_area_write+0x58>

	return rc;
}
    5fee:	4620      	mov	r0, r4
    5ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    5ff4:	2100      	movs	r1, #0
    5ff6:	4798      	blx	r3
		if (rc) {
    5ff8:	4604      	mov	r4, r0
    5ffa:	2800      	cmp	r0, #0
    5ffc:	d0ec      	beq.n	5fd8 <flash_area_write+0x30>
    5ffe:	e7f6      	b.n	5fee <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
    6000:	2101      	movs	r1, #1
    6002:	4628      	mov	r0, r5
    6004:	4798      	blx	r3
    6006:	e7f2      	b.n	5fee <flash_area_write+0x46>
		return -EINVAL;
    6008:	f06f 0415 	mvn.w	r4, #21
    600c:	e7ef      	b.n	5fee <flash_area_write+0x46>

0000600e <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    600e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6012:	1e0c      	subs	r4, r1, #0
    6014:	4605      	mov	r5, r0
    6016:	4617      	mov	r7, r2
    6018:	db25      	blt.n	6066 <flash_area_erase+0x58>
    601a:	18a3      	adds	r3, r4, r2
    601c:	6882      	ldr	r2, [r0, #8]
    601e:	4293      	cmp	r3, r2
    6020:	d821      	bhi.n	6066 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6022:	68c0      	ldr	r0, [r0, #12]
    6024:	f7ff f8e8 	bl	51f8 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    6028:	686d      	ldr	r5, [r5, #4]
    602a:	4606      	mov	r6, r0
    602c:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    602e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    6032:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6036:	b963      	cbnz	r3, 6052 <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    6038:	f8d8 3008 	ldr.w	r3, [r8, #8]
    603c:	463a      	mov	r2, r7
    603e:	4629      	mov	r1, r5
    6040:	4630      	mov	r0, r6
    6042:	4798      	blx	r3

	if (api->write_protection != NULL) {
    6044:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    6048:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    604a:	b943      	cbnz	r3, 605e <flash_area_erase+0x50>

	return rc;
}
    604c:	4620      	mov	r0, r4
    604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    6052:	2100      	movs	r1, #0
    6054:	4798      	blx	r3
		if (rc) {
    6056:	4604      	mov	r4, r0
    6058:	2800      	cmp	r0, #0
    605a:	d0ed      	beq.n	6038 <flash_area_erase+0x2a>
    605c:	e7f6      	b.n	604c <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    605e:	2101      	movs	r1, #1
    6060:	4630      	mov	r0, r6
    6062:	4798      	blx	r3
    6064:	e7f2      	b.n	604c <flash_area_erase+0x3e>
		return -EINVAL;
    6066:	f06f 0415 	mvn.w	r4, #21
    606a:	e7ef      	b.n	604c <flash_area_erase+0x3e>

0000606c <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    606c:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    606e:	68c0      	ldr	r0, [r0, #12]
    6070:	f7ff f8c2 	bl	51f8 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    6074:	6883      	ldr	r3, [r0, #8]
    6076:	691b      	ldr	r3, [r3, #16]
    6078:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    607a:	6800      	ldr	r0, [r0, #0]
    607c:	bd08      	pop	{r3, pc}

0000607e <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    607e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    6080:	68c0      	ldr	r0, [r0, #12]
    6082:	f7ff f8b9 	bl	51f8 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6086:	6883      	ldr	r3, [r0, #8]
    6088:	691b      	ldr	r3, [r3, #16]
    608a:	4798      	blx	r3

	return param->erase_value;
}
    608c:	7900      	ldrb	r0, [r0, #4]
    608e:	bd08      	pop	{r3, pc}

00006090 <get_sectors_cb>:
{
    6090:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    6092:	6802      	ldr	r2, [r0, #0]
    6094:	684c      	ldr	r4, [r1, #4]
    6096:	42a2      	cmp	r2, r4
    6098:	d201      	bcs.n	609e <get_sectors_cb+0xe>
		*bail_value = true;
    609a:	2001      	movs	r0, #1
}
    609c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    609e:	688b      	ldr	r3, [r1, #8]
    60a0:	4423      	add	r3, r4
    60a2:	429a      	cmp	r2, r3
    60a4:	d301      	bcc.n	60aa <get_sectors_cb+0x1a>
		*bail_value = false;
    60a6:	2000      	movs	r0, #0
    60a8:	e7f8      	b.n	609c <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    60aa:	694e      	ldr	r6, [r1, #20]
    60ac:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
    60b0:	42b3      	cmp	r3, r6
    60b2:	d303      	bcc.n	60bc <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    60b4:	f06f 030b 	mvn.w	r3, #11
    60b8:	618b      	str	r3, [r1, #24]
		return true;
    60ba:	e7f4      	b.n	60a6 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    60bc:	1b12      	subs	r2, r2, r4
    60be:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    60c2:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    60c4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    60c8:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    60ca:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    60cc:	610b      	str	r3, [r1, #16]
	return true;
    60ce:	e7e4      	b.n	609a <get_sectors_cb+0xa>

000060d0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    60d0:	2000      	movs	r0, #0
{
    60d2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    60d4:	f7fb fe12 	bl	1cfc <sys_reboot>

000060d8 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    60d8:	4770      	bx	lr

000060da <console_write>:
{
    60da:	b570      	push	{r4, r5, r6, lr}
    60dc:	4606      	mov	r6, r0
    60de:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    60e0:	2400      	movs	r4, #0
    60e2:	42ac      	cmp	r4, r5
    60e4:	db00      	blt.n	60e8 <console_write+0xe>
}
    60e6:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    60e8:	5d30      	ldrb	r0, [r6, r4]
    60ea:	f7fb feeb 	bl	1ec4 <console_out>
    60ee:	3001      	adds	r0, #1
    60f0:	d0f9      	beq.n	60e6 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    60f2:	3401      	adds	r4, #1
    60f4:	e7f5      	b.n	60e2 <console_write+0x8>

000060f6 <u32toa>:
{
    60f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    60f8:	2301      	movs	r3, #1
        d *= 10;
    60fa:	240a      	movs	r4, #10
    while (val / d >= 10) {
    60fc:	fbb1 f2f3 	udiv	r2, r1, r3
    6100:	2a09      	cmp	r2, #9
    6102:	d806      	bhi.n	6112 <u32toa+0x1c>
    dst = tgt;
    6104:	4602      	mov	r2, r0
    int n = 0;
    6106:	2500      	movs	r5, #0
        d /= 10;
    6108:	260a      	movs	r6, #10
    while (d) {
    610a:	b923      	cbnz	r3, 6116 <u32toa+0x20>
    *dst = '\0';
    610c:	7013      	strb	r3, [r2, #0]
}
    610e:	1a10      	subs	r0, r2, r0
    6110:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    6112:	4363      	muls	r3, r4
    6114:	e7f2      	b.n	60fc <u32toa+0x6>
        dgt = val / d;
    6116:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    611a:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    611e:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    6122:	b91d      	cbnz	r5, 612c <u32toa+0x36>
    6124:	4299      	cmp	r1, r3
    6126:	d201      	bcs.n	612c <u32toa+0x36>
    6128:	2b09      	cmp	r3, #9
    612a:	d803      	bhi.n	6134 <u32toa+0x3e>
            *dst++ = dgt + '0';
    612c:	3430      	adds	r4, #48	; 0x30
    612e:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    6132:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    6134:	4663      	mov	r3, ip
    6136:	4639      	mov	r1, r7
    6138:	e7e7      	b.n	610a <u32toa+0x14>

0000613a <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_state_t *state,
		void *const result, uint32_t result_len)
{
    613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cbor_trace();
	cbor_assert(result_len != 0, "0-length result not supported.\n");
	cbor_assert(result != NULL, NULL);

	FAIL_IF((state->elem_count == 0) \
    613c:	6883      	ldr	r3, [r0, #8]
{
    613e:	4604      	mov	r4, r0
    6140:	460d      	mov	r5, r1
    6142:	4617      	mov	r7, r2
	FAIL_IF((state->elem_count == 0) \
    6144:	b303      	cbz	r3, 6188 <value_extract+0x4e>
    6146:	6803      	ldr	r3, [r0, #0]
    6148:	68c1      	ldr	r1, [r0, #12]
    614a:	428b      	cmp	r3, r1
    614c:	d21c      	bcs.n	6188 <value_extract+0x4e>
		|| (state->payload >= state->payload_end));

	uint8_t *u8_result  = (uint8_t *)result;
	uint8_t additional = ADDITIONAL(*state->payload);
    614e:	781e      	ldrb	r6, [r3, #0]

	state->payload_bak = state->payload;
    6150:	6043      	str	r3, [r0, #4]
	(state->payload)++;
    6152:	3301      	adds	r3, #1
    6154:	6003      	str	r3, [r0, #0]

	memset(result, 0, result_len);
    6156:	2100      	movs	r1, #0
    6158:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    615a:	f006 061f 	and.w	r6, r6, #31
	memset(result, 0, result_len);
    615e:	f000 fa84 	bl	666a <memset>
	if (additional <= VALUE_IN_HEADER) {
    6162:	2e17      	cmp	r6, #23
    6164:	d805      	bhi.n	6172 <value_extract+0x38>
#ifdef CONFIG_BIG_ENDIAN
		u8_result[result_len - 1] = additional;
#else
		u8_result[0] = additional;
    6166:	702e      	strb	r6, [r5, #0]
#endif /* CONFIG_BIG_ENDIAN */

		(state->payload) += len;
	}

	(state->elem_count)--;
    6168:	68a3      	ldr	r3, [r4, #8]
	return true;
    616a:	2001      	movs	r0, #1
	(state->elem_count)--;
    616c:	3b01      	subs	r3, #1
    616e:	60a3      	str	r3, [r4, #8]
	return true;
    6170:	e00b      	b.n	618a <value_extract+0x50>
	if (24 <= additional && additional <= 27) {
    6172:	3e18      	subs	r6, #24
    6174:	b2f3      	uxtb	r3, r6
    6176:	2b03      	cmp	r3, #3
		FAIL_AND_DECR_IF(len > result_len);
    6178:	6821      	ldr	r1, [r4, #0]
	if (24 <= additional && additional <= 27) {
    617a:	d807      	bhi.n	618c <value_extract+0x52>
		return 1 << (additional - 24);
    617c:	2301      	movs	r3, #1
    617e:	40b3      	lsls	r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    6180:	429f      	cmp	r7, r3
    6182:	d204      	bcs.n	618e <value_extract+0x54>
    6184:	3901      	subs	r1, #1
    6186:	6021      	str	r1, [r4, #0]
	FAIL_IF((state->elem_count == 0) \
    6188:	2000      	movs	r0, #0
}
    618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
    618c:	2300      	movs	r3, #0
		FAIL_AND_DECR_IF((state->payload + len)
    618e:	68e0      	ldr	r0, [r4, #12]
    6190:	18ca      	adds	r2, r1, r3
    6192:	4290      	cmp	r0, r2
    6194:	d3f6      	bcc.n	6184 <value_extract+0x4a>
    6196:	1e59      	subs	r1, r3, #1
    6198:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    619a:	1c48      	adds	r0, r1, #1
			u8_result[i] = (state->payload)[len - i - 1];
    619c:	6822      	ldr	r2, [r4, #0]
		for (uint32_t i = 0; i < len; i++) {
    619e:	d102      	bne.n	61a6 <value_extract+0x6c>
		(state->payload) += len;
    61a0:	441a      	add	r2, r3
    61a2:	6022      	str	r2, [r4, #0]
    61a4:	e7e0      	b.n	6168 <value_extract+0x2e>
			u8_result[i] = (state->payload)[len - i - 1];
    61a6:	5c52      	ldrb	r2, [r2, r1]
    61a8:	3901      	subs	r1, #1
    61aa:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    61ae:	e7f4      	b.n	619a <value_extract+0x60>

000061b0 <strx_start_decode>:
}


static bool strx_start_decode(cbor_state_t *state,
		cbor_string_type_t *result, cbor_major_type_t exp_major_type)
{
    61b0:	b538      	push	{r3, r4, r5, lr}
    61b2:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    61b4:	6803      	ldr	r3, [r0, #0]
    61b6:	68c1      	ldr	r1, [r0, #12]
{
    61b8:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    61ba:	428b      	cmp	r3, r1
    61bc:	d213      	bcs.n	61e6 <strx_start_decode+0x36>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    61be:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    61c0:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    61c4:	d10f      	bne.n	61e6 <strx_start_decode+0x36>
	if (!value_extract(state, result, 4)) {
    61c6:	2204      	movs	r2, #4
    61c8:	18a9      	adds	r1, r5, r2
    61ca:	f7ff ffb6 	bl	613a <value_extract>
		FAIL();
	}

	if (!uint32_decode(state, &result->len)) {
    61ce:	b150      	cbz	r0, 61e6 <strx_start_decode+0x36>
		FAIL();
	}

	if (result->len > (state->payload_end - state->payload)) {
    61d0:	6822      	ldr	r2, [r4, #0]
    61d2:	68e3      	ldr	r3, [r4, #12]
    61d4:	6869      	ldr	r1, [r5, #4]
    61d6:	1a9b      	subs	r3, r3, r2
    61d8:	4299      	cmp	r1, r3
    61da:	d906      	bls.n	61ea <strx_start_decode+0x3a>
		cbor_print("error: 0x%x > 0x%x\r\n",
		(uint32_t)result->len,
		(uint32_t)(state->payload_end - state->payload));
		FAIL_RESTORE();
    61dc:	6863      	ldr	r3, [r4, #4]
    61de:	6023      	str	r3, [r4, #0]
    61e0:	68a3      	ldr	r3, [r4, #8]
    61e2:	3301      	adds	r3, #1
    61e4:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    61e6:	2000      	movs	r0, #0
	}

	result->value = state->payload;
	return true;
}
    61e8:	bd38      	pop	{r3, r4, r5, pc}
	result->value = state->payload;
    61ea:	602a      	str	r2, [r5, #0]
	return true;
    61ec:	e7fc      	b.n	61e8 <strx_start_decode+0x38>

000061ee <list_map_start_decode>:


static bool list_map_start_decode(cbor_state_t *state,
		cbor_major_type_t exp_major_type)
{
	FAIL_IF(state->payload >= state->payload_end);
    61ee:	6803      	ldr	r3, [r0, #0]
    61f0:	68c2      	ldr	r2, [r0, #12]
{
    61f2:	b513      	push	{r0, r1, r4, lr}
	FAIL_IF(state->payload >= state->payload_end);
    61f4:	4293      	cmp	r3, r2
{
    61f6:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    61f8:	d213      	bcs.n	6222 <list_map_start_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    61fa:	781b      	ldrb	r3, [r3, #0]
	uint32_t new_elem_count;

	if (major_type != exp_major_type) {
    61fc:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    6200:	d10f      	bne.n	6222 <list_map_start_decode+0x34>
	if (!value_extract(state, result, 4)) {
    6202:	2204      	movs	r2, #4
    6204:	eb0d 0102 	add.w	r1, sp, r2
    6208:	f7ff ff97 	bl	613a <value_extract>
		FAIL();
	}

	if (!uint32_decode(state, &new_elem_count)) {
    620c:	b148      	cbz	r0, 6222 <list_map_start_decode+0x34>
		FAIL();
	}

	if (!new_backup(state, new_elem_count)) {
    620e:	4620      	mov	r0, r4
    6210:	9901      	ldr	r1, [sp, #4]
    6212:	f000 f955 	bl	64c0 <new_backup>
    6216:	b928      	cbnz	r0, 6224 <list_map_start_decode+0x36>
		FAIL_RESTORE();
    6218:	6863      	ldr	r3, [r4, #4]
    621a:	6023      	str	r3, [r4, #0]
    621c:	68a3      	ldr	r3, [r4, #8]
    621e:	3301      	adds	r3, #1
    6220:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    6222:	2000      	movs	r0, #0
	}

	return true;
}
    6224:	b002      	add	sp, #8
    6226:	bd10      	pop	{r4, pc}

00006228 <intx32_decode>:
	FAIL_IF(state->payload >= state->payload_end);
    6228:	6803      	ldr	r3, [r0, #0]
    622a:	68c2      	ldr	r2, [r0, #12]
{
    622c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	FAIL_IF(state->payload >= state->payload_end);
    622e:	4293      	cmp	r3, r2
{
    6230:	4604      	mov	r4, r0
    6232:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    6234:	d212      	bcs.n	625c <intx32_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    6236:	781b      	ldrb	r3, [r3, #0]
	if (major_type != CBOR_MAJOR_TYPE_PINT
    6238:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    623a:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    623e:	d80d      	bhi.n	625c <intx32_decode+0x34>
	if (!value_extract(state, &uint_result, 4)) {
    6240:	2204      	movs	r2, #4
    6242:	eb0d 0102 	add.w	r1, sp, r2
    6246:	f7ff ff78 	bl	613a <value_extract>
    624a:	b138      	cbz	r0, 625c <intx32_decode+0x34>
	if (uint_result >= (1 << (8*sizeof(uint_result)-1))) {
    624c:	9b01      	ldr	r3, [sp, #4]
    624e:	2b00      	cmp	r3, #0
    6250:	da07      	bge.n	6262 <intx32_decode+0x3a>
		FAIL_RESTORE();
    6252:	6863      	ldr	r3, [r4, #4]
    6254:	6023      	str	r3, [r4, #0]
    6256:	68a3      	ldr	r3, [r4, #8]
    6258:	3301      	adds	r3, #1
    625a:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    625c:	2000      	movs	r0, #0
}
    625e:	b002      	add	sp, #8
    6260:	bd70      	pop	{r4, r5, r6, pc}
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    6262:	2e01      	cmp	r6, #1
		int_result = -1 - uint_result;
    6264:	bf08      	it	eq
    6266:	43db      	mvneq	r3, r3
	*result = int_result;
    6268:	602b      	str	r3, [r5, #0]
	return true;
    626a:	e7f8      	b.n	625e <intx32_decode+0x36>

0000626c <strx_decode>:
{
    626c:	b538      	push	{r3, r4, r5, lr}
    626e:	4604      	mov	r4, r0
    6270:	460d      	mov	r5, r1
	if (!strx_start_decode(state, result, exp_major_type)) {
    6272:	f7ff ff9d 	bl	61b0 <strx_start_decode>
    6276:	b118      	cbz	r0, 6280 <strx_decode+0x14>
	(state->payload) += result->len;
    6278:	6823      	ldr	r3, [r4, #0]
    627a:	686a      	ldr	r2, [r5, #4]
    627c:	4413      	add	r3, r2
    627e:	6023      	str	r3, [r4, #0]
}
    6280:	bd38      	pop	{r3, r4, r5, pc}

00006282 <strx_expect>:
{
    6282:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6284:	460e      	mov	r6, r1
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    6286:	4669      	mov	r1, sp
{
    6288:	4604      	mov	r4, r0
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    628a:	f7ff ffef 	bl	626c <strx_decode>
    628e:	4605      	mov	r5, r0
    6290:	b140      	cbz	r0, 62a4 <strx_expect+0x22>
	if ((tmp_result.len != result->len)
    6292:	9a01      	ldr	r2, [sp, #4]
    6294:	6873      	ldr	r3, [r6, #4]
    6296:	429a      	cmp	r2, r3
    6298:	d008      	beq.n	62ac <strx_expect+0x2a>
		FAIL_RESTORE();
    629a:	6863      	ldr	r3, [r4, #4]
    629c:	6023      	str	r3, [r4, #0]
    629e:	68a3      	ldr	r3, [r4, #8]
    62a0:	3301      	adds	r3, #1
    62a2:	60a3      	str	r3, [r4, #8]
		FAIL();
    62a4:	2500      	movs	r5, #0
}
    62a6:	4628      	mov	r0, r5
    62a8:	b002      	add	sp, #8
    62aa:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    62ac:	9900      	ldr	r1, [sp, #0]
    62ae:	6830      	ldr	r0, [r6, #0]
    62b0:	f000 f9a9 	bl	6606 <memcmp>
    62b4:	2800      	cmp	r0, #0
    62b6:	d0f6      	beq.n	62a6 <strx_expect+0x24>
    62b8:	e7ef      	b.n	629a <strx_expect+0x18>

000062ba <bstrx_decode>:
	return strx_decode(state, result, CBOR_MAJOR_TYPE_BSTR);
    62ba:	2202      	movs	r2, #2
    62bc:	f7ff bfd6 	b.w	626c <strx_decode>

000062c0 <tstrx_expect>:
	return strx_expect(state, result, CBOR_MAJOR_TYPE_TSTR);
    62c0:	2203      	movs	r2, #3
    62c2:	f7ff bfde 	b.w	6282 <strx_expect>

000062c6 <map_start_decode>:
	return list_map_start_decode(state, CBOR_MAJOR_TYPE_LIST);
}


bool map_start_decode(cbor_state_t *state)
{
    62c6:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    62c8:	2105      	movs	r1, #5
{
    62ca:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    62cc:	f7ff ff8f 	bl	61ee <list_map_start_decode>

	if (ret) {
    62d0:	b110      	cbz	r0, 62d8 <map_start_decode+0x12>
		state->elem_count *= 2;
    62d2:	68a3      	ldr	r3, [r4, #8]
    62d4:	005b      	lsls	r3, r3, #1
    62d6:	60a3      	str	r3, [r4, #8]
	}
	return ret;
}
    62d8:	bd10      	pop	{r4, pc}

000062da <list_map_end_decode>:


bool list_map_end_decode(cbor_state_t *state)
{
	if (!restore_backup(state,
    62da:	2200      	movs	r2, #0
    62dc:	2107      	movs	r1, #7
    62de:	f000 b905 	b.w	64ec <restore_backup>

000062e2 <map_end_decode>:
{
	return list_map_end_decode(state);
}


bool map_end_decode(cbor_state_t *state)
    62e2:	f7ff bffa 	b.w	62da <list_map_end_decode>

000062e6 <multi_decode>:
		uint32_t *num_decode,
		cbor_decoder_t decoder,
		cbor_state_t *state,
		void *result,
		uint32_t result_len)
{
    62e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62ea:	4682      	mov	sl, r0
    62ec:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    62f0:	4688      	mov	r8, r1
    62f2:	4616      	mov	r6, r2
    62f4:	469b      	mov	fp, r3
	for (uint32_t i = 0; i < max_decode; i++) {
    62f6:	2400      	movs	r4, #0
    62f8:	4544      	cmp	r4, r8
    62fa:	d102      	bne.n	6302 <multi_decode+0x1c>
			if (i < min_decode) {
				FAIL();
			} else {
				cbor_print("Found %zu elements.\n", i);
			}
			return true;
    62fc:	2001      	movs	r0, #1
		}
	}
	cbor_print("Found %zu elements.\n", max_decode);
	*num_decode = max_decode;
    62fe:	6034      	str	r4, [r6, #0]
	return true;
    6300:	e012      	b.n	6328 <multi_decode+0x42>
		uint8_t const *payload_bak = state->payload;
    6302:	682a      	ldr	r2, [r5, #0]
		if (!decoder(state,
    6304:	4639      	mov	r1, r7
    6306:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    6308:	9201      	str	r2, [sp, #4]
		uint32_t elem_count_bak = state->elem_count;
    630a:	f8d5 9008 	ldr.w	r9, [r5, #8]
		if (!decoder(state,
    630e:	47d8      	blx	fp
    6310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6312:	9a01      	ldr	r2, [sp, #4]
    6314:	441f      	add	r7, r3
    6316:	b950      	cbnz	r0, 632e <multi_decode+0x48>
			if (i < min_decode) {
    6318:	4554      	cmp	r4, sl
    631a:	bf34      	ite	cc
    631c:	2000      	movcc	r0, #0
    631e:	2001      	movcs	r0, #1
			*num_decode = i;
    6320:	6034      	str	r4, [r6, #0]
			state->payload = payload_bak;
    6322:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    6324:	f8c5 9008 	str.w	r9, [r5, #8]
}
    6328:	b003      	add	sp, #12
    632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint32_t i = 0; i < max_decode; i++) {
    632e:	3401      	adds	r4, #1
    6330:	e7e2      	b.n	62f8 <multi_decode+0x12>

00006332 <get_result_len>:
static uint32_t get_result_len(const void *const input, uint32_t max_result_len)
{
	uint8_t *u8_result  = (uint8_t *)input;
	size_t i;

	for (i = 0; i < max_result_len; i++) {
    6332:	2200      	movs	r2, #0
{
    6334:	b510      	push	{r4, lr}
    6336:	4603      	mov	r3, r0
    6338:	4408      	add	r0, r1
#ifdef CONFIG_BIG_ENDIAN
		size_t idx = i;
#else
		size_t idx = max_result_len - 1 - i;
#endif
		if (u8_result[idx] != 0) {
    633a:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    633e:	b144      	cbz	r4, 6352 <get_result_len+0x20>
			break;
		}
	}
	max_result_len -= i;
    6340:	1a88      	subs	r0, r1, r2
	 */
	cbor_assert(max_result_len <= 8, "Up to 8 bytes can be used to encode length.\n");
	size_t encode_byte_cnt = 1;

	for (size_t i = 0; i <= 3; i++) {
		if (max_result_len <= encode_byte_cnt) {
    6342:	2801      	cmp	r0, #1
    6344:	d809      	bhi.n	635a <get_result_len+0x28>
		}

		encode_byte_cnt *= 2;
	}

	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    6346:	7818      	ldrb	r0, [r3, #0]
    6348:	2817      	cmp	r0, #23
    634a:	bf94      	ite	ls
    634c:	2000      	movls	r0, #0
    634e:	2001      	movhi	r0, #1
		max_result_len = 0;
	}

	return max_result_len;
    6350:	e00a      	b.n	6368 <get_result_len+0x36>
	for (i = 0; i < max_result_len; i++) {
    6352:	3201      	adds	r2, #1
    6354:	4291      	cmp	r1, r2
    6356:	d1f0      	bne.n	633a <get_result_len+0x8>
    6358:	e7f5      	b.n	6346 <get_result_len+0x14>
		if (max_result_len <= encode_byte_cnt) {
    635a:	2802      	cmp	r0, #2
    635c:	d004      	beq.n	6368 <get_result_len+0x36>
    635e:	2804      	cmp	r0, #4
    6360:	d903      	bls.n	636a <get_result_len+0x38>
		encode_byte_cnt *= 2;
    6362:	2808      	cmp	r0, #8
    6364:	bf38      	it	cc
    6366:	2008      	movcc	r0, #8
}
    6368:	bd10      	pop	{r4, pc}
		encode_byte_cnt *= 2;
    636a:	2004      	movs	r0, #4
	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    636c:	e7fc      	b.n	6368 <get_result_len+0x36>

0000636e <get_additional>:
	switch(len) {
    636e:	2808      	cmp	r0, #8
    6370:	d80e      	bhi.n	6390 <get_additional+0x22>
    6372:	e8df f000 	tbb	[pc, r0]
    6376:	0f05      	.short	0x0f05
    6378:	09090707 	.word	0x09090707
    637c:	0909      	.short	0x0909
    637e:	0b          	.byte	0x0b
    637f:	00          	.byte	0x00
		case 0: return value0;
    6380:	4608      	mov	r0, r1
    6382:	4770      	bx	lr
		case 2: return 25;
    6384:	2019      	movs	r0, #25
    6386:	4770      	bx	lr
		case 4: return 26;
    6388:	201a      	movs	r0, #26
    638a:	4770      	bx	lr
		case 8: return 27;
    638c:	201b      	movs	r0, #27
    638e:	4770      	bx	lr
	return 0;
    6390:	2000      	movs	r0, #0
    6392:	4770      	bx	lr
	switch(len) {
    6394:	2018      	movs	r0, #24
}
    6396:	4770      	bx	lr

00006398 <value_encode>:


static bool value_encode(cbor_state_t *state, cbor_major_type_t major_type,
		const void *const input, uint32_t max_result_len)
{
    6398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    639c:	4604      	mov	r4, r0
    639e:	460f      	mov	r7, r1
	cbor_assert(max_result_len != 0, "0-length result not supported.\n");
	return value_encode_len(state, major_type, input,
    63a0:	4610      	mov	r0, r2
    63a2:	4619      	mov	r1, r3
{
    63a4:	4616      	mov	r6, r2
	return value_encode_len(state, major_type, input,
    63a6:	f7ff ffc4 	bl	6332 <get_result_len>
	if ((state->payload + 1 + result_len) > state->payload_end) {
    63aa:	6822      	ldr	r2, [r4, #0]
    63ac:	68e1      	ldr	r1, [r4, #12]
    63ae:	1c43      	adds	r3, r0, #1
    63b0:	4413      	add	r3, r2
    63b2:	4299      	cmp	r1, r3
	return value_encode_len(state, major_type, input,
    63b4:	4605      	mov	r5, r0
	if ((state->payload + 1 + result_len) > state->payload_end) {
    63b6:	d31d      	bcc.n	63f4 <value_encode+0x5c>
	if ((state->payload + 1) > state->payload_end) {
    63b8:	f102 0801 	add.w	r8, r2, #1
    63bc:	4541      	cmp	r1, r8
    63be:	d319      	bcc.n	63f4 <value_encode+0x5c>
	if (!encode_header_byte(state, major_type,
    63c0:	7831      	ldrb	r1, [r6, #0]
    63c2:	f7ff ffd4 	bl	636e <get_additional>
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63c6:	f000 001f 	and.w	r0, r0, #31
    63ca:	ea40 1147 	orr.w	r1, r0, r7, lsl #5
    63ce:	f8c4 8000 	str.w	r8, [r4]
    63d2:	1970      	adds	r0, r6, r5
    63d4:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    63d6:	4286      	cmp	r6, r0
    63d8:	d105      	bne.n	63e6 <value_encode+0x4e>
	return true;
    63da:	2001      	movs	r0, #1
	state->elem_count++;
    63dc:	68a3      	ldr	r3, [r4, #8]
    63de:	3301      	adds	r3, #1
    63e0:	60a3      	str	r3, [r4, #8]
				get_result_len(input, max_result_len));
}
    63e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(state->payload_mut++) = u8_result[result_len - 1];
    63e6:	6823      	ldr	r3, [r4, #0]
    63e8:	1c5a      	adds	r2, r3, #1
    63ea:	6022      	str	r2, [r4, #0]
    63ec:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    63f0:	701a      	strb	r2, [r3, #0]
	for (; result_len > 0; result_len--) {
    63f2:	e7f0      	b.n	63d6 <value_encode+0x3e>
		FAIL();
    63f4:	2000      	movs	r0, #0
    63f6:	e7f4      	b.n	63e2 <value_encode+0x4a>

000063f8 <strx_encode>:
}


static bool strx_encode(cbor_state_t *state,
		const cbor_string_type_t *input, cbor_major_type_t major_type)
{
    63f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    63fa:	460e      	mov	r6, r1
    63fc:	f856 3b04 	ldr.w	r3, [r6], #4
{
    6400:	4604      	mov	r4, r0
    6402:	460d      	mov	r5, r1
    6404:	4617      	mov	r7, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    6406:	b173      	cbz	r3, 6426 <strx_encode+0x2e>
    6408:	2104      	movs	r1, #4
    640a:	4630      	mov	r0, r6
    640c:	f7ff ff91 	bl	6332 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    6410:	686b      	ldr	r3, [r5, #4]
    6412:	1c5a      	adds	r2, r3, #1
    6414:	6823      	ldr	r3, [r4, #0]
    6416:	4413      	add	r3, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    6418:	68e2      	ldr	r2, [r4, #12]
			+ 1 + input->len + (size_t)state->payload)
    641a:	4403      	add	r3, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    641c:	429a      	cmp	r2, r3
    641e:	d202      	bcs.n	6426 <strx_encode+0x2e>
	if (!strx_start_encode(state, input, major_type)) {
		FAIL();
    6420:	2600      	movs	r6, #0
	if (state->payload_mut != input->value) {
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    6422:	4630      	mov	r0, r6
    6424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!value_encode(state, major_type, input, 4)) {
    6426:	4632      	mov	r2, r6
    6428:	2304      	movs	r3, #4
    642a:	4639      	mov	r1, r7
    642c:	4620      	mov	r0, r4
    642e:	f7ff ffb3 	bl	6398 <value_encode>
	if (!uint32_encode(state, &input->len, major_type)) {
    6432:	4606      	mov	r6, r0
    6434:	2800      	cmp	r0, #0
    6436:	d0f3      	beq.n	6420 <strx_encode+0x28>
	if (input->len > (state->payload_end - state->payload)) {
    6438:	6820      	ldr	r0, [r4, #0]
    643a:	68e3      	ldr	r3, [r4, #12]
    643c:	686a      	ldr	r2, [r5, #4]
    643e:	1a1b      	subs	r3, r3, r0
    6440:	429a      	cmp	r2, r3
    6442:	d8ed      	bhi.n	6420 <strx_encode+0x28>
	if (state->payload_mut != input->value) {
    6444:	6829      	ldr	r1, [r5, #0]
    6446:	4288      	cmp	r0, r1
    6448:	d001      	beq.n	644e <strx_encode+0x56>
		memmove(state->payload_mut, input->value, input->len);
    644a:	f000 f8ec 	bl	6626 <memmove>
	state->payload += input->len;
    644e:	6823      	ldr	r3, [r4, #0]
    6450:	686a      	ldr	r2, [r5, #4]
    6452:	4413      	add	r3, r2
    6454:	6023      	str	r3, [r4, #0]
	return true;
    6456:	e7e4      	b.n	6422 <strx_encode+0x2a>

00006458 <uintx32_put>:
	if (!value_encode(state, major_type, input, 4)) {
    6458:	2304      	movs	r3, #4
{
    645a:	b507      	push	{r0, r1, r2, lr}
    645c:	9101      	str	r1, [sp, #4]
	if (!value_encode(state, major_type, input, 4)) {
    645e:	eb0d 0203 	add.w	r2, sp, r3
    6462:	2100      	movs	r1, #0
    6464:	f7ff ff98 	bl	6398 <value_encode>
}
    6468:	b003      	add	sp, #12
    646a:	f85d fb04 	ldr.w	pc, [sp], #4

0000646e <tstrx_encode>:
}


bool tstrx_encode(cbor_state_t *state, const cbor_string_type_t *input)
{
	return strx_encode(state, input, CBOR_MAJOR_TYPE_TSTR);
    646e:	2203      	movs	r2, #3
    6470:	f7ff bfc2 	b.w	63f8 <strx_encode>

00006474 <list_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    6474:	6803      	ldr	r3, [r0, #0]
    6476:	68c1      	ldr	r1, [r0, #12]
    6478:	1c5a      	adds	r2, r3, #1
    647a:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    647c:	bf9f      	itttt	ls
    647e:	6002      	strls	r2, [r0, #0]
    6480:	229f      	movls	r2, #159	; 0x9f
	return true;
    6482:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    6484:	701a      	strbls	r2, [r3, #0]
		FAIL();
    6486:	bf88      	it	hi
    6488:	2000      	movhi	r0, #0


bool list_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    648a:	4770      	bx	lr

0000648c <map_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    648c:	6803      	ldr	r3, [r0, #0]
    648e:	68c1      	ldr	r1, [r0, #12]
    6490:	1c5a      	adds	r2, r3, #1
    6492:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    6494:	bf9f      	itttt	ls
    6496:	6002      	strls	r2, [r0, #0]
    6498:	22bf      	movls	r2, #191	; 0xbf
	return true;
    649a:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    649c:	701a      	strbls	r2, [r3, #0]
		FAIL();
    649e:	bf88      	it	hi
    64a0:	2000      	movhi	r0, #0


bool map_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
}
    64a2:	4770      	bx	lr

000064a4 <list_end_encode>:
	if ((state->payload + 1) > state->payload_end) {
    64a4:	6803      	ldr	r3, [r0, #0]
    64a6:	68c1      	ldr	r1, [r0, #12]
    64a8:	1c5a      	adds	r2, r3, #1
    64aa:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    64ac:	bf9f      	itttt	ls
    64ae:	6002      	strls	r2, [r0, #0]
    64b0:	22ff      	movls	r2, #255	; 0xff
	return true;
    64b2:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    64b4:	701a      	strbls	r2, [r3, #0]
		FAIL();
    64b6:	bf88      	it	hi
    64b8:	2000      	movhi	r0, #0


bool list_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    64ba:	4770      	bx	lr

000064bc <map_end_encode>:


bool map_end_encode(cbor_state_t *state, uint32_t max_num)
    64bc:	f7ff bff2 	b.w	64a4 <list_end_encode>

000064c0 <new_backup>:
_Static_assert((sizeof(size_t) == sizeof(void *)),
	"This code needs size_t to be the same length as pointers.");

bool new_backup(cbor_state_t *state, uint32_t new_elem_count)
{
	if ((state->backups->current_backup + 1)
    64c0:	6902      	ldr	r2, [r0, #16]
{
    64c2:	b538      	push	{r3, r4, r5, lr}
	if ((state->backups->current_backup + 1)
    64c4:	6853      	ldr	r3, [r2, #4]
{
    64c6:	460d      	mov	r5, r1
	if ((state->backups->current_backup + 1)
    64c8:	6891      	ldr	r1, [r2, #8]
    64ca:	3301      	adds	r3, #1
    64cc:	428b      	cmp	r3, r1
{
    64ce:	4604      	mov	r4, r0
	if ((state->backups->current_backup + 1)
    64d0:	d20a      	bcs.n	64e8 <new_backup+0x28>
		>= state->backups->num_backups) {
		FAIL();
	}

	uint32_t i = ++(state->backups->current_backup);
	memcpy(&state->backups->backup_list[i], state,
    64d2:	6810      	ldr	r0, [r2, #0]
	uint32_t i = ++(state->backups->current_backup);
    64d4:	6053      	str	r3, [r2, #4]
	memcpy(&state->backups->backup_list[i], state,
    64d6:	2214      	movs	r2, #20
    64d8:	4621      	mov	r1, r4
    64da:	fb02 0003 	mla	r0, r2, r3, r0
    64de:	f000 f8b9 	bl	6654 <memcpy>
		sizeof(cbor_state_t));

	state->elem_count = new_elem_count;

	return true;
    64e2:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    64e4:	60a5      	str	r5, [r4, #8]
}
    64e6:	bd38      	pop	{r3, r4, r5, pc}
		FAIL();
    64e8:	2000      	movs	r0, #0
    64ea:	e7fc      	b.n	64e6 <new_backup+0x26>

000064ec <restore_backup>:


bool restore_backup(cbor_state_t *state, uint32_t flags,
		uint32_t max_elem_count)
{
    64ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64f0:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint32_t elem_count = state->elem_count;

	if (state->backups->current_backup == 0) {
    64f2:	6902      	ldr	r2, [r0, #16]
{
    64f4:	4604      	mov	r4, r0
	if (state->backups->current_backup == 0) {
    64f6:	6853      	ldr	r3, [r2, #4]
{
    64f8:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    64fa:	6807      	ldr	r7, [r0, #0]
	const uint32_t elem_count = state->elem_count;
    64fc:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->backups->current_backup == 0) {
    6500:	b913      	cbnz	r3, 6508 <restore_backup+0x1c>
		FAIL();
    6502:	2000      	movs	r0, #0
	if (flags & FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    6504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & FLAG_RESTORE) {
    6508:	07e9      	lsls	r1, r5, #31
    650a:	d505      	bpl.n	6518 <restore_backup+0x2c>
		memcpy(state, &state->backups->backup_list[i],
    650c:	6811      	ldr	r1, [r2, #0]
    650e:	2214      	movs	r2, #20
    6510:	fb02 1103 	mla	r1, r2, r3, r1
    6514:	f000 f89e 	bl	6654 <memcpy>
	if (flags & FLAG_DISCARD) {
    6518:	07aa      	lsls	r2, r5, #30
		state->backups->current_backup--;
    651a:	bf41      	itttt	mi
    651c:	6922      	ldrmi	r2, [r4, #16]
    651e:	6853      	ldrmi	r3, [r2, #4]
    6520:	f103 33ff 	addmi.w	r3, r3, #4294967295
    6524:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    6526:	45b0      	cmp	r8, r6
    6528:	d8eb      	bhi.n	6502 <restore_backup+0x16>
	if (flags & FLAG_TRANSFER_PAYLOAD) {
    652a:	076b      	lsls	r3, r5, #29
    652c:	d401      	bmi.n	6532 <restore_backup+0x46>
	return true;
    652e:	2001      	movs	r0, #1
    6530:	e7e8      	b.n	6504 <restore_backup+0x18>
		state->payload = payload;
    6532:	6027      	str	r7, [r4, #0]
    6534:	e7fb      	b.n	652e <restore_backup+0x42>

00006536 <union_start_code>:


bool union_start_code(cbor_state_t *state)
{
	if (!new_backup(state, state->elem_count)) {
    6536:	6881      	ldr	r1, [r0, #8]
    6538:	f7ff bfc2 	b.w	64c0 <new_backup>

0000653c <union_elem_code>:
}


bool union_elem_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_RESTORE, state->elem_count)) {
    653c:	2101      	movs	r1, #1
    653e:	6882      	ldr	r2, [r0, #8]
    6540:	f7ff bfd4 	b.w	64ec <restore_backup>

00006544 <union_end_code>:
	return true;
}

bool union_end_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_DISCARD, state->elem_count)) {
    6544:	2102      	movs	r1, #2
    6546:	6882      	ldr	r2, [r0, #8]
    6548:	f7ff bfd0 	b.w	64ec <restore_backup>

0000654c <entry_function>:
}

bool entry_function(const uint8_t *payload, uint32_t payload_len,
		const void *struct_ptr, uint32_t *payload_len_out,
		cbor_encoder_t func, uint32_t elem_count, uint32_t num_backups)
{
    654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		.payload = payload,
		.payload_end = payload + payload_len,
		.elem_count = elem_count,
	};

	cbor_state_t state_backups[num_backups + 1];
    6550:	2414      	movs	r4, #20
{
    6552:	4605      	mov	r5, r0
    6554:	460e      	mov	r6, r1
    6556:	4698      	mov	r8, r3
	cbor_state_t state = {
    6558:	2300      	movs	r3, #0
{
    655a:	b088      	sub	sp, #32
    655c:	af00      	add	r7, sp, #0
    655e:	6c38      	ldr	r0, [r7, #64]	; 0x40
	cbor_state_t state = {
    6560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
	cbor_state_t state_backups[num_backups + 1];
    6562:	fb00 4404 	mla	r4, r0, r4, r4
	cbor_state_t state = {
    6566:	6179      	str	r1, [r7, #20]
	cbor_state_t state_backups[num_backups + 1];
    6568:	3407      	adds	r4, #7
		.payload_end = payload + payload_len,
    656a:	19a9      	adds	r1, r5, r6
	cbor_state_t state = {
    656c:	61b9      	str	r1, [r7, #24]
	cbor_state_t state_backups[num_backups + 1];
    656e:	f024 0407 	bic.w	r4, r4, #7
    6572:	1c41      	adds	r1, r0, #1

	cbor_state_backups_t backups = {
    6574:	e9c7 3101 	strd	r3, r1, [r7, #4]
	cbor_state_t state = {
    6578:	e9c7 5303 	strd	r5, r3, [r7, #12]
	cbor_state_t state_backups[num_backups + 1];
    657c:	ebad 0d04 	sub.w	sp, sp, r4
		.num_backups = num_backups + 1,
	};

	state.backups = &backups;

	bool result = func(&state, struct_ptr);
    6580:	4611      	mov	r1, r2
    6582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6584:	f107 000c 	add.w	r0, r7, #12
	cbor_state_backups_t backups = {
    6588:	f8c7 d000 	str.w	sp, [r7]
	state.backups = &backups;
    658c:	61ff      	str	r7, [r7, #28]
	bool result = func(&state, struct_ptr);
    658e:	4798      	blx	r3

	if (result && (payload_len_out != NULL)) {
    6590:	b150      	cbz	r0, 65a8 <entry_function+0x5c>
    6592:	f1b8 0f00 	cmp.w	r8, #0
    6596:	d007      	beq.n	65a8 <entry_function+0x5c>
		*payload_len_out = MIN(payload_len,
    6598:	68fb      	ldr	r3, [r7, #12]
    659a:	1b5b      	subs	r3, r3, r5
    659c:	42b3      	cmp	r3, r6
    659e:	bf94      	ite	ls
    65a0:	f8c8 3000 	strls.w	r3, [r8]
    65a4:	f8c8 6000 	strhi.w	r6, [r8]
				(size_t)state.payload - (size_t)payload);
	}
	return result;
}
    65a8:	3720      	adds	r7, #32
    65aa:	46bd      	mov	sp, r7
    65ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000065b0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    65b0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    65b2:	6800      	ldr	r0, [r0, #0]
    65b4:	f7fc b96c 	b.w	2890 <z_arm_fatal_error>

000065b8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    65b8:	2100      	movs	r1, #0
    65ba:	2001      	movs	r0, #1
    65bc:	f7fc b968 	b.w	2890 <z_arm_fatal_error>

000065c0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    65c0:	b508      	push	{r3, lr}
	handler();
    65c2:	f7fc f9c5 	bl	2950 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    65c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    65ca:	f7fc ba23 	b.w	2a14 <z_arm_exc_exit>

000065ce <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    65ce:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    65d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    65d6:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    65d8:	bf08      	it	eq
    65da:	f06f 0015 	mvneq.w	r0, #21
    65de:	4770      	bx	lr

000065e0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    65e0:	4603      	mov	r3, r0
	size_t n = 0;
    65e2:	2000      	movs	r0, #0

	while (*s != '\0') {
    65e4:	5c1a      	ldrb	r2, [r3, r0]
    65e6:	b902      	cbnz	r2, 65ea <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    65e8:	4770      	bx	lr
		n++;
    65ea:	3001      	adds	r0, #1
    65ec:	e7fa      	b.n	65e4 <strlen+0x4>

000065ee <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    65ee:	1e43      	subs	r3, r0, #1
    65f0:	3901      	subs	r1, #1
    65f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    65f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    65fa:	4282      	cmp	r2, r0
    65fc:	d101      	bne.n	6602 <strcmp+0x14>
    65fe:	2a00      	cmp	r2, #0
    6600:	d1f7      	bne.n	65f2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6602:	1a10      	subs	r0, r2, r0
    6604:	4770      	bx	lr

00006606 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6606:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6608:	b15a      	cbz	r2, 6622 <memcmp+0x1c>
    660a:	3901      	subs	r1, #1
    660c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    660e:	f810 2b01 	ldrb.w	r2, [r0], #1
    6612:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6616:	42a0      	cmp	r0, r4
    6618:	d001      	beq.n	661e <memcmp+0x18>
    661a:	429a      	cmp	r2, r3
    661c:	d0f7      	beq.n	660e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    661e:	1ad0      	subs	r0, r2, r3
}
    6620:	bd10      	pop	{r4, pc}
		return 0;
    6622:	4610      	mov	r0, r2
    6624:	e7fc      	b.n	6620 <memcmp+0x1a>

00006626 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    6626:	1a43      	subs	r3, r0, r1
    6628:	4293      	cmp	r3, r2
{
    662a:	b510      	push	{r4, lr}
    662c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    6630:	d308      	bcc.n	6644 <memmove+0x1e>
	char *dest = d;
    6632:	4602      	mov	r2, r0
    6634:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    6636:	429a      	cmp	r2, r3
    6638:	d00b      	beq.n	6652 <memmove+0x2c>
			*dest = *src;
    663a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    663e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    6642:	e7f8      	b.n	6636 <memmove+0x10>
    6644:	440a      	add	r2, r1
			dest[n] = src[n];
    6646:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    664a:	428a      	cmp	r2, r1
			dest[n] = src[n];
    664c:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    6650:	d1f9      	bne.n	6646 <memmove+0x20>
		}
	}

	return d;
}
    6652:	bd10      	pop	{r4, pc}

00006654 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6654:	b510      	push	{r4, lr}
    6656:	1e43      	subs	r3, r0, #1
    6658:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    665a:	4291      	cmp	r1, r2
    665c:	d100      	bne.n	6660 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    665e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6660:	f811 4b01 	ldrb.w	r4, [r1], #1
    6664:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6668:	e7f7      	b.n	665a <memcpy+0x6>

0000666a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    666a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    666c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    666e:	4402      	add	r2, r0
    6670:	4293      	cmp	r3, r2
    6672:	d100      	bne.n	6676 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6674:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6676:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    667a:	e7f9      	b.n	6670 <memset+0x6>

0000667c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    667c:	220c      	movs	r2, #12
    667e:	6903      	ldr	r3, [r0, #16]
    6680:	b2c9      	uxtb	r1, r1
    6682:	fb01 3302 	mla	r3, r1, r2, r3
    6686:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6688:	f000 0007 	and.w	r0, r0, #7
    668c:	4770      	bx	lr

0000668e <set_on_state>:
	__asm__ volatile(
    668e:	f04f 0320 	mov.w	r3, #32
    6692:	f3ef 8211 	mrs	r2, BASEPRI
    6696:	f383 8812 	msr	BASEPRI_MAX, r3
    669a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    669e:	6803      	ldr	r3, [r0, #0]
    66a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    66a4:	f043 0302 	orr.w	r3, r3, #2
    66a8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    66aa:	f382 8811 	msr	BASEPRI, r2
    66ae:	f3bf 8f6f 	isb	sy
}
    66b2:	4770      	bx	lr

000066b4 <stop>:
{
    66b4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    66b6:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
    66b8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    66ba:	f04f 0420 	mov.w	r4, #32
    66be:	f3ef 8511 	mrs	r5, BASEPRI
    66c2:	f384 8812 	msr	BASEPRI_MAX, r4
    66c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    66ca:	260c      	movs	r6, #12
    66cc:	fb06 3401 	mla	r4, r6, r1, r3
    66d0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    66d2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    66d6:	d008      	beq.n	66ea <stop+0x36>
    66d8:	42a2      	cmp	r2, r4
    66da:	d006      	beq.n	66ea <stop+0x36>
	__asm__ volatile(
    66dc:	f385 8811 	msr	BASEPRI, r5
    66e0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    66e4:	f04f 30ff 	mov.w	r0, #4294967295
}
    66e8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    66ea:	2201      	movs	r2, #1
    66ec:	4371      	muls	r1, r6
    66ee:	440b      	add	r3, r1
    66f0:	641a      	str	r2, [r3, #64]	; 0x40
    66f2:	f385 8811 	msr	BASEPRI, r5
    66f6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    66fa:	6843      	ldr	r3, [r0, #4]
    66fc:	440b      	add	r3, r1
    66fe:	685b      	ldr	r3, [r3, #4]
    6700:	4798      	blx	r3
	return 0;
    6702:	2000      	movs	r0, #0
    6704:	e7f0      	b.n	66e8 <stop+0x34>

00006706 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6706:	2280      	movs	r2, #128	; 0x80
    6708:	f7ff bfd4 	b.w	66b4 <stop>

0000670c <async_start>:
{
    670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    670e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6710:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    6712:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6714:	f04f 0520 	mov.w	r5, #32
    6718:	f3ef 8611 	mrs	r6, BASEPRI
    671c:	f385 8812 	msr	BASEPRI_MAX, r5
    6720:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6724:	250c      	movs	r5, #12
    6726:	4369      	muls	r1, r5
    6728:	440c      	add	r4, r1
    672a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    672c:	f005 0c07 	and.w	ip, r5, #7
    6730:	f1bc 0f01 	cmp.w	ip, #1
    6734:	d10b      	bne.n	674e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6736:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    6738:	f386 8811 	msr	BASEPRI, r6
    673c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    6740:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6744:	6843      	ldr	r3, [r0, #4]
    6746:	585b      	ldr	r3, [r3, r1]
    6748:	4798      	blx	r3
	return 0;
    674a:	2000      	movs	r0, #0
}
    674c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    674e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6752:	42af      	cmp	r7, r5
    6754:	f386 8811 	msr	BASEPRI, r6
    6758:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    675c:	bf0c      	ite	eq
    675e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    6762:	f04f 30ff 	movne.w	r0, #4294967295
    6766:	e7f1      	b.n	674c <async_start+0x40>

00006768 <api_start>:
{
    6768:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    676a:	2480      	movs	r4, #128	; 0x80
    676c:	9400      	str	r4, [sp, #0]
    676e:	f7ff ffcd 	bl	670c <async_start>
}
    6772:	b002      	add	sp, #8
    6774:	bd10      	pop	{r4, pc}

00006776 <api_blocking_start>:
}
    6776:	f06f 0085 	mvn.w	r0, #133	; 0x85
    677a:	4770      	bx	lr

0000677c <onoff_started_callback>:
{
    677c:	b410      	push	{r4}
	notify(mgr, 0);
    677e:	241c      	movs	r4, #28
	return &data->mgr[type];
    6780:	6900      	ldr	r0, [r0, #16]
    6782:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6784:	fb03 0004 	mla	r0, r3, r4, r0
    6788:	2100      	movs	r1, #0
}
    678a:	bc10      	pop	{r4}
	notify(mgr, 0);
    678c:	4710      	bx	r2

0000678e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    678e:	2000      	movs	r0, #0
    6790:	f001 becb 	b.w	852a <nrfx_clock_start>

00006794 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6794:	2000      	movs	r0, #0
    6796:	f001 bef8 	b.w	858a <nrfx_clock_stop>

0000679a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    679a:	6843      	ldr	r3, [r0, #4]
}
    679c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    679e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    67a0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    67a2:	600b      	str	r3, [r1, #0]
}
    67a4:	4770      	bx	lr

000067a6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67a6:	6843      	ldr	r3, [r0, #4]
    67a8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    67aa:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    67ac:	4042      	eors	r2, r0
    67ae:	400a      	ands	r2, r1
    67b0:	4042      	eors	r2, r0
    p_reg->OUT = value;
    67b2:	605a      	str	r2, [r3, #4]
}
    67b4:	2000      	movs	r0, #0
    67b6:	4770      	bx	lr

000067b8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67b8:	6843      	ldr	r3, [r0, #4]
}
    67ba:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67bc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    67be:	6099      	str	r1, [r3, #8]
}
    67c0:	4770      	bx	lr

000067c2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67c2:	6843      	ldr	r3, [r0, #4]
}
    67c4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67c6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    67c8:	60d9      	str	r1, [r3, #12]
}
    67ca:	4770      	bx	lr

000067cc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67cc:	6843      	ldr	r3, [r0, #4]
}
    67ce:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67d0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    67d2:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    67d4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    67d6:	6053      	str	r3, [r2, #4]
}
    67d8:	4770      	bx	lr

000067da <gpio_nrfx_manage_callback>:
	return port->data;
    67da:	6903      	ldr	r3, [r0, #16]
{
    67dc:	b510      	push	{r4, lr}
	return list->head;
    67de:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    67e0:	b148      	cbz	r0, 67f6 <gpio_nrfx_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    67e2:	4288      	cmp	r0, r1
    67e4:	d113      	bne.n	680e <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
    67e6:	689c      	ldr	r4, [r3, #8]
	return node->next;
    67e8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    67ea:	42a1      	cmp	r1, r4
	list->head = node;
    67ec:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    67ee:	d100      	bne.n	67f2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    67f0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    67f2:	2000      	movs	r0, #0
    67f4:	6008      	str	r0, [r1, #0]
	if (set) {
    67f6:	b97a      	cbnz	r2, 6818 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    67f8:	2000      	movs	r0, #0
}
    67fa:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    67fc:	4281      	cmp	r1, r0
    67fe:	d106      	bne.n	680e <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6800:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    6802:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6804:	6898      	ldr	r0, [r3, #8]
    6806:	4281      	cmp	r1, r0
    6808:	d1f3      	bne.n	67f2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    680a:	609c      	str	r4, [r3, #8]
}
    680c:	e7f1      	b.n	67f2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    680e:	4604      	mov	r4, r0
    6810:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6812:	2800      	cmp	r0, #0
    6814:	d1f2      	bne.n	67fc <gpio_nrfx_manage_callback+0x22>
			if (!set) {
    6816:	b13a      	cbz	r2, 6828 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    6818:	685a      	ldr	r2, [r3, #4]
    681a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    681c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    681e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6820:	2a00      	cmp	r2, #0
    6822:	d1e9      	bne.n	67f8 <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
    6824:	6099      	str	r1, [r3, #8]
}
    6826:	e7e7      	b.n	67f8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    6828:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    682c:	e7e5      	b.n	67fa <gpio_nrfx_manage_callback+0x20>

0000682e <is_regular_addr_valid>:
{
    682e:	b538      	push	{r3, r4, r5, lr}
    6830:	4604      	mov	r4, r0
    6832:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    6834:	f001 fee1 	bl	85fa <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    6838:	4284      	cmp	r4, r0
    683a:	d209      	bcs.n	6850 <is_regular_addr_valid+0x22>
    683c:	2c00      	cmp	r4, #0
    683e:	db07      	blt.n	6850 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    6840:	42a8      	cmp	r0, r5
    6842:	d305      	bcc.n	6850 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    6844:	442c      	add	r4, r5
	    len > flash_size ||
    6846:	4284      	cmp	r4, r0
    6848:	bf8c      	ite	hi
    684a:	2000      	movhi	r0, #0
    684c:	2001      	movls	r0, #1
}
    684e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    6850:	2000      	movs	r0, #0
    6852:	e7fc      	b.n	684e <is_regular_addr_valid+0x20>

00006854 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    6854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6858:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    685a:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
    685e:	6883      	ldr	r3, [r0, #8]
{
    6860:	460d      	mov	r5, r1
    6862:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    6864:	4669      	mov	r1, sp
    6866:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
    6868:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
    686c:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    6870:	aa01      	add	r2, sp, #4
    6872:	4798      	blx	r3

	while (layout_size--) {
    6874:	e9dd 7c00 	ldrd	r7, ip, [sp]
    6878:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    687a:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    687e:	4560      	cmp	r0, ip
    6880:	d104      	bne.n	688c <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    6882:	f06f 0015 	mvn.w	r0, #21
}
    6886:	b003      	add	sp, #12
    6888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    688c:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    6890:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    6892:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    6894:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    6898:	b97d      	cbnz	r5, 68ba <flash_get_page_info+0x66>
			index_jmp = index - info->index;
    689a:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    689c:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
    68a0:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
    68a2:	4543      	cmp	r3, r8
    68a4:	bf28      	it	cs
    68a6:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    68a8:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    68ac:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    68ae:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    68b0:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    68b2:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    68b4:	d9e3      	bls.n	687e <flash_get_page_info+0x2a>
			return 0;
    68b6:	2000      	movs	r0, #0
    68b8:	e7e5      	b.n	6886 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    68ba:	1aab      	subs	r3, r5, r2
    68bc:	fbb3 f3f9 	udiv	r3, r3, r9
    68c0:	e7ec      	b.n	689c <flash_get_page_info+0x48>

000068c2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    68c2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    68c4:	2200      	movs	r2, #0
    68c6:	f7ff bfc5 	b.w	6854 <flash_get_page_info>

000068ca <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    68ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    68ce:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    68d0:	6883      	ldr	r3, [r0, #8]
{
    68d2:	b086      	sub	sp, #24
    68d4:	4688      	mov	r8, r1
    68d6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    68d8:	695b      	ldr	r3, [r3, #20]
    68da:	aa02      	add	r2, sp, #8
    68dc:	a901      	add	r1, sp, #4
    68de:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    68e0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    68e2:	4625      	mov	r5, r4
    68e4:	9b02      	ldr	r3, [sp, #8]
    68e6:	42ab      	cmp	r3, r5
    68e8:	d802      	bhi.n	68f0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    68ea:	b006      	add	sp, #24
    68ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    68f0:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    68f2:	9f01      	ldr	r7, [sp, #4]
    68f4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    68fc:	683a      	ldr	r2, [r7, #0]
    68fe:	eb0a 0306 	add.w	r3, sl, r6
    6902:	42b2      	cmp	r2, r6
    6904:	d802      	bhi.n	690c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6906:	469a      	mov	sl, r3
    6908:	3501      	adds	r5, #1
    690a:	e7eb      	b.n	68e4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    690c:	4649      	mov	r1, r9
			page_info.start_offset = off;
    690e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6910:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6912:	a803      	add	r0, sp, #12
    6914:	47c0      	blx	r8
    6916:	2800      	cmp	r0, #0
    6918:	d0e7      	beq.n	68ea <flash_page_foreach+0x20>
			off += page_info.size;
    691a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    691c:	3601      	adds	r6, #1
			off += page_info.size;
    691e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6920:	e7ec      	b.n	68fc <flash_page_foreach+0x32>

00006922 <uarte_nrfx_config_get>:
{
    6922:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6924:	6902      	ldr	r2, [r0, #16]
    6926:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    692a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    692e:	2000      	movs	r0, #0
    6930:	4770      	bx	lr

00006932 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6932:	6843      	ldr	r3, [r0, #4]
    6934:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6936:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    693a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    693e:	4770      	bx	lr

00006940 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6940:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    6942:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6944:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6946:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    694a:	b148      	cbz	r0, 6960 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    694c:	2000      	movs	r0, #0
	*c = data->rx_data;
    694e:	7d52      	ldrb	r2, [r2, #21]
    6950:	700a      	strb	r2, [r1, #0]
    6952:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6956:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    695a:	2201      	movs	r2, #1
    695c:	601a      	str	r2, [r3, #0]
	return 0;
    695e:	4770      	bx	lr
		return -1;
    6960:	f04f 30ff 	mov.w	r0, #4294967295
}
    6964:	4770      	bx	lr

00006966 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6966:	2a00      	cmp	r2, #0
{
    6968:	b510      	push	{r4, lr}
    696a:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    696c:	dd0f      	ble.n	698e <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    696e:	6843      	ldr	r3, [r0, #4]
    6970:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6972:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6976:	b148      	cbz	r0, 698c <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6978:	2000      	movs	r0, #0
	return dev->data;
    697a:	6922      	ldr	r2, [r4, #16]
    697c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6980:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6984:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    6986:	7d52      	ldrb	r2, [r2, #21]
    6988:	700a      	strb	r2, [r1, #0]
    698a:	6018      	str	r0, [r3, #0]
}
    698c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    698e:	2000      	movs	r0, #0
    6990:	e7fc      	b.n	698c <uarte_nrfx_fifo_read+0x26>

00006992 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    6992:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    6994:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    6996:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    6998:	f04f 0020 	mov.w	r0, #32
    699c:	f3ef 8311 	mrs	r3, BASEPRI
    69a0:	f380 8812 	msr	BASEPRI_MAX, r0
    69a4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    69a8:	2000      	movs	r0, #0
    69aa:	68c9      	ldr	r1, [r1, #12]
    69ac:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    69ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    69b2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    69b6:	f383 8811 	msr	BASEPRI, r3
    69ba:	f3bf 8f6f 	isb	sy
}
    69be:	4770      	bx	lr

000069c0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    69c0:	2201      	movs	r2, #1
    69c2:	6903      	ldr	r3, [r0, #16]
    69c4:	68db      	ldr	r3, [r3, #12]
    69c6:	739a      	strb	r2, [r3, #14]
}
    69c8:	4770      	bx	lr

000069ca <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    69ca:	6903      	ldr	r3, [r0, #16]
    69cc:	68db      	ldr	r3, [r3, #12]
    69ce:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    69d0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    69d4:	b962      	cbnz	r2, 69f0 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    69d6:	6842      	ldr	r2, [r0, #4]
    69d8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69da:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    69de:	b140      	cbz	r0, 69f2 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    69e0:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    69e4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    69e8:	d003      	beq.n	69f2 <uarte_nrfx_irq_tx_ready_complete+0x28>
    69ea:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    69ec:	6119      	str	r1, [r3, #16]
    69ee:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    69f0:	2000      	movs	r0, #0
}
    69f2:	4770      	bx	lr

000069f4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    69f4:	6843      	ldr	r3, [r0, #4]
    69f6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69f8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    69fc:	3800      	subs	r0, #0
    69fe:	bf18      	it	ne
    6a00:	2001      	movne	r0, #1
    6a02:	4770      	bx	lr

00006a04 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    6a04:	2210      	movs	r2, #16
	return config->uarte_regs;
    6a06:	6843      	ldr	r3, [r0, #4]
    6a08:	681b      	ldr	r3, [r3, #0]
    6a0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6a0e:	4770      	bx	lr

00006a10 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6a10:	2210      	movs	r2, #16
	return config->uarte_regs;
    6a12:	6843      	ldr	r3, [r0, #4]
    6a14:	681b      	ldr	r3, [r3, #0]
    6a16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6a1a:	4770      	bx	lr

00006a1c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6a20:	6843      	ldr	r3, [r0, #4]
    6a22:	681b      	ldr	r3, [r3, #0]
    6a24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6a28:	4770      	bx	lr

00006a2a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    6a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6a2e:	6843      	ldr	r3, [r0, #4]
    6a30:	681b      	ldr	r3, [r3, #0]
    6a32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6a36:	4770      	bx	lr

00006a38 <uarte_nrfx_irq_is_pending>:
{
    6a38:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6a3a:	6843      	ldr	r3, [r0, #4]
{
    6a3c:	4604      	mov	r4, r0
	return config->uarte_regs;
    6a3e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6a40:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6a44:	025b      	lsls	r3, r3, #9
    6a46:	d405      	bmi.n	6a54 <uarte_nrfx_irq_is_pending+0x1c>
    6a48:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    6a4c:	f010 0010 	ands.w	r0, r0, #16
    6a50:	d106      	bne.n	6a60 <uarte_nrfx_irq_is_pending+0x28>
}
    6a52:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6a54:	f7ff ffb9 	bl	69ca <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    6a58:	2800      	cmp	r0, #0
    6a5a:	d0f5      	beq.n	6a48 <uarte_nrfx_irq_is_pending+0x10>
		||
    6a5c:	2001      	movs	r0, #1
    6a5e:	e7f8      	b.n	6a52 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    6a60:	4620      	mov	r0, r4
    6a62:	f7ff ffc7 	bl	69f4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6a66:	3800      	subs	r0, #0
    6a68:	bf18      	it	ne
    6a6a:	2001      	movne	r0, #1
    6a6c:	e7f1      	b.n	6a52 <uarte_nrfx_irq_is_pending+0x1a>

00006a6e <uarte_nrfx_irq_update>:
}
    6a6e:	2001      	movs	r0, #1
    6a70:	4770      	bx	lr

00006a72 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    6a72:	6903      	ldr	r3, [r0, #16]
    6a74:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    6a76:	e9c3 1200 	strd	r1, r2, [r3]
}
    6a7a:	4770      	bx	lr

00006a7c <tx_start.isra.0>:
	return config->uarte_regs;
    6a7c:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6a7e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6a82:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a86:	2200      	movs	r2, #0
    6a88:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6a8c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6a90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    6a94:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6a98:	6842      	ldr	r2, [r0, #4]
    6a9a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6a9c:	bf41      	itttt	mi
    6a9e:	2208      	movmi	r2, #8
    6aa0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    6aa4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    6aa8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6aac:	2201      	movs	r2, #1
    6aae:	609a      	str	r2, [r3, #8]
}
    6ab0:	4770      	bx	lr

00006ab2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6ab2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6ab4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ab6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6aba:	b940      	cbnz	r0, 6ace <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6abc:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6abe:	079b      	lsls	r3, r3, #30
    6ac0:	d406      	bmi.n	6ad0 <is_tx_ready.isra.0+0x1e>
    6ac2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6ac6:	3800      	subs	r0, #0
    6ac8:	bf18      	it	ne
    6aca:	2001      	movne	r0, #1
    6acc:	4770      	bx	lr
    6ace:	2001      	movs	r0, #1
}
    6ad0:	4770      	bx	lr

00006ad2 <uarte_nrfx_fifo_fill>:
{
    6ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    6ad4:	6905      	ldr	r5, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    6ad6:	68eb      	ldr	r3, [r5, #12]
    6ad8:	899c      	ldrh	r4, [r3, #12]
    6ada:	3310      	adds	r3, #16
    6adc:	4294      	cmp	r4, r2
    6ade:	bfa8      	it	ge
    6ae0:	4614      	movge	r4, r2
    6ae2:	2201      	movs	r2, #1
    6ae4:	e8d3 6fef 	ldaex	r6, [r3]
    6ae8:	2e00      	cmp	r6, #0
    6aea:	d103      	bne.n	6af4 <uarte_nrfx_fifo_fill+0x22>
    6aec:	e8c3 2fe7 	stlex	r7, r2, [r3]
    6af0:	2f00      	cmp	r7, #0
    6af2:	d1f7      	bne.n	6ae4 <uarte_nrfx_fifo_fill+0x12>
    6af4:	bf0c      	ite	eq
    6af6:	4613      	moveq	r3, r2
    6af8:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6afa:	d01e      	beq.n	6b3a <uarte_nrfx_fifo_fill+0x68>
		return 0;
    6afc:	461c      	mov	r4, r3
}
    6afe:	4620      	mov	r0, r4
    6b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    6b02:	68ea      	ldr	r2, [r5, #12]
    6b04:	5cce      	ldrb	r6, [r1, r3]
    6b06:	6892      	ldr	r2, [r2, #8]
    6b08:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
    6b0a:	3301      	adds	r3, #1
    6b0c:	42a3      	cmp	r3, r4
    6b0e:	dbf8      	blt.n	6b02 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
    6b10:	f04f 0320 	mov.w	r3, #32
    6b14:	f3ef 8711 	mrs	r7, BASEPRI
    6b18:	f383 8812 	msr	BASEPRI_MAX, r3
    6b1c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6b20:	6846      	ldr	r6, [r0, #4]
    6b22:	4630      	mov	r0, r6
    6b24:	f7ff ffc5 	bl	6ab2 <is_tx_ready.isra.0>
    6b28:	68eb      	ldr	r3, [r5, #12]
    6b2a:	b940      	cbnz	r0, 6b3e <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
    6b2c:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    6b2e:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6b30:	f387 8811 	msr	BASEPRI, r7
    6b34:	f3bf 8f6f 	isb	sy
	return len;
    6b38:	e7e1      	b.n	6afe <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
    6b3a:	2300      	movs	r3, #0
    6b3c:	e7e6      	b.n	6b0c <uarte_nrfx_fifo_fill+0x3a>
		tx_start(dev, data->int_driven->tx_buffer, len);
    6b3e:	4622      	mov	r2, r4
    6b40:	4630      	mov	r0, r6
    6b42:	6899      	ldr	r1, [r3, #8]
    6b44:	f7ff ff9a 	bl	6a7c <tx_start.isra.0>
    6b48:	e7f2      	b.n	6b30 <uarte_nrfx_fifo_fill+0x5e>

00006b4a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6b4a:	6843      	ldr	r3, [r0, #4]
{
    6b4c:	b410      	push	{r4}
	return config->uarte_regs;
    6b4e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6b50:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6b54:	05d1      	lsls	r1, r2, #23
    6b56:	d518      	bpl.n	6b8a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b58:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6b5c:	b1aa      	cbz	r2, 6b8a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6b5e:	f04f 0120 	mov.w	r1, #32
    6b62:	f3ef 8211 	mrs	r2, BASEPRI
    6b66:	f381 8812 	msr	BASEPRI_MAX, r1
    6b6a:	f3bf 8f6f 	isb	sy
    6b6e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6b72:	b131      	cbz	r1, 6b82 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b74:	2100      	movs	r1, #0
    6b76:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6b7a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b7e:	2101      	movs	r1, #1
    6b80:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6b82:	f382 8811 	msr	BASEPRI, r2
    6b86:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6b8a:	6842      	ldr	r2, [r0, #4]
    6b8c:	6852      	ldr	r2, [r2, #4]
    6b8e:	06d2      	lsls	r2, r2, #27
    6b90:	d51a      	bpl.n	6bc8 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    6b92:	f04f 0220 	mov.w	r2, #32
    6b96:	f3ef 8111 	mrs	r1, BASEPRI
    6b9a:	f382 8812 	msr	BASEPRI_MAX, r2
    6b9e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ba2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6ba6:	b112      	cbz	r2, 6bae <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6ba8:	2200      	movs	r2, #0
    6baa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    6bae:	6902      	ldr	r2, [r0, #16]
    6bb0:	68d2      	ldr	r2, [r2, #12]
    6bb2:	b10a      	cbz	r2, 6bb8 <uarte_nrfx_isr_int+0x6e>
    6bb4:	6912      	ldr	r2, [r2, #16]
    6bb6:	b91a      	cbnz	r2, 6bc0 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    6bb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6bbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    6bc0:	f381 8811 	msr	BASEPRI, r1
    6bc4:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    6bc8:	6902      	ldr	r2, [r0, #16]
    6bca:	68d2      	ldr	r2, [r2, #12]
    6bcc:	b15a      	cbz	r2, 6be6 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6bce:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6bd2:	b151      	cbz	r1, 6bea <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
    6bd4:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    6bd6:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    6bd8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6bda:	b134      	cbz	r4, 6bea <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    6bdc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    6be0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6be4:	7391      	strb	r1, [r2, #14]
}
    6be6:	bc10      	pop	{r4}
    6be8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6bea:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6bee:	b121      	cbz	r1, 6bfa <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bf0:	2100      	movs	r1, #0
    6bf2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6bf6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6bfa:	6813      	ldr	r3, [r2, #0]
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	d0f2      	beq.n	6be6 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6c00:	6851      	ldr	r1, [r2, #4]
}
    6c02:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6c04:	4718      	bx	r3

00006c06 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6c06:	b510      	push	{r4, lr}
    6c08:	4604      	mov	r4, r0
    6c0a:	2200      	movs	r2, #0
    6c0c:	2101      	movs	r1, #1
    6c0e:	2009      	movs	r0, #9
    6c10:	f7fb fe88 	bl	2924 <z_arm_irq_priority_set>
    6c14:	2009      	movs	r0, #9
    6c16:	f7fb fe69 	bl	28ec <arch_irq_enable>
    6c1a:	4620      	mov	r0, r4
    6c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c20:	f7fc bed0 	b.w	39c4 <uarte_instance_init.constprop.0>

00006c24 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6c24:	b510      	push	{r4, lr}
    6c26:	4604      	mov	r4, r0
    6c28:	2200      	movs	r2, #0
    6c2a:	2101      	movs	r1, #1
    6c2c:	2008      	movs	r0, #8
    6c2e:	f7fb fe79 	bl	2924 <z_arm_irq_priority_set>
    6c32:	2008      	movs	r0, #8
    6c34:	f7fb fe5a 	bl	28ec <arch_irq_enable>
    6c38:	4620      	mov	r0, r4
    6c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c3e:	f7fc bec1 	b.w	39c4 <uarte_instance_init.constprop.0>

00006c42 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6c42:	f7fe bc55 	b.w	54f0 <nrf_cc3xx_platform_init_no_rng>

00006c46 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6c46:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6c48:	f7fb f8de 	bl	1e08 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6c4c:	f7ff fa44 	bl	60d8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6c54:	f7fe bc4c 	b.w	54f0 <nrf_cc3xx_platform_init_no_rng>

00006c58 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6c58:	6880      	ldr	r0, [r0, #8]
}
    6c5a:	3828      	subs	r0, #40	; 0x28
    6c5c:	4770      	bx	lr

00006c5e <boot_magic_compatible_check>:
    switch (tbl_val) {
    6c5e:	2804      	cmp	r0, #4
    6c60:	d009      	beq.n	6c76 <boot_magic_compatible_check+0x18>
    6c62:	2805      	cmp	r0, #5
    6c64:	d103      	bne.n	6c6e <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6c66:	1e48      	subs	r0, r1, #1
    6c68:	bf18      	it	ne
    6c6a:	2001      	movne	r0, #1
    6c6c:	4770      	bx	lr
        return tbl_val == val;
    6c6e:	1a43      	subs	r3, r0, r1
    6c70:	4258      	negs	r0, r3
    6c72:	4158      	adcs	r0, r3
    6c74:	4770      	bx	lr
    switch (tbl_val) {
    6c76:	2001      	movs	r0, #1
}
    6c78:	4770      	bx	lr

00006c7a <bootutil_buffer_is_erased>:
{
    6c7a:	b538      	push	{r3, r4, r5, lr}
    6c7c:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    6c7e:	460c      	mov	r4, r1
    6c80:	b161      	cbz	r1, 6c9c <bootutil_buffer_is_erased+0x22>
    6c82:	b15a      	cbz	r2, 6c9c <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    6c84:	f7ff f9fb 	bl	607e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6c88:	4621      	mov	r1, r4
    6c8a:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    6c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
    6c90:	4283      	cmp	r3, r0
    6c92:	d103      	bne.n	6c9c <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6c94:	42a9      	cmp	r1, r5
    6c96:	d1f9      	bne.n	6c8c <bootutil_buffer_is_erased+0x12>
    return true;
    6c98:	2001      	movs	r0, #1
}
    6c9a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    6c9c:	2000      	movs	r0, #0
    6c9e:	e7fc      	b.n	6c9a <bootutil_buffer_is_erased+0x20>

00006ca0 <boot_read_flag>:
{
    6ca0:	b538      	push	{r3, r4, r5, lr}
    6ca2:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6ca4:	2301      	movs	r3, #1
{
    6ca6:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6ca8:	4622      	mov	r2, r4
{
    6caa:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6cac:	f7ff f960 	bl	5f70 <flash_area_read>
    if (rc < 0) {
    6cb0:	2800      	cmp	r0, #0
    6cb2:	db0f      	blt.n	6cd4 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6cb4:	2201      	movs	r2, #1
    6cb6:	4621      	mov	r1, r4
    6cb8:	4628      	mov	r0, r5
    6cba:	f7ff ffde 	bl	6c7a <bootutil_buffer_is_erased>
    6cbe:	b938      	cbnz	r0, 6cd0 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    6cc0:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    6cc2:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    6cc4:	bf14      	ite	ne
    6cc6:	2302      	movne	r3, #2
    6cc8:	2301      	moveq	r3, #1
    6cca:	2000      	movs	r0, #0
    6ccc:	7023      	strb	r3, [r4, #0]
}
    6cce:	bd38      	pop	{r3, r4, r5, pc}
    6cd0:	2303      	movs	r3, #3
    6cd2:	e7fa      	b.n	6cca <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    6cd4:	2001      	movs	r0, #1
    6cd6:	e7fa      	b.n	6cce <boot_read_flag+0x2e>

00006cd8 <boot_write_trailer>:
{
    6cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6cdc:	461d      	mov	r5, r3
    6cde:	4606      	mov	r6, r0
    6ce0:	460f      	mov	r7, r1
    6ce2:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6ce4:	f7ff f9c2 	bl	606c <flash_area_align>
    6ce8:	b2c4      	uxtb	r4, r0
    align = (inlen + align - 1) & ~(align - 1);
    6cea:	4263      	negs	r3, r4
    6cec:	442c      	add	r4, r5
    6cee:	3c01      	subs	r4, #1
    6cf0:	b2e4      	uxtb	r4, r4
    6cf2:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
    6cf4:	2c08      	cmp	r4, #8
    6cf6:	d81a      	bhi.n	6d2e <boot_write_trailer+0x56>
    erased_val = flash_area_erased_val(fap);
    6cf8:	4630      	mov	r0, r6
    6cfa:	f7ff f9c0 	bl	607e <flash_area_erased_val>
    6cfe:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6d00:	462a      	mov	r2, r5
    6d02:	4641      	mov	r1, r8
    6d04:	4668      	mov	r0, sp
    6d06:	f7ff fca5 	bl	6654 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6d0a:	4649      	mov	r1, r9
    6d0c:	1b62      	subs	r2, r4, r5
    6d0e:	eb0d 0005 	add.w	r0, sp, r5
    6d12:	f7ff fcaa 	bl	666a <memset>
    rc = flash_area_write(fap, off, buf, align);
    6d16:	4623      	mov	r3, r4
    6d18:	466a      	mov	r2, sp
    6d1a:	4639      	mov	r1, r7
    6d1c:	4630      	mov	r0, r6
    6d1e:	f7ff f943 	bl	5fa8 <flash_area_write>
    if (rc != 0) {
    6d22:	3800      	subs	r0, #0
    6d24:	bf18      	it	ne
    6d26:	2001      	movne	r0, #1
}
    6d28:	b003      	add	sp, #12
    6d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6d2e:	f04f 30ff 	mov.w	r0, #4294967295
    6d32:	e7f9      	b.n	6d28 <boot_write_trailer+0x50>

00006d34 <boot_write_trailer_flag>:
{
    6d34:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6d36:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6d38:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6d3c:	aa01      	add	r2, sp, #4
    6d3e:	f7ff ffcb 	bl	6cd8 <boot_write_trailer>
}
    6d42:	b003      	add	sp, #12
    6d44:	f85d fb04 	ldr.w	pc, [sp], #4

00006d48 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6d48:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6d4a:	2201      	movs	r2, #1
    6d4c:	3918      	subs	r1, #24
    6d4e:	f7ff bff1 	b.w	6d34 <boot_write_trailer_flag>

00006d52 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6d52:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6d54:	3a18      	subs	r2, #24
    6d56:	f7ff bfa3 	b.w	6ca0 <boot_read_flag>

00006d5a <boot_read_swap_state_by_id>:
{
    6d5a:	b513      	push	{r0, r1, r4, lr}
    6d5c:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6d5e:	b2c0      	uxtb	r0, r0
    6d60:	a901      	add	r1, sp, #4
    6d62:	f7fa fffd 	bl	1d60 <flash_area_open>
    if (rc != 0) {
    6d66:	b950      	cbnz	r0, 6d7e <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6d68:	4621      	mov	r1, r4
    6d6a:	9801      	ldr	r0, [sp, #4]
    6d6c:	f7fd f922 	bl	3fb4 <boot_read_swap_state>
    6d70:	4604      	mov	r4, r0
    flash_area_close(fap);
    6d72:	9801      	ldr	r0, [sp, #4]
    6d74:	f7ff f8fb 	bl	5f6e <flash_area_close>
}
    6d78:	4620      	mov	r0, r4
    6d7a:	b002      	add	sp, #8
    6d7c:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6d7e:	2401      	movs	r4, #1
    6d80:	e7fa      	b.n	6d78 <boot_read_swap_state_by_id+0x1e>

00006d82 <boot_write_swap_info>:
{
    6d82:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6d84:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6d88:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6d8c:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6d8e:	2301      	movs	r3, #1
    6d90:	f10d 0207 	add.w	r2, sp, #7
    6d94:	3928      	subs	r1, #40	; 0x28
    6d96:	f7ff ff9f 	bl	6cd8 <boot_write_trailer>
}
    6d9a:	b003      	add	sp, #12
    6d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00006da0 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6da0:	2000      	movs	r0, #0
    6da2:	4770      	bx	lr

00006da4 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    6da4:	6803      	ldr	r3, [r0, #0]
{
    6da6:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6da8:	1acd      	subs	r5, r1, r3
    6daa:	2d00      	cmp	r5, #0
    6dac:	dc02      	bgt.n	6db4 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6dae:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    6db2:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    6db4:	f993 6000 	ldrsb.w	r6, [r3]
    6db8:	781c      	ldrb	r4, [r3, #0]
    6dba:	2e00      	cmp	r6, #0
    6dbc:	db0a      	blt.n	6dd4 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    6dbe:	1c5c      	adds	r4, r3, #1
    6dc0:	6004      	str	r4, [r0, #0]
    6dc2:	781b      	ldrb	r3, [r3, #0]
    6dc4:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    6dc6:	6803      	ldr	r3, [r0, #0]
    6dc8:	1ac9      	subs	r1, r1, r3
    6dca:	6813      	ldr	r3, [r2, #0]
    6dcc:	428b      	cmp	r3, r1
    6dce:	d8ee      	bhi.n	6dae <mbedtls_asn1_get_len+0xa>
    return( 0 );
    6dd0:	2000      	movs	r0, #0
    6dd2:	e7ee      	b.n	6db2 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    6dd4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6dd8:	3c01      	subs	r4, #1
    6dda:	2c03      	cmp	r4, #3
    6ddc:	d827      	bhi.n	6e2e <mbedtls_asn1_get_len+0x8a>
    6dde:	e8df f004 	tbb	[pc, r4]
    6de2:	0902      	.short	0x0902
    6de4:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    6de6:	2d01      	cmp	r5, #1
    6de8:	d0e1      	beq.n	6dae <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    6dea:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    6dec:	3302      	adds	r3, #2
            *len = (*p)[1];
    6dee:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6df0:	6003      	str	r3, [r0, #0]
            break;
    6df2:	e7e8      	b.n	6dc6 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    6df4:	2d02      	cmp	r5, #2
    6df6:	ddda      	ble.n	6dae <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6df8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    6dfc:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6dfe:	ba64      	rev16	r4, r4
    6e00:	b2a4      	uxth	r4, r4
    6e02:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    6e04:	e7f4      	b.n	6df0 <mbedtls_asn1_get_len+0x4c>
            if( ( end - *p ) < 4 )
    6e06:	2d03      	cmp	r5, #3
    6e08:	ddd1      	ble.n	6dae <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6e0a:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6e0c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6e0e:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6e14:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    6e16:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6e18:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6e1a:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6e1c:	e7e8      	b.n	6df0 <mbedtls_asn1_get_len+0x4c>
            if( ( end - *p ) < 5 )
    6e1e:	2d04      	cmp	r5, #4
    6e20:	ddc5      	ble.n	6dae <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6e22:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    6e26:	3305      	adds	r3, #5
    6e28:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6e2a:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6e2c:	e7e0      	b.n	6df0 <mbedtls_asn1_get_len+0x4c>
        switch( **p & 0x7F )
    6e2e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6e32:	e7be      	b.n	6db2 <mbedtls_asn1_get_len+0xe>

00006e34 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6e34:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6e36:	6804      	ldr	r4, [r0, #0]
    6e38:	1b0e      	subs	r6, r1, r4
    6e3a:	2e00      	cmp	r6, #0
    6e3c:	dd07      	ble.n	6e4e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6e3e:	7826      	ldrb	r6, [r4, #0]
    6e40:	429e      	cmp	r6, r3
    6e42:	d108      	bne.n	6e56 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6e44:	3401      	adds	r4, #1
    6e46:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6e48:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6e4a:	f7ff bfab 	b.w	6da4 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6e4e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    6e52:	bc70      	pop	{r4, r5, r6}
    6e54:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6e56:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6e5a:	e7fa      	b.n	6e52 <mbedtls_asn1_get_tag+0x1e>

00006e5c <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6e5e:	2302      	movs	r3, #2
{
    6e60:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6e62:	aa01      	add	r2, sp, #4
{
    6e64:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6e66:	f7ff ffe5 	bl	6e34 <mbedtls_asn1_get_tag>
    6e6a:	b940      	cbnz	r0, 6e7e <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    6e6c:	9e01      	ldr	r6, [sp, #4]
    6e6e:	4628      	mov	r0, r5
    6e70:	4632      	mov	r2, r6
    6e72:	6821      	ldr	r1, [r4, #0]
    6e74:	f000 fb5a 	bl	752c <mbedtls_mpi_read_binary>

    *p += len;
    6e78:	6823      	ldr	r3, [r4, #0]
    6e7a:	4433      	add	r3, r6
    6e7c:	6023      	str	r3, [r4, #0]

    return( ret );
}
    6e7e:	b002      	add	sp, #8
    6e80:	bd70      	pop	{r4, r5, r6, pc}

00006e82 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    6e82:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    6e84:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -assign;
    6e86:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    6e88:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    6e8a:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    6e8c:	4285      	cmp	r5, r0
    6e8e:	d100      	bne.n	6e92 <mpi_safe_cond_assign+0x10>
}
    6e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    6e92:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    6e96:	f851 4f04 	ldr.w	r4, [r1, #4]!
    6e9a:	403e      	ands	r6, r7
    6e9c:	401c      	ands	r4, r3
    6e9e:	4334      	orrs	r4, r6
    6ea0:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    6ea2:	3501      	adds	r5, #1
    6ea4:	e7f2      	b.n	6e8c <mpi_safe_cond_assign+0xa>

00006ea6 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    6ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6ea8:	4684      	mov	ip, r0
{
    6eaa:	4617      	mov	r7, r2
    6eac:	460e      	mov	r6, r1
    6eae:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    6eb0:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    6eb2:	f1bc 0f0f 	cmp.w	ip, #15
    6eb6:	f106 0640 	add.w	r6, r6, #64	; 0x40
    6eba:	f104 0440 	add.w	r4, r4, #64	; 0x40
    6ebe:	d877      	bhi.n	6fb0 <mpi_mul_hlp+0x10a>
    6ec0:	f06f 020f 	mvn.w	r2, #15
    6ec4:	0904      	lsrs	r4, r0, #4
    6ec6:	fb02 0004 	mla	r0, r2, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    6eca:	2807      	cmp	r0, #7
    6ecc:	ea4f 1c84 	mov.w	ip, r4, lsl #6
    6ed0:	eb01 1684 	add.w	r6, r1, r4, lsl #6
    6ed4:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    6ed8:	d95d      	bls.n	6f96 <mpi_mul_hlp+0xf0>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6eda:	f851 100c 	ldr.w	r1, [r1, ip]
    for( ; i >= 8; i -= 8 )
    6ede:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    6ee0:	fba3 1201 	umull	r1, r2, r3, r1
    6ee4:	1869      	adds	r1, r5, r1
    6ee6:	f857 500c 	ldr.w	r5, [r7, ip]
    6eea:	f142 0200 	adc.w	r2, r2, #0
    6eee:	1949      	adds	r1, r1, r5
    6ef0:	f847 100c 	str.w	r1, [r7, ip]
    6ef4:	6871      	ldr	r1, [r6, #4]
    6ef6:	f142 0200 	adc.w	r2, r2, #0
    6efa:	fba3 5101 	umull	r5, r1, r3, r1
    6efe:	1952      	adds	r2, r2, r5
    6f00:	6865      	ldr	r5, [r4, #4]
    6f02:	f141 0100 	adc.w	r1, r1, #0
    6f06:	1952      	adds	r2, r2, r5
    6f08:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    6f0a:	68b2      	ldr	r2, [r6, #8]
        MULADDC_CORE   MULADDC_CORE
    6f0c:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6f10:	fba3 5202 	umull	r5, r2, r3, r2
    6f14:	1949      	adds	r1, r1, r5
    6f16:	68a5      	ldr	r5, [r4, #8]
    6f18:	f142 0200 	adc.w	r2, r2, #0
    6f1c:	1949      	adds	r1, r1, r5
    6f1e:	60a1      	str	r1, [r4, #8]
    6f20:	68f1      	ldr	r1, [r6, #12]
    6f22:	f142 0200 	adc.w	r2, r2, #0
    6f26:	fba3 5101 	umull	r5, r1, r3, r1
    6f2a:	1952      	adds	r2, r2, r5
    6f2c:	68e5      	ldr	r5, [r4, #12]
    6f2e:	f141 0100 	adc.w	r1, r1, #0
    6f32:	1952      	adds	r2, r2, r5
    6f34:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
    6f36:	6932      	ldr	r2, [r6, #16]
        MULADDC_CORE   MULADDC_CORE
    6f38:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6f3c:	fba3 5202 	umull	r5, r2, r3, r2
    6f40:	1949      	adds	r1, r1, r5
    6f42:	6925      	ldr	r5, [r4, #16]
    6f44:	f142 0200 	adc.w	r2, r2, #0
    6f48:	1949      	adds	r1, r1, r5
    6f4a:	6121      	str	r1, [r4, #16]
    6f4c:	6971      	ldr	r1, [r6, #20]
    6f4e:	f142 0200 	adc.w	r2, r2, #0
    6f52:	fba3 5101 	umull	r5, r1, r3, r1
    6f56:	1952      	adds	r2, r2, r5
    6f58:	6965      	ldr	r5, [r4, #20]
    6f5a:	f141 0100 	adc.w	r1, r1, #0
    6f5e:	1952      	adds	r2, r2, r5
    6f60:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
    6f62:	69b2      	ldr	r2, [r6, #24]
        MULADDC_CORE   MULADDC_CORE
    6f64:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6f68:	fba3 5202 	umull	r5, r2, r3, r2
    6f6c:	1949      	adds	r1, r1, r5
    6f6e:	69a5      	ldr	r5, [r4, #24]
    6f70:	f142 0200 	adc.w	r2, r2, #0
    6f74:	1949      	adds	r1, r1, r5
    6f76:	61a1      	str	r1, [r4, #24]
    6f78:	69f1      	ldr	r1, [r6, #28]
    6f7a:	f142 0200 	adc.w	r2, r2, #0
    6f7e:	fba3 1501 	umull	r1, r5, r3, r1
    6f82:	1852      	adds	r2, r2, r1
    6f84:	69e1      	ldr	r1, [r4, #28]
    6f86:	f145 0500 	adc.w	r5, r5, #0
    6f8a:	1852      	adds	r2, r2, r1
    6f8c:	61e2      	str	r2, [r4, #28]
    6f8e:	f145 0500 	adc.w	r5, r5, #0
    6f92:	3420      	adds	r4, #32
    6f94:	3620      	adds	r6, #32
    6f96:	4627      	mov	r7, r4
    6f98:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    6f9c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    6fa0:	42b0      	cmp	r0, r6
    6fa2:	f040 8106 	bne.w	71b2 <mpi_mul_hlp+0x30c>
    6fa6:	4464      	add	r4, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    6fa8:	2d00      	cmp	r5, #0
    6faa:	f040 8110 	bne.w	71ce <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    6fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_CORE   MULADDC_CORE
    6fb0:	f856 2c40 	ldr.w	r2, [r6, #-64]
    for( ; i >= 16; i -= 16 )
    6fb4:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
    6fb8:	fba3 e202 	umull	lr, r2, r3, r2
    6fbc:	eb15 0e0e 	adds.w	lr, r5, lr
    6fc0:	f854 5c40 	ldr.w	r5, [r4, #-64]
    6fc4:	f142 0200 	adc.w	r2, r2, #0
    6fc8:	eb15 050e 	adds.w	r5, r5, lr
    6fcc:	f844 5c40 	str.w	r5, [r4, #-64]
    6fd0:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    6fd4:	f142 0200 	adc.w	r2, r2, #0
    6fd8:	fba3 e505 	umull	lr, r5, r3, r5
    6fdc:	eb12 0e0e 	adds.w	lr, r2, lr
    6fe0:	f854 2c3c 	ldr.w	r2, [r4, #-60]
    6fe4:	f145 0500 	adc.w	r5, r5, #0
    6fe8:	eb12 020e 	adds.w	r2, r2, lr
    6fec:	f844 2c3c 	str.w	r2, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    6ff0:	f856 2c38 	ldr.w	r2, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    6ff4:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6ff8:	fba3 e202 	umull	lr, r2, r3, r2
    6ffc:	eb15 0e0e 	adds.w	lr, r5, lr
    7000:	f854 5c38 	ldr.w	r5, [r4, #-56]
    7004:	f142 0200 	adc.w	r2, r2, #0
    7008:	eb15 050e 	adds.w	r5, r5, lr
    700c:	f844 5c38 	str.w	r5, [r4, #-56]
    7010:	f856 5c34 	ldr.w	r5, [r6, #-52]
    7014:	f142 0200 	adc.w	r2, r2, #0
    7018:	fba3 e505 	umull	lr, r5, r3, r5
    701c:	eb12 0e0e 	adds.w	lr, r2, lr
    7020:	f854 2c34 	ldr.w	r2, [r4, #-52]
    7024:	f145 0500 	adc.w	r5, r5, #0
    7028:	eb12 020e 	adds.w	r2, r2, lr
    702c:	f844 2c34 	str.w	r2, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    7030:	f856 2c30 	ldr.w	r2, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    7034:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7038:	fba3 e202 	umull	lr, r2, r3, r2
    703c:	eb15 0e0e 	adds.w	lr, r5, lr
    7040:	f854 5c30 	ldr.w	r5, [r4, #-48]
    7044:	f142 0200 	adc.w	r2, r2, #0
    7048:	eb15 050e 	adds.w	r5, r5, lr
    704c:	f844 5c30 	str.w	r5, [r4, #-48]
    7050:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    7054:	f142 0200 	adc.w	r2, r2, #0
    7058:	fba3 e505 	umull	lr, r5, r3, r5
    705c:	eb12 0e0e 	adds.w	lr, r2, lr
    7060:	f854 2c2c 	ldr.w	r2, [r4, #-44]
    7064:	f145 0500 	adc.w	r5, r5, #0
    7068:	eb12 020e 	adds.w	r2, r2, lr
    706c:	f844 2c2c 	str.w	r2, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    7070:	f856 2c28 	ldr.w	r2, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    7074:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7078:	fba3 e202 	umull	lr, r2, r3, r2
    707c:	eb15 0e0e 	adds.w	lr, r5, lr
    7080:	f854 5c28 	ldr.w	r5, [r4, #-40]
    7084:	f142 0200 	adc.w	r2, r2, #0
    7088:	eb15 050e 	adds.w	r5, r5, lr
    708c:	f844 5c28 	str.w	r5, [r4, #-40]
    7090:	f856 5c24 	ldr.w	r5, [r6, #-36]
    7094:	f142 0200 	adc.w	r2, r2, #0
    7098:	fba3 e505 	umull	lr, r5, r3, r5
    709c:	eb12 0e0e 	adds.w	lr, r2, lr
    70a0:	f854 2c24 	ldr.w	r2, [r4, #-36]
    70a4:	f145 0500 	adc.w	r5, r5, #0
    70a8:	eb12 020e 	adds.w	r2, r2, lr
    70ac:	f844 2c24 	str.w	r2, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    70b0:	f856 2c20 	ldr.w	r2, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    70b4:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    70b8:	fba3 e202 	umull	lr, r2, r3, r2
    70bc:	eb15 0e0e 	adds.w	lr, r5, lr
    70c0:	f854 5c20 	ldr.w	r5, [r4, #-32]
    70c4:	f142 0200 	adc.w	r2, r2, #0
    70c8:	eb15 050e 	adds.w	r5, r5, lr
    70cc:	f844 5c20 	str.w	r5, [r4, #-32]
    70d0:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    70d4:	f142 0200 	adc.w	r2, r2, #0
    70d8:	fba3 e505 	umull	lr, r5, r3, r5
    70dc:	eb12 0e0e 	adds.w	lr, r2, lr
    70e0:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    70e4:	f145 0500 	adc.w	r5, r5, #0
    70e8:	eb12 020e 	adds.w	r2, r2, lr
    70ec:	f844 2c1c 	str.w	r2, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    70f0:	f856 2c18 	ldr.w	r2, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    70f4:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    70f8:	fba3 e202 	umull	lr, r2, r3, r2
    70fc:	eb15 0e0e 	adds.w	lr, r5, lr
    7100:	f854 5c18 	ldr.w	r5, [r4, #-24]
    7104:	f142 0200 	adc.w	r2, r2, #0
    7108:	eb15 050e 	adds.w	r5, r5, lr
    710c:	f844 5c18 	str.w	r5, [r4, #-24]
    7110:	f856 5c14 	ldr.w	r5, [r6, #-20]
    7114:	f142 0200 	adc.w	r2, r2, #0
    7118:	fba3 e505 	umull	lr, r5, r3, r5
    711c:	eb12 0e0e 	adds.w	lr, r2, lr
    7120:	f854 2c14 	ldr.w	r2, [r4, #-20]
    7124:	f145 0500 	adc.w	r5, r5, #0
    7128:	eb12 020e 	adds.w	r2, r2, lr
    712c:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    7130:	f856 2c10 	ldr.w	r2, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    7134:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7138:	fba3 e202 	umull	lr, r2, r3, r2
    713c:	eb15 0e0e 	adds.w	lr, r5, lr
    7140:	f854 5c10 	ldr.w	r5, [r4, #-16]
    7144:	f142 0200 	adc.w	r2, r2, #0
    7148:	eb15 050e 	adds.w	r5, r5, lr
    714c:	f844 5c10 	str.w	r5, [r4, #-16]
    7150:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    7154:	f142 0200 	adc.w	r2, r2, #0
    7158:	fba3 e505 	umull	lr, r5, r3, r5
    715c:	eb12 0e0e 	adds.w	lr, r2, lr
    7160:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    7164:	f145 0500 	adc.w	r5, r5, #0
    7168:	eb12 020e 	adds.w	r2, r2, lr
    716c:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    7170:	f856 2c08 	ldr.w	r2, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    7174:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7178:	fba3 e202 	umull	lr, r2, r3, r2
    717c:	eb15 0e0e 	adds.w	lr, r5, lr
    7180:	f854 5c08 	ldr.w	r5, [r4, #-8]
    7184:	f142 0200 	adc.w	r2, r2, #0
    7188:	eb15 050e 	adds.w	r5, r5, lr
    718c:	f844 5c08 	str.w	r5, [r4, #-8]
    7190:	f856 5c04 	ldr.w	r5, [r6, #-4]
    7194:	f142 0200 	adc.w	r2, r2, #0
    7198:	fba3 5e05 	umull	r5, lr, r3, r5
    719c:	1952      	adds	r2, r2, r5
    719e:	f854 5c04 	ldr.w	r5, [r4, #-4]
    71a2:	f14e 0e00 	adc.w	lr, lr, #0
    71a6:	18aa      	adds	r2, r5, r2
    71a8:	f14e 0500 	adc.w	r5, lr, #0
    71ac:	f844 2c04 	str.w	r2, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    71b0:	e67f      	b.n	6eb2 <mpi_mul_hlp+0xc>
        MULADDC_CORE
    71b2:	f856 2b04 	ldr.w	r2, [r6], #4
    71b6:	fba3 2102 	umull	r2, r1, r3, r2
    71ba:	18aa      	adds	r2, r5, r2
    71bc:	f141 0500 	adc.w	r5, r1, #0
    71c0:	6839      	ldr	r1, [r7, #0]
    71c2:	1889      	adds	r1, r1, r2
    71c4:	f145 0500 	adc.w	r5, r5, #0
    71c8:	f847 1b04 	str.w	r1, [r7], #4
    for( ; i > 0; i-- )
    71cc:	e6e8      	b.n	6fa0 <mpi_mul_hlp+0xfa>
        *d += c; c = ( *d < c ); d++;
    71ce:	6823      	ldr	r3, [r4, #0]
    71d0:	195b      	adds	r3, r3, r5
    71d2:	bf2c      	ite	cs
    71d4:	2501      	movcs	r5, #1
    71d6:	2500      	movcc	r5, #0
    71d8:	f844 3b04 	str.w	r3, [r4], #4
    71dc:	e6e4      	b.n	6fa8 <mpi_mul_hlp+0x102>

000071de <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    71de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71e2:	468a      	mov	sl, r1
    71e4:	4617      	mov	r7, r2
    71e6:	b085      	sub	sp, #20
    71e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    71ea:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    71ec:	6862      	ldr	r2, [r4, #4]
    71ee:	68a0      	ldr	r0, [r4, #8]
    71f0:	2100      	movs	r1, #0
    71f2:	0092      	lsls	r2, r2, #2
{
    71f4:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    71f6:	f7ff fa38 	bl	666a <memset>

    d = T->p;
    n = N->n;
    71fa:	687e      	ldr	r6, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    71fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    7200:	68a5      	ldr	r5, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    7202:	42b3      	cmp	r3, r6
    7204:	bf28      	it	cs
    7206:	4633      	movcs	r3, r6
    d = T->p;
    7208:	46a9      	mov	r9, r5

    for( i = 0; i < n; i++ )
    720a:	f04f 0800 	mov.w	r8, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    720e:	1c74      	adds	r4, r6, #1
    m = ( B->n < n ) ? B->n : n;
    7210:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    7212:	00a4      	lsls	r4, r4, #2
        u0 = A->p[i];
    7214:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    7216:	45b0      	cmp	r8, r6
        u0 = A->p[i];
    7218:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    721a:	d11c      	bne.n	7256 <mpi_montmul+0x78>
    721c:	3c04      	subs	r4, #4
    721e:	4425      	add	r5, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    7220:	4622      	mov	r2, r4
    7222:	4629      	mov	r1, r5
    7224:	f7ff fa16 	bl	6654 <memcpy>
    mbedtls_mpi_uint c = 0, t, z;
    7228:	2200      	movs	r2, #0
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    722a:	592b      	ldr	r3, [r5, r4]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    722c:	f8d7 e008 	ldr.w	lr, [r7, #8]
    d[n] += 1;
    7230:	3301      	adds	r3, #1
    7232:	512b      	str	r3, [r5, r4]
    for( i = 0; i < n; i++ )
    7234:	4613      	mov	r3, r2
    7236:	1f28      	subs	r0, r5, #4
    7238:	429e      	cmp	r6, r3
    723a:	d12b      	bne.n	7294 <mpi_montmul+0xb6>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    723c:	592b      	ldr	r3, [r5, r4]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    723e:	4630      	mov	r0, r6
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7240:	1a9b      	subs	r3, r3, r2
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7242:	462a      	mov	r2, r5
    7244:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7246:	512b      	str	r3, [r5, r4]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7248:	6889      	ldr	r1, [r1, #8]
    724a:	b2db      	uxtb	r3, r3
}
    724c:	b005      	add	sp, #20
    724e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7252:	f7ff be16 	b.w	6e82 <mpi_safe_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7256:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    725a:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    725e:	f8d9 3000 	ldr.w	r3, [r9]
    7262:	6808      	ldr	r0, [r1, #0]
    7264:	9a03      	ldr	r2, [sp, #12]
    7266:	fb00 330b 	mla	r3, r0, fp, r3
    726a:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    726c:	9801      	ldr	r0, [sp, #4]
    726e:	464a      	mov	r2, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7270:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    7272:	465b      	mov	r3, fp
    7274:	f7ff fe17 	bl	6ea6 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    7278:	464a      	mov	r2, r9
    727a:	9b02      	ldr	r3, [sp, #8]
    727c:	4630      	mov	r0, r6
    727e:	68b9      	ldr	r1, [r7, #8]
    7280:	f7ff fe11 	bl	6ea6 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    7284:	2300      	movs	r3, #0
    7286:	f849 bb04 	str.w	fp, [r9], #4
    728a:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    728e:	f108 0801 	add.w	r8, r8, #1
    7292:	e7bf      	b.n	7214 <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    7294:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7298:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    729c:	ebac 0102 	sub.w	r1, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    72a0:	42b9      	cmp	r1, r7
    72a2:	bf2c      	ite	cs
    72a4:	f04f 0800 	movcs.w	r8, #0
    72a8:	f04f 0801 	movcc.w	r8, #1
    72ac:	1bc9      	subs	r1, r1, r7
    72ae:	4594      	cmp	ip, r2
    72b0:	bf2c      	ite	cs
    72b2:	4642      	movcs	r2, r8
    72b4:	f108 0201 	addcc.w	r2, r8, #1
    72b8:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    72ba:	3301      	adds	r3, #1
    72bc:	e7bc      	b.n	7238 <mpi_montmul+0x5a>

000072be <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    72be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    72c0:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
    72c4:	3a01      	subs	r2, #1
    72c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
         cur_limb_left <= cur_limb_right;
    72ca:	4282      	cmp	r2, r0
    72cc:	d201      	bcs.n	72d2 <mpi_bigendian_to_host.part.0+0x14>
}
    72ce:	b002      	add	sp, #8
    72d0:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    72d2:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    72d4:	2400      	movs	r4, #0
    72d6:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    72d8:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    72da:	eb0d 0503 	add.w	r5, sp, r3
    72de:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    72e0:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    72e4:	3b01      	subs	r3, #1
    72e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    72ea:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    72ee:	d1f7      	bne.n	72e0 <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    72f0:	6815      	ldr	r5, [r2, #0]
    72f2:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    72f4:	461d      	mov	r5, r3
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    72f6:	3301      	adds	r3, #1
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    72f8:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    72fc:	b2db      	uxtb	r3, r3
    72fe:	2b04      	cmp	r3, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7300:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7304:	d1f7      	bne.n	72f6 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7306:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    730a:	f842 4904 	str.w	r4, [r2], #-4
         cur_limb_left++, cur_limb_right-- )
    730e:	e7dc      	b.n	72ca <mpi_bigendian_to_host.part.0+0xc>

00007310 <mbedtls_mpi_init>:
    X->n = 0;
    7310:	2300      	movs	r3, #0
    7312:	2201      	movs	r2, #1
    X->p = NULL;
    7314:	6083      	str	r3, [r0, #8]
    X->n = 0;
    7316:	e9c0 2300 	strd	r2, r3, [r0]
}
    731a:	4770      	bx	lr

0000731c <mbedtls_mpi_free>:
{
    731c:	b510      	push	{r4, lr}
    if( X == NULL )
    731e:	4604      	mov	r4, r0
    7320:	b168      	cbz	r0, 733e <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    7322:	6880      	ldr	r0, [r0, #8]
    7324:	b130      	cbz	r0, 7334 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    7326:	6861      	ldr	r1, [r4, #4]
    7328:	0089      	lsls	r1, r1, #2
    732a:	f7fe f933 	bl	5594 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    732e:	68a0      	ldr	r0, [r4, #8]
    7330:	f7fd f892 	bl	4458 <mbedtls_free>
    X->n = 0;
    7334:	2300      	movs	r3, #0
    7336:	2201      	movs	r2, #1
    7338:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    733c:	60a3      	str	r3, [r4, #8]
}
    733e:	bd10      	pop	{r4, pc}

00007340 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7340:	f242 7310 	movw	r3, #10000	; 0x2710
    7344:	4299      	cmp	r1, r3
{
    7346:	b570      	push	{r4, r5, r6, lr}
    7348:	4604      	mov	r4, r0
    734a:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    734c:	d902      	bls.n	7354 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    734e:	f06f 000f 	mvn.w	r0, #15
}
    7352:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    7354:	6843      	ldr	r3, [r0, #4]
    7356:	428b      	cmp	r3, r1
    7358:	d301      	bcc.n	735e <mbedtls_mpi_grow+0x1e>
    return( 0 );
    735a:	2000      	movs	r0, #0
    735c:	e7f9      	b.n	7352 <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    735e:	2104      	movs	r1, #4
    7360:	4628      	mov	r0, r5
    7362:	f7fd f873 	bl	444c <mbedtls_calloc>
    7366:	4606      	mov	r6, r0
    7368:	2800      	cmp	r0, #0
    736a:	d0f0      	beq.n	734e <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    736c:	68a1      	ldr	r1, [r4, #8]
    736e:	b159      	cbz	r1, 7388 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    7370:	6862      	ldr	r2, [r4, #4]
    7372:	0092      	lsls	r2, r2, #2
    7374:	f7ff f96e 	bl	6654 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    7378:	6861      	ldr	r1, [r4, #4]
    737a:	68a0      	ldr	r0, [r4, #8]
    737c:	0089      	lsls	r1, r1, #2
    737e:	f7fe f909 	bl	5594 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    7382:	68a0      	ldr	r0, [r4, #8]
    7384:	f7fd f868 	bl	4458 <mbedtls_free>
        X->p = p;
    7388:	e9c4 5601 	strd	r5, r6, [r4, #4]
    738c:	e7e5      	b.n	735a <mbedtls_mpi_grow+0x1a>

0000738e <mbedtls_mpi_resize_clear>:
{
    738e:	b538      	push	{r3, r4, r5, lr}
    7390:	4604      	mov	r4, r0
    if( limbs == 0 )
    7392:	460d      	mov	r5, r1
    7394:	b919      	cbnz	r1, 739e <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    7396:	f7ff ffc1 	bl	731c <mbedtls_mpi_free>
}
    739a:	2000      	movs	r0, #0
    739c:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    739e:	6842      	ldr	r2, [r0, #4]
    73a0:	428a      	cmp	r2, r1
    73a2:	d107      	bne.n	73b4 <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    73a4:	2100      	movs	r1, #0
    73a6:	6880      	ldr	r0, [r0, #8]
    73a8:	0092      	lsls	r2, r2, #2
    73aa:	f7ff f95e 	bl	666a <memset>
        X->s = 1;
    73ae:	2301      	movs	r3, #1
    73b0:	6023      	str	r3, [r4, #0]
        return( 0 );
    73b2:	e7f2      	b.n	739a <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    73b4:	f7ff ffb2 	bl	731c <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    73b8:	4629      	mov	r1, r5
    73ba:	4620      	mov	r0, r4
}
    73bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    73c0:	f7ff bfbe 	b.w	7340 <mbedtls_mpi_grow>

000073c4 <mbedtls_mpi_copy>:
    if( X == Y )
    73c4:	4288      	cmp	r0, r1
{
    73c6:	b570      	push	{r4, r5, r6, lr}
    73c8:	4605      	mov	r5, r0
    73ca:	460e      	mov	r6, r1
    if( X == Y )
    73cc:	d009      	beq.n	73e2 <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    73ce:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    73d0:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    73d2:	b941      	cbnz	r1, 73e6 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    73d4:	b12a      	cbz	r2, 73e2 <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    73d6:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    73d8:	0092      	lsls	r2, r2, #2
            X->s = 1;
    73da:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    73dc:	6880      	ldr	r0, [r0, #8]
    73de:	f7ff f944 	bl	666a <memset>
        return( 0 );
    73e2:	2000      	movs	r0, #0
}
    73e4:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    73e6:	1e4c      	subs	r4, r1, #1
    73e8:	b984      	cbnz	r4, 740c <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    73ea:	6833      	ldr	r3, [r6, #0]
    i++;
    73ec:	3401      	adds	r4, #1
    if( X->n < i )
    73ee:	4294      	cmp	r4, r2
    X->s = Y->s;
    73f0:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    73f2:	d912      	bls.n	741a <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    73f4:	4621      	mov	r1, r4
    73f6:	4628      	mov	r0, r5
    73f8:	f7ff ffa2 	bl	7340 <mbedtls_mpi_grow>
    73fc:	2800      	cmp	r0, #0
    73fe:	d1f1      	bne.n	73e4 <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    7400:	68b1      	ldr	r1, [r6, #8]
    7402:	68a8      	ldr	r0, [r5, #8]
    7404:	00a2      	lsls	r2, r4, #2
    7406:	f7ff f925 	bl	6654 <memcpy>
    740a:	e7ea      	b.n	73e2 <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    740c:	68b3      	ldr	r3, [r6, #8]
    740e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7412:	2b00      	cmp	r3, #0
    7414:	d1e9      	bne.n	73ea <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    7416:	3c01      	subs	r4, #1
    7418:	e7e6      	b.n	73e8 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    741a:	68a8      	ldr	r0, [r5, #8]
    741c:	1b12      	subs	r2, r2, r4
    741e:	2100      	movs	r1, #0
    7420:	0092      	lsls	r2, r2, #2
    7422:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7426:	f7ff f920 	bl	666a <memset>
    742a:	e7e9      	b.n	7400 <mbedtls_mpi_copy+0x3c>

0000742c <mbedtls_mpi_safe_cond_assign>:
{
    742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7430:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    7432:	6849      	ldr	r1, [r1, #4]
{
    7434:	4606      	mov	r6, r0
    7436:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    7438:	f7ff ff82 	bl	7340 <mbedtls_mpi_grow>
    743c:	4607      	mov	r7, r0
    743e:	b9e0      	cbnz	r0, 747a <mbedtls_mpi_safe_cond_assign+0x4e>
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    7440:	4263      	negs	r3, r4
    unsigned ua = a + 1;
    7442:	6832      	ldr	r2, [r6, #0]
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    7444:	431c      	orrs	r4, r3
    unsigned ub = b + 1;
    7446:	682b      	ldr	r3, [r5, #0]
    unsigned ua = a + 1;
    7448:	3201      	adds	r2, #1
    unsigned ub = b + 1;
    744a:	3301      	adds	r3, #1
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    744c:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    return( (int) ur - 1 );
    7450:	4053      	eors	r3, r2
    7452:	ea03 0344 	and.w	r3, r3, r4, lsl #1
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    7456:	f8d6 8008 	ldr.w	r8, [r6, #8]
    return( (int) ur - 1 );
    745a:	4053      	eors	r3, r2
    745c:	3b01      	subs	r3, #1
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    745e:	4641      	mov	r1, r8
    X->s = mpi_safe_cond_select_sign( X->s, Y->s, assign );
    7460:	6033      	str	r3, [r6, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    7462:	68aa      	ldr	r2, [r5, #8]
    7464:	4623      	mov	r3, r4
    7466:	6868      	ldr	r0, [r5, #4]
    7468:	f7ff fd0b 	bl	6e82 <mpi_safe_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    746c:	686b      	ldr	r3, [r5, #4]
        X->p[i] &= ~limb_mask;
    746e:	3c01      	subs	r4, #1
    7470:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    for( i = Y->n; i < X->n; i++ )
    7474:	6872      	ldr	r2, [r6, #4]
    7476:	429a      	cmp	r2, r3
    7478:	d802      	bhi.n	7480 <mbedtls_mpi_safe_cond_assign+0x54>
}
    747a:	4638      	mov	r0, r7
    747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        X->p[i] &= ~limb_mask;
    7480:	680a      	ldr	r2, [r1, #0]
    for( i = Y->n; i < X->n; i++ )
    7482:	3301      	adds	r3, #1
        X->p[i] &= ~limb_mask;
    7484:	4022      	ands	r2, r4
    7486:	f841 2b04 	str.w	r2, [r1], #4
    for( i = Y->n; i < X->n; i++ )
    748a:	e7f3      	b.n	7474 <mbedtls_mpi_safe_cond_assign+0x48>

0000748c <mbedtls_mpi_lset>:
{
    748c:	b570      	push	{r4, r5, r6, lr}
    748e:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    7490:	2101      	movs	r1, #1
{
    7492:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    7494:	f7ff ff54 	bl	7340 <mbedtls_mpi_grow>
    7498:	4605      	mov	r5, r0
    749a:	b988      	cbnz	r0, 74c0 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    749c:	6862      	ldr	r2, [r4, #4]
    749e:	4601      	mov	r1, r0
    74a0:	0092      	lsls	r2, r2, #2
    74a2:	68a0      	ldr	r0, [r4, #8]
    74a4:	f7ff f8e1 	bl	666a <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    74a8:	68a3      	ldr	r3, [r4, #8]
    74aa:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    74ae:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    74b0:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    74b4:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    74b6:	bfac      	ite	ge
    74b8:	2301      	movge	r3, #1
    74ba:	f04f 33ff 	movlt.w	r3, #4294967295
    74be:	6023      	str	r3, [r4, #0]
}
    74c0:	4628      	mov	r0, r5
    74c2:	bd70      	pop	{r4, r5, r6, pc}

000074c4 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    74c4:	6843      	ldr	r3, [r0, #4]
    74c6:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    74ca:	bf3f      	itttt	cc
    74cc:	6883      	ldrcc	r3, [r0, #8]
    74ce:	094a      	lsrcc	r2, r1, #5
    74d0:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    74d4:	f001 011f 	andcc.w	r1, r1, #31
    74d8:	bf3a      	itte	cc
    74da:	40c8      	lsrcc	r0, r1
    74dc:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    74e0:	2000      	movcs	r0, #0
}
    74e2:	4770      	bx	lr

000074e4 <mbedtls_mpi_bitlen>:
{
    74e4:	4602      	mov	r2, r0
    if( X->n == 0 )
    74e6:	6840      	ldr	r0, [r0, #4]
    74e8:	b198      	cbz	r0, 7512 <mbedtls_mpi_bitlen+0x2e>
        if( X->p[i] != 0 )
    74ea:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    74ec:	1e43      	subs	r3, r0, #1
    74ee:	b98b      	cbnz	r3, 7514 <mbedtls_mpi_bitlen+0x30>
    j = biL - mbedtls_clz( X->p[i] );
    74f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    74f4:	2000      	movs	r0, #0
        if( x & mask ) break;
    74f6:	2900      	cmp	r1, #0
    74f8:	db08      	blt.n	750c <mbedtls_mpi_bitlen+0x28>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    74fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    74fe:	3001      	adds	r0, #1
    7500:	2820      	cmp	r0, #32
        mask >>= 1;
    7502:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    7506:	d001      	beq.n	750c <mbedtls_mpi_bitlen+0x28>
        if( x & mask ) break;
    7508:	4211      	tst	r1, r2
    750a:	d0f8      	beq.n	74fe <mbedtls_mpi_bitlen+0x1a>
    return( ( i * biL ) + j );
    750c:	3301      	adds	r3, #1
    750e:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    7512:	4770      	bx	lr
        if( X->p[i] != 0 )
    7514:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7518:	2900      	cmp	r1, #0
    751a:	d1e9      	bne.n	74f0 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    751c:	3b01      	subs	r3, #1
    751e:	e7e6      	b.n	74ee <mbedtls_mpi_bitlen+0xa>

00007520 <mbedtls_mpi_size>:
{
    7520:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    7522:	f7ff ffdf 	bl	74e4 <mbedtls_mpi_bitlen>
    7526:	3007      	adds	r0, #7
}
    7528:	08c0      	lsrs	r0, r0, #3
    752a:	bd08      	pop	{r3, pc}

0000752c <mbedtls_mpi_read_binary>:
{
    752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    7530:	f012 0403 	ands.w	r4, r2, #3
    7534:	bf18      	it	ne
    7536:	2401      	movne	r4, #1
    7538:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    753c:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    753e:	4621      	mov	r1, r4
{
    7540:	4607      	mov	r7, r0
    7542:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    7544:	f7ff ff23 	bl	738e <mbedtls_mpi_resize_clear>
    7548:	4606      	mov	r6, r0
    754a:	b968      	cbnz	r0, 7568 <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    754c:	b165      	cbz	r5, 7568 <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    754e:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    7550:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    7554:	462a      	mov	r2, r5
    7556:	4641      	mov	r1, r8
    7558:	4418      	add	r0, r3
    755a:	f7ff f87b 	bl	6654 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    755e:	68b8      	ldr	r0, [r7, #8]
    if( limbs == 0 )
    7560:	b114      	cbz	r4, 7568 <mbedtls_mpi_read_binary+0x3c>
    7562:	4621      	mov	r1, r4
    7564:	f7ff feab 	bl	72be <mpi_bigendian_to_host.part.0>
}
    7568:	4630      	mov	r0, r6
    756a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000756e <mbedtls_mpi_write_binary>:
{
    756e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7570:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    7572:	6863      	ldr	r3, [r4, #4]
{
    7574:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    7576:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    757a:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    757e:	d91a      	bls.n	75b6 <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
    7580:	1b52      	subs	r2, r2, r5
    7582:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    7584:	2100      	movs	r1, #0
    7586:	f7ff f870 	bl	666a <memset>
        p = buf + buflen - stored_bytes;
    758a:	4630      	mov	r0, r6
    758c:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    758e:	2100      	movs	r1, #0
    7590:	1883      	adds	r3, r0, r2
    7592:	428a      	cmp	r2, r1
    7594:	d111      	bne.n	75ba <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
    7596:	2000      	movs	r0, #0
}
    7598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    759a:	68a1      	ldr	r1, [r4, #8]
    759c:	f023 0703 	bic.w	r7, r3, #3
    75a0:	59c9      	ldr	r1, [r1, r7]
    75a2:	f003 0603 	and.w	r6, r3, #3
    75a6:	00f6      	lsls	r6, r6, #3
    75a8:	40f1      	lsrs	r1, r6
    75aa:	b2c9      	uxtb	r1, r1
    75ac:	b989      	cbnz	r1, 75d2 <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    75ae:	3301      	adds	r3, #1
    75b0:	42ab      	cmp	r3, r5
    75b2:	d1f2      	bne.n	759a <mbedtls_mpi_write_binary+0x2c>
    75b4:	e7eb      	b.n	758e <mbedtls_mpi_write_binary+0x20>
    75b6:	4613      	mov	r3, r2
    75b8:	e7fa      	b.n	75b0 <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    75ba:	68a6      	ldr	r6, [r4, #8]
    75bc:	f021 0003 	bic.w	r0, r1, #3
    75c0:	5830      	ldr	r0, [r6, r0]
    75c2:	f001 0503 	and.w	r5, r1, #3
    75c6:	00ed      	lsls	r5, r5, #3
    75c8:	40e8      	lsrs	r0, r5
    75ca:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    75ce:	3101      	adds	r1, #1
    75d0:	e7df      	b.n	7592 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    75d2:	f06f 0007 	mvn.w	r0, #7
    75d6:	e7df      	b.n	7598 <mbedtls_mpi_write_binary+0x2a>

000075d8 <mbedtls_mpi_shift_l>:
{
    75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75da:	4605      	mov	r5, r0
    75dc:	460e      	mov	r6, r1
    v0 = count / (biL    );
    75de:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    75e0:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    75e4:	f7ff ff7e 	bl	74e4 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    75e8:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    75ea:	4430      	add	r0, r6
    if( X->n * biL < i )
    75ec:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    75f0:	d805      	bhi.n	75fe <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    75f2:	2e1f      	cmp	r6, #31
    75f4:	d80f      	bhi.n	7616 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    75f6:	2f00      	cmp	r7, #0
    75f8:	d13c      	bne.n	7674 <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    75fa:	2000      	movs	r0, #0
    75fc:	e00a      	b.n	7614 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    75fe:	f010 011f 	ands.w	r1, r0, #31
    7602:	bf18      	it	ne
    7604:	2101      	movne	r1, #1
    7606:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    760a:	4628      	mov	r0, r5
    760c:	f7ff fe98 	bl	7340 <mbedtls_mpi_grow>
    7610:	2800      	cmp	r0, #0
    7612:	d0ee      	beq.n	75f2 <mbedtls_mpi_shift_l+0x1a>
}
    7614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    7616:	f06f 0003 	mvn.w	r0, #3
    761a:	686b      	ldr	r3, [r5, #4]
    761c:	4360      	muls	r0, r4
    761e:	4619      	mov	r1, r3
    7620:	009a      	lsls	r2, r3, #2
    7622:	42a1      	cmp	r1, r4
    7624:	f1a2 0204 	sub.w	r2, r2, #4
    7628:	d80c      	bhi.n	7644 <mbedtls_mpi_shift_l+0x6c>
    762a:	1ae2      	subs	r2, r4, r3
    762c:	429c      	cmp	r4, r3
    762e:	bf88      	it	hi
    7630:	2200      	movhi	r2, #0
    7632:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    7634:	2200      	movs	r2, #0
    7636:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    7638:	3b04      	subs	r3, #4
    763a:	1d19      	adds	r1, r3, #4
    763c:	d0db      	beq.n	75f6 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    763e:	68a9      	ldr	r1, [r5, #8]
    7640:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    7642:	e7f9      	b.n	7638 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    7644:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    7646:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    7648:	eb06 0c02 	add.w	ip, r6, r2
    764c:	f85c c000 	ldr.w	ip, [ip, r0]
    7650:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    7654:	e7e5      	b.n	7622 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    7656:	68a8      	ldr	r0, [r5, #8]
    7658:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            X->p[i] <<= t1;
    765c:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    7660:	4313      	orrs	r3, r2
    7662:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    7666:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    766a:	3401      	adds	r4, #1
    766c:	686b      	ldr	r3, [r5, #4]
    766e:	42a3      	cmp	r3, r4
    7670:	d8f1      	bhi.n	7656 <mbedtls_mpi_shift_l+0x7e>
    7672:	e7c2      	b.n	75fa <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    7674:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    7676:	f1c7 0620 	rsb	r6, r7, #32
    767a:	e7f7      	b.n	766c <mbedtls_mpi_shift_l+0x94>

0000767c <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    767c:	6843      	ldr	r3, [r0, #4]
{
    767e:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    7680:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7682:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    7684:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7688:	d301      	bcc.n	768e <mbedtls_mpi_shift_r+0x12>
    768a:	d109      	bne.n	76a0 <mbedtls_mpi_shift_r+0x24>
    768c:	b11a      	cbz	r2, 7696 <mbedtls_mpi_shift_r+0x1a>
}
    768e:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    7690:	2100      	movs	r1, #0
    7692:	f7ff befb 	b.w	748c <mbedtls_mpi_lset>
    if( v0 > 0 )
    7696:	291f      	cmp	r1, #31
    7698:	d804      	bhi.n	76a4 <mbedtls_mpi_shift_r+0x28>
}
    769a:	bcf0      	pop	{r4, r5, r6, r7}
    769c:	2000      	movs	r0, #0
    769e:	4770      	bx	lr
    if( v0 > 0 )
    76a0:	291f      	cmp	r1, #31
    76a2:	d909      	bls.n	76b8 <mbedtls_mpi_shift_r+0x3c>
{
    76a4:	2300      	movs	r3, #0
    76a6:	00a5      	lsls	r5, r4, #2
        for( i = 0; i < X->n - v0; i++ )
    76a8:	6841      	ldr	r1, [r0, #4]
    76aa:	1b09      	subs	r1, r1, r4
    76ac:	4299      	cmp	r1, r3
    76ae:	d816      	bhi.n	76de <mbedtls_mpi_shift_r+0x62>
            X->p[i] = 0;
    76b0:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    76b2:	6841      	ldr	r1, [r0, #4]
    76b4:	4299      	cmp	r1, r3
    76b6:	d819      	bhi.n	76ec <mbedtls_mpi_shift_r+0x70>
    if( v1 > 0 )
    76b8:	2a00      	cmp	r2, #0
    76ba:	d0ee      	beq.n	769a <mbedtls_mpi_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    76bc:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    76be:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    76c0:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    76c4:	3b01      	subs	r3, #1
    76c6:	d3e8      	bcc.n	769a <mbedtls_mpi_shift_r+0x1e>
            r1 = X->p[i - 1] << (biL - v1);
    76c8:	6886      	ldr	r6, [r0, #8]
    76ca:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    76ce:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    76d2:	4321      	orrs	r1, r4
    76d4:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    76d8:	fa05 f407 	lsl.w	r4, r5, r7
    76dc:	e7f2      	b.n	76c4 <mbedtls_mpi_shift_r+0x48>
            X->p[i] = X->p[i + v0];
    76de:	6881      	ldr	r1, [r0, #8]
    76e0:	594e      	ldr	r6, [r1, r5]
    76e2:	3504      	adds	r5, #4
    76e4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    76e8:	3301      	adds	r3, #1
    76ea:	e7dd      	b.n	76a8 <mbedtls_mpi_shift_r+0x2c>
            X->p[i] = 0;
    76ec:	6881      	ldr	r1, [r0, #8]
    76ee:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    76f2:	3301      	adds	r3, #1
    76f4:	e7dd      	b.n	76b2 <mbedtls_mpi_shift_r+0x36>

000076f6 <mbedtls_mpi_cmp_abs>:
{
    76f6:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    76f8:	6842      	ldr	r2, [r0, #4]
    76fa:	b93a      	cbnz	r2, 770c <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    76fc:	684b      	ldr	r3, [r1, #4]
    76fe:	b973      	cbnz	r3, 771e <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    7700:	b9b2      	cbnz	r2, 7730 <mbedtls_mpi_cmp_abs+0x3a>
    7702:	1e18      	subs	r0, r3, #0
    7704:	bf18      	it	ne
    7706:	2001      	movne	r0, #1
    7708:	4240      	negs	r0, r0
}
    770a:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    770c:	6883      	ldr	r3, [r0, #8]
    770e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7712:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7716:	2b00      	cmp	r3, #0
    7718:	d1f0      	bne.n	76fc <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    771a:	3a01      	subs	r2, #1
    771c:	e7ed      	b.n	76fa <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    771e:	688c      	ldr	r4, [r1, #8]
    7720:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7724:	f854 4c04 	ldr.w	r4, [r4, #-4]
    7728:	2c00      	cmp	r4, #0
    772a:	d1e9      	bne.n	7700 <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    772c:	3b01      	subs	r3, #1
    772e:	e7e6      	b.n	76fe <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    7730:	429a      	cmp	r2, r3
    7732:	d810      	bhi.n	7756 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    7734:	d311      	bcc.n	775a <mbedtls_mpi_cmp_abs+0x64>
    7736:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    7738:	6883      	ldr	r3, [r0, #8]
    773a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    773e:	688b      	ldr	r3, [r1, #8]
    7740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7744:	429c      	cmp	r4, r3
    7746:	d806      	bhi.n	7756 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7748:	f102 32ff 	add.w	r2, r2, #4294967295
    774c:	d305      	bcc.n	775a <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    774e:	1c53      	adds	r3, r2, #1
    7750:	d1f2      	bne.n	7738 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    7752:	2000      	movs	r0, #0
    7754:	e7d9      	b.n	770a <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    7756:	2001      	movs	r0, #1
    7758:	e7d7      	b.n	770a <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    775a:	f04f 30ff 	mov.w	r0, #4294967295
    775e:	e7d4      	b.n	770a <mbedtls_mpi_cmp_abs+0x14>

00007760 <mbedtls_mpi_cmp_mpi>:
{
    7760:	4602      	mov	r2, r0
    7762:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    7764:	6843      	ldr	r3, [r0, #4]
    7766:	b923      	cbnz	r3, 7772 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    7768:	6848      	ldr	r0, [r1, #4]
    776a:	b958      	cbnz	r0, 7784 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    776c:	2b00      	cmp	r3, #0
    776e:	d136      	bne.n	77de <mbedtls_mpi_cmp_mpi+0x7e>
    7770:	e02f      	b.n	77d2 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    7772:	6890      	ldr	r0, [r2, #8]
    7774:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7778:	f850 0c04 	ldr.w	r0, [r0, #-4]
    777c:	2800      	cmp	r0, #0
    777e:	d1f3      	bne.n	7768 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    7780:	3b01      	subs	r3, #1
    7782:	e7f0      	b.n	7766 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    7784:	688c      	ldr	r4, [r1, #8]
    7786:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    778a:	f855 5c04 	ldr.w	r5, [r5, #-4]
    778e:	bb15      	cbnz	r5, 77d6 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    7790:	3801      	subs	r0, #1
    7792:	e7ea      	b.n	776a <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    7794:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    7796:	d202      	bcs.n	779e <mbedtls_mpi_cmp_mpi+0x3e>
    7798:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    779a:	4240      	negs	r0, r0
    779c:	e020      	b.n	77e0 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    779e:	6810      	ldr	r0, [r2, #0]
    77a0:	2800      	cmp	r0, #0
    77a2:	dd03      	ble.n	77ac <mbedtls_mpi_cmp_mpi+0x4c>
    77a4:	2d00      	cmp	r5, #0
    77a6:	da07      	bge.n	77b8 <mbedtls_mpi_cmp_mpi+0x58>
    77a8:	2001      	movs	r0, #1
    77aa:	e019      	b.n	77e0 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    77ac:	2d00      	cmp	r5, #0
    77ae:	dd03      	ble.n	77b8 <mbedtls_mpi_cmp_mpi+0x58>
    77b0:	b110      	cbz	r0, 77b8 <mbedtls_mpi_cmp_mpi+0x58>
    77b2:	f04f 30ff 	mov.w	r0, #4294967295
    77b6:	e013      	b.n	77e0 <mbedtls_mpi_cmp_mpi+0x80>
    77b8:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    77ba:	6891      	ldr	r1, [r2, #8]
    77bc:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    77c0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    77c4:	428d      	cmp	r5, r1
    77c6:	d80b      	bhi.n	77e0 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    77c8:	f103 33ff 	add.w	r3, r3, #4294967295
    77cc:	d3e5      	bcc.n	779a <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    77ce:	1c59      	adds	r1, r3, #1
    77d0:	d1f3      	bne.n	77ba <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    77d2:	2000      	movs	r0, #0
    77d4:	e004      	b.n	77e0 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    77d6:	2b00      	cmp	r3, #0
    77d8:	d0de      	beq.n	7798 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    77da:	4283      	cmp	r3, r0
    77dc:	d9da      	bls.n	7794 <mbedtls_mpi_cmp_mpi+0x34>
    77de:	6810      	ldr	r0, [r2, #0]
}
    77e0:	bd30      	pop	{r4, r5, pc}

000077e2 <mbedtls_mpi_cmp_int>:
{
    77e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    77e4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    77e8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    77ec:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    77ee:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    77f0:	bfac      	ite	ge
    77f2:	2301      	movge	r3, #1
    77f4:	f04f 33ff 	movlt.w	r3, #4294967295
    77f8:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    77fa:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    77fc:	a901      	add	r1, sp, #4
    Y.n = 1;
    77fe:	9302      	str	r3, [sp, #8]
    Y.p = p;
    7800:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    7804:	f7ff ffac 	bl	7760 <mbedtls_mpi_cmp_mpi>
}
    7808:	b005      	add	sp, #20
    780a:	f85d fb04 	ldr.w	pc, [sp], #4

0000780e <mbedtls_mpi_add_abs>:
    if( X == B )
    780e:	4290      	cmp	r0, r2
{
    7810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7814:	4606      	mov	r6, r0
    7816:	460f      	mov	r7, r1
    7818:	4615      	mov	r5, r2
    if( X == B )
    781a:	d002      	beq.n	7822 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    781c:	4288      	cmp	r0, r1
    781e:	d129      	bne.n	7874 <mbedtls_mpi_add_abs+0x66>
{
    7820:	462f      	mov	r7, r5
    X->s = 1;
    7822:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    7824:	687d      	ldr	r5, [r7, #4]
    X->s = 1;
    7826:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    7828:	bb65      	cbnz	r5, 7884 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    782a:	4629      	mov	r1, r5
    782c:	4630      	mov	r0, r6
    782e:	f7ff fd87 	bl	7340 <mbedtls_mpi_grow>
    7832:	4604      	mov	r4, r0
    7834:	bb18      	cbnz	r0, 787e <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    7836:	68b3      	ldr	r3, [r6, #8]
    7838:	68b9      	ldr	r1, [r7, #8]
    783a:	469c      	mov	ip, r3
    783c:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    783e:	4285      	cmp	r5, r0
    7840:	d129      	bne.n	7896 <mbedtls_mpi_add_abs+0x88>
    7842:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    7846:	b1d7      	cbz	r7, 787e <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    7848:	6872      	ldr	r2, [r6, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    784a:	f105 0801 	add.w	r8, r5, #1
        if( i >= X->n )
    784e:	42aa      	cmp	r2, r5
    7850:	d807      	bhi.n	7862 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7852:	4641      	mov	r1, r8
    7854:	4630      	mov	r0, r6
    7856:	f7ff fd73 	bl	7340 <mbedtls_mpi_grow>
    785a:	bb68      	cbnz	r0, 78b8 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    785c:	68b3      	ldr	r3, [r6, #8]
    785e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    7862:	681a      	ldr	r2, [r3, #0]
    7864:	4645      	mov	r5, r8
    7866:	19d2      	adds	r2, r2, r7
    7868:	bf2c      	ite	cs
    786a:	2701      	movcs	r7, #1
    786c:	2700      	movcc	r7, #0
    786e:	f843 2b04 	str.w	r2, [r3], #4
    7872:	e7e8      	b.n	7846 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7874:	f7ff fda6 	bl	73c4 <mbedtls_mpi_copy>
    7878:	4604      	mov	r4, r0
    787a:	2800      	cmp	r0, #0
    787c:	d0d0      	beq.n	7820 <mbedtls_mpi_add_abs+0x12>
}
    787e:	4620      	mov	r0, r4
    7880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    7884:	68bb      	ldr	r3, [r7, #8]
    7886:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    788a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    788e:	2b00      	cmp	r3, #0
    7890:	d1cb      	bne.n	782a <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    7892:	3d01      	subs	r5, #1
    7894:	e7c8      	b.n	7828 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    7896:	f8dc 2000 	ldr.w	r2, [ip]
    789a:	19d2      	adds	r2, r2, r7
    789c:	bf2c      	ite	cs
    789e:	f04f 0e01 	movcs.w	lr, #1
    78a2:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    78a6:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    for( i = 0; i < j; i++, o++, p++ )
    78aa:	3001      	adds	r0, #1
    78ac:	19d2      	adds	r2, r2, r7
        *p += tmp; c += ( *p < tmp );
    78ae:	f84c 2b04 	str.w	r2, [ip], #4
    78b2:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    78b6:	e7c2      	b.n	783e <mbedtls_mpi_add_abs+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    78b8:	4604      	mov	r4, r0
    return( ret );
    78ba:	e7e0      	b.n	787e <mbedtls_mpi_add_abs+0x70>

000078bc <mbedtls_mpi_sub_abs>:
{
    78bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    78c0:	4605      	mov	r5, r0
    78c2:	460e      	mov	r6, r1
    78c4:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    78c6:	6854      	ldr	r4, [r2, #4]
    78c8:	b93c      	cbnz	r4, 78da <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    78ca:	6871      	ldr	r1, [r6, #4]
    78cc:	42a1      	cmp	r1, r4
    78ce:	d20e      	bcs.n	78ee <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    78d0:	f06f 0709 	mvn.w	r7, #9
}
    78d4:	4638      	mov	r0, r7
    78d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    78da:	f8d8 3008 	ldr.w	r3, [r8, #8]
    78de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    78e2:	f853 3c04 	ldr.w	r3, [r3, #-4]
    78e6:	2b00      	cmp	r3, #0
    78e8:	d1ef      	bne.n	78ca <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    78ea:	3c01      	subs	r4, #1
    78ec:	e7ec      	b.n	78c8 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    78ee:	4628      	mov	r0, r5
    78f0:	f7ff fd26 	bl	7340 <mbedtls_mpi_grow>
    78f4:	4607      	mov	r7, r0
    78f6:	2800      	cmp	r0, #0
    78f8:	d1ec      	bne.n	78d4 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    78fa:	6872      	ldr	r2, [r6, #4]
    78fc:	42a2      	cmp	r2, r4
    78fe:	d909      	bls.n	7914 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    7900:	68b1      	ldr	r1, [r6, #8]
    7902:	68a8      	ldr	r0, [r5, #8]
    7904:	1b12      	subs	r2, r2, r4
    7906:	0092      	lsls	r2, r2, #2
    7908:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    790c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7910:	f7fe fea0 	bl	6654 <memcpy>
    if( X->n > A->n )
    7914:	686a      	ldr	r2, [r5, #4]
    7916:	6870      	ldr	r0, [r6, #4]
    7918:	4282      	cmp	r2, r0
    791a:	d907      	bls.n	792c <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    791c:	68ab      	ldr	r3, [r5, #8]
    791e:	1a12      	subs	r2, r2, r0
    7920:	2100      	movs	r1, #0
    7922:	0092      	lsls	r2, r2, #2
    7924:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7928:	f7fe fe9f 	bl	666a <memset>
    mbedtls_mpi_uint c = 0, t, z;
    792c:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
    792e:	4613      	mov	r3, r2
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    7930:	68a9      	ldr	r1, [r5, #8]
    7932:	f8d6 e008 	ldr.w	lr, [r6, #8]
    7936:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    793a:	429c      	cmp	r4, r3
    793c:	d111      	bne.n	7962 <mbedtls_mpi_sub_abs+0xa6>
    if( carry != 0 )
    793e:	b16a      	cbz	r2, 795c <mbedtls_mpi_sub_abs+0xa0>
            --X->p[n];
    7940:	f04f 30ff 	mov.w	r0, #4294967295
    7944:	eb01 0384 	add.w	r3, r1, r4, lsl #2
        for( ; n < X->n && X->p[n] == 0; n++ )
    7948:	686a      	ldr	r2, [r5, #4]
    794a:	42a2      	cmp	r2, r4
    794c:	d923      	bls.n	7996 <mbedtls_mpi_sub_abs+0xda>
    794e:	681a      	ldr	r2, [r3, #0]
    7950:	b1ea      	cbz	r2, 798e <mbedtls_mpi_sub_abs+0xd2>
        --X->p[n];
    7952:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    7956:	3b01      	subs	r3, #1
    7958:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    X->s = 1;
    795c:	2301      	movs	r3, #1
    795e:	602b      	str	r3, [r5, #0]
    return( ret );
    7960:	e7b8      	b.n	78d4 <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    7962:	f85e c023 	ldr.w	ip, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7966:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    796a:	ebac 0002 	sub.w	r0, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    796e:	42b0      	cmp	r0, r6
    7970:	bf2c      	ite	cs
    7972:	f04f 0900 	movcs.w	r9, #0
    7976:	f04f 0901 	movcc.w	r9, #1
    797a:	1b80      	subs	r0, r0, r6
    797c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    7980:	4594      	cmp	ip, r2
    7982:	bf2c      	ite	cs
    7984:	464a      	movcs	r2, r9
    7986:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    798a:	3301      	adds	r3, #1
    798c:	e7d5      	b.n	793a <mbedtls_mpi_sub_abs+0x7e>
            --X->p[n];
    798e:	f843 0b04 	str.w	r0, [r3], #4
        for( ; n < X->n && X->p[n] == 0; n++ )
    7992:	3401      	adds	r4, #1
    7994:	e7d8      	b.n	7948 <mbedtls_mpi_sub_abs+0x8c>
        if( n == X->n )
    7996:	d1dc      	bne.n	7952 <mbedtls_mpi_sub_abs+0x96>
    7998:	e79a      	b.n	78d0 <mbedtls_mpi_sub_abs+0x14>

0000799a <mbedtls_mpi_add_mpi>:
{
    799a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    799c:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    799e:	6813      	ldr	r3, [r2, #0]
{
    79a0:	4605      	mov	r5, r0
    if( A->s * B->s < 0 )
    79a2:	437b      	muls	r3, r7
{
    79a4:	460c      	mov	r4, r1
    79a6:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    79a8:	d516      	bpl.n	79d8 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    79aa:	4611      	mov	r1, r2
    79ac:	4620      	mov	r0, r4
    79ae:	f7ff fea2 	bl	76f6 <mbedtls_mpi_cmp_abs>
    79b2:	2800      	cmp	r0, #0
    79b4:	db06      	blt.n	79c4 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    79b6:	4632      	mov	r2, r6
    79b8:	4621      	mov	r1, r4
    79ba:	4628      	mov	r0, r5
    79bc:	f7ff ff7e 	bl	78bc <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    79c0:	b138      	cbz	r0, 79d2 <mbedtls_mpi_add_mpi+0x38>
}
    79c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    79c4:	4622      	mov	r2, r4
    79c6:	4628      	mov	r0, r5
    79c8:	f7ff ff78 	bl	78bc <mbedtls_mpi_sub_abs>
    79cc:	2800      	cmp	r0, #0
    79ce:	d1f8      	bne.n	79c2 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    79d0:	427f      	negs	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    79d2:	2000      	movs	r0, #0
        X->s = s;
    79d4:	602f      	str	r7, [r5, #0]
    return( ret );
    79d6:	e7f4      	b.n	79c2 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    79d8:	f7ff ff19 	bl	780e <mbedtls_mpi_add_abs>
    79dc:	e7f0      	b.n	79c0 <mbedtls_mpi_add_mpi+0x26>

000079de <mbedtls_mpi_sub_mpi>:
{
    79de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    79e0:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    79e2:	6813      	ldr	r3, [r2, #0]
{
    79e4:	4605      	mov	r5, r0
    if( A->s * B->s > 0 )
    79e6:	437b      	muls	r3, r7
    79e8:	2b00      	cmp	r3, #0
{
    79ea:	460c      	mov	r4, r1
    79ec:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    79ee:	dd16      	ble.n	7a1e <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    79f0:	4611      	mov	r1, r2
    79f2:	4620      	mov	r0, r4
    79f4:	f7ff fe7f 	bl	76f6 <mbedtls_mpi_cmp_abs>
    79f8:	2800      	cmp	r0, #0
    79fa:	db06      	blt.n	7a0a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    79fc:	4632      	mov	r2, r6
    79fe:	4621      	mov	r1, r4
    7a00:	4628      	mov	r0, r5
    7a02:	f7ff ff5b 	bl	78bc <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7a06:	b138      	cbz	r0, 7a18 <mbedtls_mpi_sub_mpi+0x3a>
}
    7a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7a0a:	4622      	mov	r2, r4
    7a0c:	4628      	mov	r0, r5
    7a0e:	f7ff ff55 	bl	78bc <mbedtls_mpi_sub_abs>
    7a12:	2800      	cmp	r0, #0
    7a14:	d1f8      	bne.n	7a08 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    7a16:	427f      	negs	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7a18:	2000      	movs	r0, #0
        X->s = s;
    7a1a:	602f      	str	r7, [r5, #0]
    return( ret );
    7a1c:	e7f4      	b.n	7a08 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7a1e:	f7ff fef6 	bl	780e <mbedtls_mpi_add_abs>
    7a22:	e7f0      	b.n	7a06 <mbedtls_mpi_sub_mpi+0x28>

00007a24 <mbedtls_mpi_mul_int>:
{
    7a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a28:	4605      	mov	r5, r0
    7a2a:	460f      	mov	r7, r1
    7a2c:	4690      	mov	r8, r2
    size_t n = A->n;
    7a2e:	684e      	ldr	r6, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    7a30:	b146      	cbz	r6, 7a44 <mbedtls_mpi_mul_int+0x20>
    7a32:	68bb      	ldr	r3, [r7, #8]
    7a34:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7a38:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7a3c:	b143      	cbz	r3, 7a50 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    7a3e:	f1b8 0f00 	cmp.w	r8, #0
    7a42:	d107      	bne.n	7a54 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    7a44:	4628      	mov	r0, r5
}
    7a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    7a4a:	2100      	movs	r1, #0
    7a4c:	f7ff bd1e 	b.w	748c <mbedtls_mpi_lset>
        --n;
    7a50:	3e01      	subs	r6, #1
    7a52:	e7ed      	b.n	7a30 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    7a54:	4628      	mov	r0, r5
    7a56:	1c71      	adds	r1, r6, #1
    7a58:	f7ff fc72 	bl	7340 <mbedtls_mpi_grow>
    7a5c:	4604      	mov	r4, r0
    7a5e:	b960      	cbnz	r0, 7a7a <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7a60:	4639      	mov	r1, r7
    7a62:	4628      	mov	r0, r5
    7a64:	f7ff fcae 	bl	73c4 <mbedtls_mpi_copy>
    7a68:	4604      	mov	r4, r0
    7a6a:	b930      	cbnz	r0, 7a7a <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    7a6c:	4630      	mov	r0, r6
    7a6e:	68aa      	ldr	r2, [r5, #8]
    7a70:	68b9      	ldr	r1, [r7, #8]
    7a72:	f108 33ff 	add.w	r3, r8, #4294967295
    7a76:	f7ff fa16 	bl	6ea6 <mpi_mul_hlp>
}
    7a7a:	4620      	mov	r0, r4
    7a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007a80 <mbedtls_mpi_div_mpi>:
{
    7a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a84:	4683      	mov	fp, r0
    7a86:	b09d      	sub	sp, #116	; 0x74
    7a88:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7a8a:	4618      	mov	r0, r3
    7a8c:	2100      	movs	r1, #0
{
    7a8e:	4616      	mov	r6, r2
    7a90:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7a92:	f7ff fea6 	bl	77e2 <mbedtls_mpi_cmp_int>
    7a96:	2800      	cmp	r0, #0
    7a98:	f000 8187 	beq.w	7daa <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    7a9c:	2303      	movs	r3, #3
    X->n = 0;
    7a9e:	2400      	movs	r4, #0
    7aa0:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    7aa2:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7aa4:	4630      	mov	r0, r6
    T2.p = TP2;
    7aa6:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7aa8:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    7aaa:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    7aae:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    7ab2:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    7ab6:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    7aba:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    7abe:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    7ac2:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    7ac4:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7ac6:	f7ff fe16 	bl	76f6 <mbedtls_mpi_cmp_abs>
    7aca:	42a0      	cmp	r0, r4
    7acc:	da28      	bge.n	7b20 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7ace:	f1bb 0f00 	cmp.w	fp, #0
    7ad2:	d105      	bne.n	7ae0 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7ad4:	b9e7      	cbnz	r7, 7b10 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    7ad6:	2400      	movs	r4, #0
}
    7ad8:	4620      	mov	r0, r4
    7ada:	b01d      	add	sp, #116	; 0x74
    7adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7ae0:	4621      	mov	r1, r4
    7ae2:	4658      	mov	r0, fp
    7ae4:	f7ff fcd2 	bl	748c <mbedtls_mpi_lset>
    7ae8:	4604      	mov	r4, r0
    7aea:	2800      	cmp	r0, #0
    7aec:	d0f2      	beq.n	7ad4 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    7aee:	a80a      	add	r0, sp, #40	; 0x28
    7af0:	f7ff fc14 	bl	731c <mbedtls_mpi_free>
    7af4:	a80d      	add	r0, sp, #52	; 0x34
    7af6:	f7ff fc11 	bl	731c <mbedtls_mpi_free>
    7afa:	a810      	add	r0, sp, #64	; 0x40
    7afc:	f7ff fc0e 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    7b00:	a813      	add	r0, sp, #76	; 0x4c
    7b02:	f7ff fc0b 	bl	731c <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    7b06:	210c      	movs	r1, #12
    7b08:	a819      	add	r0, sp, #100	; 0x64
    7b0a:	f7fd fd43 	bl	5594 <mbedtls_platform_zeroize>
    return( ret );
    7b0e:	e7e3      	b.n	7ad8 <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7b10:	4631      	mov	r1, r6
    7b12:	4638      	mov	r0, r7
    7b14:	f7ff fc56 	bl	73c4 <mbedtls_mpi_copy>
    7b18:	4604      	mov	r4, r0
    7b1a:	2800      	cmp	r0, #0
    7b1c:	d1e7      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    7b1e:	e7da      	b.n	7ad6 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    7b20:	4631      	mov	r1, r6
    7b22:	a80a      	add	r0, sp, #40	; 0x28
    7b24:	f7ff fc4e 	bl	73c4 <mbedtls_mpi_copy>
    7b28:	4604      	mov	r4, r0
    7b2a:	2800      	cmp	r0, #0
    7b2c:	d1df      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    7b2e:	9903      	ldr	r1, [sp, #12]
    7b30:	a80d      	add	r0, sp, #52	; 0x34
    7b32:	f7ff fc47 	bl	73c4 <mbedtls_mpi_copy>
    7b36:	4604      	mov	r4, r0
    7b38:	2800      	cmp	r0, #0
    7b3a:	d1d8      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7b3c:	6871      	ldr	r1, [r6, #4]
    7b3e:	a810      	add	r0, sp, #64	; 0x40
    7b40:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    7b42:	950d      	str	r5, [sp, #52]	; 0x34
    7b44:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7b46:	f7ff fbfb 	bl	7340 <mbedtls_mpi_grow>
    7b4a:	4604      	mov	r4, r0
    7b4c:	2800      	cmp	r0, #0
    7b4e:	d1ce      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7b50:	4601      	mov	r1, r0
    7b52:	a810      	add	r0, sp, #64	; 0x40
    7b54:	f7ff fc9a 	bl	748c <mbedtls_mpi_lset>
    7b58:	4604      	mov	r4, r0
    7b5a:	2800      	cmp	r0, #0
    7b5c:	d1c7      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    7b5e:	6871      	ldr	r1, [r6, #4]
    7b60:	a813      	add	r0, sp, #76	; 0x4c
    7b62:	3102      	adds	r1, #2
    7b64:	f7ff fbec 	bl	7340 <mbedtls_mpi_grow>
    7b68:	4604      	mov	r4, r0
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d1bf      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    7b6e:	a80d      	add	r0, sp, #52	; 0x34
    7b70:	f7ff fcb8 	bl	74e4 <mbedtls_mpi_bitlen>
    7b74:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7b78:	281f      	cmp	r0, #31
    7b7a:	d070      	beq.n	7c5e <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    7b7c:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7b80:	4619      	mov	r1, r3
    7b82:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    7b84:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7b86:	f7ff fd27 	bl	75d8 <mbedtls_mpi_shift_l>
    7b8a:	4604      	mov	r4, r0
    7b8c:	2800      	cmp	r0, #0
    7b8e:	d1ae      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    7b90:	9901      	ldr	r1, [sp, #4]
    7b92:	a80d      	add	r0, sp, #52	; 0x34
    7b94:	f7ff fd20 	bl	75d8 <mbedtls_mpi_shift_l>
    7b98:	4604      	mov	r4, r0
    7b9a:	2800      	cmp	r0, #0
    7b9c:	d1a7      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    7b9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    7ba0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    7ba4:	a80d      	add	r0, sp, #52	; 0x34
    7ba6:	eba5 0a08 	sub.w	sl, r5, r8
    7baa:	ea4f 194a 	mov.w	r9, sl, lsl #5
    7bae:	4649      	mov	r1, r9
    7bb0:	f7ff fd12 	bl	75d8 <mbedtls_mpi_shift_l>
    7bb4:	4604      	mov	r4, r0
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d199      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    7bba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    7bbe:	a90d      	add	r1, sp, #52	; 0x34
    7bc0:	a80a      	add	r0, sp, #40	; 0x28
    7bc2:	f7ff fdcd 	bl	7760 <mbedtls_mpi_cmp_mpi>
    7bc6:	2800      	cmp	r0, #0
    7bc8:	da4b      	bge.n	7c62 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    7bca:	4649      	mov	r1, r9
    7bcc:	a80d      	add	r0, sp, #52	; 0x34
    7bce:	f7ff fd55 	bl	767c <mbedtls_mpi_shift_r>
    7bd2:	4604      	mov	r4, r0
    7bd4:	2800      	cmp	r0, #0
    7bd6:	d18a      	bne.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    7bd8:	f108 33ff 	add.w	r3, r8, #4294967295
    7bdc:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    7bde:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    7be0:	f105 3aff 	add.w	sl, r5, #4294967295
        if( X.p[i] >= Y.p[t] )
    7be4:	9306      	str	r3, [sp, #24]
    7be6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7bea:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    7bee:	3b02      	subs	r3, #2
    7bf0:	3d01      	subs	r5, #1
    7bf2:	009b      	lsls	r3, r3, #2
    7bf4:	eba5 0508 	sub.w	r5, r5, r8
    7bf8:	9308      	str	r3, [sp, #32]
    7bfa:	00ab      	lsls	r3, r5, #2
    7bfc:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    7bfe:	9b05      	ldr	r3, [sp, #20]
    7c00:	459a      	cmp	sl, r3
    7c02:	d83d      	bhi.n	7c80 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    7c04:	f1bb 0f00 	cmp.w	fp, #0
    7c08:	d00c      	beq.n	7c24 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7c0a:	4658      	mov	r0, fp
    7c0c:	a910      	add	r1, sp, #64	; 0x40
    7c0e:	f7ff fbd9 	bl	73c4 <mbedtls_mpi_copy>
    7c12:	2800      	cmp	r0, #0
    7c14:	f040 80c5 	bne.w	7da2 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    7c18:	9a03      	ldr	r2, [sp, #12]
    7c1a:	6833      	ldr	r3, [r6, #0]
    7c1c:	6812      	ldr	r2, [r2, #0]
    7c1e:	4353      	muls	r3, r2
    7c20:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    7c24:	2f00      	cmp	r7, #0
    7c26:	f43f af62 	beq.w	7aee <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7c2a:	9901      	ldr	r1, [sp, #4]
    7c2c:	a80a      	add	r0, sp, #40	; 0x28
    7c2e:	f7ff fd25 	bl	767c <mbedtls_mpi_shift_r>
    7c32:	2800      	cmp	r0, #0
    7c34:	f040 80b5 	bne.w	7da2 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    7c38:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7c3a:	a90a      	add	r1, sp, #40	; 0x28
    7c3c:	4638      	mov	r0, r7
        X.s = A->s;
    7c3e:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7c40:	f7ff fbc0 	bl	73c4 <mbedtls_mpi_copy>
    7c44:	4601      	mov	r1, r0
    7c46:	2800      	cmp	r0, #0
    7c48:	f040 80ad 	bne.w	7da6 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7c4c:	4638      	mov	r0, r7
    7c4e:	f7ff fdc8 	bl	77e2 <mbedtls_mpi_cmp_int>
    7c52:	2800      	cmp	r0, #0
    7c54:	f47f af4b 	bne.w	7aee <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    7c58:	2301      	movs	r3, #1
    7c5a:	603b      	str	r3, [r7, #0]
    7c5c:	e747      	b.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    7c5e:	9401      	str	r4, [sp, #4]
    7c60:	e79d      	b.n	7b9e <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    7c62:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7c64:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    7c66:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7c6a:	4608      	mov	r0, r1
        Z.p[n - t]++;
    7c6c:	3301      	adds	r3, #1
    7c6e:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7c72:	aa0d      	add	r2, sp, #52	; 0x34
    7c74:	f7ff feb3 	bl	79de <mbedtls_mpi_sub_mpi>
    7c78:	4604      	mov	r4, r0
    7c7a:	2800      	cmp	r0, #0
    7c7c:	d09f      	beq.n	7bbe <mbedtls_mpi_div_mpi+0x13e>
    7c7e:	e736      	b.n	7aee <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    7c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7c82:	9a06      	ldr	r2, [sp, #24]
    7c84:	9304      	str	r3, [sp, #16]
    7c86:	4413      	add	r3, r2
    7c88:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    7c8c:	9307      	str	r3, [sp, #28]
    7c8e:	9b04      	ldr	r3, [sp, #16]
    7c90:	ea4f 088a 	mov.w	r8, sl, lsl #2
    7c94:	589a      	ldr	r2, [r3, r2]
    7c96:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7c9a:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    7c9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7ca0:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    7ca2:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    7ca4:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    7ca6:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    7ca8:	d276      	bcs.n	7d98 <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    7caa:	f1a8 0004 	sub.w	r0, r8, #4
    7cae:	2300      	movs	r3, #0
    7cb0:	f859 0000 	ldr.w	r0, [r9, r0]
    7cb4:	f7f8 fa46 	bl	144 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    7cb8:	2900      	cmp	r1, #0
    7cba:	bf14      	ite	ne
    7cbc:	f04f 33ff 	movne.w	r3, #4294967295
    7cc0:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7cc2:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    7cc6:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7cc8:	bf0e      	itee	eq
    7cca:	2300      	moveq	r3, #0
    7ccc:	eb09 0308 	addne.w	r3, r9, r8
    7cd0:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    7cd4:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7cd6:	f1a8 0304 	sub.w	r3, r8, #4
    7cda:	f859 3003 	ldr.w	r3, [r9, r3]
    7cde:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    7ce0:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7ce4:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    7ce8:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    7cea:	682b      	ldr	r3, [r5, #0]
    7cec:	3301      	adds	r3, #1
    7cee:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7cf0:	9b08      	ldr	r3, [sp, #32]
    7cf2:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    7cf4:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7cf6:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    7cf8:	3b01      	subs	r3, #1
    7cfa:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7cfc:	a813      	add	r0, sp, #76	; 0x4c
    7cfe:	f7ff fbc5 	bl	748c <mbedtls_mpi_lset>
    7d02:	2800      	cmp	r0, #0
    7d04:	d14d      	bne.n	7da2 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7d06:	9b05      	ldr	r3, [sp, #20]
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d048      	beq.n	7d9e <mbedtls_mpi_div_mpi+0x31e>
    7d0c:	f8d8 2000 	ldr.w	r2, [r8]
    7d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7d12:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7d14:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    7d16:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7d18:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    7d1a:	6812      	ldr	r2, [r2, #0]
    7d1c:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7d1e:	682a      	ldr	r2, [r5, #0]
    7d20:	f7ff fe80 	bl	7a24 <mbedtls_mpi_mul_int>
    7d24:	2800      	cmp	r0, #0
    7d26:	d13c      	bne.n	7da2 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7d28:	a916      	add	r1, sp, #88	; 0x58
    7d2a:	a813      	add	r0, sp, #76	; 0x4c
    7d2c:	f7ff fd18 	bl	7760 <mbedtls_mpi_cmp_mpi>
    7d30:	2800      	cmp	r0, #0
    7d32:	dcdf      	bgt.n	7cf4 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    7d34:	682a      	ldr	r2, [r5, #0]
    7d36:	a90d      	add	r1, sp, #52	; 0x34
    7d38:	a813      	add	r0, sp, #76	; 0x4c
    7d3a:	f7ff fe73 	bl	7a24 <mbedtls_mpi_mul_int>
    7d3e:	bb80      	cbnz	r0, 7da2 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    7d40:	9b02      	ldr	r3, [sp, #8]
    7d42:	a813      	add	r0, sp, #76	; 0x4c
    7d44:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    7d48:	4641      	mov	r1, r8
    7d4a:	f7ff fc45 	bl	75d8 <mbedtls_mpi_shift_l>
    7d4e:	bb40      	cbnz	r0, 7da2 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    7d50:	a90a      	add	r1, sp, #40	; 0x28
    7d52:	4608      	mov	r0, r1
    7d54:	aa13      	add	r2, sp, #76	; 0x4c
    7d56:	f7ff fe42 	bl	79de <mbedtls_mpi_sub_mpi>
    7d5a:	4601      	mov	r1, r0
    7d5c:	bb18      	cbnz	r0, 7da6 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7d5e:	a80a      	add	r0, sp, #40	; 0x28
    7d60:	f7ff fd3f 	bl	77e2 <mbedtls_mpi_cmp_int>
    7d64:	2800      	cmp	r0, #0
    7d66:	da12      	bge.n	7d8e <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7d68:	a90d      	add	r1, sp, #52	; 0x34
    7d6a:	a813      	add	r0, sp, #76	; 0x4c
    7d6c:	f7ff fb2a 	bl	73c4 <mbedtls_mpi_copy>
    7d70:	b9b8      	cbnz	r0, 7da2 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7d72:	4641      	mov	r1, r8
    7d74:	a813      	add	r0, sp, #76	; 0x4c
    7d76:	f7ff fc2f 	bl	75d8 <mbedtls_mpi_shift_l>
    7d7a:	b990      	cbnz	r0, 7da2 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7d7c:	a90a      	add	r1, sp, #40	; 0x28
    7d7e:	4608      	mov	r0, r1
    7d80:	aa13      	add	r2, sp, #76	; 0x4c
    7d82:	f7ff fe0a 	bl	799a <mbedtls_mpi_add_mpi>
    7d86:	b960      	cbnz	r0, 7da2 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    7d88:	682b      	ldr	r3, [r5, #0]
    7d8a:	3b01      	subs	r3, #1
    7d8c:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    7d8e:	9b02      	ldr	r3, [sp, #8]
    7d90:	f10a 3aff 	add.w	sl, sl, #4294967295
    7d94:	3b04      	subs	r3, #4
    7d96:	e731      	b.n	7bfc <mbedtls_mpi_div_mpi+0x17c>
    7d98:	f04f 33ff 	mov.w	r3, #4294967295
    7d9c:	e791      	b.n	7cc2 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7d9e:	9a05      	ldr	r2, [sp, #20]
    7da0:	e7b6      	b.n	7d10 <mbedtls_mpi_div_mpi+0x290>
    7da2:	4604      	mov	r4, r0
    7da4:	e6a3      	b.n	7aee <mbedtls_mpi_div_mpi+0x6e>
    7da6:	460c      	mov	r4, r1
    7da8:	e6a1      	b.n	7aee <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    7daa:	f06f 040b 	mvn.w	r4, #11
    7dae:	e693      	b.n	7ad8 <mbedtls_mpi_div_mpi+0x58>

00007db0 <mbedtls_mpi_mod_mpi>:
{
    7db0:	b570      	push	{r4, r5, r6, lr}
    7db2:	4604      	mov	r4, r0
    7db4:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7db6:	4610      	mov	r0, r2
    7db8:	2100      	movs	r1, #0
{
    7dba:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7dbc:	f7ff fd11 	bl	77e2 <mbedtls_mpi_cmp_int>
    7dc0:	2800      	cmp	r0, #0
    7dc2:	db24      	blt.n	7e0e <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    7dc4:	462a      	mov	r2, r5
    7dc6:	4633      	mov	r3, r6
    7dc8:	4621      	mov	r1, r4
    7dca:	2000      	movs	r0, #0
    7dcc:	f7ff fe58 	bl	7a80 <mbedtls_mpi_div_mpi>
    7dd0:	4605      	mov	r5, r0
    7dd2:	b138      	cbz	r0, 7de4 <mbedtls_mpi_mod_mpi+0x34>
}
    7dd4:	4628      	mov	r0, r5
    7dd6:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    7dd8:	4632      	mov	r2, r6
    7dda:	4621      	mov	r1, r4
    7ddc:	4620      	mov	r0, r4
    7dde:	f7ff fddc 	bl	799a <mbedtls_mpi_add_mpi>
    7de2:	b990      	cbnz	r0, 7e0a <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7de4:	2100      	movs	r1, #0
    7de6:	4620      	mov	r0, r4
    7de8:	f7ff fcfb 	bl	77e2 <mbedtls_mpi_cmp_int>
    7dec:	2800      	cmp	r0, #0
    7dee:	dbf3      	blt.n	7dd8 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7df0:	4631      	mov	r1, r6
    7df2:	4620      	mov	r0, r4
    7df4:	f7ff fcb4 	bl	7760 <mbedtls_mpi_cmp_mpi>
    7df8:	2800      	cmp	r0, #0
    7dfa:	dbeb      	blt.n	7dd4 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    7dfc:	4632      	mov	r2, r6
    7dfe:	4621      	mov	r1, r4
    7e00:	4620      	mov	r0, r4
    7e02:	f7ff fdec 	bl	79de <mbedtls_mpi_sub_mpi>
    7e06:	2800      	cmp	r0, #0
    7e08:	d0f2      	beq.n	7df0 <mbedtls_mpi_mod_mpi+0x40>
    7e0a:	4605      	mov	r5, r0
    7e0c:	e7e2      	b.n	7dd4 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7e0e:	f06f 0509 	mvn.w	r5, #9
    7e12:	e7df      	b.n	7dd4 <mbedtls_mpi_mod_mpi+0x24>

00007e14 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    7e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e18:	4606      	mov	r6, r0
    7e1a:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    7e1e:	4689      	mov	r9, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7e20:	4618      	mov	r0, r3
    7e22:	2100      	movs	r1, #0
{
    7e24:	461d      	mov	r5, r3
    7e26:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7e28:	f7ff fcdb 	bl	77e2 <mbedtls_mpi_cmp_int>
    7e2c:	2800      	cmp	r0, #0
    7e2e:	f340 8212 	ble.w	8256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    7e32:	68ab      	ldr	r3, [r5, #8]
    7e34:	681c      	ldr	r4, [r3, #0]
    7e36:	f014 0301 	ands.w	r3, r4, #1
    7e3a:	9308      	str	r3, [sp, #32]
    7e3c:	f000 820b 	beq.w	8256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7e40:	2100      	movs	r1, #0
    7e42:	9805      	ldr	r0, [sp, #20]
    7e44:	f7ff fccd 	bl	77e2 <mbedtls_mpi_cmp_int>
    7e48:	2800      	cmp	r0, #0
    7e4a:	f2c0 8204 	blt.w	8256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    7e4e:	9805      	ldr	r0, [sp, #20]
    7e50:	f7ff fb48 	bl	74e4 <mbedtls_mpi_bitlen>
    7e54:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    7e58:	f200 81fd 	bhi.w	8256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    7e5c:	4628      	mov	r0, r5
    7e5e:	f7ff fb41 	bl	74e4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    7e62:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    7e66:	f200 81f6 	bhi.w	8256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    7e6a:	2103      	movs	r1, #3
    7e6c:	f104 0802 	add.w	r8, r4, #2
    7e70:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7e74:	f008 0808 	and.w	r8, r8, #8
    7e78:	44a0      	add	r8, r4
        x *= ( 2 - ( m0 * x ) );
    7e7a:	fb08 f304 	mul.w	r3, r8, r4
    for( i = biL; i >= 8; i /= 2 )
    7e7e:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    7e80:	f1c3 0302 	rsb	r3, r3, #2
    7e84:	fb03 f808 	mul.w	r8, r3, r8
    for( i = biL; i >= 8; i /= 2 )
    7e88:	d1f7      	bne.n	7e7a <mbedtls_mpi_exp_mod+0x66>
    X->s = 1;
    7e8a:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    7e8c:	f44f 7240 	mov.w	r2, #768	; 0x300
    7e90:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    7e92:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    7e96:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    7e9a:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    7e9e:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    7ea2:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    7ea6:	9116      	str	r1, [sp, #88]	; 0x58
    7ea8:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    7eaa:	f7fe fbde 	bl	666a <memset>

    i = mbedtls_mpi_bitlen( E );
    7eae:	9805      	ldr	r0, [sp, #20]
    7eb0:	f7ff fb18 	bl	74e4 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7eb4:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    7eb8:	f080 80f5 	bcs.w	80a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
    7ebc:	28ef      	cmp	r0, #239	; 0xef
    7ebe:	f200 80f4 	bhi.w	80aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
    7ec2:	284f      	cmp	r0, #79	; 0x4f
    7ec4:	f200 80f3 	bhi.w	80ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    7ec8:	9b08      	ldr	r3, [sp, #32]
    7eca:	2818      	cmp	r0, #24
    7ecc:	bf34      	ite	cc
    7ece:	461f      	movcc	r7, r3
    7ed0:	2703      	movcs	r7, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    7ed2:	686b      	ldr	r3, [r5, #4]
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7ed4:	4630      	mov	r0, r6
    j = N->n + 1;
    7ed6:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7eda:	4651      	mov	r1, sl
    7edc:	f7ff fa30 	bl	7340 <mbedtls_mpi_grow>
    7ee0:	4604      	mov	r4, r0
    7ee2:	2800      	cmp	r0, #0
    7ee4:	f040 80bd 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    7ee8:	4651      	mov	r1, sl
    7eea:	a81d      	add	r0, sp, #116	; 0x74
    7eec:	f7ff fa28 	bl	7340 <mbedtls_mpi_grow>
    7ef0:	4604      	mov	r4, r0
    7ef2:	2800      	cmp	r0, #0
    7ef4:	f040 80b5 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7ef8:	ea4f 014a 	mov.w	r1, sl, lsl #1
    7efc:	a80e      	add	r0, sp, #56	; 0x38
    7efe:	f7ff fa1f 	bl	7340 <mbedtls_mpi_grow>
    7f02:	4604      	mov	r4, r0
    7f04:	2800      	cmp	r0, #0
    7f06:	f040 80ac 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    7f0a:	f8d9 3000 	ldr.w	r3, [r9]
    7f0e:	9306      	str	r3, [sp, #24]
    if( neg )
    7f10:	3301      	adds	r3, #1
    7f12:	d10b      	bne.n	7f2c <mbedtls_mpi_exp_mod+0x118>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    7f14:	4649      	mov	r1, r9
    7f16:	a814      	add	r0, sp, #80	; 0x50
    7f18:	f7ff fa54 	bl	73c4 <mbedtls_mpi_copy>
    7f1c:	4604      	mov	r4, r0
    7f1e:	2800      	cmp	r0, #0
    7f20:	f040 809f 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        Apos.s = 1;
    7f24:	2301      	movs	r3, #1
        A = &Apos;
    7f26:	f10d 0950 	add.w	r9, sp, #80	; 0x50
        Apos.s = 1;
    7f2a:	9314      	str	r3, [sp, #80]	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    7f2c:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7f2e:	b11b      	cbz	r3, 7f38 <mbedtls_mpi_exp_mod+0x124>
    7f30:	689b      	ldr	r3, [r3, #8]
    7f32:	2b00      	cmp	r3, #0
    7f34:	f040 80bd 	bne.w	80b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7f38:	2101      	movs	r1, #1
    7f3a:	a80b      	add	r0, sp, #44	; 0x2c
    7f3c:	f7ff faa6 	bl	748c <mbedtls_mpi_lset>
    7f40:	4604      	mov	r4, r0
    7f42:	2800      	cmp	r0, #0
    7f44:	f040 808d 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7f48:	6869      	ldr	r1, [r5, #4]
    7f4a:	a80b      	add	r0, sp, #44	; 0x2c
    7f4c:	0189      	lsls	r1, r1, #6
    7f4e:	f7ff fb43 	bl	75d8 <mbedtls_mpi_shift_l>
    7f52:	4604      	mov	r4, r0
    7f54:	2800      	cmp	r0, #0
    7f56:	f040 8084 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7f5a:	a90b      	add	r1, sp, #44	; 0x2c
    7f5c:	462a      	mov	r2, r5
    7f5e:	4608      	mov	r0, r1
    7f60:	f7ff ff26 	bl	7db0 <mbedtls_mpi_mod_mpi>
    7f64:	4604      	mov	r4, r0
    7f66:	2800      	cmp	r0, #0
    7f68:	d17b      	bne.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>

        if( _RR != NULL )
    7f6a:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7f6c:	b123      	cbz	r3, 7f78 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    7f6e:	220c      	movs	r2, #12
    7f70:	4618      	mov	r0, r3
    7f72:	a90b      	add	r1, sp, #44	; 0x2c
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7f74:	f7fe fb6e 	bl	6654 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7f78:	4629      	mov	r1, r5
    7f7a:	4648      	mov	r0, r9
    7f7c:	f7ff fbf0 	bl	7760 <mbedtls_mpi_cmp_mpi>
    7f80:	2800      	cmp	r0, #0
    7f82:	f2c0 809a 	blt.w	80ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    7f86:	462a      	mov	r2, r5
    7f88:	4649      	mov	r1, r9
    7f8a:	a81d      	add	r0, sp, #116	; 0x74
    7f8c:	f7ff ff10 	bl	7db0 <mbedtls_mpi_mod_mpi>
    7f90:	4604      	mov	r4, r0
    7f92:	2800      	cmp	r0, #0
    7f94:	d165      	bne.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    7f96:	6869      	ldr	r1, [r5, #4]
    7f98:	a81d      	add	r0, sp, #116	; 0x74
    7f9a:	3101      	adds	r1, #1
    7f9c:	f7ff f9d0 	bl	7340 <mbedtls_mpi_grow>
    7fa0:	4604      	mov	r4, r0
    7fa2:	2800      	cmp	r0, #0
    7fa4:	d15d      	bne.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7fa6:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    *mm = ~x + 1;
    7faa:	f1c8 0300 	rsb	r3, r8, #0
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7fae:	462a      	mov	r2, r5
    7fb0:	a90b      	add	r1, sp, #44	; 0x2c
    7fb2:	a81d      	add	r0, sp, #116	; 0x74
    7fb4:	f8cd b000 	str.w	fp, [sp]
    *mm = ~x + 1;
    7fb8:	9303      	str	r3, [sp, #12]
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7fba:	f7ff f910 	bl	71de <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    7fbe:	4630      	mov	r0, r6
    7fc0:	a90b      	add	r1, sp, #44	; 0x2c
    7fc2:	f7ff f9ff 	bl	73c4 <mbedtls_mpi_copy>
    7fc6:	4604      	mov	r4, r0
    7fc8:	2800      	cmp	r0, #0
    7fca:	d14a      	bne.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    mbedtls_mpi_uint z = 1;
    7fcc:	2301      	movs	r3, #1
    7fce:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    7fd0:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    7fd4:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    7fd6:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    7fd8:	4630      	mov	r0, r6
    7fda:	462a      	mov	r2, r5
    7fdc:	9b03      	ldr	r3, [sp, #12]
    7fde:	f8cd b000 	str.w	fp, [sp]
    7fe2:	a917      	add	r1, sp, #92	; 0x5c
    7fe4:	f7ff f8fb 	bl	71de <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    7fe8:	2f01      	cmp	r7, #1
    7fea:	d16b      	bne.n	80c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    7fec:	f04f 0a00 	mov.w	sl, #0
    nbits   = 0;
    7ff0:	46d0      	mov	r8, sl
    bufsize = 0;
    7ff2:	46d3      	mov	fp, sl
    wbits   = 0;
    7ff4:	46d1      	mov	r9, sl
    nblimbs = E->n;
    7ff6:	9b05      	ldr	r3, [sp, #20]
    7ff8:	685b      	ldr	r3, [r3, #4]
    7ffa:	9304      	str	r3, [sp, #16]

    while( 1 )
    {
        if( bufsize == 0 )
    7ffc:	f1bb 0f00 	cmp.w	fp, #0
    8000:	f040 80af 	bne.w	8162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
        {
            if( nblimbs == 0 )
    8004:	9b04      	ldr	r3, [sp, #16]
    8006:	2b00      	cmp	r3, #0
    8008:	f040 80a6 	bne.w	8158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    800c:	f04f 0b01 	mov.w	fp, #1
    8010:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    8014:	fa0b fb07 	lsl.w	fp, fp, r7
    for( i = 0; i < nbits; i++ )
    8018:	9b04      	ldr	r3, [sp, #16]
    801a:	4543      	cmp	r3, r8
    801c:	f040 80f9 	bne.w	8212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
    mbedtls_mpi_uint z = 1;
    8020:	2301      	movs	r3, #1
    8022:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    8024:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    8028:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    802a:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    802c:	9b03      	ldr	r3, [sp, #12]
    802e:	462a      	mov	r2, r5
    8030:	4630      	mov	r0, r6
    8032:	f8cd a000 	str.w	sl, [sp]
    8036:	a917      	add	r1, sp, #92	; 0x5c
    8038:	f7ff f8d1 	bl	71de <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    803c:	9b06      	ldr	r3, [sp, #24]
    803e:	3301      	adds	r3, #1
    8040:	d10f      	bne.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    8042:	9b05      	ldr	r3, [sp, #20]
    8044:	685b      	ldr	r3, [r3, #4]
    8046:	b163      	cbz	r3, 8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    8048:	9b05      	ldr	r3, [sp, #20]
    804a:	689b      	ldr	r3, [r3, #8]
    804c:	681b      	ldr	r3, [r3, #0]
    804e:	07db      	lsls	r3, r3, #31
    8050:	d507      	bpl.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    {
        X->s = -1;
    8052:	9b06      	ldr	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    8054:	4632      	mov	r2, r6
    8056:	4629      	mov	r1, r5
    8058:	4630      	mov	r0, r6
        X->s = -1;
    805a:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    805c:	f7ff fc9d 	bl	799a <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    8060:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8062:	2301      	movs	r3, #1
    8064:	1e7d      	subs	r5, r7, #1
    8066:	fa03 f607 	lsl.w	r6, r3, r7
        mbedtls_mpi_free( &W[i] );
    806a:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    806c:	fa03 f505 	lsl.w	r5, r3, r5
    8070:	42ae      	cmp	r6, r5
    8072:	f200 80e9 	bhi.w	8248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    8076:	a81d      	add	r0, sp, #116	; 0x74
    8078:	f7ff f950 	bl	731c <mbedtls_mpi_free>
    807c:	a80e      	add	r0, sp, #56	; 0x38
    807e:	f7ff f94d 	bl	731c <mbedtls_mpi_free>
    8082:	a814      	add	r0, sp, #80	; 0x50
    8084:	f7ff f94a 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    8088:	a811      	add	r0, sp, #68	; 0x44
    808a:	f7ff f947 	bl	731c <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    808e:	9be4      	ldr	r3, [sp, #912]	; 0x390
    8090:	b10b      	cbz	r3, 8096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
    8092:	689b      	ldr	r3, [r3, #8]
    8094:	b913      	cbnz	r3, 809c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
        mbedtls_mpi_free( &RR );
    8096:	a80b      	add	r0, sp, #44	; 0x2c
    8098:	f7ff f940 	bl	731c <mbedtls_mpi_free>

    return( ret );
}
    809c:	4620      	mov	r0, r4
    809e:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    80a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    80a6:	2706      	movs	r7, #6
    80a8:	e713      	b.n	7ed2 <mbedtls_mpi_exp_mod+0xbe>
    80aa:	2705      	movs	r7, #5
    80ac:	e711      	b.n	7ed2 <mbedtls_mpi_exp_mod+0xbe>
    80ae:	2704      	movs	r7, #4
    80b0:	e70f      	b.n	7ed2 <mbedtls_mpi_exp_mod+0xbe>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    80b2:	220c      	movs	r2, #12
    80b4:	99e4      	ldr	r1, [sp, #912]	; 0x390
    80b6:	a80b      	add	r0, sp, #44	; 0x2c
    80b8:	e75c      	b.n	7f74 <mbedtls_mpi_exp_mod+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    80ba:	4649      	mov	r1, r9
    80bc:	a81d      	add	r0, sp, #116	; 0x74
    80be:	f7ff f981 	bl	73c4 <mbedtls_mpi_copy>
    80c2:	e76d      	b.n	7fa0 <mbedtls_mpi_exp_mod+0x18c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    80c4:	230c      	movs	r3, #12
        j =  one << ( wsize - 1 );
    80c6:	f107 39ff 	add.w	r9, r7, #4294967295
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    80ca:	6869      	ldr	r1, [r5, #4]
    80cc:	fa03 f309 	lsl.w	r3, r3, r9
    80d0:	aa1a      	add	r2, sp, #104	; 0x68
    80d2:	eb02 0803 	add.w	r8, r2, r3
    80d6:	4640      	mov	r0, r8
    80d8:	3101      	adds	r1, #1
    80da:	f7ff f931 	bl	7340 <mbedtls_mpi_grow>
    80de:	2800      	cmp	r0, #0
    80e0:	d1be      	bne.n	8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    80e2:	4640      	mov	r0, r8
    80e4:	a91d      	add	r1, sp, #116	; 0x74
    80e6:	f7ff f96d 	bl	73c4 <mbedtls_mpi_copy>
    80ea:	2800      	cmp	r0, #0
    80ec:	d1b8      	bne.n	8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
        for( i = 0; i < wsize - 1; i++ )
    80ee:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    80f0:	462a      	mov	r2, r5
    80f2:	4641      	mov	r1, r8
    80f4:	4640      	mov	r0, r8
    80f6:	9b03      	ldr	r3, [sp, #12]
    80f8:	f8cd b000 	str.w	fp, [sp]
        for( i = 0; i < wsize - 1; i++ )
    80fc:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8100:	f7ff f86d 	bl	71de <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    8104:	45ca      	cmp	sl, r9
    8106:	d3f3      	bcc.n	80f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
        j =  one << ( wsize - 1 );
    8108:	f04f 0a01 	mov.w	sl, #1
    810c:	fa0a f909 	lsl.w	r9, sl, r9
        for( i = j + 1; i < ( one << wsize ); i++ )
    8110:	44d1      	add	r9, sl
    8112:	fa0a fa07 	lsl.w	sl, sl, r7
    8116:	45ca      	cmp	sl, r9
    8118:	f67f af68 	bls.w	7fec <mbedtls_mpi_exp_mod+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    811c:	6869      	ldr	r1, [r5, #4]
    811e:	f108 0b0c 	add.w	fp, r8, #12
    8122:	4658      	mov	r0, fp
    8124:	3101      	adds	r1, #1
    8126:	f7ff f90b 	bl	7340 <mbedtls_mpi_grow>
    812a:	2800      	cmp	r0, #0
    812c:	d198      	bne.n	8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    812e:	4641      	mov	r1, r8
    8130:	4658      	mov	r0, fp
    8132:	f7ff f947 	bl	73c4 <mbedtls_mpi_copy>
    8136:	2800      	cmp	r0, #0
    8138:	d192      	bne.n	8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    813a:	ab0e      	add	r3, sp, #56	; 0x38
    813c:	9300      	str	r3, [sp, #0]
    813e:	462a      	mov	r2, r5
    8140:	4658      	mov	r0, fp
    8142:	9b03      	ldr	r3, [sp, #12]
    8144:	a91d      	add	r1, sp, #116	; 0x74
    8146:	f7ff f84a 	bl	71de <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    814a:	46d8      	mov	r8, fp
    814c:	f109 0901 	add.w	r9, r9, #1
    8150:	e7e1      	b.n	8116 <CONFIG_FPROTECT_BLOCK_SIZE+0x116>
        state = 2;
    8152:	f04f 0a02 	mov.w	sl, #2
    8156:	e751      	b.n	7ffc <mbedtls_mpi_exp_mod+0x1e8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    8158:	f04f 0b20 	mov.w	fp, #32
            nblimbs--;
    815c:	9b04      	ldr	r3, [sp, #16]
    815e:	3b01      	subs	r3, #1
    8160:	9304      	str	r3, [sp, #16]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    8162:	9b05      	ldr	r3, [sp, #20]
    8164:	9a04      	ldr	r2, [sp, #16]
    8166:	689b      	ldr	r3, [r3, #8]
        bufsize--;
    8168:	f10b 3bff 	add.w	fp, fp, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8170:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    8174:	f013 0301 	ands.w	r3, r3, #1
    8178:	d10f      	bne.n	819a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
    817a:	f1ba 0f00 	cmp.w	sl, #0
    817e:	f43f af3d 	beq.w	7ffc <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    8182:	f1ba 0f01 	cmp.w	sl, #1
    8186:	d108      	bne.n	819a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
            mpi_montmul( X, X, N, mm, &T );
    8188:	ab0e      	add	r3, sp, #56	; 0x38
    818a:	9300      	str	r3, [sp, #0]
    818c:	462a      	mov	r2, r5
    818e:	4631      	mov	r1, r6
    8190:	4630      	mov	r0, r6
    8192:	9b03      	ldr	r3, [sp, #12]
    8194:	f7ff f823 	bl	71de <mpi_montmul>
            continue;
    8198:	e730      	b.n	7ffc <mbedtls_mpi_exp_mod+0x1e8>
        nbits++;
    819a:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
    819e:	eba7 0208 	sub.w	r2, r7, r8
    81a2:	4093      	lsls	r3, r2
        if( nbits == wsize )
    81a4:	4547      	cmp	r7, r8
        wbits |= ( ei << ( wsize - nbits ) );
    81a6:	ea49 0903 	orr.w	r9, r9, r3
        if( nbits == wsize )
    81aa:	d1d2      	bne.n	8152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
            for( i = 0; i < wsize; i++ )
    81ac:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    81b0:	ab0e      	add	r3, sp, #56	; 0x38
    81b2:	9300      	str	r3, [sp, #0]
    81b4:	462a      	mov	r2, r5
    81b6:	4631      	mov	r1, r6
    81b8:	4630      	mov	r0, r6
    81ba:	9b03      	ldr	r3, [sp, #12]
            for( i = 0; i < wsize; i++ )
    81bc:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    81c0:	f7ff f80d 	bl	71de <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    81c4:	45d0      	cmp	r8, sl
    81c6:	d8f3      	bhi.n	81b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    81c8:	2301      	movs	r3, #1
    for( size_t i = 0; i < T_size; i++ )
    81ca:	f04f 0a00 	mov.w	sl, #0
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    81ce:	fa03 f808 	lsl.w	r8, r3, r8
    for( size_t i = 0; i < T_size; i++ )
    81d2:	a91a      	add	r1, sp, #104	; 0x68
    const size_t diff = x ^ y;
    81d4:	ea89 030a 	eor.w	r3, r9, sl
    const size_t diff_msb = ( diff | (size_t) -diff );
    81d8:	425a      	negs	r2, r3
    81da:	431a      	orrs	r2, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    81dc:	43d2      	mvns	r2, r2
    81de:	a811      	add	r0, sp, #68	; 0x44
    81e0:	0fd2      	lsrs	r2, r2, #31
    81e2:	9109      	str	r1, [sp, #36]	; 0x24
    81e4:	f7ff f922 	bl	742c <mbedtls_mpi_safe_cond_assign>
    81e8:	9007      	str	r0, [sp, #28]
    81ea:	bb58      	cbnz	r0, 8244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    for( size_t i = 0; i < T_size; i++ )
    81ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    81ee:	f10a 0a01 	add.w	sl, sl, #1
    81f2:	45d0      	cmp	r8, sl
    81f4:	f101 010c 	add.w	r1, r1, #12
    81f8:	d1ec      	bne.n	81d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
            mpi_montmul( X, &WW, N, mm, &T );
    81fa:	ab0e      	add	r3, sp, #56	; 0x38
    81fc:	9300      	str	r3, [sp, #0]
    81fe:	462a      	mov	r2, r5
    8200:	4630      	mov	r0, r6
    8202:	9b03      	ldr	r3, [sp, #12]
    8204:	a911      	add	r1, sp, #68	; 0x44
    8206:	f7fe ffea 	bl	71de <mpi_montmul>
            nbits = 0;
    820a:	e9dd 9a07 	ldrd	r9, sl, [sp, #28]
            wbits = 0;
    820e:	46c8      	mov	r8, r9
    8210:	e6f4      	b.n	7ffc <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    8212:	462a      	mov	r2, r5
    8214:	4631      	mov	r1, r6
    8216:	4630      	mov	r0, r6
    8218:	9b03      	ldr	r3, [sp, #12]
    821a:	f8cd a000 	str.w	sl, [sp]
        wbits <<= 1;
    821e:	ea4f 0949 	mov.w	r9, r9, lsl #1
        mpi_montmul( X, X, N, mm, &T );
    8222:	f7fe ffdc 	bl	71de <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    8226:	ea1b 0f09 	tst.w	fp, r9
    822a:	d007      	beq.n	823c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
            mpi_montmul( X, &W[1], N, mm, &T );
    822c:	462a      	mov	r2, r5
    822e:	4630      	mov	r0, r6
    8230:	9b03      	ldr	r3, [sp, #12]
    8232:	f8cd a000 	str.w	sl, [sp]
    8236:	a91d      	add	r1, sp, #116	; 0x74
    8238:	f7fe ffd1 	bl	71de <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    823c:	9b04      	ldr	r3, [sp, #16]
    823e:	3301      	adds	r3, #1
    8240:	9304      	str	r3, [sp, #16]
    8242:	e6e9      	b.n	8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8244:	9c07      	ldr	r4, [sp, #28]
    8246:	e70c      	b.n	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        mbedtls_mpi_free( &W[i] );
    8248:	ab1a      	add	r3, sp, #104	; 0x68
    824a:	fb07 3005 	mla	r0, r7, r5, r3
    824e:	f7ff f865 	bl	731c <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8252:	3501      	adds	r5, #1
    8254:	e70c      	b.n	8070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8256:	f06f 0403 	mvn.w	r4, #3
    825a:	e71f      	b.n	809c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>

0000825c <platform_calloc_uninit>:
}
    825c:	2000      	movs	r0, #0
    825e:	4770      	bx	lr

00008260 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    8260:	4770      	bx	lr

00008262 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    8262:	4770      	bx	lr

00008264 <mbedtls_rsa_import>:
{
    8264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8268:	4604      	mov	r4, r0
    826a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    826e:	4691      	mov	r9, r2
    8270:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8272:	460d      	mov	r5, r1
    8274:	b951      	cbnz	r1, 828c <mbedtls_rsa_import+0x28>
    8276:	f1b9 0f00 	cmp.w	r9, #0
    827a:	d110      	bne.n	829e <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    827c:	f1b8 0f00 	cmp.w	r8, #0
    8280:	d115      	bne.n	82ae <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8282:	b9e7      	cbnz	r7, 82be <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8284:	bb1e      	cbnz	r6, 82ce <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    8286:	bb55      	cbnz	r5, 82de <mbedtls_rsa_import+0x7a>
    return( 0 );
    8288:	2000      	movs	r0, #0
    828a:	e006      	b.n	829a <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    828c:	3008      	adds	r0, #8
    828e:	f7ff f899 	bl	73c4 <mbedtls_mpi_copy>
    8292:	2800      	cmp	r0, #0
    8294:	d0ef      	beq.n	8276 <mbedtls_rsa_import+0x12>
    8296:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    829e:	4649      	mov	r1, r9
    82a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    82a4:	f7ff f88e 	bl	73c4 <mbedtls_mpi_copy>
    82a8:	2800      	cmp	r0, #0
    82aa:	d0e7      	beq.n	827c <mbedtls_rsa_import+0x18>
    82ac:	e7f3      	b.n	8296 <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    82ae:	4641      	mov	r1, r8
    82b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    82b4:	f7ff f886 	bl	73c4 <mbedtls_mpi_copy>
    82b8:	2800      	cmp	r0, #0
    82ba:	d0e2      	beq.n	8282 <mbedtls_rsa_import+0x1e>
    82bc:	e7eb      	b.n	8296 <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    82be:	4639      	mov	r1, r7
    82c0:	f104 0020 	add.w	r0, r4, #32
    82c4:	f7ff f87e 	bl	73c4 <mbedtls_mpi_copy>
    82c8:	2800      	cmp	r0, #0
    82ca:	d0db      	beq.n	8284 <mbedtls_rsa_import+0x20>
    82cc:	e7e3      	b.n	8296 <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    82ce:	4631      	mov	r1, r6
    82d0:	f104 0014 	add.w	r0, r4, #20
    82d4:	f7ff f876 	bl	73c4 <mbedtls_mpi_copy>
    82d8:	2800      	cmp	r0, #0
    82da:	d0d4      	beq.n	8286 <mbedtls_rsa_import+0x22>
    82dc:	e7db      	b.n	8296 <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    82de:	f104 0008 	add.w	r0, r4, #8
    82e2:	f7ff f91d 	bl	7520 <mbedtls_mpi_size>
    82e6:	6060      	str	r0, [r4, #4]
    82e8:	e7ce      	b.n	8288 <mbedtls_rsa_import+0x24>

000082ea <mbedtls_rsa_init>:
{
    82ea:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    82ec:	22ac      	movs	r2, #172	; 0xac
    82ee:	2100      	movs	r1, #0
{
    82f0:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    82f2:	f7fe f9ba 	bl	666a <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    82f6:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    82f8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    82fc:	bd10      	pop	{r4, pc}

000082fe <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    82fe:	b510      	push	{r4, lr}
    if( ctx == NULL )
    8300:	4604      	mov	r4, r0
    8302:	b3a0      	cbz	r0, 836e <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    8304:	308c      	adds	r0, #140	; 0x8c
    8306:	f7ff f809 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    830a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    830e:	f7ff f805 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    8312:	f104 0068 	add.w	r0, r4, #104	; 0x68
    8316:	f7ff f801 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    831a:	f104 0020 	add.w	r0, r4, #32
    831e:	f7fe fffd 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    8322:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8326:	f7fe fff9 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    832a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    832e:	f7fe fff5 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    8332:	f104 0014 	add.w	r0, r4, #20
    8336:	f7fe fff1 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    833a:	f104 0008 	add.w	r0, r4, #8
    833e:	f7fe ffed 	bl	731c <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    8342:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8346:	f7fe ffe9 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    834a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    834e:	f7fe ffe5 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    8352:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8356:	f7fe ffe1 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    835a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    835e:	f7fe ffdd 	bl	731c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    8362:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    8366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    836a:	f7fe bfd7 	b.w	731c <mbedtls_mpi_free>
}
    836e:	bd10      	pop	{r4, pc}

00008370 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    8370:	226c      	movs	r2, #108	; 0x6c
    8372:	2100      	movs	r1, #0
    8374:	f7fe b979 	b.w	666a <memset>

00008378 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    837c:	4605      	mov	r5, r0
    837e:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    8380:	4614      	mov	r4, r2
    8382:	b37a      	cbz	r2, 83e4 <mbedtls_sha256_update+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    8384:	6803      	ldr	r3, [r0, #0]
    8386:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    838a:	189b      	adds	r3, r3, r2
    838c:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    838e:	bf22      	ittt	cs
    8390:	6843      	ldrcs	r3, [r0, #4]
    8392:	3301      	addcs	r3, #1
    8394:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    8396:	b19f      	cbz	r7, 83c0 <mbedtls_sha256_update+0x48>
    fill = 64 - left;
    8398:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    839c:	454a      	cmp	r2, r9
    839e:	d30f      	bcc.n	83c0 <mbedtls_sha256_update+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    83a0:	f100 0828 	add.w	r8, r0, #40	; 0x28
    83a4:	464a      	mov	r2, r9
    83a6:	eb08 0007 	add.w	r0, r8, r7
    83aa:	f7fe f953 	bl	6654 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    83ae:	4641      	mov	r1, r8
    83b0:	4628      	mov	r0, r5
    83b2:	f7fc f98d 	bl	46d0 <mbedtls_internal_sha256_process>
    83b6:	b9b0      	cbnz	r0, 83e6 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += fill;
    83b8:	443c      	add	r4, r7
        ilen  -= fill;
        left = 0;
    83ba:	4607      	mov	r7, r0
        input += fill;
    83bc:	444e      	add	r6, r9
        ilen  -= fill;
    83be:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    83c0:	4426      	add	r6, r4
    83c2:	e004      	b.n	83ce <mbedtls_sha256_update+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    83c4:	4628      	mov	r0, r5
    83c6:	f7fc f983 	bl	46d0 <mbedtls_internal_sha256_process>
    83ca:	b960      	cbnz	r0, 83e6 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
    83cc:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    83ce:	2c3f      	cmp	r4, #63	; 0x3f
    83d0:	eba6 0104 	sub.w	r1, r6, r4
    83d4:	d8f6      	bhi.n	83c4 <mbedtls_sha256_update+0x4c>
    }

    if( ilen > 0 )
    83d6:	b12c      	cbz	r4, 83e4 <mbedtls_sha256_update+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    83d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    83dc:	4622      	mov	r2, r4
    83de:	4438      	add	r0, r7
    83e0:	f7fe f938 	bl	6654 <memcpy>
        return( 0 );
    83e4:	2000      	movs	r0, #0

    return( 0 );
}
    83e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000083ea <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    83ea:	b570      	push	{r4, r5, r6, lr}
    83ec:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    83ee:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    83f0:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    83f2:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    83f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    83fa:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    83fc:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    83fe:	4403      	add	r3, r0
{
    8400:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    8402:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    8406:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    840a:	d861      	bhi.n	84d0 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    840c:	2100      	movs	r1, #0
    840e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    8412:	f7fe f92a 	bl	666a <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    8416:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    841a:	0f5a      	lsrs	r2, r3, #29
    841c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    8420:	00db      	lsls	r3, r3, #3
    8422:	ba12      	rev	r2, r2
    8424:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8426:	4631      	mov	r1, r6
    8428:	4620      	mov	r0, r4
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    842a:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    842c:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    842e:	f7fc f94f 	bl	46d0 <mbedtls_internal_sha256_process>
    8432:	2800      	cmp	r0, #0
    8434:	d14b      	bne.n	84ce <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    8436:	7ae3      	ldrb	r3, [r4, #11]
    8438:	702b      	strb	r3, [r5, #0]
    843a:	8963      	ldrh	r3, [r4, #10]
    843c:	706b      	strb	r3, [r5, #1]
    843e:	68a3      	ldr	r3, [r4, #8]
    8440:	0a1b      	lsrs	r3, r3, #8
    8442:	70ab      	strb	r3, [r5, #2]
    8444:	68a3      	ldr	r3, [r4, #8]
    8446:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    8448:	7be3      	ldrb	r3, [r4, #15]
    844a:	712b      	strb	r3, [r5, #4]
    844c:	89e3      	ldrh	r3, [r4, #14]
    844e:	716b      	strb	r3, [r5, #5]
    8450:	68e3      	ldr	r3, [r4, #12]
    8452:	0a1b      	lsrs	r3, r3, #8
    8454:	71ab      	strb	r3, [r5, #6]
    8456:	68e3      	ldr	r3, [r4, #12]
    8458:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    845a:	7ce3      	ldrb	r3, [r4, #19]
    845c:	722b      	strb	r3, [r5, #8]
    845e:	8a63      	ldrh	r3, [r4, #18]
    8460:	726b      	strb	r3, [r5, #9]
    8462:	6923      	ldr	r3, [r4, #16]
    8464:	0a1b      	lsrs	r3, r3, #8
    8466:	72ab      	strb	r3, [r5, #10]
    8468:	6923      	ldr	r3, [r4, #16]
    846a:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    846c:	7de3      	ldrb	r3, [r4, #23]
    846e:	732b      	strb	r3, [r5, #12]
    8470:	8ae3      	ldrh	r3, [r4, #22]
    8472:	736b      	strb	r3, [r5, #13]
    8474:	6963      	ldr	r3, [r4, #20]
    8476:	0a1b      	lsrs	r3, r3, #8
    8478:	73ab      	strb	r3, [r5, #14]
    847a:	6963      	ldr	r3, [r4, #20]
    847c:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    847e:	7ee3      	ldrb	r3, [r4, #27]
    8480:	742b      	strb	r3, [r5, #16]
    8482:	8b63      	ldrh	r3, [r4, #26]
    8484:	746b      	strb	r3, [r5, #17]
    8486:	69a3      	ldr	r3, [r4, #24]
    8488:	0a1b      	lsrs	r3, r3, #8
    848a:	74ab      	strb	r3, [r5, #18]
    848c:	69a3      	ldr	r3, [r4, #24]
    848e:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    8490:	7fe3      	ldrb	r3, [r4, #31]
    8492:	752b      	strb	r3, [r5, #20]
    8494:	8be3      	ldrh	r3, [r4, #30]
    8496:	756b      	strb	r3, [r5, #21]
    8498:	69e3      	ldr	r3, [r4, #28]
    849a:	0a1b      	lsrs	r3, r3, #8
    849c:	75ab      	strb	r3, [r5, #22]
    849e:	69e3      	ldr	r3, [r4, #28]
    84a0:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    84a2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    84a6:	762b      	strb	r3, [r5, #24]
    84a8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    84aa:	766b      	strb	r3, [r5, #25]
    84ac:	6a23      	ldr	r3, [r4, #32]
    84ae:	0a1b      	lsrs	r3, r3, #8
    84b0:	76ab      	strb	r3, [r5, #26]
    84b2:	6a23      	ldr	r3, [r4, #32]
    84b4:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    84b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    84b8:	b94b      	cbnz	r3, 84ce <mbedtls_sha256_finish+0xe4>
#endif
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    84ba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    84be:	772b      	strb	r3, [r5, #28]
    84c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    84c2:	776b      	strb	r3, [r5, #29]
    84c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    84c6:	0a1b      	lsrs	r3, r3, #8
    84c8:	77ab      	strb	r3, [r5, #30]
    84ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    84cc:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    84ce:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    84d0:	2100      	movs	r1, #0
    84d2:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    84d6:	f7fe f8c8 	bl	666a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    84da:	4631      	mov	r1, r6
    84dc:	4620      	mov	r0, r4
    84de:	f7fc f8f7 	bl	46d0 <mbedtls_internal_sha256_process>
    84e2:	2800      	cmp	r0, #0
    84e4:	d1f3      	bne.n	84ce <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    84e6:	4601      	mov	r1, r0
    84e8:	2238      	movs	r2, #56	; 0x38
    84ea:	4630      	mov	r0, r6
    84ec:	e791      	b.n	8412 <mbedtls_sha256_finish+0x28>

000084ee <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    84ee:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    84f2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    84f6:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    84fa:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    84fe:	2a09      	cmp	r2, #9
    8500:	d103      	bne.n	850a <nrf91_errata_14+0x1c>
                switch(var2)
    8502:	1e43      	subs	r3, r0, #1
    8504:	4258      	negs	r0, r3
    8506:	4158      	adcs	r0, r3
    8508:	4770      	bx	lr
                        return false;
    850a:	2000      	movs	r0, #0
}
    850c:	4770      	bx	lr

0000850e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    850e:	4700      	bx	r0

00008510 <nrfx_busy_wait>:
    8510:	f000 b88d 	b.w	862e <z_impl_k_busy_wait>

00008514 <nrfx_clock_enable>:
{
    8514:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8516:	2005      	movs	r0, #5
    8518:	f7fa f9f6 	bl	2908 <arch_irq_is_enabled>
    851c:	b920      	cbnz	r0, 8528 <nrfx_clock_enable+0x14>
}
    851e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8522:	2005      	movs	r0, #5
    8524:	f7fa b9e2 	b.w	28ec <arch_irq_enable>
    8528:	bd08      	pop	{r3, pc}

0000852a <nrfx_clock_start>:
    switch (domain)
    852a:	b110      	cbz	r0, 8532 <nrfx_clock_start+0x8>
    852c:	2801      	cmp	r0, #1
    852e:	d021      	beq.n	8574 <nrfx_clock_start+0x4a>
    8530:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8532:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    8536:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    853a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    853e:	03c9      	lsls	r1, r1, #15
    8540:	d512      	bpl.n	8568 <nrfx_clock_start+0x3e>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    8542:	f003 0303 	and.w	r3, r3, #3
    8546:	2b02      	cmp	r3, #2
    8548:	d10e      	bne.n	8568 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    854a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    854e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8552:	2200      	movs	r2, #0
    8554:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8558:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    855c:	2202      	movs	r2, #2
    855e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8562:	2201      	movs	r2, #1
    8564:	609a      	str	r2, [r3, #8]
}
    8566:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    8568:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    856c:	2201      	movs	r2, #1
    856e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8572:	e7ec      	b.n	854e <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8574:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8578:	2200      	movs	r2, #0
    857a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    857e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8582:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8586:	6018      	str	r0, [r3, #0]
}
    8588:	4770      	bx	lr

0000858a <nrfx_clock_stop>:
{
    858a:	b538      	push	{r3, r4, r5, lr}
    switch (domain)
    858c:	b110      	cbz	r0, 8594 <nrfx_clock_stop+0xa>
    858e:	2801      	cmp	r0, #1
    8590:	d017      	beq.n	85c2 <nrfx_clock_stop+0x38>
}
    8592:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    8594:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    8598:	2302      	movs	r3, #2
    859a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    859e:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    85a2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85a6:	2301      	movs	r3, #1
    85a8:	f242 7510 	movw	r5, #10000	; 0x2710
    85ac:	60e3      	str	r3, [r4, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    85ae:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    85b2:	03db      	lsls	r3, r3, #15
    85b4:	d5ed      	bpl.n	8592 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    85b6:	2001      	movs	r0, #1
    85b8:	f7ff ffaa 	bl	8510 <nrfx_busy_wait>
    85bc:	3d01      	subs	r5, #1
    85be:	d1f6      	bne.n	85ae <nrfx_clock_stop+0x24>
    85c0:	e7e7      	b.n	8592 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    85c2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85c6:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85c8:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    85cc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    85d4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85d8:	6060      	str	r0, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    85da:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    85de:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    85e2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    85e6:	03d2      	lsls	r2, r2, #15
    85e8:	d5d3      	bpl.n	8592 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    85ea:	2b00      	cmp	r3, #0
    85ec:	d0d1      	beq.n	8592 <nrfx_clock_stop+0x8>
    85ee:	2001      	movs	r0, #1
    85f0:	f7ff ff8e 	bl	8510 <nrfx_busy_wait>
    85f4:	3d01      	subs	r5, #1
    85f6:	d1f0      	bne.n	85da <nrfx_clock_stop+0x50>
    85f8:	e7cb      	b.n	8592 <nrfx_clock_stop+0x8>

000085fa <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    85fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    85fe:	4770      	bx	lr

00008600 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    8600:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    8604:	4770      	bx	lr

00008606 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    8606:	f44f 7080 	mov.w	r0, #256	; 0x100
    860a:	4770      	bx	lr

0000860c <z_device_state_init>:
}
    860c:	4770      	bx	lr

0000860e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    860e:	b138      	cbz	r0, 8620 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8610:	68c3      	ldr	r3, [r0, #12]
    8612:	8818      	ldrh	r0, [r3, #0]
    8614:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8618:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    861c:	4258      	negs	r0, r3
    861e:	4158      	adcs	r0, r3
}
    8620:	4770      	bx	lr

00008622 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8622:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    8626:	3800      	subs	r0, #0
    8628:	bf18      	it	ne
    862a:	2001      	movne	r0, #1
    862c:	4770      	bx	lr

0000862e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    862e:	b108      	cbz	r0, 8634 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8630:	f7f9 bb8c 	b.w	1d4c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8634:	4770      	bx	lr

00008636 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    8636:	4770      	bx	lr

00008638 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8638:	f7fc b8ee 	b.w	4818 <SystemInit>
