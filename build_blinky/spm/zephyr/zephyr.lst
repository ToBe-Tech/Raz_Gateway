
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_table>:
    c200:	60 2f 00 20 ad e0 00 00 a1 4c 01 00 81 e0 00 00     `/. .....L......
    c210:	81 e0 00 00 81 e0 00 00 81 e0 00 00 81 e0 00 00     ................
	...
    c22c:	89 da 00 00 81 e0 00 00 00 00 00 00 31 da 00 00     ............1...
    c23c:	cd f0 00 00                                         ....

0000c240 <_irq_vector_table>:
    c240:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c250:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c260:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c270:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c280:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c290:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c2a0:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c2b0:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c2c0:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c2d0:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c2e0:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c2f0:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c300:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c310:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c320:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c330:	09 db 00 00 09 db 00 00 09 db 00 00 09 db 00 00     ................
    c340:	09 db 00 00                                         ....

0000c344 <_vector_end>:
	...

0000c400 <m_firmware_info>:
    c400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
    c410:	00 be 00 00 01 00 00 00 00 c2 00 00 00 c2 00 00     ................
    c420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000c43c <__aeabi_uldivmod>:
    c43c:	b953      	cbnz	r3, c454 <__aeabi_uldivmod+0x18>
    c43e:	b94a      	cbnz	r2, c454 <__aeabi_uldivmod+0x18>
    c440:	2900      	cmp	r1, #0
    c442:	bf08      	it	eq
    c444:	2800      	cmpeq	r0, #0
    c446:	bf1c      	itt	ne
    c448:	f04f 31ff 	movne.w	r1, #4294967295
    c44c:	f04f 30ff 	movne.w	r0, #4294967295
    c450:	f000 b80c 	b.w	c46c <__aeabi_idiv0>
    c454:	f1ad 0c08 	sub.w	ip, sp, #8
    c458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c45c:	f000 f824 	bl	c4a8 <__udivmoddi4>
    c460:	f8dd e004 	ldr.w	lr, [sp, #4]
    c464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c468:	b004      	add	sp, #16
    c46a:	4770      	bx	lr

0000c46c <__aeabi_idiv0>:
    c46c:	4770      	bx	lr
    c46e:	bf00      	nop

0000c470 <__gnu_cmse_nonsecure_call>:
    c470:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
    c474:	4627      	mov	r7, r4
    c476:	46a0      	mov	r8, r4
    c478:	46a1      	mov	r9, r4
    c47a:	46a2      	mov	sl, r4
    c47c:	46a3      	mov	fp, r4
    c47e:	46a4      	mov	ip, r4
    c480:	b0a2      	sub	sp, #136	; 0x88
    c482:	ec2d 0a00 	vlstm	sp
    c486:	f384 8800 	msr	CPSR_f, r4
    c48a:	4625      	mov	r5, r4
    c48c:	4626      	mov	r6, r4
    c48e:	47a4      	blxns	r4
    c490:	f3ef 8514 	mrs	r5, CONTROL
    c494:	f015 0f08 	tst.w	r5, #8
    c498:	bf18      	it	ne
    c49a:	eeb0 0a40 	vmovne.f32	s0, s0
    c49e:	ec3d 0a00 	vlldm	sp
    c4a2:	b022      	add	sp, #136	; 0x88
    c4a4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0000c4a8 <__udivmoddi4>:
    c4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4ac:	4686      	mov	lr, r0
    c4ae:	468c      	mov	ip, r1
    c4b0:	4608      	mov	r0, r1
    c4b2:	9e08      	ldr	r6, [sp, #32]
    c4b4:	4615      	mov	r5, r2
    c4b6:	4674      	mov	r4, lr
    c4b8:	4619      	mov	r1, r3
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	f040 80c1 	bne.w	c642 <__udivmoddi4+0x19a>
    c4c0:	4285      	cmp	r5, r0
    c4c2:	fab2 f282 	clz	r2, r2
    c4c6:	d945      	bls.n	c554 <__udivmoddi4+0xac>
    c4c8:	b14a      	cbz	r2, c4de <__udivmoddi4+0x36>
    c4ca:	f1c2 0320 	rsb	r3, r2, #32
    c4ce:	fa00 fc02 	lsl.w	ip, r0, r2
    c4d2:	4095      	lsls	r5, r2
    c4d4:	4094      	lsls	r4, r2
    c4d6:	fa2e f303 	lsr.w	r3, lr, r3
    c4da:	ea43 0c0c 	orr.w	ip, r3, ip
    c4de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c4e2:	b2a8      	uxth	r0, r5
    c4e4:	0c23      	lsrs	r3, r4, #16
    c4e6:	fbbc f8fe 	udiv	r8, ip, lr
    c4ea:	fb0e cc18 	mls	ip, lr, r8, ip
    c4ee:	fb08 f900 	mul.w	r9, r8, r0
    c4f2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c4f6:	4599      	cmp	r9, r3
    c4f8:	d928      	bls.n	c54c <__udivmoddi4+0xa4>
    c4fa:	18eb      	adds	r3, r5, r3
    c4fc:	f108 37ff 	add.w	r7, r8, #4294967295
    c500:	d204      	bcs.n	c50c <__udivmoddi4+0x64>
    c502:	4599      	cmp	r9, r3
    c504:	d902      	bls.n	c50c <__udivmoddi4+0x64>
    c506:	f1a8 0702 	sub.w	r7, r8, #2
    c50a:	442b      	add	r3, r5
    c50c:	eba3 0309 	sub.w	r3, r3, r9
    c510:	b2a4      	uxth	r4, r4
    c512:	fbb3 fcfe 	udiv	ip, r3, lr
    c516:	fb0e 331c 	mls	r3, lr, ip, r3
    c51a:	fb0c f000 	mul.w	r0, ip, r0
    c51e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c522:	42a0      	cmp	r0, r4
    c524:	d914      	bls.n	c550 <__udivmoddi4+0xa8>
    c526:	192c      	adds	r4, r5, r4
    c528:	f10c 33ff 	add.w	r3, ip, #4294967295
    c52c:	d204      	bcs.n	c538 <__udivmoddi4+0x90>
    c52e:	42a0      	cmp	r0, r4
    c530:	d902      	bls.n	c538 <__udivmoddi4+0x90>
    c532:	f1ac 0302 	sub.w	r3, ip, #2
    c536:	442c      	add	r4, r5
    c538:	1a24      	subs	r4, r4, r0
    c53a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c53e:	b11e      	cbz	r6, c548 <__udivmoddi4+0xa0>
    c540:	40d4      	lsrs	r4, r2
    c542:	2300      	movs	r3, #0
    c544:	6034      	str	r4, [r6, #0]
    c546:	6073      	str	r3, [r6, #4]
    c548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c54c:	4647      	mov	r7, r8
    c54e:	e7dd      	b.n	c50c <__udivmoddi4+0x64>
    c550:	4663      	mov	r3, ip
    c552:	e7f1      	b.n	c538 <__udivmoddi4+0x90>
    c554:	bb92      	cbnz	r2, c5bc <__udivmoddi4+0x114>
    c556:	1b43      	subs	r3, r0, r5
    c558:	2101      	movs	r1, #1
    c55a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c55e:	b2af      	uxth	r7, r5
    c560:	0c20      	lsrs	r0, r4, #16
    c562:	fbb3 fcfe 	udiv	ip, r3, lr
    c566:	fb0e 331c 	mls	r3, lr, ip, r3
    c56a:	fb0c f807 	mul.w	r8, ip, r7
    c56e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c572:	4598      	cmp	r8, r3
    c574:	d961      	bls.n	c63a <__udivmoddi4+0x192>
    c576:	18eb      	adds	r3, r5, r3
    c578:	f10c 30ff 	add.w	r0, ip, #4294967295
    c57c:	d204      	bcs.n	c588 <__udivmoddi4+0xe0>
    c57e:	4598      	cmp	r8, r3
    c580:	d902      	bls.n	c588 <__udivmoddi4+0xe0>
    c582:	f1ac 0002 	sub.w	r0, ip, #2
    c586:	442b      	add	r3, r5
    c588:	eba3 0308 	sub.w	r3, r3, r8
    c58c:	b2a4      	uxth	r4, r4
    c58e:	fbb3 fcfe 	udiv	ip, r3, lr
    c592:	fb0e 331c 	mls	r3, lr, ip, r3
    c596:	fb0c f707 	mul.w	r7, ip, r7
    c59a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c59e:	42a7      	cmp	r7, r4
    c5a0:	d94d      	bls.n	c63e <__udivmoddi4+0x196>
    c5a2:	192c      	adds	r4, r5, r4
    c5a4:	f10c 33ff 	add.w	r3, ip, #4294967295
    c5a8:	d204      	bcs.n	c5b4 <__udivmoddi4+0x10c>
    c5aa:	42a7      	cmp	r7, r4
    c5ac:	d902      	bls.n	c5b4 <__udivmoddi4+0x10c>
    c5ae:	f1ac 0302 	sub.w	r3, ip, #2
    c5b2:	442c      	add	r4, r5
    c5b4:	1be4      	subs	r4, r4, r7
    c5b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c5ba:	e7c0      	b.n	c53e <__udivmoddi4+0x96>
    c5bc:	f1c2 0320 	rsb	r3, r2, #32
    c5c0:	4095      	lsls	r5, r2
    c5c2:	4094      	lsls	r4, r2
    c5c4:	fa20 f103 	lsr.w	r1, r0, r3
    c5c8:	fa2e f303 	lsr.w	r3, lr, r3
    c5cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c5d0:	4090      	lsls	r0, r2
    c5d2:	b2af      	uxth	r7, r5
    c5d4:	4303      	orrs	r3, r0
    c5d6:	fbb1 fcfe 	udiv	ip, r1, lr
    c5da:	fb0e 101c 	mls	r0, lr, ip, r1
    c5de:	0c19      	lsrs	r1, r3, #16
    c5e0:	fb0c f807 	mul.w	r8, ip, r7
    c5e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c5e8:	4588      	cmp	r8, r1
    c5ea:	d922      	bls.n	c632 <__udivmoddi4+0x18a>
    c5ec:	1869      	adds	r1, r5, r1
    c5ee:	f10c 30ff 	add.w	r0, ip, #4294967295
    c5f2:	d204      	bcs.n	c5fe <__udivmoddi4+0x156>
    c5f4:	4588      	cmp	r8, r1
    c5f6:	d902      	bls.n	c5fe <__udivmoddi4+0x156>
    c5f8:	f1ac 0002 	sub.w	r0, ip, #2
    c5fc:	4429      	add	r1, r5
    c5fe:	eba1 0108 	sub.w	r1, r1, r8
    c602:	b29b      	uxth	r3, r3
    c604:	fbb1 fcfe 	udiv	ip, r1, lr
    c608:	fb0e 111c 	mls	r1, lr, ip, r1
    c60c:	fb0c f707 	mul.w	r7, ip, r7
    c610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c614:	429f      	cmp	r7, r3
    c616:	d90e      	bls.n	c636 <__udivmoddi4+0x18e>
    c618:	18eb      	adds	r3, r5, r3
    c61a:	f10c 31ff 	add.w	r1, ip, #4294967295
    c61e:	d204      	bcs.n	c62a <__udivmoddi4+0x182>
    c620:	429f      	cmp	r7, r3
    c622:	d902      	bls.n	c62a <__udivmoddi4+0x182>
    c624:	f1ac 0102 	sub.w	r1, ip, #2
    c628:	442b      	add	r3, r5
    c62a:	1bdb      	subs	r3, r3, r7
    c62c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c630:	e793      	b.n	c55a <__udivmoddi4+0xb2>
    c632:	4660      	mov	r0, ip
    c634:	e7e3      	b.n	c5fe <__udivmoddi4+0x156>
    c636:	4661      	mov	r1, ip
    c638:	e7f7      	b.n	c62a <__udivmoddi4+0x182>
    c63a:	4660      	mov	r0, ip
    c63c:	e7a4      	b.n	c588 <__udivmoddi4+0xe0>
    c63e:	4663      	mov	r3, ip
    c640:	e7b8      	b.n	c5b4 <__udivmoddi4+0x10c>
    c642:	4283      	cmp	r3, r0
    c644:	d906      	bls.n	c654 <__udivmoddi4+0x1ac>
    c646:	b916      	cbnz	r6, c64e <__udivmoddi4+0x1a6>
    c648:	2100      	movs	r1, #0
    c64a:	4608      	mov	r0, r1
    c64c:	e77c      	b.n	c548 <__udivmoddi4+0xa0>
    c64e:	e9c6 e000 	strd	lr, r0, [r6]
    c652:	e7f9      	b.n	c648 <__udivmoddi4+0x1a0>
    c654:	fab3 f783 	clz	r7, r3
    c658:	b98f      	cbnz	r7, c67e <__udivmoddi4+0x1d6>
    c65a:	4283      	cmp	r3, r0
    c65c:	d301      	bcc.n	c662 <__udivmoddi4+0x1ba>
    c65e:	4572      	cmp	r2, lr
    c660:	d808      	bhi.n	c674 <__udivmoddi4+0x1cc>
    c662:	ebbe 0402 	subs.w	r4, lr, r2
    c666:	eb60 0303 	sbc.w	r3, r0, r3
    c66a:	2001      	movs	r0, #1
    c66c:	469c      	mov	ip, r3
    c66e:	b91e      	cbnz	r6, c678 <__udivmoddi4+0x1d0>
    c670:	2100      	movs	r1, #0
    c672:	e769      	b.n	c548 <__udivmoddi4+0xa0>
    c674:	4638      	mov	r0, r7
    c676:	e7fa      	b.n	c66e <__udivmoddi4+0x1c6>
    c678:	e9c6 4c00 	strd	r4, ip, [r6]
    c67c:	e7f8      	b.n	c670 <__udivmoddi4+0x1c8>
    c67e:	f1c7 0c20 	rsb	ip, r7, #32
    c682:	40bb      	lsls	r3, r7
    c684:	fa0e f507 	lsl.w	r5, lr, r7
    c688:	fa22 f40c 	lsr.w	r4, r2, ip
    c68c:	fa2e f10c 	lsr.w	r1, lr, ip
    c690:	40ba      	lsls	r2, r7
    c692:	431c      	orrs	r4, r3
    c694:	fa20 f30c 	lsr.w	r3, r0, ip
    c698:	40b8      	lsls	r0, r7
    c69a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c69e:	4301      	orrs	r1, r0
    c6a0:	fa1f fe84 	uxth.w	lr, r4
    c6a4:	fbb3 f8f9 	udiv	r8, r3, r9
    c6a8:	fb09 3018 	mls	r0, r9, r8, r3
    c6ac:	0c0b      	lsrs	r3, r1, #16
    c6ae:	fb08 fa0e 	mul.w	sl, r8, lr
    c6b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c6b6:	459a      	cmp	sl, r3
    c6b8:	d940      	bls.n	c73c <__udivmoddi4+0x294>
    c6ba:	18e3      	adds	r3, r4, r3
    c6bc:	f108 30ff 	add.w	r0, r8, #4294967295
    c6c0:	d204      	bcs.n	c6cc <__udivmoddi4+0x224>
    c6c2:	459a      	cmp	sl, r3
    c6c4:	d902      	bls.n	c6cc <__udivmoddi4+0x224>
    c6c6:	f1a8 0002 	sub.w	r0, r8, #2
    c6ca:	4423      	add	r3, r4
    c6cc:	eba3 030a 	sub.w	r3, r3, sl
    c6d0:	b289      	uxth	r1, r1
    c6d2:	fbb3 f8f9 	udiv	r8, r3, r9
    c6d6:	fb09 3318 	mls	r3, r9, r8, r3
    c6da:	fb08 fe0e 	mul.w	lr, r8, lr
    c6de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c6e2:	458e      	cmp	lr, r1
    c6e4:	d92c      	bls.n	c740 <__udivmoddi4+0x298>
    c6e6:	1861      	adds	r1, r4, r1
    c6e8:	f108 33ff 	add.w	r3, r8, #4294967295
    c6ec:	d204      	bcs.n	c6f8 <__udivmoddi4+0x250>
    c6ee:	458e      	cmp	lr, r1
    c6f0:	d902      	bls.n	c6f8 <__udivmoddi4+0x250>
    c6f2:	f1a8 0302 	sub.w	r3, r8, #2
    c6f6:	4421      	add	r1, r4
    c6f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c6fc:	eba1 010e 	sub.w	r1, r1, lr
    c700:	fba0 9802 	umull	r9, r8, r0, r2
    c704:	4541      	cmp	r1, r8
    c706:	46ce      	mov	lr, r9
    c708:	4643      	mov	r3, r8
    c70a:	d302      	bcc.n	c712 <__udivmoddi4+0x26a>
    c70c:	d106      	bne.n	c71c <__udivmoddi4+0x274>
    c70e:	454d      	cmp	r5, r9
    c710:	d204      	bcs.n	c71c <__udivmoddi4+0x274>
    c712:	3801      	subs	r0, #1
    c714:	ebb9 0e02 	subs.w	lr, r9, r2
    c718:	eb68 0304 	sbc.w	r3, r8, r4
    c71c:	2e00      	cmp	r6, #0
    c71e:	d0a7      	beq.n	c670 <__udivmoddi4+0x1c8>
    c720:	ebb5 020e 	subs.w	r2, r5, lr
    c724:	eb61 0103 	sbc.w	r1, r1, r3
    c728:	fa01 fc0c 	lsl.w	ip, r1, ip
    c72c:	fa22 f307 	lsr.w	r3, r2, r7
    c730:	40f9      	lsrs	r1, r7
    c732:	ea4c 0303 	orr.w	r3, ip, r3
    c736:	e9c6 3100 	strd	r3, r1, [r6]
    c73a:	e799      	b.n	c670 <__udivmoddi4+0x1c8>
    c73c:	4640      	mov	r0, r8
    c73e:	e7c5      	b.n	c6cc <__udivmoddi4+0x224>
    c740:	4643      	mov	r3, r8
    c742:	e7d9      	b.n	c6f8 <__udivmoddi4+0x250>

0000c744 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c744:	680b      	ldr	r3, [r1, #0]
    c746:	3301      	adds	r3, #1
    c748:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c74a:	4b01      	ldr	r3, [pc, #4]	; (c750 <char_out+0xc>)
    c74c:	681b      	ldr	r3, [r3, #0]
    c74e:	4718      	bx	r3
    c750:	20000000 	.word	0x20000000

0000c754 <__printk_hook_install>:
	_char_out = fn;
    c754:	4b01      	ldr	r3, [pc, #4]	; (c75c <__printk_hook_install+0x8>)
    c756:	6018      	str	r0, [r3, #0]
}
    c758:	4770      	bx	lr
    c75a:	bf00      	nop
    c75c:	20000000 	.word	0x20000000

0000c760 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    c760:	b507      	push	{r0, r1, r2, lr}
    c762:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    c764:	2100      	movs	r1, #0
{
    c766:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c768:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    c76a:	4803      	ldr	r0, [pc, #12]	; (c778 <vprintk+0x18>)
    c76c:	a901      	add	r1, sp, #4
    c76e:	f000 f805 	bl	c77c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c772:	b003      	add	sp, #12
    c774:	f85d fb04 	ldr.w	pc, [sp], #4
    c778:	0000c745 	.word	0x0000c745

0000c77c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c780:	4681      	mov	r9, r0
    c782:	468b      	mov	fp, r1
    c784:	4617      	mov	r7, r2
    c786:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    c788:	2500      	movs	r5, #0
{
    c78a:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    c78c:	7838      	ldrb	r0, [r7, #0]
    c78e:	b908      	cbnz	r0, c794 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    c790:	4628      	mov	r0, r5
    c792:	e357      	b.n	ce44 <cbvprintf+0x6c8>
			OUTC(*fp++);
    c794:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    c796:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    c798:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    c79a:	d006      	beq.n	c7aa <cbvprintf+0x2e>
			OUTC('%');
    c79c:	4659      	mov	r1, fp
    c79e:	47c8      	blx	r9
    c7a0:	2800      	cmp	r0, #0
    c7a2:	f2c0 834f 	blt.w	ce44 <cbvprintf+0x6c8>
    c7a6:	3501      	adds	r5, #1
		if (bps == NULL) {
    c7a8:	e204      	b.n	cbb4 <cbvprintf+0x438>
		} state = {
    c7aa:	2218      	movs	r2, #24
    c7ac:	2100      	movs	r1, #0
    c7ae:	a80e      	add	r0, sp, #56	; 0x38
    c7b0:	f008 fadd 	bl	14d6e <memset>
	if (*sp == '%') {
    c7b4:	787b      	ldrb	r3, [r7, #1]
    c7b6:	2b25      	cmp	r3, #37	; 0x25
    c7b8:	d07d      	beq.n	c8b6 <cbvprintf+0x13a>
    c7ba:	2300      	movs	r3, #0
    c7bc:	4698      	mov	r8, r3
    c7be:	469e      	mov	lr, r3
    c7c0:	469c      	mov	ip, r3
    c7c2:	461e      	mov	r6, r3
    c7c4:	1c78      	adds	r0, r7, #1
    c7c6:	4601      	mov	r1, r0
		switch (*sp) {
    c7c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    c7cc:	2a2b      	cmp	r2, #43	; 0x2b
    c7ce:	f000 80a1 	beq.w	c914 <cbvprintf+0x198>
    c7d2:	f200 8098 	bhi.w	c906 <cbvprintf+0x18a>
    c7d6:	2a20      	cmp	r2, #32
    c7d8:	f000 809f 	beq.w	c91a <cbvprintf+0x19e>
    c7dc:	2a23      	cmp	r2, #35	; 0x23
    c7de:	f000 809f 	beq.w	c920 <cbvprintf+0x1a4>
    c7e2:	b12b      	cbz	r3, c7f0 <cbvprintf+0x74>
    c7e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c7ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    c7f0:	f1b8 0f00 	cmp.w	r8, #0
    c7f4:	d005      	beq.n	c802 <cbvprintf+0x86>
    c7f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c7fa:	f043 0320 	orr.w	r3, r3, #32
    c7fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    c802:	f1be 0f00 	cmp.w	lr, #0
    c806:	d005      	beq.n	c814 <cbvprintf+0x98>
    c808:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c80c:	f043 0310 	orr.w	r3, r3, #16
    c810:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    c814:	f1bc 0f00 	cmp.w	ip, #0
    c818:	d005      	beq.n	c826 <cbvprintf+0xaa>
    c81a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c81e:	f043 0308 	orr.w	r3, r3, #8
    c822:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    c826:	b12e      	cbz	r6, c834 <cbvprintf+0xb8>
    c828:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c82c:	f043 0304 	orr.w	r3, r3, #4
    c830:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    c834:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c838:	f003 0044 	and.w	r0, r3, #68	; 0x44
    c83c:	2844      	cmp	r0, #68	; 0x44
    c83e:	d103      	bne.n	c848 <cbvprintf+0xcc>
		conv->flag_zero = false;
    c840:	f36f 1386 	bfc	r3, #6, #1
    c844:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    c848:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    c84c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    c84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c852:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    c856:	d17f      	bne.n	c958 <cbvprintf+0x1dc>
		conv->width_star = true;
    c858:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    c85c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    c85e:	f042 0201 	orr.w	r2, r2, #1
    c862:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    c866:	781a      	ldrb	r2, [r3, #0]
    c868:	2a2e      	cmp	r2, #46	; 0x2e
    c86a:	bf0c      	ite	eq
    c86c:	2101      	moveq	r1, #1
    c86e:	2100      	movne	r1, #0
    c870:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    c874:	f361 0241 	bfi	r2, r1, #1, #1
    c878:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    c87c:	d178      	bne.n	c970 <cbvprintf+0x1f4>
	if (*sp == '*') {
    c87e:	785a      	ldrb	r2, [r3, #1]
    c880:	2a2a      	cmp	r2, #42	; 0x2a
    c882:	d06e      	beq.n	c962 <cbvprintf+0x1e6>
	size_t val = 0;
    c884:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    c886:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    c88a:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c88c:	4619      	mov	r1, r3
    c88e:	f811 0b01 	ldrb.w	r0, [r1], #1
    c892:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c896:	2e09      	cmp	r6, #9
    c898:	f240 8095 	bls.w	c9c6 <cbvprintf+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    c89c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    c8a0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    c8a2:	f3c1 0040 	ubfx	r0, r1, #1, #1
    c8a6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    c8aa:	460a      	mov	r2, r1
    c8ac:	f360 0241 	bfi	r2, r0, #1, #1
    c8b0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    c8b4:	e05c      	b.n	c970 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    c8b6:	1cba      	adds	r2, r7, #2
    c8b8:	9203      	str	r2, [sp, #12]
    c8ba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    c8be:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    c8c2:	07da      	lsls	r2, r3, #31
    c8c4:	f140 812e 	bpl.w	cb24 <cbvprintf+0x3a8>
			width = va_arg(ap, int);
    c8c8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    c8cc:	f1b8 0f00 	cmp.w	r8, #0
    c8d0:	da07      	bge.n	c8e2 <cbvprintf+0x166>
				conv->flag_dash = true;
    c8d2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    c8d6:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    c8da:	f042 0204 	orr.w	r2, r2, #4
    c8de:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    c8e2:	075e      	lsls	r6, r3, #29
    c8e4:	f140 8127 	bpl.w	cb36 <cbvprintf+0x3ba>
			int arg = va_arg(ap, int);
    c8e8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    c8ec:	f1ba 0f00 	cmp.w	sl, #0
    c8f0:	f280 8126 	bge.w	cb40 <cbvprintf+0x3c4>
				conv->prec_present = false;
    c8f4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    c8f8:	f36f 0341 	bfc	r3, #1, #1
    c8fc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    c900:	f04f 3aff 	mov.w	sl, #4294967295
    c904:	e11c      	b.n	cb40 <cbvprintf+0x3c4>
		switch (*sp) {
    c906:	2a2d      	cmp	r2, #45	; 0x2d
    c908:	d00d      	beq.n	c926 <cbvprintf+0x1aa>
    c90a:	2a30      	cmp	r2, #48	; 0x30
    c90c:	f47f af69 	bne.w	c7e2 <cbvprintf+0x66>
    c910:	2301      	movs	r3, #1
	} while (loop);
    c912:	e758      	b.n	c7c6 <cbvprintf+0x4a>
		switch (*sp) {
    c914:	f04f 0c01 	mov.w	ip, #1
    c918:	e755      	b.n	c7c6 <cbvprintf+0x4a>
    c91a:	f04f 0e01 	mov.w	lr, #1
    c91e:	e752      	b.n	c7c6 <cbvprintf+0x4a>
    c920:	f04f 0801 	mov.w	r8, #1
    c924:	e74f      	b.n	c7c6 <cbvprintf+0x4a>
    c926:	2601      	movs	r6, #1
    c928:	e74d      	b.n	c7c6 <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
    c92a:	4603      	mov	r3, r0
    c92c:	fb0e 6202 	mla	r2, lr, r2, r6
    c930:	3a30      	subs	r2, #48	; 0x30
    c932:	4618      	mov	r0, r3
    c934:	f810 6b01 	ldrb.w	r6, [r0], #1
    c938:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c93c:	f1bc 0f09 	cmp.w	ip, #9
    c940:	d9f3      	bls.n	c92a <cbvprintf+0x1ae>
	if (sp != wp) {
    c942:	4299      	cmp	r1, r3
    c944:	d08f      	beq.n	c866 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    c946:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    c94a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    c94c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    c94e:	f362 0141 	bfi	r1, r2, #1, #1
    c952:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    c956:	e786      	b.n	c866 <cbvprintf+0xea>
    c958:	460b      	mov	r3, r1
	size_t val = 0;
    c95a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    c95c:	f04f 0e0a 	mov.w	lr, #10
    c960:	e7e7      	b.n	c932 <cbvprintf+0x1b6>
		conv->prec_star = true;
    c962:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    c966:	3302      	adds	r3, #2
		conv->prec_star = true;
    c968:	f042 0204 	orr.w	r2, r2, #4
    c96c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    c970:	781a      	ldrb	r2, [r3, #0]
    c972:	2a6c      	cmp	r2, #108	; 0x6c
    c974:	d047      	beq.n	ca06 <cbvprintf+0x28a>
    c976:	d82b      	bhi.n	c9d0 <cbvprintf+0x254>
    c978:	2a68      	cmp	r2, #104	; 0x68
    c97a:	d031      	beq.n	c9e0 <cbvprintf+0x264>
    c97c:	2a6a      	cmp	r2, #106	; 0x6a
    c97e:	d04b      	beq.n	ca18 <cbvprintf+0x29c>
    c980:	2a4c      	cmp	r2, #76	; 0x4c
    c982:	d051      	beq.n	ca28 <cbvprintf+0x2ac>
	conv->specifier = *sp++;
    c984:	461a      	mov	r2, r3
    c986:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    c98a:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    c98c:	9203      	str	r2, [sp, #12]
    c98e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    c992:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    c996:	f200 80be 	bhi.w	cb16 <cbvprintf+0x39a>
    c99a:	2b6d      	cmp	r3, #109	; 0x6d
    c99c:	d851      	bhi.n	ca42 <cbvprintf+0x2c6>
    c99e:	2b69      	cmp	r3, #105	; 0x69
    c9a0:	f200 80b9 	bhi.w	cb16 <cbvprintf+0x39a>
    c9a4:	2b57      	cmp	r3, #87	; 0x57
    c9a6:	d867      	bhi.n	ca78 <cbvprintf+0x2fc>
    c9a8:	2b41      	cmp	r3, #65	; 0x41
    c9aa:	d003      	beq.n	c9b4 <cbvprintf+0x238>
    c9ac:	3b45      	subs	r3, #69	; 0x45
    c9ae:	2b02      	cmp	r3, #2
    c9b0:	f200 80b1 	bhi.w	cb16 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    c9b4:	2204      	movs	r2, #4
    c9b6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    c9ba:	f362 0302 	bfi	r3, r2, #0, #3
    c9be:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    c9c2:	2301      	movs	r3, #1
			break;
    c9c4:	e073      	b.n	caae <cbvprintf+0x332>
		val = 10U * val + *sp++ - '0';
    c9c6:	fb0c 0202 	mla	r2, ip, r2, r0
    c9ca:	460b      	mov	r3, r1
    c9cc:	3a30      	subs	r2, #48	; 0x30
    c9ce:	e75d      	b.n	c88c <cbvprintf+0x110>
	switch (*sp) {
    c9d0:	2a74      	cmp	r2, #116	; 0x74
    c9d2:	d025      	beq.n	ca20 <cbvprintf+0x2a4>
    c9d4:	2a7a      	cmp	r2, #122	; 0x7a
    c9d6:	d1d5      	bne.n	c984 <cbvprintf+0x208>
		conv->length_mod = LENGTH_Z;
    c9d8:	2106      	movs	r1, #6
    c9da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    c9de:	e00c      	b.n	c9fa <cbvprintf+0x27e>
		if (*++sp == 'h') {
    c9e0:	785a      	ldrb	r2, [r3, #1]
    c9e2:	2a68      	cmp	r2, #104	; 0x68
    c9e4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    c9e8:	d106      	bne.n	c9f8 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_HH;
    c9ea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    c9ec:	f361 02c6 	bfi	r2, r1, #3, #4
    c9f0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    c9f4:	3302      	adds	r3, #2
    c9f6:	e7c5      	b.n	c984 <cbvprintf+0x208>
			conv->length_mod = LENGTH_H;
    c9f8:	2102      	movs	r1, #2
    c9fa:	f361 02c6 	bfi	r2, r1, #3, #4
    c9fe:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    ca02:	3301      	adds	r3, #1
    ca04:	e7be      	b.n	c984 <cbvprintf+0x208>
		if (*++sp == 'l') {
    ca06:	785a      	ldrb	r2, [r3, #1]
    ca08:	2a6c      	cmp	r2, #108	; 0x6c
    ca0a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ca0e:	d101      	bne.n	ca14 <cbvprintf+0x298>
			conv->length_mod = LENGTH_LL;
    ca10:	2104      	movs	r1, #4
    ca12:	e7eb      	b.n	c9ec <cbvprintf+0x270>
			conv->length_mod = LENGTH_L;
    ca14:	2103      	movs	r1, #3
    ca16:	e7f0      	b.n	c9fa <cbvprintf+0x27e>
		conv->length_mod = LENGTH_J;
    ca18:	2105      	movs	r1, #5
    ca1a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ca1e:	e7ec      	b.n	c9fa <cbvprintf+0x27e>
		conv->length_mod = LENGTH_T;
    ca20:	2107      	movs	r1, #7
    ca22:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ca26:	e7e8      	b.n	c9fa <cbvprintf+0x27e>
		conv->unsupported = true;
    ca28:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    ca2c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    ca30:	f022 0202 	bic.w	r2, r2, #2
    ca34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    ca38:	f042 0202 	orr.w	r2, r2, #2
    ca3c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    ca40:	e7df      	b.n	ca02 <cbvprintf+0x286>
	switch (conv->specifier) {
    ca42:	3b6e      	subs	r3, #110	; 0x6e
    ca44:	b2d9      	uxtb	r1, r3
    ca46:	2301      	movs	r3, #1
    ca48:	408b      	lsls	r3, r1
    ca4a:	f240 4182 	movw	r1, #1154	; 0x482
    ca4e:	420b      	tst	r3, r1
    ca50:	d137      	bne.n	cac2 <cbvprintf+0x346>
    ca52:	f013 0f24 	tst.w	r3, #36	; 0x24
    ca56:	d151      	bne.n	cafc <cbvprintf+0x380>
    ca58:	07d8      	lsls	r0, r3, #31
    ca5a:	d55c      	bpl.n	cb16 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    ca5c:	2103      	movs	r1, #3
    ca5e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ca62:	f361 0302 	bfi	r3, r1, #0, #3
    ca66:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    ca6a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    ca6e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    ca72:	424b      	negs	r3, r1
    ca74:	414b      	adcs	r3, r1
    ca76:	e01a      	b.n	caae <cbvprintf+0x332>
    ca78:	2001      	movs	r0, #1
	switch (conv->specifier) {
    ca7a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    ca7e:	b2c9      	uxtb	r1, r1
    ca80:	fa00 f101 	lsl.w	r1, r0, r1
    ca84:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    ca88:	d194      	bne.n	c9b4 <cbvprintf+0x238>
    ca8a:	f640 0601 	movw	r6, #2049	; 0x801
    ca8e:	4231      	tst	r1, r6
    ca90:	d11d      	bne.n	cace <cbvprintf+0x352>
    ca92:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ca96:	d03e      	beq.n	cb16 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    ca98:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ca9c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    caa0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    caa4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    caa6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    caaa:	d034      	beq.n	cb16 <cbvprintf+0x39a>
	bool unsupported = false;
    caac:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    caae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    cab2:	f3c2 0140 	ubfx	r1, r2, #1, #1
    cab6:	430b      	orrs	r3, r1
    cab8:	f363 0241 	bfi	r2, r3, #1, #1
    cabc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    cac0:	e6fd      	b.n	c8be <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    cac2:	2102      	movs	r1, #2
    cac4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    cac8:	f361 0302 	bfi	r3, r1, #0, #3
    cacc:	e7e8      	b.n	caa0 <cbvprintf+0x324>
    cace:	2002      	movs	r0, #2
    cad0:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    cad4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    cad8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cadc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    cade:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    cae2:	bf02      	ittt	eq
    cae4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    cae8:	f041 0101 	orreq.w	r1, r1, #1
    caec:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    caf0:	2b63      	cmp	r3, #99	; 0x63
    caf2:	d1db      	bne.n	caac <cbvprintf+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    caf4:	1e13      	subs	r3, r2, #0
    caf6:	bf18      	it	ne
    caf8:	2301      	movne	r3, #1
    cafa:	e7d8      	b.n	caae <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    cafc:	2103      	movs	r1, #3
    cafe:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    cb02:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    cb06:	f361 0302 	bfi	r3, r1, #0, #3
    cb0a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    cb0e:	bf14      	ite	ne
    cb10:	2301      	movne	r3, #1
    cb12:	2300      	moveq	r3, #0
    cb14:	e7cb      	b.n	caae <cbvprintf+0x332>
		conv->invalid = true;
    cb16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    cb1a:	f043 0301 	orr.w	r3, r3, #1
    cb1e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    cb22:	e7c3      	b.n	caac <cbvprintf+0x330>
		} else if (conv->width_present) {
    cb24:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    cb28:	2a00      	cmp	r2, #0
		int width = -1;
    cb2a:	bfac      	ite	ge
    cb2c:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    cb30:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    cb34:	e6d5      	b.n	c8e2 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    cb36:	0798      	lsls	r0, r3, #30
    cb38:	f57f aee2 	bpl.w	c900 <cbvprintf+0x184>
			precision = conv->prec_value;
    cb3c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    cb40:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    cb42:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    cb46:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    cb4a:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    cb4e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    cb52:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    cb54:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    cb58:	d133      	bne.n	cbc2 <cbvprintf+0x446>
			switch (length_mod) {
    cb5a:	1ecb      	subs	r3, r1, #3
    cb5c:	2b04      	cmp	r3, #4
    cb5e:	d804      	bhi.n	cb6a <cbvprintf+0x3ee>
    cb60:	e8df f003 	tbb	[pc, r3]
    cb64:	10464610 	.word	0x10464610
    cb68:	10          	.byte	0x10
    cb69:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    cb6a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    cb6c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    cb6e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    cb72:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    cb76:	d10b      	bne.n	cb90 <cbvprintf+0x414>
				value->sint = (char)value->sint;
    cb78:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cb7c:	930e      	str	r3, [sp, #56]	; 0x38
    cb7e:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    cb80:	930f      	str	r3, [sp, #60]	; 0x3c
    cb82:	e007      	b.n	cb94 <cbvprintf+0x418>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cb84:	f854 3b04 	ldr.w	r3, [r4], #4
    cb88:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    cb8a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    cb8e:	e002      	b.n	cb96 <cbvprintf+0x41a>
			} else if (length_mod == LENGTH_H) {
    cb90:	2902      	cmp	r1, #2
    cb92:	d011      	beq.n	cbb8 <cbvprintf+0x43c>
				value->sint = va_arg(ap, int);
    cb94:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    cb96:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    cb9a:	f013 0603 	ands.w	r6, r3, #3
    cb9e:	d047      	beq.n	cc30 <cbvprintf+0x4b4>
			OUTS(sp, fp);
    cba0:	463a      	mov	r2, r7
    cba2:	4659      	mov	r1, fp
    cba4:	4648      	mov	r0, r9
    cba6:	9b03      	ldr	r3, [sp, #12]
    cba8:	f007 ffb0 	bl	14b0c <outs>
    cbac:	2800      	cmp	r0, #0
    cbae:	f2c0 8149 	blt.w	ce44 <cbvprintf+0x6c8>
    cbb2:	4405      	add	r5, r0
			continue;
    cbb4:	9f03      	ldr	r7, [sp, #12]
    cbb6:	e5e9      	b.n	c78c <cbvprintf+0x10>
				value->sint = (short)value->sint;
    cbb8:	b21a      	sxth	r2, r3
    cbba:	920e      	str	r2, [sp, #56]	; 0x38
    cbbc:	f343 33c0 	sbfx	r3, r3, #15, #1
    cbc0:	e7de      	b.n	cb80 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_UINT) {
    cbc2:	2b02      	cmp	r3, #2
    cbc4:	d124      	bne.n	cc10 <cbvprintf+0x494>
			switch (length_mod) {
    cbc6:	1ecb      	subs	r3, r1, #3
    cbc8:	2b04      	cmp	r3, #4
    cbca:	d804      	bhi.n	cbd6 <cbvprintf+0x45a>
    cbcc:	e8df f003 	tbb	[pc, r3]
    cbd0:	18101018 	.word	0x18101018
    cbd4:	18          	.byte	0x18
    cbd5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    cbd6:	2901      	cmp	r1, #1
    cbd8:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    cbdc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cbe0:	d014      	beq.n	cc0c <cbvprintf+0x490>
			} else if (length_mod == LENGTH_H) {
    cbe2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    cbe4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    cbe8:	d1d5      	bne.n	cb96 <cbvprintf+0x41a>
				value->uint = (unsigned short)value->uint;
    cbea:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    cbec:	930e      	str	r3, [sp, #56]	; 0x38
    cbee:	e7d2      	b.n	cb96 <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap,
    cbf0:	3407      	adds	r4, #7
    cbf2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    cbf6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    cbfa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    cbfe:	e7ca      	b.n	cb96 <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap, size_t);
    cc00:	f854 3b04 	ldr.w	r3, [r4], #4
    cc04:	930e      	str	r3, [sp, #56]	; 0x38
    cc06:	2300      	movs	r3, #0
    cc08:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    cc0a:	e7c4      	b.n	cb96 <cbvprintf+0x41a>
				value->uint = (unsigned char)value->uint;
    cc0c:	b2db      	uxtb	r3, r3
    cc0e:	e7bc      	b.n	cb8a <cbvprintf+0x40e>
		} else if (specifier_cat == SPECIFIER_FP) {
    cc10:	2b04      	cmp	r3, #4
    cc12:	d108      	bne.n	cc26 <cbvprintf+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    cc14:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    cc16:	f024 0407 	bic.w	r4, r4, #7
    cc1a:	e9d4 2300 	ldrd	r2, r3, [r4]
    cc1e:	3408      	adds	r4, #8
    cc20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    cc24:	e7b7      	b.n	cb96 <cbvprintf+0x41a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    cc26:	2b03      	cmp	r3, #3
    cc28:	d1b5      	bne.n	cb96 <cbvprintf+0x41a>
			value->ptr = va_arg(ap, void *);
    cc2a:	f854 3b04 	ldr.w	r3, [r4], #4
    cc2e:	e7dd      	b.n	cbec <cbvprintf+0x470>
		switch (conv->specifier) {
    cc30:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    cc34:	2878      	cmp	r0, #120	; 0x78
    cc36:	d8bd      	bhi.n	cbb4 <cbvprintf+0x438>
    cc38:	2862      	cmp	r0, #98	; 0x62
    cc3a:	d81c      	bhi.n	cc76 <cbvprintf+0x4fa>
    cc3c:	2825      	cmp	r0, #37	; 0x25
    cc3e:	f43f adad 	beq.w	c79c <cbvprintf+0x20>
    cc42:	2858      	cmp	r0, #88	; 0x58
    cc44:	d1b6      	bne.n	cbb4 <cbvprintf+0x438>
			bps = encode_uint(value->uint, conv, buf, bpe);
    cc46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    cc4a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    cc4e:	9300      	str	r3, [sp, #0]
    cc50:	aa10      	add	r2, sp, #64	; 0x40
    cc52:	ab08      	add	r3, sp, #32
    cc54:	f007 ff14 	bl	14a80 <encode_uint>
			if (precision >= 0) {
    cc58:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    cc5c:	4607      	mov	r7, r0
			if (precision >= 0) {
    cc5e:	f280 8099 	bge.w	cd94 <cbvprintf+0x618>
		if (bps == NULL) {
    cc62:	2f00      	cmp	r7, #0
    cc64:	d0a6      	beq.n	cbb4 <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
    cc66:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    cc6a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    cc6c:	2e00      	cmp	r6, #0
    cc6e:	f000 80c0 	beq.w	cdf2 <cbvprintf+0x676>
			nj_len += 1U;
    cc72:	3001      	adds	r0, #1
    cc74:	e0bd      	b.n	cdf2 <cbvprintf+0x676>
		switch (conv->specifier) {
    cc76:	3863      	subs	r0, #99	; 0x63
    cc78:	2815      	cmp	r0, #21
    cc7a:	d89b      	bhi.n	cbb4 <cbvprintf+0x438>
    cc7c:	a201      	add	r2, pc, #4	; (adr r2, cc84 <cbvprintf+0x508>)
    cc7e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    cc82:	bf00      	nop
    cc84:	0000cd59 	.word	0x0000cd59
    cc88:	0000cd6b 	.word	0x0000cd6b
    cc8c:	0000cbb5 	.word	0x0000cbb5
    cc90:	0000cbb5 	.word	0x0000cbb5
    cc94:	0000cbb5 	.word	0x0000cbb5
    cc98:	0000cbb5 	.word	0x0000cbb5
    cc9c:	0000cd6b 	.word	0x0000cd6b
    cca0:	0000cbb5 	.word	0x0000cbb5
    cca4:	0000cbb5 	.word	0x0000cbb5
    cca8:	0000cbb5 	.word	0x0000cbb5
    ccac:	0000cbb5 	.word	0x0000cbb5
    ccb0:	0000cdf7 	.word	0x0000cdf7
    ccb4:	0000cd8f 	.word	0x0000cd8f
    ccb8:	0000cdb5 	.word	0x0000cdb5
    ccbc:	0000cbb5 	.word	0x0000cbb5
    ccc0:	0000cbb5 	.word	0x0000cbb5
    ccc4:	0000ccdd 	.word	0x0000ccdd
    ccc8:	0000cbb5 	.word	0x0000cbb5
    cccc:	0000cd8f 	.word	0x0000cd8f
    ccd0:	0000cbb5 	.word	0x0000cbb5
    ccd4:	0000cbb5 	.word	0x0000cbb5
    ccd8:	0000cd8f 	.word	0x0000cd8f
			if (precision >= 0) {
    ccdc:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    cce0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    cce2:	db35      	blt.n	cd50 <cbvprintf+0x5d4>
				len = strnlen(bps, precision);
    cce4:	4651      	mov	r1, sl
    cce6:	4638      	mov	r0, r7
    cce8:	f007 fffa 	bl	14ce0 <strnlen>
			bpe = bps + len;
    ccec:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    ccf0:	2f00      	cmp	r7, #0
    ccf2:	f43f af5f 	beq.w	cbb4 <cbvprintf+0x438>
		char sign = 0;
    ccf6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    ccf8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ccfc:	f013 0210 	ands.w	r2, r3, #16
    cd00:	9205      	str	r2, [sp, #20]
    cd02:	f000 8092 	beq.w	ce2a <cbvprintf+0x6ae>
			nj_len += 2U;
    cd06:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    cd08:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    cd0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    cd0c:	bf48      	it	mi
    cd0e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    cd10:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    cd12:	bf48      	it	mi
    cd14:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    cd16:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    cd1a:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    cd1c:	f340 809f 	ble.w	ce5e <cbvprintf+0x6e2>
			if (!conv->flag_dash) {
    cd20:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    cd24:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    cd28:	f3c2 0380 	ubfx	r3, r2, #2, #1
    cd2c:	0750      	lsls	r0, r2, #29
    cd2e:	9306      	str	r3, [sp, #24]
    cd30:	f100 8095 	bmi.w	ce5e <cbvprintf+0x6e2>
				if (conv->flag_zero) {
    cd34:	0651      	lsls	r1, r2, #25
    cd36:	f140 8088 	bpl.w	ce4a <cbvprintf+0x6ce>
					if (sign != 0) {
    cd3a:	b13e      	cbz	r6, cd4c <cbvprintf+0x5d0>
						OUTC(sign);
    cd3c:	4659      	mov	r1, fp
    cd3e:	4630      	mov	r0, r6
    cd40:	47c8      	blx	r9
    cd42:	2800      	cmp	r0, #0
    cd44:	db7e      	blt.n	ce44 <cbvprintf+0x6c8>
    cd46:	9b06      	ldr	r3, [sp, #24]
    cd48:	3501      	adds	r5, #1
    cd4a:	461e      	mov	r6, r3
					pad = '0';
    cd4c:	2230      	movs	r2, #48	; 0x30
    cd4e:	e07d      	b.n	ce4c <cbvprintf+0x6d0>
				len = strlen(bps);
    cd50:	4638      	mov	r0, r7
    cd52:	f007 ffbe 	bl	14cd2 <strlen>
    cd56:	e7c9      	b.n	ccec <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    cd5a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    cd5c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd5e:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    cd62:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    cd64:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    cd68:	e7c6      	b.n	ccf8 <cbvprintf+0x57c>
			if (conv->flag_plus) {
    cd6a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    cd6c:	bf5a      	itte	pl
    cd6e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    cd72:	015e      	lslpl	r6, r3, #5
				sign = '+';
    cd74:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    cd76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    cd7a:	2b00      	cmp	r3, #0
    cd7c:	f6bf af63 	bge.w	cc46 <cbvprintf+0x4ca>
				value->uint = (uint_value_type)-sint;
    cd80:	4252      	negs	r2, r2
    cd82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    cd86:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    cd88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    cd8c:	e75b      	b.n	cc46 <cbvprintf+0x4ca>
		switch (conv->specifier) {
    cd8e:	2600      	movs	r6, #0
    cd90:	e759      	b.n	cc46 <cbvprintf+0x4ca>
		char sign = 0;
    cd92:	2600      	movs	r6, #0
				conv->flag_zero = false;
    cd94:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    cd98:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    cd9c:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    cd9e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    cda2:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    cda4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    cda8:	f67f af5b 	bls.w	cc62 <cbvprintf+0x4e6>
					conv->pad0_value = precision - (int)len;
    cdac:	ebaa 0303 	sub.w	r3, sl, r3
    cdb0:	9311      	str	r3, [sp, #68]	; 0x44
    cdb2:	e756      	b.n	cc62 <cbvprintf+0x4e6>
			if (value->ptr != NULL) {
    cdb4:	980e      	ldr	r0, [sp, #56]	; 0x38
    cdb6:	b390      	cbz	r0, ce1e <cbvprintf+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    cdb8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    cdbc:	9300      	str	r3, [sp, #0]
    cdbe:	2100      	movs	r1, #0
    cdc0:	ab08      	add	r3, sp, #32
    cdc2:	aa10      	add	r2, sp, #64	; 0x40
    cdc4:	f007 fe5c 	bl	14a80 <encode_uint>
				conv->altform_0c = true;
    cdc8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    cdcc:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    cdd0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    cdd4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    cdd8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    cddc:	4607      	mov	r7, r0
				conv->altform_0c = true;
    cdde:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    cde2:	dad6      	bge.n	cd92 <cbvprintf+0x616>
		if (bps == NULL) {
    cde4:	2800      	cmp	r0, #0
    cde6:	f43f aee5 	beq.w	cbb4 <cbvprintf+0x438>
		char sign = 0;
    cdea:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    cdec:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    cdf0:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    cdf2:	469a      	mov	sl, r3
    cdf4:	e780      	b.n	ccf8 <cbvprintf+0x57c>
				store_count(conv, value->ptr, count);
    cdf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    cdf8:	2907      	cmp	r1, #7
    cdfa:	f63f aedb 	bhi.w	cbb4 <cbvprintf+0x438>
    cdfe:	e8df f001 	tbb	[pc, r1]
    ce02:	040c      	.short	0x040c
    ce04:	08080c06 	.word	0x08080c06
    ce08:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ce0a:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    ce0c:	e6d2      	b.n	cbb4 <cbvprintf+0x438>
		*(short *)dp = (short)count;
    ce0e:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    ce10:	e6d0      	b.n	cbb4 <cbvprintf+0x438>
		*(intmax_t *)dp = (intmax_t)count;
    ce12:	17ea      	asrs	r2, r5, #31
    ce14:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    ce18:	e6cc      	b.n	cbb4 <cbvprintf+0x438>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ce1a:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    ce1c:	e6ca      	b.n	cbb4 <cbvprintf+0x438>
    ce1e:	4f2f      	ldr	r7, [pc, #188]	; (cedc <cbvprintf+0x760>)
		char sign = 0;
    ce20:	4606      	mov	r6, r0
			bpe = bps + 5;
    ce22:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    ce26:	2005      	movs	r0, #5
    ce28:	e766      	b.n	ccf8 <cbvprintf+0x57c>
		} else if (conv->altform_0) {
    ce2a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    ce2c:	bf48      	it	mi
    ce2e:	3001      	addmi	r0, #1
    ce30:	e76a      	b.n	cd08 <cbvprintf+0x58c>
					OUTC(pad);
    ce32:	4610      	mov	r0, r2
    ce34:	9307      	str	r3, [sp, #28]
    ce36:	9206      	str	r2, [sp, #24]
    ce38:	4659      	mov	r1, fp
    ce3a:	47c8      	blx	r9
    ce3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ce40:	2800      	cmp	r0, #0
    ce42:	da04      	bge.n	ce4e <cbvprintf+0x6d2>
#undef OUTS
#undef OUTC
}
    ce44:	b015      	add	sp, #84	; 0x54
    ce46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ce4a:	2220      	movs	r2, #32
					pad = '0';
    ce4c:	4643      	mov	r3, r8
				while (width-- > 0) {
    ce4e:	4619      	mov	r1, r3
    ce50:	2900      	cmp	r1, #0
    ce52:	f103 33ff 	add.w	r3, r3, #4294967295
    ce56:	dcec      	bgt.n	ce32 <cbvprintf+0x6b6>
    ce58:	4445      	add	r5, r8
    ce5a:	4698      	mov	r8, r3
    ce5c:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    ce5e:	b12e      	cbz	r6, ce6c <cbvprintf+0x6f0>
			OUTC(sign);
    ce60:	4659      	mov	r1, fp
    ce62:	4630      	mov	r0, r6
    ce64:	47c8      	blx	r9
    ce66:	2800      	cmp	r0, #0
    ce68:	dbec      	blt.n	ce44 <cbvprintf+0x6c8>
    ce6a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ce6c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ce70:	06da      	lsls	r2, r3, #27
    ce72:	d401      	bmi.n	ce78 <cbvprintf+0x6fc>
    ce74:	071b      	lsls	r3, r3, #28
    ce76:	d505      	bpl.n	ce84 <cbvprintf+0x708>
				OUTC('0');
    ce78:	4659      	mov	r1, fp
    ce7a:	2030      	movs	r0, #48	; 0x30
    ce7c:	47c8      	blx	r9
    ce7e:	2800      	cmp	r0, #0
    ce80:	dbe0      	blt.n	ce44 <cbvprintf+0x6c8>
    ce82:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ce84:	9b05      	ldr	r3, [sp, #20]
    ce86:	b133      	cbz	r3, ce96 <cbvprintf+0x71a>
				OUTC(conv->specifier);
    ce88:	4659      	mov	r1, fp
    ce8a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    ce8e:	47c8      	blx	r9
    ce90:	2800      	cmp	r0, #0
    ce92:	dbd7      	blt.n	ce44 <cbvprintf+0x6c8>
    ce94:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ce96:	9e04      	ldr	r6, [sp, #16]
    ce98:	442e      	add	r6, r5
    ce9a:	e005      	b.n	cea8 <cbvprintf+0x72c>
				OUTC('0');
    ce9c:	4659      	mov	r1, fp
    ce9e:	2030      	movs	r0, #48	; 0x30
    cea0:	47c8      	blx	r9
    cea2:	2800      	cmp	r0, #0
    cea4:	dbce      	blt.n	ce44 <cbvprintf+0x6c8>
    cea6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    cea8:	1b73      	subs	r3, r6, r5
    ceaa:	2b00      	cmp	r3, #0
    ceac:	dcf6      	bgt.n	ce9c <cbvprintf+0x720>
			OUTS(bps, bpe);
    ceae:	4653      	mov	r3, sl
    ceb0:	463a      	mov	r2, r7
    ceb2:	4659      	mov	r1, fp
    ceb4:	4648      	mov	r0, r9
    ceb6:	f007 fe29 	bl	14b0c <outs>
    ceba:	2800      	cmp	r0, #0
    cebc:	dbc2      	blt.n	ce44 <cbvprintf+0x6c8>
    cebe:	4405      	add	r5, r0
		while (width > 0) {
    cec0:	44a8      	add	r8, r5
    cec2:	eba8 0305 	sub.w	r3, r8, r5
    cec6:	2b00      	cmp	r3, #0
    cec8:	f77f ae74 	ble.w	cbb4 <cbvprintf+0x438>
			OUTC(' ');
    cecc:	4659      	mov	r1, fp
    cece:	2020      	movs	r0, #32
    ced0:	47c8      	blx	r9
    ced2:	2800      	cmp	r0, #0
    ced4:	dbb6      	blt.n	ce44 <cbvprintf+0x6c8>
    ced6:	3501      	adds	r5, #1
			--width;
    ced8:	e7f3      	b.n	cec2 <cbvprintf+0x746>
    ceda:	bf00      	nop
    cedc:	000159ac 	.word	0x000159ac

0000cee0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    cee0:	4604      	mov	r4, r0
    cee2:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    cee4:	f04f 0220 	mov.w	r2, #32
    cee8:	f3ef 8311 	mrs	r3, BASEPRI
    ceec:	f382 8812 	msr	BASEPRI_MAX, r2
    cef0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
    cef4:	f008 f8cd 	bl	15092 <sys_clock_disable>

	sys_arch_reboot(type);
    cef8:	4620      	mov	r0, r4
    cefa:	f001 f907 	bl	e10c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    cefe:	4803      	ldr	r0, [pc, #12]	; (cf0c <sys_reboot+0x2c>)
    cf00:	f007 fd94 	bl	14a2c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    cf04:	f000 fcdc 	bl	d8c0 <arch_cpu_idle>
    cf08:	e7fc      	b.n	cf04 <sys_reboot+0x24>
    cf0a:	bf00      	nop
    cf0c:	000159b2 	.word	0x000159b2

0000cf10 <nordicsemi_nrf91_init>:
    cf10:	f04f 0220 	mov.w	r2, #32
    cf14:	f3ef 8311 	mrs	r3, BASEPRI
    cf18:	f382 8812 	msr	BASEPRI_MAX, r2
    cf1c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cf20:	2101      	movs	r1, #1
    cf22:	4a04      	ldr	r2, [pc, #16]	; (cf34 <nordicsemi_nrf91_init+0x24>)
    cf24:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cf28:	f383 8811 	msr	BASEPRI, r3
    cf2c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cf30:	2000      	movs	r0, #0
    cf32:	4770      	bx	lr
    cf34:	50039000 	.word	0x50039000

0000cf38 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cf38:	b120      	cbz	r0, cf44 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cf3a:	4b03      	ldr	r3, [pc, #12]	; (cf48 <arch_busy_wait+0x10>)
    cf3c:	0180      	lsls	r0, r0, #6
    cf3e:	f043 0301 	orr.w	r3, r3, #1
    cf42:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cf44:	4770      	bx	lr
    cf46:	bf00      	nop
    cf48:	000155b0 	.word	0x000155b0

0000cf4c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    cf4c:	b084      	sub	sp, #16
    cf4e:	ab04      	add	r3, sp, #16
    cf50:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    cf54:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cf58:	2b06      	cmp	r3, #6
    cf5a:	d107      	bne.n	cf6c <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    cf5c:	2201      	movs	r2, #1
    cf5e:	4b04      	ldr	r3, [pc, #16]	; (cf70 <pm_power_state_set+0x24>)
    cf60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cf64:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    cf68:	bf20      	wfe
    while (true)
    cf6a:	e7fd      	b.n	cf68 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    cf6c:	b004      	add	sp, #16
    cf6e:	4770      	bx	lr
    cf70:	50004000 	.word	0x50004000

0000cf74 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf78:	4605      	mov	r5, r0
	__asm__ volatile(
    cf7a:	f04f 0320 	mov.w	r3, #32
    cf7e:	f3ef 8611 	mrs	r6, BASEPRI
    cf82:	f383 8812 	msr	BASEPRI_MAX, r3
    cf86:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf8a:	481c      	ldr	r0, [pc, #112]	; (cffc <pm_state_notify+0x88>)
    cf8c:	f003 fb2c 	bl	105e8 <z_spin_lock_valid>
    cf90:	b940      	cbnz	r0, cfa4 <pm_state_notify+0x30>
    cf92:	491b      	ldr	r1, [pc, #108]	; (d000 <pm_state_notify+0x8c>)
    cf94:	481b      	ldr	r0, [pc, #108]	; (d004 <pm_state_notify+0x90>)
    cf96:	2281      	movs	r2, #129	; 0x81
    cf98:	f007 fd48 	bl	14a2c <printk>
    cf9c:	2181      	movs	r1, #129	; 0x81
    cf9e:	4818      	ldr	r0, [pc, #96]	; (d000 <pm_state_notify+0x8c>)
    cfa0:	f007 fdcb 	bl	14b3a <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    cfa4:	f04f 090c 	mov.w	r9, #12
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    cfa8:	4814      	ldr	r0, [pc, #80]	; (cffc <pm_state_notify+0x88>)
    cfaa:	f003 fb39 	bl	10620 <z_spin_lock_set_owner>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cfae:	4b16      	ldr	r3, [pc, #88]	; (d008 <pm_state_notify+0x94>)
    cfb0:	4f16      	ldr	r7, [pc, #88]	; (d00c <pm_state_notify+0x98>)
    cfb2:	681c      	ldr	r4, [r3, #0]
    cfb4:	f8df 8058 	ldr.w	r8, [pc, #88]	; d010 <pm_state_notify+0x9c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    cfb8:	b994      	cbnz	r4, cfe0 <pm_state_notify+0x6c>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfba:	4810      	ldr	r0, [pc, #64]	; (cffc <pm_state_notify+0x88>)
    cfbc:	f003 fb22 	bl	10604 <z_spin_unlock_valid>
    cfc0:	b940      	cbnz	r0, cfd4 <pm_state_notify+0x60>
    cfc2:	490f      	ldr	r1, [pc, #60]	; (d000 <pm_state_notify+0x8c>)
    cfc4:	480f      	ldr	r0, [pc, #60]	; (d004 <pm_state_notify+0x90>)
    cfc6:	22ac      	movs	r2, #172	; 0xac
    cfc8:	f007 fd30 	bl	14a2c <printk>
    cfcc:	21ac      	movs	r1, #172	; 0xac
    cfce:	480c      	ldr	r0, [pc, #48]	; (d000 <pm_state_notify+0x8c>)
    cfd0:	f007 fdb3 	bl	14b3a <assert_post_action>
	__asm__ volatile(
    cfd4:	f386 8811 	msr	BASEPRI, r6
    cfd8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    cfdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    cfe0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    cfe4:	2d00      	cmp	r5, #0
    cfe6:	bf18      	it	ne
    cfe8:	4613      	movne	r3, r2
		if (callback) {
    cfea:	b12b      	cbz	r3, cff8 <pm_state_notify+0x84>
			callback(z_power_states[_current_cpu->id].state);
    cfec:	f898 2014 	ldrb.w	r2, [r8, #20]
    cff0:	fb09 f202 	mul.w	r2, r9, r2
    cff4:	5cb8      	ldrb	r0, [r7, r2]
    cff6:	4798      	blx	r3
	return node->next;
    cff8:	6824      	ldr	r4, [r4, #0]
    cffa:	e7dd      	b.n	cfb8 <pm_state_notify+0x44>
    cffc:	20000268 	.word	0x20000268
    d000:	000159df 	.word	0x000159df
    d004:	00015a05 	.word	0x00015a05
    d008:	2000027c 	.word	0x2000027c
    d00c:	20000270 	.word	0x20000270
    d010:	20000a2c 	.word	0x20000a2c

0000d014 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d014:	2201      	movs	r2, #1
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
    d016:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    d018:	f000 031f 	and.w	r3, r0, #31
    d01c:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d01e:	4b08      	ldr	r3, [pc, #32]	; (d040 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d020:	0940      	lsrs	r0, r0, #5
    d022:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    d026:	e8d3 1fef 	ldaex	r1, [r3]
    d02a:	ea41 0002 	orr.w	r0, r1, r2
    d02e:	e8c3 0fe4 	stlex	r4, r0, [r3]
    d032:	2c00      	cmp	r4, #0
    d034:	d1f7      	bne.n	d026 <atomic_test_and_set_bit.constprop.0+0x12>

	return (old & mask) != 0;
    d036:	420a      	tst	r2, r1
}
    d038:	bf14      	ite	ne
    d03a:	2001      	movne	r0, #1
    d03c:	2000      	moveq	r0, #0
    d03e:	bd10      	pop	{r4, pc}
    d040:	2000026c 	.word	0x2000026c

0000d044 <pm_system_resume>:

void pm_system_resume(void)
{
    d044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    d046:	2201      	movs	r2, #1
	uint8_t id = _current_cpu->id;
    d048:	4b19      	ldr	r3, [pc, #100]	; (d0b0 <pm_system_resume+0x6c>)
    d04a:	7d1c      	ldrb	r4, [r3, #20]
    d04c:	f004 031f 	and.w	r3, r4, #31
    d050:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d052:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d054:	4b17      	ldr	r3, [pc, #92]	; (d0b4 <pm_system_resume+0x70>)
    d056:	0961      	lsrs	r1, r4, #5
    d058:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d05c:	e8d3 1fef 	ldaex	r1, [r3]
    d060:	ea01 0500 	and.w	r5, r1, r0
    d064:	e8c3 5fe6 	stlex	r6, r5, [r3]
    d068:	2e00      	cmp	r6, #0
    d06a:	d1f7      	bne.n	d05c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    d06c:	420a      	tst	r2, r1
    d06e:	d017      	beq.n	d0a0 <pm_system_resume+0x5c>
		exit_pos_ops(z_power_states[id]);
    d070:	220c      	movs	r2, #12
    d072:	4d11      	ldr	r5, [pc, #68]	; (d0b8 <pm_system_resume+0x74>)
    d074:	ab01      	add	r3, sp, #4
    d076:	fb02 5204 	mla	r2, r2, r4, r5
    d07a:	ca07      	ldmia	r2, {r0, r1, r2}
    d07c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    d080:	4a0e      	ldr	r2, [pc, #56]	; (d0bc <pm_system_resume+0x78>)
    d082:	b17a      	cbz	r2, d0a4 <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
    d084:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d088:	f007 fd5f 	bl	14b4a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    d08c:	2000      	movs	r0, #0
    d08e:	f7ff ff71 	bl	cf74 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    d092:	230c      	movs	r3, #12
    d094:	435c      	muls	r4, r3
    d096:	2300      	movs	r3, #0
    d098:	192a      	adds	r2, r5, r4
    d09a:	512b      	str	r3, [r5, r4]
    d09c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    d0a0:	b004      	add	sp, #16
    d0a2:	bd70      	pop	{r4, r5, r6, pc}
    d0a4:	f382 8811 	msr	BASEPRI, r2
    d0a8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d0ac:	e7ee      	b.n	d08c <pm_system_resume+0x48>
    d0ae:	bf00      	nop
    d0b0:	20000a2c 	.word	0x20000a2c
    d0b4:	20000284 	.word	0x20000284
    d0b8:	20000270 	.word	0x20000270
    d0bc:	00014b4b 	.word	0x00014b4b

0000d0c0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    d0c4:	4b32      	ldr	r3, [pc, #200]	; (d190 <pm_system_suspend+0xd0>)
{
    d0c6:	4680      	mov	r8, r0
	uint8_t id = _current_cpu->id;
    d0c8:	7d1d      	ldrb	r5, [r3, #20]
{
    d0ca:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    d0cc:	4628      	mov	r0, r5
    d0ce:	f7ff ffa1 	bl	d014 <atomic_test_and_set_bit.constprop.0>
    d0d2:	4c30      	ldr	r4, [pc, #192]	; (d194 <pm_system_suspend+0xd4>)
    d0d4:	b960      	cbnz	r0, d0f0 <pm_system_suspend+0x30>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    d0d6:	260c      	movs	r6, #12
    d0d8:	466f      	mov	r7, sp
    d0da:	fb06 4605 	mla	r6, r6, r5, r4
    d0de:	4642      	mov	r2, r8
    d0e0:	4629      	mov	r1, r5
    d0e2:	4638      	mov	r0, r7
    d0e4:	f007 fd49 	bl	14b7a <pm_policy_next_state>
    d0e8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    d0ec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    d0f0:	230c      	movs	r3, #12
    d0f2:	436b      	muls	r3, r5
    d0f4:	5ce0      	ldrb	r0, [r4, r3]
    d0f6:	18e2      	adds	r2, r4, r3
    d0f8:	096f      	lsrs	r7, r5, #5
    d0fa:	f005 061f 	and.w	r6, r5, #31
    d0fe:	b3b8      	cbz	r0, d170 <pm_system_suspend+0xb0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    d100:	f1b8 3fff 	cmp.w	r8, #4294967295
    d104:	d010      	beq.n	d128 <pm_system_suspend+0x68>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    d106:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    d10a:	2100      	movs	r1, #0
    d10c:	f8d2 e008 	ldr.w	lr, [r2, #8]
    d110:	4821      	ldr	r0, [pc, #132]	; (d198 <pm_system_suspend+0xd8>)
    d112:	2300      	movs	r3, #0
    d114:	fbee 010c 	umlal	r0, r1, lr, ip
    d118:	4a20      	ldr	r2, [pc, #128]	; (d19c <pm_system_suspend+0xdc>)
    d11a:	f7ff f98f 	bl	c43c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    d11e:	2101      	movs	r1, #1
    d120:	eba8 0000 	sub.w	r0, r8, r0
    d124:	f004 fd82 	bl	11c2c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    d128:	f003 fe48 	bl	10dbc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    d12c:	2001      	movs	r0, #1
    d12e:	f7ff ff21 	bl	cf74 <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d132:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d134:	4b1a      	ldr	r3, [pc, #104]	; (d1a0 <pm_system_suspend+0xe0>)
    d136:	40b2      	lsls	r2, r6
    d138:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    d13c:	e8d3 0fef 	ldaex	r0, [r3]
    d140:	4310      	orrs	r0, r2
    d142:	e8c3 0fe1 	stlex	r1, r0, [r3]
    d146:	2900      	cmp	r1, #0
    d148:	d1f8      	bne.n	d13c <pm_system_suspend+0x7c>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    d14a:	230c      	movs	r3, #12
    d14c:	fb03 4405 	mla	r4, r3, r5, r4
    d150:	ab05      	add	r3, sp, #20
    d152:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    d156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    d15a:	4a12      	ldr	r2, [pc, #72]	; (d1a4 <pm_system_suspend+0xe4>)
    d15c:	b11a      	cbz	r2, d166 <pm_system_suspend+0xa6>
		pm_power_state_set(info);
    d15e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d162:	f7ff fef3 	bl	cf4c <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    d166:	f7ff ff6d 	bl	d044 <pm_system_resume>
	k_sched_unlock();
    d16a:	f003 fe7b 	bl	10e64 <k_sched_unlock>
	bool ret = true;
    d16e:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    d170:	2301      	movs	r3, #1
    d172:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d174:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d176:	4a0c      	ldr	r2, [pc, #48]	; (d1a8 <pm_system_suspend+0xe8>)
    d178:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    d17c:	e8d2 4fef 	ldaex	r4, [r2]
    d180:	401c      	ands	r4, r3
    d182:	e8c2 4fe1 	stlex	r1, r4, [r2]
    d186:	2900      	cmp	r1, #0
    d188:	d1f8      	bne.n	d17c <pm_system_suspend+0xbc>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    d18a:	b008      	add	sp, #32
    d18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d190:	20000a2c 	.word	0x20000a2c
    d194:	20000270 	.word	0x20000270
    d198:	000f423f 	.word	0x000f423f
    d19c:	000f4240 	.word	0x000f4240
    d1a0:	20000284 	.word	0x20000284
    d1a4:	0000cf4d 	.word	0x0000cf4d
    d1a8:	2000026c 	.word	0x2000026c

0000d1ac <adp536x_reg_read>:


static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
    d1ac:	4603      	mov	r3, r0
    d1ae:	b510      	push	{r4, lr}
    d1b0:	b088      	sub	sp, #32
    d1b2:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    d1b6:	f10d 0307 	add.w	r3, sp, #7
    d1ba:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    d1bc:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
    d1be:	4a09      	ldr	r2, [pc, #36]	; (d1e4 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
    d1c0:	e9cd 1305 	strd	r1, r3, [sp, #20]
    d1c4:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
    d1c6:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    d1c8:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d1ca:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    d1cc:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d1d0:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    d1d4:	6883      	ldr	r3, [r0, #8]
    d1d6:	2202      	movs	r2, #2
    d1d8:	689c      	ldr	r4, [r3, #8]
    d1da:	a902      	add	r1, sp, #8
    d1dc:	2346      	movs	r3, #70	; 0x46
    d1de:	47a0      	blx	r4
}
    d1e0:	b008      	add	sp, #32
    d1e2:	bd10      	pop	{r4, pc}
    d1e4:	20000288 	.word	0x20000288

0000d1e8 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
    d1e8:	b570      	push	{r4, r5, r6, lr}
    d1ea:	b086      	sub	sp, #24
    d1ec:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
    d1ee:	f10d 0107 	add.w	r1, sp, #7
{
    d1f2:	4605      	mov	r5, r0
    d1f4:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
    d1f6:	f7ff ffd9 	bl	d1ac <adp536x_reg_read>
	if (err) {
    d1fa:	b9c8      	cbnz	r0, d230 <adp536x_reg_write_mask+0x48>
		return err;
	}

	tmp &= ~mask;
    d1fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    d200:	f88d 5008 	strb.w	r5, [sp, #8]
    d204:	ea23 0106 	bic.w	r1, r3, r6
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d208:	4b0a      	ldr	r3, [pc, #40]	; (d234 <adp536x_reg_write_mask+0x4c>)
	tmp |= data;
    d20a:	ea44 0201 	orr.w	r2, r4, r1
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d20e:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
    d210:	ab02      	add	r3, sp, #8
    d212:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
    d214:	2302      	movs	r3, #2
	tmp |= data;
    d216:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t tx_buf[2] = {reg_addr, value};
    d21a:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
    d21e:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    d220:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    d224:	6883      	ldr	r3, [r0, #8]
    d226:	2201      	movs	r2, #1
    d228:	689c      	ldr	r4, [r3, #8]
    d22a:	a903      	add	r1, sp, #12
    d22c:	2346      	movs	r3, #70	; 0x46
    d22e:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
    d230:	b006      	add	sp, #24
    d232:	bd70      	pop	{r4, r5, r6, pc}
    d234:	20000288 	.word	0x20000288

0000d238 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
    d238:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d23a:	f002 fed7 	bl	ffec <z_impl_device_get_binding>
	i2c_dev = device_get_binding(dev_name);
    d23e:	4b04      	ldr	r3, [pc, #16]	; (d250 <adp536x_init+0x18>)
	if (i2c_dev == NULL) {
		return -ENODEV;
	}

	return 0;
    d240:	2800      	cmp	r0, #0
	i2c_dev = device_get_binding(dev_name);
    d242:	6018      	str	r0, [r3, #0]
}
    d244:	bf0c      	ite	eq
    d246:	f06f 0012 	mvneq.w	r0, #18
    d24a:	2000      	movne	r0, #0
    d24c:	bd08      	pop	{r3, pc}
    d24e:	bf00      	nop
    d250:	20000288 	.word	0x20000288

0000d254 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    d254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    d256:	2800      	cmp	r0, #0
{
    d258:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    d25a:	bf14      	ite	ne
    d25c:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    d260:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    d264:	428a      	cmp	r2, r1
    d266:	d20b      	bcs.n	d280 <config_regions+0x2c>
    d268:	2294      	movs	r2, #148	; 0x94
    d26a:	4921      	ldr	r1, [pc, #132]	; (d2f0 <config_regions+0x9c>)
    d26c:	4821      	ldr	r0, [pc, #132]	; (d2f4 <config_regions+0xa0>)
    d26e:	f007 fbdd 	bl	14a2c <printk>
    d272:	2194      	movs	r1, #148	; 0x94
    d274:	481e      	ldr	r0, [pc, #120]	; (d2f0 <config_regions+0x9c>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    d276:	b003      	add	sp, #12
    d278:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    d27c:	f007 bc5d 	b.w	14b3a <assert_post_action>
	if (end <= start) {
    d280:	d033      	beq.n	d2ea <config_regions+0x96>
    d282:	460d      	mov	r5, r1
    d284:	4e1c      	ldr	r6, [pc, #112]	; (d2f8 <config_regions+0xa4>)
		if (ram) {
    d286:	b368      	cbz	r0, d2e4 <config_regions+0x90>
			NRF_SPU->RAMREGION[i].PERM = perm;
    d288:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    d28c:	3501      	adds	r5, #1
    d28e:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    d290:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    d294:	d1f7      	bne.n	d286 <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    d296:	fb02 f003 	mul.w	r0, r2, r3
    d29a:	3a01      	subs	r2, #1
    d29c:	434b      	muls	r3, r1
    d29e:	9000      	str	r0, [sp, #0]
    d2a0:	4816      	ldr	r0, [pc, #88]	; (d2fc <config_regions+0xa8>)
    d2a2:	f007 fbc3 	bl	14a2c <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    d2a6:	4b16      	ldr	r3, [pc, #88]	; (d300 <config_regions+0xac>)
    d2a8:	f014 0f10 	tst.w	r4, #16
    d2ac:	4915      	ldr	r1, [pc, #84]	; (d304 <config_regions+0xb0>)
    d2ae:	4816      	ldr	r0, [pc, #88]	; (d308 <config_regions+0xb4>)
    d2b0:	bf18      	it	ne
    d2b2:	4619      	movne	r1, r3
    d2b4:	f007 fbba 	bl	14a2c <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    d2b8:	2172      	movs	r1, #114	; 0x72
    d2ba:	4814      	ldr	r0, [pc, #80]	; (d30c <config_regions+0xb8>)
    d2bc:	f007 fbb6 	bl	14a2c <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    d2c0:	2177      	movs	r1, #119	; 0x77
    d2c2:	4812      	ldr	r0, [pc, #72]	; (d30c <config_regions+0xb8>)
    d2c4:	f007 fbb2 	bl	14a2c <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    d2c8:	2178      	movs	r1, #120	; 0x78
    d2ca:	4810      	ldr	r0, [pc, #64]	; (d30c <config_regions+0xb8>)
    d2cc:	f007 fbae 	bl	14a2c <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    d2d0:	216c      	movs	r1, #108	; 0x6c
    d2d2:	480e      	ldr	r0, [pc, #56]	; (d30c <config_regions+0xb8>)
    d2d4:	f007 fbaa 	bl	14a2c <printk>
	PRINT("\n");
    d2d8:	480d      	ldr	r0, [pc, #52]	; (d310 <config_regions+0xbc>)
}
    d2da:	b003      	add	sp, #12
    d2dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    d2e0:	f007 bba4 	b.w	14a2c <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    d2e4:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    d2e8:	e7d0      	b.n	d28c <config_regions+0x38>
}
    d2ea:	b003      	add	sp, #12
    d2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2ee:	bf00      	nop
    d2f0:	00015a35 	.word	0x00015a35
    d2f4:	00015a05 	.word	0x00015a05
    d2f8:	50003000 	.word	0x50003000
    d2fc:	00015a56 	.word	0x00015a56
    d300:	00015a20 	.word	0x00015a20
    d304:	00015a29 	.word	0x00015a29
    d308:	00015c07 	.word	0x00015c07
    d30c:	00015a70 	.word	0x00015a70
    d310:	000165fb 	.word	0x000165fb

0000d314 <config_peripheral.constprop.0>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d314:	f010 0f80 	tst.w	r0, #128	; 0x80
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int config_peripheral(uint8_t id, bool dma_present, bool lock)
    d318:	b510      	push	{r4, lr}
    d31a:	f500 7200 	add.w	r2, r0, #512	; 0x200
    d31e:	d00e      	beq.n	d33e <config_peripheral.constprop.0+0x2a>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d320:	4b12      	ldr	r3, [pc, #72]	; (d36c <config_peripheral.constprop.0+0x58>)
    d322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	return present && (usel || split);
    d326:	2b00      	cmp	r3, #0
    d328:	da04      	bge.n	d334 <config_peripheral.constprop.0+0x20>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    d32a:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    d32e:	3b02      	subs	r3, #2
    d330:	2b01      	cmp	r3, #1
    d332:	d916      	bls.n	d362 <config_peripheral.constprop.0+0x4e>
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    d334:	2101      	movs	r1, #1
    d336:	f007 fc85 	bl	14c44 <irq_target_state_set>
	return 0;
}
    d33a:	2000      	movs	r0, #0
    d33c:	bd10      	pop	{r4, pc}
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d33e:	2101      	movs	r1, #1
    d340:	f000 041f 	and.w	r4, r0, #31
    d344:	40a1      	lsls	r1, r4
    d346:	0943      	lsrs	r3, r0, #5
    d348:	4c09      	ldr	r4, [pc, #36]	; (d370 <config_peripheral.constprop.0+0x5c>)
    d34a:	3320      	adds	r3, #32
    d34c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    d350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d354:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d358:	4b04      	ldr	r3, [pc, #16]	; (d36c <config_peripheral.constprop.0+0x58>)
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    d35a:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    d360:	d1e1      	bne.n	d326 <config_peripheral.constprop.0+0x12>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    d362:	4b02      	ldr	r3, [pc, #8]	; (d36c <config_peripheral.constprop.0+0x58>)
    d364:	4903      	ldr	r1, [pc, #12]	; (d374 <config_peripheral.constprop.0+0x60>)
    d366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    d36a:	e7e3      	b.n	d334 <config_peripheral.constprop.0+0x20>
    d36c:	50003000 	.word	0x50003000
    d370:	e000e100 	.word	0xe000e100
    d374:	80000100 	.word	0x80000100

0000d378 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    d378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    d37a:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    d37e:	f44f 31c1 	mov.w	r1, #98816	; 0x18200
    d382:	4820      	ldr	r0, [pc, #128]	; (d404 <spm_jump+0x8c>)
    d384:	f007 fb52 	bl	14a2c <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    d388:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    d38c:	481e      	ldr	r0, [pc, #120]	; (d408 <spm_jump+0x90>)
    d38e:	f007 fb4d 	bl	14a2c <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    d392:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
    d396:	481d      	ldr	r0, [pc, #116]	; (d40c <spm_jump+0x94>)
    d398:	f007 fb48 	bl	14a2c <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    d39c:	2210      	movs	r2, #16
    d39e:	2100      	movs	r1, #0
    d3a0:	4668      	mov	r0, sp
    d3a2:	f007 fce4 	bl	14d6e <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    d3a6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	tz_nonsecure_state_setup(spm_ns_conf);
    d3aa:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    d3ac:	9300      	str	r3, [sp, #0]
    d3ae:	f44f 33c1 	mov.w	r3, #98816	; 0x18200
    d3b2:	9302      	str	r3, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    d3b4:	f000 ff06 	bl	e1c4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    d3b8:	2001      	movs	r0, #1
    d3ba:	f000 ff35 	bl	e228 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    d3be:	2000      	movs	r0, #0
    d3c0:	f000 ff1e 	bl	e200 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    d3c4:	2000      	movs	r0, #0
    d3c6:	f000 ff43 	bl	e250 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    d3ca:	2101      	movs	r1, #1
    d3cc:	2000      	movs	r0, #0
    d3ce:	f000 ff5d 	bl	e28c <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    d3d2:	f000 ff51 	bl	e278 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    d3d6:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    d3da:	480d      	ldr	r0, [pc, #52]	; (d410 <spm_jump+0x98>)
    d3dc:	f007 fb26 	bl	14a2c <printk>
	return config_peripheral(id, dma_present, true);
    d3e0:	2008      	movs	r0, #8
    d3e2:	f7ff ff97 	bl	d314 <config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    d3e6:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    d3ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d3ee:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    d3f2:	0864      	lsrs	r4, r4, #1
    d3f4:	0064      	lsls	r4, r4, #1
    d3f6:	4620      	mov	r0, r4
    d3f8:	4621      	mov	r1, r4
    d3fa:	4622      	mov	r2, r4
    d3fc:	4623      	mov	r3, r4
    d3fe:	f7ff f837 	bl	c470 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    d402:	bf00      	nop
    d404:	00015a73 	.word	0x00015a73
    d408:	00015a8a 	.word	0x00015a8a
    d40c:	00015a9f 	.word	0x00015a9f
    d410:	00015abd 	.word	0x00015abd

0000d414 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    d418:	4852      	ldr	r0, [pc, #328]	; (d564 <spm_config+0x150>)
    d41a:	f007 fb07 	bl	14a2c <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    d41e:	2100      	movs	r1, #0
    d420:	f240 1317 	movw	r3, #279	; 0x117
    d424:	4608      	mov	r0, r1
    d426:	2203      	movs	r2, #3
    d428:	f7ff ff14 	bl	d254 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d42c:	4d4e      	ldr	r5, [pc, #312]	; (d568 <spm_config+0x154>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    d42e:	f240 1307 	movw	r3, #263	; 0x107
    d432:	2220      	movs	r2, #32
    d434:	2103      	movs	r1, #3
    d436:	2000      	movs	r0, #0
    d438:	f7ff ff0c 	bl	d254 <config_regions>
	PRINT("\n");
    d43c:	484b      	ldr	r0, [pc, #300]	; (d56c <spm_config+0x158>)
    d43e:	f007 faf5 	bl	14a2c <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d442:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    d446:	4b4a      	ldr	r3, [pc, #296]	; (d570 <spm_config+0x15c>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d448:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    d44c:	429c      	cmp	r4, r3
    d44e:	d208      	bcs.n	d462 <spm_config+0x4e>
    d450:	4948      	ldr	r1, [pc, #288]	; (d574 <spm_config+0x160>)
    d452:	4849      	ldr	r0, [pc, #292]	; (d578 <spm_config+0x164>)
    d454:	2282      	movs	r2, #130	; 0x82
    d456:	f007 fae9 	bl	14a2c <printk>
    d45a:	2182      	movs	r1, #130	; 0x82
    d45c:	4845      	ldr	r0, [pc, #276]	; (d574 <spm_config+0x160>)
    d45e:	f007 fb6c 	bl	14b3a <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    d462:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    d466:	4e45      	ldr	r6, [pc, #276]	; (d57c <spm_config+0x168>)
    d468:	f1c4 041b 	rsb	r4, r4, #27
    d46c:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
    d470:	b2e4      	uxtb	r4, r4
    d472:	05da      	lsls	r2, r3, #23
    d474:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    d478:	d50a      	bpl.n	d490 <spm_config+0x7c>
    d47a:	4941      	ldr	r1, [pc, #260]	; (d580 <spm_config+0x16c>)
    d47c:	483e      	ldr	r0, [pc, #248]	; (d578 <spm_config+0x164>)
    d47e:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    d482:	f007 fad3 	bl	14a2c <printk>
    d486:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    d48a:	483d      	ldr	r0, [pc, #244]	; (d580 <spm_config+0x16c>)
    d48c:	f007 fb55 	bl	14b3a <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    d490:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    d494:	05db      	lsls	r3, r3, #23
    d496:	d50a      	bpl.n	d4ae <spm_config+0x9a>
    d498:	4939      	ldr	r1, [pc, #228]	; (d580 <spm_config+0x16c>)
    d49a:	4837      	ldr	r0, [pc, #220]	; (d578 <spm_config+0x164>)
    d49c:	f240 127b 	movw	r2, #379	; 0x17b
    d4a0:	f007 fac4 	bl	14a2c <printk>
    d4a4:	f240 117b 	movw	r1, #379	; 0x17b
    d4a8:	4835      	ldr	r0, [pc, #212]	; (d580 <spm_config+0x16c>)
    d4aa:	f007 fb46 	bl	14b3a <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    d4ae:	4b33      	ldr	r3, [pc, #204]	; (d57c <spm_config+0x168>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    d4b0:	4834      	ldr	r0, [pc, #208]	; (d584 <spm_config+0x170>)
    d4b2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    d4b6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    d4ba:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    d4be:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    d4c2:	0152      	lsls	r2, r2, #5
    d4c4:	f007 fab2 	bl	14a2c <printk>
	PRINT("\n");
    d4c8:	4828      	ldr	r0, [pc, #160]	; (d56c <spm_config+0x158>)
    d4ca:	f007 faaf 	bl	14a2c <printk>
	int err = spm_secure_services_init();
    d4ce:	f000 f893 	bl	d5f8 <spm_secure_services_init>
	if (err != 0) {
    d4d2:	4601      	mov	r1, r0
    d4d4:	b110      	cbz	r0, d4dc <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    d4d6:	482c      	ldr	r0, [pc, #176]	; (d588 <spm_config+0x174>)
    d4d8:	f007 faa8 	bl	14a2c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    d4dc:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    d4de:	482b      	ldr	r0, [pc, #172]	; (d58c <spm_config+0x178>)
    d4e0:	f007 faa4 	bl	14a2c <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    d4e4:	f240 1317 	movw	r3, #279	; 0x117
    d4e8:	2204      	movs	r2, #4
    d4ea:	2100      	movs	r1, #0
    d4ec:	2001      	movs	r0, #1
    d4ee:	f7ff feb1 	bl	d254 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    d4f2:	4d22      	ldr	r5, [pc, #136]	; (d57c <spm_config+0x168>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    d4f4:	f240 1307 	movw	r3, #263	; 0x107
    d4f8:	2220      	movs	r2, #32
    d4fa:	2104      	movs	r1, #4
    d4fc:	2001      	movs	r0, #1
    d4fe:	f7ff fea9 	bl	d254 <config_regions>
	PRINT("\n");
    d502:	481a      	ldr	r0, [pc, #104]	; (d56c <spm_config+0x158>)
    d504:	f007 fa92 	bl	14a2c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    d508:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    d50c:	4820      	ldr	r0, [pc, #128]	; (d590 <spm_config+0x17c>)
    d50e:	f007 fa8d 	bl	14a2c <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    d512:	4f20      	ldr	r7, [pc, #128]	; (d594 <spm_config+0x180>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    d514:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    d518:	4e1f      	ldr	r6, [pc, #124]	; (d598 <spm_config+0x184>)
    d51a:	4d20      	ldr	r5, [pc, #128]	; (d59c <spm_config+0x188>)
			PRINT("\tSKIP\n");
    d51c:	f8df 8080 	ldr.w	r8, [pc, #128]	; d5a0 <spm_config+0x18c>
		PRINT("%02u %-21s%s", i, periph[i].name,
    d520:	796b      	ldrb	r3, [r5, #5]
    d522:	682a      	ldr	r2, [r5, #0]
    d524:	b153      	cbz	r3, d53c <spm_config+0x128>
    d526:	4630      	mov	r0, r6
    d528:	4621      	mov	r1, r4
    d52a:	4b1e      	ldr	r3, [pc, #120]	; (d5a4 <spm_config+0x190>)
    d52c:	f007 fa7e 	bl	14a2c <printk>
	return config_peripheral(id, dma_present, true);
    d530:	7928      	ldrb	r0, [r5, #4]
    d532:	f7ff feef 	bl	d314 <config_peripheral.constprop.0>
		if (err) {
    d536:	b998      	cbnz	r0, d560 <spm_config+0x14c>
			PRINT("\tOK\n");
    d538:	481b      	ldr	r0, [pc, #108]	; (d5a8 <spm_config+0x194>)
    d53a:	e005      	b.n	d548 <spm_config+0x134>
		PRINT("%02u %-21s%s", i, periph[i].name,
    d53c:	4630      	mov	r0, r6
    d53e:	463b      	mov	r3, r7
    d540:	4621      	mov	r1, r4
    d542:	f007 fa73 	bl	14a2c <printk>
			PRINT("\tSKIP\n");
    d546:	4640      	mov	r0, r8
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    d548:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    d54a:	f007 fa6f 	bl	14a2c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    d54e:	2c20      	cmp	r4, #32
    d550:	f105 0508 	add.w	r5, r5, #8
    d554:	d1e4      	bne.n	d520 <spm_config+0x10c>
	PRINT("\n");
    d556:	4805      	ldr	r0, [pc, #20]	; (d56c <spm_config+0x158>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    d558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	PRINT("\n");
    d55c:	f007 ba66 	b.w	14a2c <printk>
			PRINT("\tERROR\n");
    d560:	4812      	ldr	r0, [pc, #72]	; (d5ac <spm_config+0x198>)
    d562:	e7f1      	b.n	d548 <spm_config+0x134>
    d564:	00015ae8 	.word	0x00015ae8
    d568:	00017fe0 	.word	0x00017fe0
    d56c:	000165fb 	.word	0x000165fb
    d570:	00000020 	.word	0x00000020
    d574:	00015a35 	.word	0x00015a35
    d578:	00015a05 	.word	0x00015a05
    d57c:	50003000 	.word	0x50003000
    d580:	00015b0c 	.word	0x00015b0c
    d584:	00015b3e 	.word	0x00015b3e
    d588:	00015b84 	.word	0x00015b84
    d58c:	00015bb4 	.word	0x00015bb4
    d590:	00015bd6 	.word	0x00015bd6
    d594:	00015a2d 	.word	0x00015a2d
    d598:	00015bfd 	.word	0x00015bfd
    d59c:	000155b8 	.word	0x000155b8
    d5a0:	00015c0a 	.word	0x00015c0a
    d5a4:	00015bf2 	.word	0x00015bf2
    d5a8:	00015c19 	.word	0x00015c19
    d5ac:	00015c11 	.word	0x00015c11

0000d5b0 <fw_info_find>:
 *                              at the allowed offsets from firmware_address.
 *
 * @return  A pointer to the fw_info struct if found. Otherwise NULL.
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
    d5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d5b4:	4607      	mov	r7, r0
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d5b6:	2600      	movs	r6, #0
{
    d5b8:	b085      	sub	sp, #20
    d5ba:	f8df 9034 	ldr.w	r9, [pc, #52]	; d5f0 <fw_info_find+0x40>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d5be:	f8df 8034 	ldr.w	r8, [pc, #52]	; d5f4 <fw_info_find+0x44>
    d5c2:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    d5c4:	f859 4b04 	ldr.w	r4, [r9], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d5c8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
	finfo = (const struct fw_info *)(fw_info_addr);
    d5cc:	443c      	add	r4, r7
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d5ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    d5d2:	220c      	movs	r2, #12
    d5d4:	4629      	mov	r1, r5
    d5d6:	4620      	mov	r0, r4
    d5d8:	f007 fb97 	bl	14d0a <memcmp>
    d5dc:	b900      	cbnz	r0, d5e0 <fw_info_find+0x30>
		if (finfo) {
    d5de:	b91c      	cbnz	r4, d5e8 <fw_info_find+0x38>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d5e0:	3601      	adds	r6, #1
    d5e2:	2e05      	cmp	r6, #5
    d5e4:	d1ee      	bne.n	d5c4 <fw_info_find+0x14>
			return finfo;
		}
	}
	return NULL;
    d5e6:	2400      	movs	r4, #0
}
    d5e8:	4620      	mov	r0, r4
    d5ea:	b005      	add	sp, #20
    d5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d5f0:	000156b8 	.word	0x000156b8
    d5f4:	00015580 	.word	0x00015580

0000d5f8 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    d5f8:	2200      	movs	r2, #0
    d5fa:	4802      	ldr	r0, [pc, #8]	; (d604 <spm_secure_services_init+0xc>)
    d5fc:	4611      	mov	r1, r2
    d5fe:	f004 bc95 	b.w	11f2c <nrf_cc3xx_platform_ctr_drbg_init>
    d602:	bf00      	nop
    d604:	2000028c 	.word	0x2000028c

0000d608 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    d608:	b570      	push	{r4, r5, r6, lr}
    d60a:	460c      	mov	r4, r1
    d60c:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    d60e:	4606      	mov	r6, r0
    d610:	b950      	cbnz	r0, d628 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    d612:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    d616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d61a:	4671      	mov	r1, lr
    d61c:	4672      	mov	r2, lr
    d61e:	4673      	mov	r3, lr
    d620:	46f4      	mov	ip, lr
    d622:	f38e 8c00 	msr	CPSR_fs, lr
    d626:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    d628:	2a00      	cmp	r2, #0
    d62a:	d0f2      	beq.n	d612 <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d62c:	f007 fb4c 	bl	14cc8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    d630:	2801      	cmp	r0, #1
    d632:	d0ee      	beq.n	d612 <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    d634:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
    d638:	d315      	bcc.n	d666 <__acle_se_spm_request_read_nse+0x5e>
    d63a:	192b      	adds	r3, r5, r4
    d63c:	f5b3 4f42 	cmp.w	r3, #49664	; 0xc200
    d640:	d905      	bls.n	d64e <__acle_se_spm_request_read_nse+0x46>
    d642:	4a0a      	ldr	r2, [pc, #40]	; (d66c <__acle_se_spm_request_read_nse+0x64>)
    d644:	4294      	cmp	r4, r2
    d646:	d909      	bls.n	d65c <__acle_se_spm_request_read_nse+0x54>
    d648:	322d      	adds	r2, #45	; 0x2d
    d64a:	4293      	cmp	r3, r2
    d64c:	d80b      	bhi.n	d666 <__acle_se_spm_request_read_nse+0x5e>
			memcpy(destination, (const void *)addr, len);
    d64e:	462a      	mov	r2, r5
    d650:	4621      	mov	r1, r4
    d652:	4630      	mov	r0, r6
    d654:	f007 fb80 	bl	14d58 <memcpy>
			return 0;
    d658:	2000      	movs	r0, #0
    d65a:	e7dc      	b.n	d616 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    d65c:	4a04      	ldr	r2, [pc, #16]	; (d670 <__acle_se_spm_request_read_nse+0x68>)
    d65e:	4294      	cmp	r4, r2
    d660:	d901      	bls.n	d666 <__acle_se_spm_request_read_nse+0x5e>
    d662:	3209      	adds	r2, #9
    d664:	e7f1      	b.n	d64a <__acle_se_spm_request_read_nse+0x42>
	return -EPERM;
    d666:	f04f 30ff 	mov.w	r0, #4294967295
    d66a:	e7d4      	b.n	d616 <__acle_se_spm_request_read_nse+0xe>
    d66c:	00ff01ff 	.word	0x00ff01ff
    d670:	00ff012f 	.word	0x00ff012f

0000d674 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    d674:	b570      	push	{r4, r5, r6, lr}
    d676:	4606      	mov	r6, r0
    d678:	460d      	mov	r5, r1
    d67a:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    d67c:	f007 fb24 	bl	14cc8 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    d680:	2801      	cmp	r0, #1
    d682:	d004      	beq.n	d68e <__acle_se_spm_request_random_number_nse+0x1a>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d684:	4620      	mov	r0, r4
    d686:	f007 fb1f 	bl	14cc8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    d68a:	2801      	cmp	r0, #1
    d68c:	d10a      	bne.n	d6a4 <__acle_se_spm_request_random_number_nse+0x30>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
    d68e:	f06f 0015 	mvn.w	r0, #21
	if (*olen != len) {
		return -EINVAL;
	}

	return err;
}
    d692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d696:	4671      	mov	r1, lr
    d698:	4672      	mov	r2, lr
    d69a:	4673      	mov	r3, lr
    d69c:	46f4      	mov	ip, lr
    d69e:	f38e 8c00 	msr	CPSR_fs, lr
    d6a2:	4774      	bxns	lr
	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    d6a4:	4623      	mov	r3, r4
    d6a6:	462a      	mov	r2, r5
    d6a8:	4631      	mov	r1, r6
    d6aa:	4803      	ldr	r0, [pc, #12]	; (d6b8 <__acle_se_spm_request_random_number_nse+0x44>)
    d6ac:	f004 fc72 	bl	11f94 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    d6b0:	6823      	ldr	r3, [r4, #0]
    d6b2:	42ab      	cmp	r3, r5
    d6b4:	d0ed      	beq.n	d692 <__acle_se_spm_request_random_number_nse+0x1e>
    d6b6:	e7ea      	b.n	d68e <__acle_se_spm_request_random_number_nse+0x1a>
    d6b8:	2000028c 	.word	0x2000028c

0000d6bc <__acle_se_spm_s0_active>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_S0_ACTIVE
__TZ_NONSECURE_ENTRY_FUNC
int spm_s0_active(uint32_t s0_address, uint32_t s1_address, bool *s0_active)
{
    d6bc:	b570      	push	{r4, r5, r6, lr}
    d6be:	4604      	mov	r4, r0
	return arm_cmse_addr_is_secure(ptr) == 1;
    d6c0:	4610      	mov	r0, r2
{
    d6c2:	460e      	mov	r6, r1
    d6c4:	4615      	mov	r5, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    d6c6:	f007 faff 	bl	14cc8 <arm_cmse_addr_is_secure>
	const struct fw_info *s0;
	const struct fw_info *s1;
	bool s0_valid;
	bool s1_valid;

	if (ptr_in_secure_area((intptr_t)s0_active)) {
    d6ca:	2801      	cmp	r0, #1
    d6cc:	d10a      	bne.n	d6e4 <__acle_se_spm_s0_active+0x28>
		return -EINVAL;
    d6ce:	f06f 0015 	mvn.w	r0, #21
	} else {
		*s0_active = s0->version >= s1->version;
	}

	return 0;
}
    d6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6d6:	4671      	mov	r1, lr
    d6d8:	4672      	mov	r2, lr
    d6da:	4673      	mov	r3, lr
    d6dc:	46f4      	mov	ip, lr
    d6de:	f38e 8c00 	msr	CPSR_fs, lr
    d6e2:	4774      	bxns	lr
	s0 = fw_info_find(s0_address);
    d6e4:	4620      	mov	r0, r4
    d6e6:	f7ff ff63 	bl	d5b0 <fw_info_find>
    d6ea:	4604      	mov	r4, r0
	s1 = fw_info_find(s1_address);
    d6ec:	4630      	mov	r0, r6
    d6ee:	f7ff ff5f 	bl	d5b0 <fw_info_find>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
    d6f2:	b11c      	cbz	r4, d6fc <__acle_se_spm_s0_active+0x40>
    d6f4:	6a23      	ldr	r3, [r4, #32]
    d6f6:	4a0d      	ldr	r2, [pc, #52]	; (d72c <__acle_se_spm_s0_active+0x70>)
    d6f8:	4293      	cmp	r3, r2
    d6fa:	d007      	beq.n	d70c <__acle_se_spm_s0_active+0x50>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
    d6fc:	2800      	cmp	r0, #0
    d6fe:	d0e6      	beq.n	d6ce <__acle_se_spm_s0_active+0x12>
    d700:	6a02      	ldr	r2, [r0, #32]
    d702:	4b0a      	ldr	r3, [pc, #40]	; (d72c <__acle_se_spm_s0_active+0x70>)
    d704:	429a      	cmp	r2, r3
    d706:	d1e2      	bne.n	d6ce <__acle_se_spm_s0_active+0x12>
    d708:	2300      	movs	r3, #0
    d70a:	e00b      	b.n	d724 <__acle_se_spm_s0_active+0x68>
    d70c:	b110      	cbz	r0, d714 <__acle_se_spm_s0_active+0x58>
    d70e:	6a02      	ldr	r2, [r0, #32]
    d710:	429a      	cmp	r2, r3
    d712:	d001      	beq.n	d718 <__acle_se_spm_s0_active+0x5c>
    d714:	2301      	movs	r3, #1
    d716:	e005      	b.n	d724 <__acle_se_spm_s0_active+0x68>
		*s0_active = s0->version >= s1->version;
    d718:	6963      	ldr	r3, [r4, #20]
    d71a:	6942      	ldr	r2, [r0, #20]
    d71c:	4293      	cmp	r3, r2
    d71e:	bf34      	ite	cc
    d720:	2300      	movcc	r3, #0
    d722:	2301      	movcs	r3, #1
	return 0;
    d724:	2000      	movs	r0, #0
		*s0_active = s0->version >= s1->version;
    d726:	702b      	strb	r3, [r5, #0]
    d728:	e7d3      	b.n	d6d2 <__acle_se_spm_s0_active+0x16>
    d72a:	bf00      	nop
    d72c:	9102ffff 	.word	0x9102ffff

0000d730 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    d730:	4801      	ldr	r0, [pc, #4]	; (d738 <nrf_cc3xx_platform_abort_init+0x8>)
    d732:	f004 bbf3 	b.w	11f1c <nrf_cc3xx_platform_set_abort>
    d736:	bf00      	nop
    d738:	000156cc 	.word	0x000156cc

0000d73c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d73c:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    d73e:	4604      	mov	r4, r0
    d740:	b918      	cbnz	r0, d74a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    d742:	4b0d      	ldr	r3, [pc, #52]	; (d778 <mutex_free_platform+0x3c>)
    d744:	480d      	ldr	r0, [pc, #52]	; (d77c <mutex_free_platform+0x40>)
    d746:	685b      	ldr	r3, [r3, #4]
    d748:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    d74a:	6861      	ldr	r1, [r4, #4]
    d74c:	f031 0304 	bics.w	r3, r1, #4
    d750:	d00c      	beq.n	d76c <mutex_free_platform+0x30>
    d752:	2908      	cmp	r1, #8
    d754:	d00a      	beq.n	d76c <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    d756:	f011 0102 	ands.w	r1, r1, #2
    d75a:	d008      	beq.n	d76e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    d75c:	4621      	mov	r1, r4
    d75e:	4808      	ldr	r0, [pc, #32]	; (d780 <mutex_free_platform+0x44>)
    d760:	f002 fe20 	bl	103a4 <k_mem_slab_free>
        mutex->mutex = NULL;
    d764:	2300      	movs	r3, #0
    d766:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    d768:	2300      	movs	r3, #0
    d76a:	6063      	str	r3, [r4, #4]
}
    d76c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d76e:	2214      	movs	r2, #20
    d770:	6820      	ldr	r0, [r4, #0]
    d772:	f007 fafc 	bl	14d6e <memset>
    d776:	e7f7      	b.n	d768 <mutex_free_platform+0x2c>
    d778:	20000088 	.word	0x20000088
    d77c:	00015d4e 	.word	0x00015d4e
    d780:	20000948 	.word	0x20000948

0000d784 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d784:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    d786:	b1e8      	cbz	r0, d7c4 <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    d788:	6843      	ldr	r3, [r0, #4]
    d78a:	2b04      	cmp	r3, #4
    d78c:	d10c      	bne.n	d7a8 <mutex_lock_platform+0x24>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d78e:	2201      	movs	r2, #1
    d790:	6803      	ldr	r3, [r0, #0]
    d792:	e8d3 1fef 	ldaex	r1, [r3]
    d796:	2900      	cmp	r1, #0
    d798:	d103      	bne.n	d7a2 <mutex_lock_platform+0x1e>
    d79a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d79e:	2800      	cmp	r0, #0
    d7a0:	d1f7      	bne.n	d792 <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d7a2:	d10b      	bne.n	d7bc <mutex_lock_platform+0x38>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    d7a4:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    d7a6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d7a8:	b153      	cbz	r3, d7c0 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    d7aa:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    d7ac:	f04f 32ff 	mov.w	r2, #4294967295
    d7b0:	f04f 33ff 	mov.w	r3, #4294967295
    d7b4:	f002 ff64 	bl	10680 <z_impl_k_mutex_lock>
        if (ret == 0) {
    d7b8:	2800      	cmp	r0, #0
    d7ba:	d0f3      	beq.n	d7a4 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d7bc:	4803      	ldr	r0, [pc, #12]	; (d7cc <mutex_lock_platform+0x48>)
    d7be:	e7f2      	b.n	d7a6 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d7c0:	4803      	ldr	r0, [pc, #12]	; (d7d0 <mutex_lock_platform+0x4c>)
    d7c2:	e7f0      	b.n	d7a6 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    d7c4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d7c8:	e7ed      	b.n	d7a6 <mutex_lock_platform+0x22>
    d7ca:	bf00      	nop
    d7cc:	ffff8fe9 	.word	0xffff8fe9
    d7d0:	ffff8fea 	.word	0xffff8fea

0000d7d4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d7d4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    d7d6:	b1a0      	cbz	r0, d802 <mutex_unlock_platform+0x2e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    d7d8:	6843      	ldr	r3, [r0, #4]
    d7da:	2b04      	cmp	r3, #4
    d7dc:	d10c      	bne.n	d7f8 <mutex_unlock_platform+0x24>
    d7de:	2200      	movs	r2, #0
    d7e0:	6803      	ldr	r3, [r0, #0]
    d7e2:	e8d3 1fef 	ldaex	r1, [r3]
    d7e6:	2901      	cmp	r1, #1
    d7e8:	d103      	bne.n	d7f2 <mutex_unlock_platform+0x1e>
    d7ea:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d7ee:	2800      	cmp	r0, #0
    d7f0:	d1f7      	bne.n	d7e2 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d7f2:	d109      	bne.n	d808 <mutex_unlock_platform+0x34>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    d7f4:	2000      	movs	r0, #0
    }
}
    d7f6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d7f8:	b143      	cbz	r3, d80c <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    d7fa:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    d7fc:	f003 f812 	bl	10824 <z_impl_k_mutex_unlock>
    d800:	e7f8      	b.n	d7f4 <mutex_unlock_platform+0x20>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    d802:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d806:	e7f6      	b.n	d7f6 <mutex_unlock_platform+0x22>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d808:	4801      	ldr	r0, [pc, #4]	; (d810 <mutex_unlock_platform+0x3c>)
    d80a:	e7f4      	b.n	d7f6 <mutex_unlock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d80c:	4801      	ldr	r0, [pc, #4]	; (d814 <mutex_unlock_platform+0x40>)
    d80e:	e7f2      	b.n	d7f6 <mutex_unlock_platform+0x22>
    d810:	ffff8fe9 	.word	0xffff8fe9
    d814:	ffff8fea 	.word	0xffff8fea

0000d818 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d818:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    d81a:	4604      	mov	r4, r0
    d81c:	b918      	cbnz	r0, d826 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    d81e:	4b16      	ldr	r3, [pc, #88]	; (d878 <mutex_init_platform+0x60>)
    d820:	4816      	ldr	r0, [pc, #88]	; (d87c <mutex_init_platform+0x64>)
    d822:	685b      	ldr	r3, [r3, #4]
    d824:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    d826:	6863      	ldr	r3, [r4, #4]
    d828:	2b04      	cmp	r3, #4
    d82a:	d023      	beq.n	d874 <mutex_init_platform+0x5c>
    d82c:	2b08      	cmp	r3, #8
    d82e:	d021      	beq.n	d874 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    d830:	b9cb      	cbnz	r3, d866 <mutex_init_platform+0x4e>
    d832:	6823      	ldr	r3, [r4, #0]
    d834:	b9bb      	cbnz	r3, d866 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    d836:	f04f 32ff 	mov.w	r2, #4294967295
    d83a:	f04f 33ff 	mov.w	r3, #4294967295
    d83e:	4621      	mov	r1, r4
    d840:	480f      	ldr	r0, [pc, #60]	; (d880 <mutex_init_platform+0x68>)
    d842:	f002 fd55 	bl	102f0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    d846:	b908      	cbnz	r0, d84c <mutex_init_platform+0x34>
    d848:	6823      	ldr	r3, [r4, #0]
    d84a:	b91b      	cbnz	r3, d854 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    d84c:	4b0a      	ldr	r3, [pc, #40]	; (d878 <mutex_init_platform+0x60>)
    d84e:	480d      	ldr	r0, [pc, #52]	; (d884 <mutex_init_platform+0x6c>)
    d850:	685b      	ldr	r3, [r3, #4]
    d852:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d854:	2214      	movs	r2, #20
    d856:	2100      	movs	r1, #0
    d858:	6820      	ldr	r0, [r4, #0]
    d85a:	f007 fa88 	bl	14d6e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    d85e:	6863      	ldr	r3, [r4, #4]
    d860:	f043 0302 	orr.w	r3, r3, #2
    d864:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    d866:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    d868:	f007 fcb2 	bl	151d0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    d86c:	6863      	ldr	r3, [r4, #4]
    d86e:	f043 0301 	orr.w	r3, r3, #1
    d872:	6063      	str	r3, [r4, #4]
}
    d874:	bd10      	pop	{r4, pc}
    d876:	bf00      	nop
    d878:	20000088 	.word	0x20000088
    d87c:	00015d4e 	.word	0x00015d4e
    d880:	20000948 	.word	0x20000948
    d884:	00015d74 	.word	0x00015d74

0000d888 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    d888:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    d88a:	4906      	ldr	r1, [pc, #24]	; (d8a4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    d88c:	2340      	movs	r3, #64	; 0x40
    d88e:	2214      	movs	r2, #20
    d890:	4805      	ldr	r0, [pc, #20]	; (d8a8 <nrf_cc3xx_platform_mutex_init+0x20>)
    d892:	f007 fc6a 	bl	1516a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    d896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    d89a:	4904      	ldr	r1, [pc, #16]	; (d8ac <nrf_cc3xx_platform_mutex_init+0x24>)
    d89c:	4804      	ldr	r0, [pc, #16]	; (d8b0 <nrf_cc3xx_platform_mutex_init+0x28>)
    d89e:	f004 bbf1 	b.w	12084 <nrf_cc3xx_platform_set_mutexes>
    d8a2:	bf00      	nop
    d8a4:	20000448 	.word	0x20000448
    d8a8:	20000948 	.word	0x20000948
    d8ac:	000156d4 	.word	0x000156d4
    d8b0:	000156e8 	.word	0x000156e8

0000d8b4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d8b4:	4901      	ldr	r1, [pc, #4]	; (d8bc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d8b6:	2210      	movs	r2, #16
	str	r2, [r1]
    d8b8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d8ba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d8bc:	e000ed10 	.word	0xe000ed10

0000d8c0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d8c0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d8c2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d8c4:	f380 8811 	msr	BASEPRI, r0
	isb
    d8c8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d8cc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d8d0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d8d2:	b662      	cpsie	i
	isb
    d8d4:	f3bf 8f6f 	isb	sy

	bx	lr
    d8d8:	4770      	bx	lr
    d8da:	bf00      	nop

0000d8dc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d8de:	4605      	mov	r5, r0

	if (esf != NULL) {
    d8e0:	460c      	mov	r4, r1
    d8e2:	b1c9      	cbz	r1, d918 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d8e4:	688b      	ldr	r3, [r1, #8]
    d8e6:	4810      	ldr	r0, [pc, #64]	; (d928 <z_arm_fatal_error+0x4c>)
    d8e8:	9300      	str	r3, [sp, #0]
    d8ea:	e9d1 2300 	ldrd	r2, r3, [r1]
    d8ee:	2145      	movs	r1, #69	; 0x45
    d8f0:	f007 f936 	bl	14b60 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d8f4:	6963      	ldr	r3, [r4, #20]
    d8f6:	2145      	movs	r1, #69	; 0x45
    d8f8:	9300      	str	r3, [sp, #0]
    d8fa:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d8fe:	480b      	ldr	r0, [pc, #44]	; (d92c <z_arm_fatal_error+0x50>)
    d900:	f007 f92e 	bl	14b60 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d904:	2145      	movs	r1, #69	; 0x45
    d906:	69e2      	ldr	r2, [r4, #28]
    d908:	4809      	ldr	r0, [pc, #36]	; (d930 <z_arm_fatal_error+0x54>)
    d90a:	f007 f929 	bl	14b60 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d90e:	2145      	movs	r1, #69	; 0x45
    d910:	69a2      	ldr	r2, [r4, #24]
    d912:	4808      	ldr	r0, [pc, #32]	; (d934 <z_arm_fatal_error+0x58>)
    d914:	f007 f924 	bl	14b60 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d918:	4621      	mov	r1, r4
    d91a:	4628      	mov	r0, r5
}
    d91c:	b003      	add	sp, #12
    d91e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d922:	f002 bb8d 	b.w	10040 <z_fatal_error>
    d926:	bf00      	nop
    d928:	00015da1 	.word	0x00015da1
    d92c:	00015dd5 	.word	0x00015dd5
    d930:	00015e09 	.word	0x00015e09
    d934:	00015e1d 	.word	0x00015e1d

0000d938 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d938:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    d93a:	2800      	cmp	r0, #0
    d93c:	db07      	blt.n	d94e <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d93e:	2301      	movs	r3, #1
    d940:	0941      	lsrs	r1, r0, #5
    d942:	4a03      	ldr	r2, [pc, #12]	; (d950 <arch_irq_enable+0x18>)
    d944:	f000 001f 	and.w	r0, r0, #31
    d948:	4083      	lsls	r3, r0
    d94a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    d94e:	4770      	bx	lr
    d950:	e000e100 	.word	0xe000e100

0000d954 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d954:	4b05      	ldr	r3, [pc, #20]	; (d96c <arch_irq_is_enabled+0x18>)
    d956:	0942      	lsrs	r2, r0, #5
    d958:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d95c:	2301      	movs	r3, #1
    d95e:	f000 001f 	and.w	r0, r0, #31
    d962:	fa03 f000 	lsl.w	r0, r3, r0
}
    d966:	4010      	ands	r0, r2
    d968:	4770      	bx	lr
    d96a:	bf00      	nop
    d96c:	e000e100 	.word	0xe000e100

0000d970 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d970:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    d972:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d974:	2d07      	cmp	r5, #7
{
    d976:	4604      	mov	r4, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d978:	d908      	bls.n	d98c <z_arm_irq_priority_set+0x1c>
    d97a:	490d      	ldr	r1, [pc, #52]	; (d9b0 <z_arm_irq_priority_set+0x40>)
    d97c:	480d      	ldr	r0, [pc, #52]	; (d9b4 <z_arm_irq_priority_set+0x44>)
    d97e:	2259      	movs	r2, #89	; 0x59
    d980:	f007 f854 	bl	14a2c <printk>
    d984:	2159      	movs	r1, #89	; 0x59
    d986:	480a      	ldr	r0, [pc, #40]	; (d9b0 <z_arm_irq_priority_set+0x40>)
    d988:	f007 f8d7 	bl	14b3a <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d98c:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d98e:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d990:	bfac      	ite	ge
    d992:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d996:	4b08      	ldrlt	r3, [pc, #32]	; (d9b8 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d998:	ea4f 1545 	mov.w	r5, r5, lsl #5
    d99c:	b2ed      	uxtb	r5, r5
    d99e:	bfab      	itete	ge
    d9a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9a4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9a8:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9ac:	541d      	strblt	r5, [r3, r0]
}
    d9ae:	bd38      	pop	{r3, r4, r5, pc}
    d9b0:	00015e50 	.word	0x00015e50
    d9b4:	00015a05 	.word	0x00015a05
    d9b8:	e000ed14 	.word	0xe000ed14

0000d9bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d9bc:	bf30      	wfi
    b z_SysNmiOnReset
    d9be:	f7ff bffd 	b.w	d9bc <z_SysNmiOnReset>
    d9c2:	bf00      	nop

0000d9c4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d9c4:	4a0b      	ldr	r2, [pc, #44]	; (d9f4 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d9c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d9c8:	4b0b      	ldr	r3, [pc, #44]	; (d9f8 <z_arm_prep_c+0x34>)
    d9ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d9ce:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    d9d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d9d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d9d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d9dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d9e4:	f002 fbcc 	bl	10180 <z_bss_zero>
	z_data_copy();
    d9e8:	f003 ff98 	bl	1191c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d9ec:	f000 fb52 	bl	e094 <z_arm_interrupt_init>
	z_cstart();
    d9f0:	f002 fbd0 	bl	10194 <z_cstart>
    d9f4:	0000c200 	.word	0x0000c200
    d9f8:	e000ed00 	.word	0xe000ed00

0000d9fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d9fc:	4a09      	ldr	r2, [pc, #36]	; (da24 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d9fe:	490a      	ldr	r1, [pc, #40]	; (da28 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    da00:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    da02:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    da04:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    da06:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    da08:	4908      	ldr	r1, [pc, #32]	; (da2c <arch_swap+0x30>)
    da0a:	684b      	ldr	r3, [r1, #4]
    da0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    da10:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    da12:	2300      	movs	r3, #0
    da14:	f383 8811 	msr	BASEPRI, r3
    da18:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    da1c:	6893      	ldr	r3, [r2, #8]
}
    da1e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    da20:	4770      	bx	lr
    da22:	bf00      	nop
    da24:	20000a2c 	.word	0x20000a2c
    da28:	0001580c 	.word	0x0001580c
    da2c:	e000ed00 	.word	0xe000ed00

0000da30 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    da30:	4913      	ldr	r1, [pc, #76]	; (da80 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    da32:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    da34:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    da38:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    da3a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    da3e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    da42:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    da44:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    da48:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    da4c:	4f0d      	ldr	r7, [pc, #52]	; (da84 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    da4e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    da52:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    da54:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    da56:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    da58:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    da5a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    da5c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    da5e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    da62:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    da66:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    da6a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    da6e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    da72:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    da74:	f007 f91b 	bl	14cae <configure_builtin_stack_guard>
    pop {r2, lr}
    da78:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    da7c:	4770      	bx	lr
    da7e:	0000      	.short	0x0000
    ldr r1, =_kernel
    da80:	20000a2c 	.word	0x20000a2c
    ldr v4, =_SCS_ICSR
    da84:	e000ed04 	.word	0xe000ed04

0000da88 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    da88:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    da8c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    da8e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    da92:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    da96:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    da98:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    da9c:	2902      	cmp	r1, #2
    beq _oops
    da9e:	d0ff      	beq.n	daa0 <_oops>

0000daa0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    daa0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    daa2:	f007 f8c7 	bl	14c34 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    daa6:	bd01      	pop	{r0, pc}

0000daa8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    daa8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    daac:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    daae:	490b      	ldr	r1, [pc, #44]	; (dadc <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dab0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dab4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dab6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    daba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dabe:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dac0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dac4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dacc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dad0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dad2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dad4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    dad6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dad8:	4770      	bx	lr
    dada:	bf00      	nop
    dadc:	00014a6d 	.word	0x00014a6d

0000dae0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dae0:	4b08      	ldr	r3, [pc, #32]	; (db04 <arch_switch_to_main_thread+0x24>)
    dae2:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dae4:	6e43      	ldr	r3, [r0, #100]	; 0x64
    dae6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    daea:	4610      	mov	r0, r2
    daec:	f381 8809 	msr	PSP, r1
    daf0:	2100      	movs	r1, #0
    daf2:	b663      	cpsie	if
    daf4:	f381 8811 	msr	BASEPRI, r1
    daf8:	f3bf 8f6f 	isb	sy
    dafc:	2200      	movs	r2, #0
    dafe:	2300      	movs	r3, #0
    db00:	f006 ffb4 	bl	14a6c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    db04:	20000a2c 	.word	0x20000a2c

0000db08 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    db08:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    db0a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    db0c:	4a0b      	ldr	r2, [pc, #44]	; (db3c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    db0e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    db10:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    db12:	bf1e      	ittt	ne
	movne	r1, #0
    db14:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    db16:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    db18:	f007 fb4b 	blne	151b2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    db1c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    db1e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    db22:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    db26:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    db2a:	4905      	ldr	r1, [pc, #20]	; (db40 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    db2c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    db2e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    db30:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    db32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    db36:	4903      	ldr	r1, [pc, #12]	; (db44 <_isr_wrapper+0x3c>)
	bx r1
    db38:	4708      	bx	r1
    db3a:	0000      	.short	0x0000
	ldr r2, =_kernel
    db3c:	20000a2c 	.word	0x20000a2c
	ldr r1, =_sw_isr_table
    db40:	00015308 	.word	0x00015308
	ldr r1, =z_arm_int_exit
    db44:	0000db49 	.word	0x0000db49

0000db48 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    db48:	4b04      	ldr	r3, [pc, #16]	; (db5c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    db4a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    db4c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    db4e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    db50:	d003      	beq.n	db5a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    db52:	4903      	ldr	r1, [pc, #12]	; (db60 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    db54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    db58:	600a      	str	r2, [r1, #0]

0000db5a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    db5a:	4770      	bx	lr
	ldr r3, =_kernel
    db5c:	20000a2c 	.word	0x20000a2c
	ldr r1, =_SCS_ICSR
    db60:	e000ed04 	.word	0xe000ed04

0000db64 <secure_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    db64:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    db66:	4c24      	ldr	r4, [pc, #144]	; (dbf8 <secure_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    db68:	4824      	ldr	r0, [pc, #144]	; (dbfc <secure_fault.constprop.0+0x98>)
    db6a:	2145      	movs	r1, #69	; 0x45
    db6c:	f006 fff8 	bl	14b60 <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    db70:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    db74:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    db78:	0658      	lsls	r0, r3, #25
    db7a:	d503      	bpl.n	db84 <secure_fault.constprop.0+0x20>
		PR_EXC("  Address: 0x%x", sfar);
    db7c:	2145      	movs	r1, #69	; 0x45
    db7e:	4820      	ldr	r0, [pc, #128]	; (dc00 <secure_fault.constprop.0+0x9c>)
    db80:	f006 ffee 	bl	14b60 <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    db84:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    db88:	07d9      	lsls	r1, r3, #31
    db8a:	d50b      	bpl.n	dba4 <secure_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Invalid entry point");
    db8c:	2145      	movs	r1, #69	; 0x45
    db8e:	481d      	ldr	r0, [pc, #116]	; (dc04 <secure_fault.constprop.0+0xa0>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    db90:	f006 ffe6 	bl	14b60 <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    db94:	4a18      	ldr	r2, [pc, #96]	; (dbf8 <secure_fault.constprop.0+0x94>)
    db96:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    db9a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    db9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
}
    dba2:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    dba4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dba8:	079a      	lsls	r2, r3, #30
    dbaa:	d502      	bpl.n	dbb2 <secure_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Invalid integrity signature");
    dbac:	2145      	movs	r1, #69	; 0x45
    dbae:	4816      	ldr	r0, [pc, #88]	; (dc08 <secure_fault.constprop.0+0xa4>)
    dbb0:	e7ee      	b.n	db90 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    dbb2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dbb6:	075b      	lsls	r3, r3, #29
    dbb8:	d502      	bpl.n	dbc0 <secure_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Invalid exception return");
    dbba:	2145      	movs	r1, #69	; 0x45
    dbbc:	4813      	ldr	r0, [pc, #76]	; (dc0c <secure_fault.constprop.0+0xa8>)
    dbbe:	e7e7      	b.n	db90 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    dbc0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dbc4:	0718      	lsls	r0, r3, #28
    dbc6:	d502      	bpl.n	dbce <secure_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Attribution unit violation");
    dbc8:	2145      	movs	r1, #69	; 0x45
    dbca:	4811      	ldr	r0, [pc, #68]	; (dc10 <secure_fault.constprop.0+0xac>)
    dbcc:	e7e0      	b.n	db90 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    dbce:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dbd2:	06d9      	lsls	r1, r3, #27
    dbd4:	d502      	bpl.n	dbdc <secure_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Invalid transition");
    dbd6:	2145      	movs	r1, #69	; 0x45
    dbd8:	480e      	ldr	r0, [pc, #56]	; (dc14 <secure_fault.constprop.0+0xb0>)
    dbda:	e7d9      	b.n	db90 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    dbdc:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dbe0:	069a      	lsls	r2, r3, #26
    dbe2:	d502      	bpl.n	dbea <secure_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Lazy state preservation");
    dbe4:	2145      	movs	r1, #69	; 0x45
    dbe6:	480c      	ldr	r0, [pc, #48]	; (dc18 <secure_fault.constprop.0+0xb4>)
    dbe8:	e7d2      	b.n	db90 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    dbea:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dbee:	061b      	lsls	r3, r3, #24
    dbf0:	d5d0      	bpl.n	db94 <secure_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Lazy state error");
    dbf2:	2145      	movs	r1, #69	; 0x45
    dbf4:	4809      	ldr	r0, [pc, #36]	; (dc1c <secure_fault.constprop.0+0xb8>)
    dbf6:	e7cb      	b.n	db90 <secure_fault.constprop.0+0x2c>
    dbf8:	e000ed00 	.word	0xe000ed00
    dbfc:	00015e86 	.word	0x00015e86
    dc00:	00015ea4 	.word	0x00015ea4
    dc04:	00015eb9 	.word	0x00015eb9
    dc08:	00015ed4 	.word	0x00015ed4
    dc0c:	00015ef7 	.word	0x00015ef7
    dc10:	00015f17 	.word	0x00015f17
    dc14:	00015f39 	.word	0x00015f39
    dc18:	00015f53 	.word	0x00015f53
    dc1c:	00015f72 	.word	0x00015f72

0000dc20 <usage_fault.constprop.0>:
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dc20:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc22:	4c21      	ldr	r4, [pc, #132]	; (dca8 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc24:	2145      	movs	r1, #69	; 0x45
    dc26:	4821      	ldr	r0, [pc, #132]	; (dcac <usage_fault.constprop.0+0x8c>)
    dc28:	f006 ff9a 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc2e:	019d      	lsls	r5, r3, #6
    dc30:	d503      	bpl.n	dc3a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    dc32:	2145      	movs	r1, #69	; 0x45
    dc34:	481e      	ldr	r0, [pc, #120]	; (dcb0 <usage_fault.constprop.0+0x90>)
    dc36:	f006 ff93 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dc3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc3c:	01dc      	lsls	r4, r3, #7
    dc3e:	d503      	bpl.n	dc48 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    dc40:	2145      	movs	r1, #69	; 0x45
    dc42:	481c      	ldr	r0, [pc, #112]	; (dcb4 <usage_fault.constprop.0+0x94>)
    dc44:	f006 ff8c 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dc48:	4d17      	ldr	r5, [pc, #92]	; (dca8 <usage_fault.constprop.0+0x88>)
    dc4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dc4c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dc50:	d004      	beq.n	dc5c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dc52:	2145      	movs	r1, #69	; 0x45
    dc54:	4818      	ldr	r0, [pc, #96]	; (dcb8 <usage_fault.constprop.0+0x98>)
    dc56:	f006 ff83 	bl	14b60 <z_log_minimal_printk>
		reason = K_ERR_STACK_CHK_FAIL;
    dc5a:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dc5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc5e:	0318      	lsls	r0, r3, #12
    dc60:	d503      	bpl.n	dc6a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    dc62:	2145      	movs	r1, #69	; 0x45
    dc64:	4815      	ldr	r0, [pc, #84]	; (dcbc <usage_fault.constprop.0+0x9c>)
    dc66:	f006 ff7b 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dc6a:	4d0f      	ldr	r5, [pc, #60]	; (dca8 <usage_fault.constprop.0+0x88>)
    dc6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc6e:	0359      	lsls	r1, r3, #13
    dc70:	d503      	bpl.n	dc7a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dc72:	2145      	movs	r1, #69	; 0x45
    dc74:	4812      	ldr	r0, [pc, #72]	; (dcc0 <usage_fault.constprop.0+0xa0>)
    dc76:	f006 ff73 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dc7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc7c:	039a      	lsls	r2, r3, #14
    dc7e:	d503      	bpl.n	dc88 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dc80:	2145      	movs	r1, #69	; 0x45
    dc82:	4810      	ldr	r0, [pc, #64]	; (dcc4 <usage_fault.constprop.0+0xa4>)
    dc84:	f006 ff6c 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dc88:	4d07      	ldr	r5, [pc, #28]	; (dca8 <usage_fault.constprop.0+0x88>)
    dc8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc8c:	03db      	lsls	r3, r3, #15
    dc8e:	d503      	bpl.n	dc98 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dc90:	2145      	movs	r1, #69	; 0x45
    dc92:	480d      	ldr	r0, [pc, #52]	; (dcc8 <usage_fault.constprop.0+0xa8>)
    dc94:	f006 ff64 	bl	14b60 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc98:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
    dc9a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc9c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dca0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dca4:	62ab      	str	r3, [r5, #40]	; 0x28
}
    dca6:	bd38      	pop	{r3, r4, r5, pc}
    dca8:	e000ed00 	.word	0xe000ed00
    dcac:	00015f8a 	.word	0x00015f8a
    dcb0:	00015fa7 	.word	0x00015fa7
    dcb4:	00015fbf 	.word	0x00015fbf
    dcb8:	00015fde 	.word	0x00015fde
    dcbc:	0001600d 	.word	0x0001600d
    dcc0:	00016030 	.word	0x00016030
    dcc4:	0001605a 	.word	0x0001605a
    dcc8:	00016079 	.word	0x00016079

0000dccc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dccc:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dcce:	4c23      	ldr	r4, [pc, #140]	; (dd5c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dcd0:	4606      	mov	r6, r0
    dcd2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dcd4:	4822      	ldr	r0, [pc, #136]	; (dd60 <bus_fault.constprop.0+0x94>)
    dcd6:	2145      	movs	r1, #69	; 0x45
    dcd8:	f006 ff42 	bl	14b60 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dcdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcde:	04d9      	lsls	r1, r3, #19
    dce0:	d503      	bpl.n	dcea <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    dce2:	2145      	movs	r1, #69	; 0x45
    dce4:	481f      	ldr	r0, [pc, #124]	; (dd64 <bus_fault.constprop.0+0x98>)
    dce6:	f006 ff3b 	bl	14b60 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dcea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcec:	051a      	lsls	r2, r3, #20
    dcee:	d503      	bpl.n	dcf8 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dcf0:	2145      	movs	r1, #69	; 0x45
    dcf2:	481d      	ldr	r0, [pc, #116]	; (dd68 <bus_fault.constprop.0+0x9c>)
    dcf4:	f006 ff34 	bl	14b60 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dcf8:	4c18      	ldr	r4, [pc, #96]	; (dd5c <bus_fault.constprop.0+0x90>)
    dcfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcfc:	059b      	lsls	r3, r3, #22
    dcfe:	d510      	bpl.n	dd22 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    dd00:	481a      	ldr	r0, [pc, #104]	; (dd6c <bus_fault.constprop.0+0xa0>)
    dd02:	2145      	movs	r1, #69	; 0x45
    dd04:	f006 ff2c 	bl	14b60 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    dd08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dd0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd0c:	0418      	lsls	r0, r3, #16
    dd0e:	d508      	bpl.n	dd22 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dd10:	2145      	movs	r1, #69	; 0x45
    dd12:	4817      	ldr	r0, [pc, #92]	; (dd70 <bus_fault.constprop.0+0xa4>)
    dd14:	f006 ff24 	bl	14b60 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    dd18:	b11e      	cbz	r6, dd22 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dd1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dd20:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dd22:	4c0e      	ldr	r4, [pc, #56]	; (dd5c <bus_fault.constprop.0+0x90>)
    dd24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd26:	0559      	lsls	r1, r3, #21
    dd28:	d503      	bpl.n	dd32 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    dd2a:	2145      	movs	r1, #69	; 0x45
    dd2c:	4811      	ldr	r0, [pc, #68]	; (dd74 <bus_fault.constprop.0+0xa8>)
    dd2e:	f006 ff17 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    dd32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd34:	05da      	lsls	r2, r3, #23
    dd36:	d50b      	bpl.n	dd50 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    dd38:	2145      	movs	r1, #69	; 0x45
    dd3a:	480f      	ldr	r0, [pc, #60]	; (dd78 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd3c:	f006 ff10 	bl	14b60 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    dd40:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dd42:	4a06      	ldr	r2, [pc, #24]	; (dd5c <bus_fault.constprop.0+0x90>)
    dd44:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dd46:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dd4a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    dd4c:	7028      	strb	r0, [r5, #0]
}
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dd50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd52:	049b      	lsls	r3, r3, #18
    dd54:	d5f4      	bpl.n	dd40 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd56:	2145      	movs	r1, #69	; 0x45
    dd58:	4808      	ldr	r0, [pc, #32]	; (dd7c <bus_fault.constprop.0+0xb0>)
    dd5a:	e7ef      	b.n	dd3c <bus_fault.constprop.0+0x70>
    dd5c:	e000ed00 	.word	0xe000ed00
    dd60:	000160a9 	.word	0x000160a9
    dd64:	000160c4 	.word	0x000160c4
    dd68:	000160da 	.word	0x000160da
    dd6c:	000160f2 	.word	0x000160f2
    dd70:	00016110 	.word	0x00016110
    dd74:	0001612a 	.word	0x0001612a
    dd78:	0001614a 	.word	0x0001614a
    dd7c:	00016167 	.word	0x00016167

0000dd80 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd80:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd82:	4c2b      	ldr	r4, [pc, #172]	; (de30 <mem_manage_fault.constprop.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd84:	4606      	mov	r6, r0
    dd86:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd88:	482a      	ldr	r0, [pc, #168]	; (de34 <mem_manage_fault.constprop.0+0xb4>)
    dd8a:	2145      	movs	r1, #69	; 0x45
    dd8c:	f006 fee8 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd92:	06d8      	lsls	r0, r3, #27
    dd94:	d503      	bpl.n	dd9e <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dd96:	2145      	movs	r1, #69	; 0x45
    dd98:	4827      	ldr	r0, [pc, #156]	; (de38 <mem_manage_fault.constprop.0+0xb8>)
    dd9a:	f006 fee1 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dd9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dda0:	0719      	lsls	r1, r3, #28
    dda2:	d503      	bpl.n	ddac <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dda4:	2145      	movs	r1, #69	; 0x45
    dda6:	4825      	ldr	r0, [pc, #148]	; (de3c <mem_manage_fault.constprop.0+0xbc>)
    dda8:	f006 feda 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ddac:	4c20      	ldr	r4, [pc, #128]	; (de30 <mem_manage_fault.constprop.0+0xb0>)
    ddae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddb0:	079a      	lsls	r2, r3, #30
    ddb2:	d510      	bpl.n	ddd6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    ddb4:	2145      	movs	r1, #69	; 0x45
    ddb6:	4822      	ldr	r0, [pc, #136]	; (de40 <mem_manage_fault.constprop.0+0xc0>)
    ddb8:	f006 fed2 	bl	14b60 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    ddbc:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ddbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddc0:	061b      	lsls	r3, r3, #24
    ddc2:	d508      	bpl.n	ddd6 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ddc4:	2145      	movs	r1, #69	; 0x45
    ddc6:	481f      	ldr	r0, [pc, #124]	; (de44 <mem_manage_fault.constprop.0+0xc4>)
    ddc8:	f006 feca 	bl	14b60 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    ddcc:	b11e      	cbz	r6, ddd6 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ddce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ddd4:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ddd6:	4c16      	ldr	r4, [pc, #88]	; (de30 <mem_manage_fault.constprop.0+0xb0>)
    ddd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddda:	07de      	lsls	r6, r3, #31
    dddc:	d503      	bpl.n	dde6 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    ddde:	2145      	movs	r1, #69	; 0x45
    dde0:	4819      	ldr	r0, [pc, #100]	; (de48 <mem_manage_fault.constprop.0+0xc8>)
    dde2:	f006 febd 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dde6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dde8:	0698      	lsls	r0, r3, #26
    ddea:	d503      	bpl.n	ddf4 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    ddec:	2145      	movs	r1, #69	; 0x45
    ddee:	4817      	ldr	r0, [pc, #92]	; (de4c <mem_manage_fault.constprop.0+0xcc>)
    ddf0:	f006 feb6 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ddf4:	4b0e      	ldr	r3, [pc, #56]	; (de30 <mem_manage_fault.constprop.0+0xb0>)
    ddf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ddf8:	06d1      	lsls	r1, r2, #27
    ddfa:	d402      	bmi.n	de02 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    ddfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ddfe:	0792      	lsls	r2, r2, #30
    de00:	d50d      	bpl.n	de1e <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    de02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de04:	06db      	lsls	r3, r3, #27
    de06:	d50a      	bpl.n	de1e <mem_manage_fault.constprop.0+0x9e>
    de08:	4911      	ldr	r1, [pc, #68]	; (de50 <mem_manage_fault.constprop.0+0xd0>)
    de0a:	4812      	ldr	r0, [pc, #72]	; (de54 <mem_manage_fault.constprop.0+0xd4>)
    de0c:	f240 124f 	movw	r2, #335	; 0x14f
    de10:	f006 fe0c 	bl	14a2c <printk>
    de14:	f240 114f 	movw	r1, #335	; 0x14f
    de18:	480d      	ldr	r0, [pc, #52]	; (de50 <mem_manage_fault.constprop.0+0xd0>)
    de1a:	f006 fe8e 	bl	14b3a <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    de1e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    de20:	4a03      	ldr	r2, [pc, #12]	; (de30 <mem_manage_fault.constprop.0+0xb0>)
    de22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    de24:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    de28:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    de2a:	7028      	strb	r0, [r5, #0]
}
    de2c:	bd70      	pop	{r4, r5, r6, pc}
    de2e:	bf00      	nop
    de30:	e000ed00 	.word	0xe000ed00
    de34:	0001619b 	.word	0x0001619b
    de38:	000161b6 	.word	0x000161b6
    de3c:	000160da 	.word	0x000160da
    de40:	000161ee 	.word	0x000161ee
    de44:	0001620b 	.word	0x0001620b
    de48:	00016226 	.word	0x00016226
    de4c:	00016167 	.word	0x00016167
    de50:	0001624a 	.word	0x0001624a
    de54:	00015a05 	.word	0x00015a05

0000de58 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de5c:	4b74      	ldr	r3, [pc, #464]	; (e030 <z_arm_fault+0x1d8>)
{
    de5e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de60:	685f      	ldr	r7, [r3, #4]
{
    de62:	b08a      	sub	sp, #40	; 0x28
    de64:	2300      	movs	r3, #0
    de66:	f3c7 0408 	ubfx	r4, r7, #0, #9
    de6a:	f383 8811 	msr	BASEPRI, r3
    de6e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    de72:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    de76:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    de7a:	d142      	bne.n	df02 <z_arm_fault+0xaa>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    de7c:	f012 0601 	ands.w	r6, r2, #1
    de80:	d01e      	beq.n	dec0 <z_arm_fault+0x68>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    de82:	f012 0640 	ands.w	r6, r2, #64	; 0x40
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    de86:	f002 0808 	and.w	r8, r2, #8
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    de8a:	d004      	beq.n	de96 <z_arm_fault+0x3e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    de8c:	f1b8 0f00 	cmp.w	r8, #0
    de90:	d134      	bne.n	defc <z_arm_fault+0xa4>
			*nested_exc = true;
    de92:	2601      	movs	r6, #1
    de94:	e013      	b.n	debe <z_arm_fault+0x66>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    de96:	0750      	lsls	r0, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    de98:	bf58      	it	pl
    de9a:	4629      	movpl	r1, r5
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    de9c:	4b65      	ldr	r3, [pc, #404]	; (e034 <z_arm_fault+0x1dc>)
    de9e:	680a      	ldr	r2, [r1, #0]
			*nested_exc = true;
    dea0:	bf58      	it	pl
    dea2:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    dea4:	4413      	add	r3, r2
    dea6:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    dea8:	bf98      	it	ls
    deaa:	6c0a      	ldrls	r2, [r1, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    deac:	4862      	ldr	r0, [pc, #392]	; (e038 <z_arm_fault+0x1e0>)
    deae:	2145      	movs	r1, #69	; 0x45
    deb0:	f006 fe56 	bl	14b60 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    deb4:	f1b8 0f00 	cmp.w	r8, #0
    deb8:	d01d      	beq.n	def6 <z_arm_fault+0x9e>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    deba:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    debe:	b95d      	cbnz	r5, ded8 <z_arm_fault+0x80>
    dec0:	f240 32f2 	movw	r2, #1010	; 0x3f2
    dec4:	495d      	ldr	r1, [pc, #372]	; (e03c <z_arm_fault+0x1e4>)
    dec6:	485e      	ldr	r0, [pc, #376]	; (e040 <z_arm_fault+0x1e8>)
    dec8:	f006 fdb0 	bl	14a2c <printk>
    decc:	f240 31f2 	movw	r1, #1010	; 0x3f2
    ded0:	485a      	ldr	r0, [pc, #360]	; (e03c <z_arm_fault+0x1e4>)
    ded2:	f006 fe32 	bl	14b3a <assert_post_action>
    ded6:	2500      	movs	r5, #0
	*recoverable = false;
    ded8:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    dedc:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    dede:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    dee2:	2b09      	cmp	r3, #9
    dee4:	f200 8092 	bhi.w	e00c <z_arm_fault+0x1b4>
    dee8:	e8df f003 	tbb	[pc, r3]
    deec:	6689850d 	.word	0x6689850d
    def0:	9090906c 	.word	0x9090906c
    def4:	8d90      	.short	0x8d90
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    def6:	f3ef 8588 	mrs	r5, MSP_NS
	if (!alternative_state_exc) {
    defa:	e7e0      	b.n	debe <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    defc:	460d      	mov	r5, r1
	*nested_exc = false;
    defe:	461e      	mov	r6, r3
    df00:	e7dd      	b.n	debe <z_arm_fault+0x66>
    df02:	461e      	mov	r6, r3
    df04:	e7dc      	b.n	dec0 <z_arm_fault+0x68>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df06:	4c4a      	ldr	r4, [pc, #296]	; (e030 <z_arm_fault+0x1d8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    df08:	2145      	movs	r1, #69	; 0x45
    df0a:	484e      	ldr	r0, [pc, #312]	; (e044 <z_arm_fault+0x1ec>)
    df0c:	f006 fe28 	bl	14b60 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	*recoverable = false;
    df12:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df16:	079a      	lsls	r2, r3, #30
    df18:	d504      	bpl.n	df24 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    df1a:	2145      	movs	r1, #69	; 0x45
    df1c:	484a      	ldr	r0, [pc, #296]	; (e048 <z_arm_fault+0x1f0>)
	PR_FAULT_INFO(
    df1e:	f006 fe1f 	bl	14b60 <z_log_minimal_printk>
}
    df22:	e05d      	b.n	dfe0 <z_arm_fault+0x188>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    df24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    df26:	2b00      	cmp	r3, #0
    df28:	da02      	bge.n	df30 <z_arm_fault+0xd8>
		PR_EXC("  Debug event");
    df2a:	2145      	movs	r1, #69	; 0x45
    df2c:	4847      	ldr	r0, [pc, #284]	; (e04c <z_arm_fault+0x1f4>)
    df2e:	e7f6      	b.n	df1e <z_arm_fault+0xc6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    df30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    df32:	005b      	lsls	r3, r3, #1
    df34:	d556      	bpl.n	dfe4 <z_arm_fault+0x18c>
		PR_EXC("  Fault escalation (see below)");
    df36:	2145      	movs	r1, #69	; 0x45
    df38:	4845      	ldr	r0, [pc, #276]	; (e050 <z_arm_fault+0x1f8>)
    df3a:	f006 fe11 	bl	14b60 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    df3e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    df40:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    df44:	f64d 7302 	movw	r3, #57090	; 0xdf02
    df48:	429a      	cmp	r2, r3
    df4a:	d009      	beq.n	df60 <z_arm_fault+0x108>
		} else if (SCB_MMFSR != 0) {
    df4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    df50:	b333      	cbz	r3, dfa0 <z_arm_fault+0x148>
			reason = mem_manage_fault(esf, 1, recoverable);
    df52:	2001      	movs	r0, #1
    df54:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    df58:	f7ff ff12 	bl	dd80 <mem_manage_fault.constprop.0>
    df5c:	4604      	mov	r4, r0
		break;
    df5e:	e005      	b.n	df6c <z_arm_fault+0x114>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    df60:	2145      	movs	r1, #69	; 0x45
    df62:	682a      	ldr	r2, [r5, #0]
    df64:	483b      	ldr	r0, [pc, #236]	; (e054 <z_arm_fault+0x1fc>)
    df66:	f006 fdfb 	bl	14b60 <z_log_minimal_printk>
			reason = esf->basic.r0;
    df6a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    df6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df70:	b99b      	cbnz	r3, df9a <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    df72:	2220      	movs	r2, #32
    df74:	4629      	mov	r1, r5
    df76:	a802      	add	r0, sp, #8
    df78:	f006 feee 	bl	14d58 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    df7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df7e:	2e00      	cmp	r6, #0
    df80:	d051      	beq.n	e026 <z_arm_fault+0x1ce>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    df82:	f3c3 0208 	ubfx	r2, r3, #0, #9
    df86:	b922      	cbnz	r2, df92 <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    df88:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    df8c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    df90:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    df92:	4620      	mov	r0, r4
    df94:	a902      	add	r1, sp, #8
    df96:	f7ff fca1 	bl	d8dc <z_arm_fatal_error>
}
    df9a:	b00a      	add	sp, #40	; 0x28
    df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_BFSR != 0) {
    dfa0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    dfa4:	b12b      	cbz	r3, dfb2 <z_arm_fault+0x15a>
			reason = bus_fault(esf, 1, recoverable);
    dfa6:	2001      	movs	r0, #1
    dfa8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dfac:	f7ff fe8e 	bl	dccc <bus_fault.constprop.0>
    dfb0:	e7d4      	b.n	df5c <z_arm_fault+0x104>
		} else if (SCB_UFSR != 0) {
    dfb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    dfb4:	b29b      	uxth	r3, r3
    dfb6:	b113      	cbz	r3, dfbe <z_arm_fault+0x166>
		reason = usage_fault(esf);
    dfb8:	f7ff fe32 	bl	dc20 <usage_fault.constprop.0>
    dfbc:	e7ce      	b.n	df5c <z_arm_fault+0x104>
		} else if (SAU->SFSR != 0) {
    dfbe:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dfc2:	b113      	cbz	r3, dfca <z_arm_fault+0x172>
		secure_fault(esf);
    dfc4:	f7ff fdce 	bl	db64 <secure_fault.constprop.0>
		break;
    dfc8:	e00a      	b.n	dfe0 <z_arm_fault+0x188>
			__ASSERT(0,
    dfca:	491c      	ldr	r1, [pc, #112]	; (e03c <z_arm_fault+0x1e4>)
    dfcc:	f240 22c3 	movw	r2, #707	; 0x2c3
    dfd0:	481b      	ldr	r0, [pc, #108]	; (e040 <z_arm_fault+0x1e8>)
    dfd2:	f006 fd2b 	bl	14a2c <printk>
    dfd6:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    dfda:	4818      	ldr	r0, [pc, #96]	; (e03c <z_arm_fault+0x1e4>)
    dfdc:	f006 fdad 	bl	14b3a <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dfe0:	2400      	movs	r4, #0
    dfe2:	e7c3      	b.n	df6c <z_arm_fault+0x114>
		__ASSERT(0,
    dfe4:	4915      	ldr	r1, [pc, #84]	; (e03c <z_arm_fault+0x1e4>)
    dfe6:	f240 22c7 	movw	r2, #711	; 0x2c7
    dfea:	4815      	ldr	r0, [pc, #84]	; (e040 <z_arm_fault+0x1e8>)
    dfec:	f006 fd1e 	bl	14a2c <printk>
    dff0:	f240 21c7 	movw	r1, #711	; 0x2c7
    dff4:	e7f1      	b.n	dfda <z_arm_fault+0x182>
		reason = mem_manage_fault(esf, 0, recoverable);
    dff6:	2000      	movs	r0, #0
    dff8:	f10d 0107 	add.w	r1, sp, #7
    dffc:	e7ac      	b.n	df58 <z_arm_fault+0x100>
		reason = bus_fault(esf, 0, recoverable);
    dffe:	2000      	movs	r0, #0
    e000:	f10d 0107 	add.w	r1, sp, #7
    e004:	e7d2      	b.n	dfac <z_arm_fault+0x154>
	PR_FAULT_INFO(
    e006:	2145      	movs	r1, #69	; 0x45
    e008:	4813      	ldr	r0, [pc, #76]	; (e058 <z_arm_fault+0x200>)
    e00a:	e788      	b.n	df1e <z_arm_fault+0xc6>
	PR_FAULT_INFO("***** %s %d) *****",
    e00c:	4913      	ldr	r1, [pc, #76]	; (e05c <z_arm_fault+0x204>)
    e00e:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    e012:	4a13      	ldr	r2, [pc, #76]	; (e060 <z_arm_fault+0x208>)
    e014:	4813      	ldr	r0, [pc, #76]	; (e064 <z_arm_fault+0x20c>)
    e016:	bf08      	it	eq
    e018:	460a      	moveq	r2, r1
    e01a:	f1a4 0310 	sub.w	r3, r4, #16
    e01e:	2145      	movs	r1, #69	; 0x45
    e020:	f006 fd9e 	bl	14b60 <z_log_minimal_printk>
}
    e024:	e7dc      	b.n	dfe0 <z_arm_fault+0x188>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e026:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e02a:	f023 0301 	bic.w	r3, r3, #1
    e02e:	e7af      	b.n	df90 <z_arm_fault+0x138>
    e030:	e000ed00 	.word	0xe000ed00
    e034:	0105eda6 	.word	0x0105eda6
    e038:	000162b2 	.word	0x000162b2
    e03c:	0001624a 	.word	0x0001624a
    e040:	00015a05 	.word	0x00015a05
    e044:	000162d6 	.word	0x000162d6
    e048:	000162f2 	.word	0x000162f2
    e04c:	00016318 	.word	0x00016318
    e050:	0001632b 	.word	0x0001632b
    e054:	0001634f 	.word	0x0001634f
    e058:	00016370 	.word	0x00016370
    e05c:	00016284 	.word	0x00016284
    e060:	00016299 	.word	0x00016299
    e064:	00016399 	.word	0x00016399

0000e068 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e068:	4b04      	ldr	r3, [pc, #16]	; (e07c <z_arm_fault_init+0x14>)
    e06a:	695a      	ldr	r2, [r3, #20]
    e06c:	f042 0210 	orr.w	r2, r2, #16
    e070:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e072:	695a      	ldr	r2, [r3, #20]
    e074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e078:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e07a:	4770      	bx	lr
    e07c:	e000ed00 	.word	0xe000ed00

0000e080 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e080:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e084:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    e088:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    e08a:	4672      	mov	r2, lr
	bl z_arm_fault
    e08c:	f7ff fee4 	bl	de58 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    e090:	bd01      	pop	{r0, pc}
    e092:	bf00      	nop

0000e094 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e094:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e096:	2120      	movs	r1, #32
    e098:	4803      	ldr	r0, [pc, #12]	; (e0a8 <z_arm_interrupt_init+0x14>)
    e09a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e09c:	3301      	adds	r3, #1
    e09e:	2b41      	cmp	r3, #65	; 0x41
    e0a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e0a4:	d1f9      	bne.n	e09a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e0a6:	4770      	bx	lr
    e0a8:	e000e100 	.word	0xe000e100

0000e0ac <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    e0ac:	2000      	movs	r0, #0
    msr CONTROL, r0
    e0ae:	f380 8814 	msr	CONTROL, r0
    isb
    e0b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    e0b6:	2000      	movs	r0, #0
    msr MSPLIM, r0
    e0b8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    e0bc:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    e0c0:	f007 f8ac 	bl	1521c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    e0c4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    e0c6:	490e      	ldr	r1, [pc, #56]	; (e100 <__start+0x54>)
    str r0, [r1]
    e0c8:	6008      	str	r0, [r1, #0]
    dsb
    e0ca:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e0ce:	480d      	ldr	r0, [pc, #52]	; (e104 <__start+0x58>)
    msr msp, r0
    e0d0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    e0d4:	f000 f83e 	bl	e154 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e0d8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e0da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e0de:	480a      	ldr	r0, [pc, #40]	; (e108 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    e0e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e0e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e0e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e0ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e0ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e0f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e0f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e0f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e0fa:	f7ff fc63 	bl	d9c4 <z_arm_prep_c>
    e0fe:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    e100:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e104:	20002f60 	.word	0x20002f60
    ldr r0, =z_interrupt_stacks
    e108:	20001620 	.word	0x20001620

0000e10c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e10c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e110:	4905      	ldr	r1, [pc, #20]	; (e128 <sys_arch_reboot+0x1c>)
    e112:	4b06      	ldr	r3, [pc, #24]	; (e12c <sys_arch_reboot+0x20>)
    e114:	68ca      	ldr	r2, [r1, #12]
    e116:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e11a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e11c:	60cb      	str	r3, [r1, #12]
    e11e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e122:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e124:	e7fd      	b.n	e122 <sys_arch_reboot+0x16>
    e126:	bf00      	nop
    e128:	e000ed00 	.word	0xe000ed00
    e12c:	05fa0004 	.word	0x05fa0004

0000e130 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    e130:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    e132:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    e134:	4906      	ldr	r1, [pc, #24]	; (e150 <z_arm_clear_arm_mpu_config+0x20>)
    e136:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    e13a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    e13e:	4293      	cmp	r3, r2
    e140:	db00      	blt.n	e144 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    e142:	4770      	bx	lr
  mpu->RNR = rnr;
    e144:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    e148:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    e14c:	3301      	adds	r3, #1
    e14e:	e7f6      	b.n	e13e <z_arm_clear_arm_mpu_config+0xe>
    e150:	e000ed00 	.word	0xe000ed00

0000e154 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    e154:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    e156:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    e158:	2400      	movs	r4, #0
    e15a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    e15e:	f7ff ffe7 	bl	e130 <z_arm_clear_arm_mpu_config>
    e162:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    e164:	f04f 30ff 	mov.w	r0, #4294967295
    e168:	4a0c      	ldr	r2, [pc, #48]	; (e19c <z_arm_init_arch_hw_at_boot+0x48>)
    e16a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e16e:	3301      	adds	r3, #1
    e170:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    e172:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e176:	d1f8      	bne.n	e16a <z_arm_init_arch_hw_at_boot+0x16>
    e178:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e17a:	f04f 30ff 	mov.w	r0, #4294967295
    e17e:	4a07      	ldr	r2, [pc, #28]	; (e19c <z_arm_init_arch_hw_at_boot+0x48>)
    e180:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e184:	3301      	adds	r3, #1
    e186:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e188:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e18c:	d1f8      	bne.n	e180 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    e18e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    e190:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e194:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    e198:	bd10      	pop	{r4, pc}
    e19a:	bf00      	nop
    e19c:	e000e100 	.word	0xe000e100

0000e1a0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    e1a0:	4b06      	ldr	r3, [pc, #24]	; (e1bc <z_impl_k_thread_abort+0x1c>)
    e1a2:	689b      	ldr	r3, [r3, #8]
    e1a4:	4283      	cmp	r3, r0
    e1a6:	d107      	bne.n	e1b8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e1a8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e1ac:	b123      	cbz	r3, e1b8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e1ae:	4a04      	ldr	r2, [pc, #16]	; (e1c0 <z_impl_k_thread_abort+0x20>)
    e1b0:	6853      	ldr	r3, [r2, #4]
    e1b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e1b6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    e1b8:	f003 bb1c 	b.w	117f4 <z_thread_abort>
    e1bc:	20000a2c 	.word	0x20000a2c
    e1c0:	e000ed00 	.word	0xe000ed00

0000e1c4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    e1c4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    e1c6:	4b0d      	ldr	r3, [pc, #52]	; (e1fc <tz_nonsecure_state_setup+0x38>)
    e1c8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    e1ca:	6803      	ldr	r3, [r0, #0]
    e1cc:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    e1d0:	6843      	ldr	r3, [r0, #4]
    e1d2:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    e1d6:	7b02      	ldrb	r2, [r0, #12]
    e1d8:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    e1dc:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    e1e0:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    e1e4:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    e1e6:	bf48      	it	mi
    e1e8:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    e1ec:	b109      	cbz	r1, e1f2 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    e1ee:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    e1f2:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    e1f6:	f3bf 8f6f 	isb	sy
}
    e1fa:	4770      	bx	lr
    e1fc:	e002ed00 	.word	0xe002ed00

0000e200 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e200:	4a08      	ldr	r2, [pc, #32]	; (e224 <tz_nbanked_exception_target_state_set+0x24>)
    e202:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    e204:	b148      	cbz	r0, e21a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    e206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e20a:	041b      	lsls	r3, r3, #16
    e20c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e20e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    e216:	60d3      	str	r3, [r2, #12]
}
    e218:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e21a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    e21c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e220:	e7f5      	b.n	e20e <tz_nbanked_exception_target_state_set+0xe>
    e222:	bf00      	nop
    e224:	e000ed00 	.word	0xe000ed00

0000e228 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e228:	4a08      	ldr	r2, [pc, #32]	; (e24c <tz_nonsecure_exception_prio_config+0x24>)
    e22a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    e22c:	b140      	cbz	r0, e240 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e22e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    e230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    e23c:	60d3      	str	r3, [r2, #12]
}
    e23e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    e240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e244:	041b      	lsls	r3, r3, #16
    e246:	0c1b      	lsrs	r3, r3, #16
    e248:	e7f4      	b.n	e234 <tz_nonsecure_exception_prio_config+0xc>
    e24a:	bf00      	nop
    e24c:	e000ed00 	.word	0xe000ed00

0000e250 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e250:	4a08      	ldr	r2, [pc, #32]	; (e274 <tz_nonsecure_system_reset_req_block+0x24>)
    e252:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    e254:	b140      	cbz	r0, e268 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e256:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    e258:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e25c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    e264:	60d3      	str	r3, [r2, #12]
}
    e266:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    e268:	f023 0308 	bic.w	r3, r3, #8
    e26c:	041b      	lsls	r3, r3, #16
    e26e:	0c1b      	lsrs	r3, r3, #16
    e270:	e7f4      	b.n	e25c <tz_nonsecure_system_reset_req_block+0xc>
    e272:	bf00      	nop
    e274:	e000ed00 	.word	0xe000ed00

0000e278 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    e278:	4a03      	ldr	r2, [pc, #12]	; (e288 <tz_nonsecure_fpu_access_enable+0x10>)
    e27a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    e27e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    e282:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    e286:	4770      	bx	lr
    e288:	e000ed00 	.word	0xe000ed00

0000e28c <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    e28c:	4b0a      	ldr	r3, [pc, #40]	; (e2b8 <tz_sau_configure+0x2c>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    e28e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    e292:	b120      	cbz	r0, e29e <tz_sau_configure+0x12>
    e294:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    e298:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
	}
}
    e29c:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    e29e:	f022 0201 	bic.w	r2, r2, #1
    e2a2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    e2a6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		if (allns) {
    e2aa:	b111      	cbz	r1, e2b2 <tz_sau_configure+0x26>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    e2ac:	f042 0202 	orr.w	r2, r2, #2
    e2b0:	e7f2      	b.n	e298 <tz_sau_configure+0xc>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    e2b2:	f022 0202 	bic.w	r2, r2, #2
    e2b6:	e7ef      	b.n	e298 <tz_sau_configure+0xc>
    e2b8:	e000ed00 	.word	0xe000ed00

0000e2bc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e2bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e2be:	4c09      	ldr	r4, [pc, #36]	; (e2e4 <z_arm_configure_static_mpu_regions+0x28>)
    e2c0:	4a09      	ldr	r2, [pc, #36]	; (e2e8 <z_arm_configure_static_mpu_regions+0x2c>)
    e2c2:	4623      	mov	r3, r4
    e2c4:	2101      	movs	r1, #1
    e2c6:	4809      	ldr	r0, [pc, #36]	; (e2ec <z_arm_configure_static_mpu_regions+0x30>)
    e2c8:	f000 f924 	bl	e514 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e2cc:	2300      	movs	r3, #0
    e2ce:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e2d0:	4b07      	ldr	r3, [pc, #28]	; (e2f0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2d2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e2d4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2d6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e2d8:	9301      	str	r3, [sp, #4]
    e2da:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2dc:	f000 f936 	bl	e54c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e2e0:	b004      	add	sp, #16
    e2e2:	bd10      	pop	{r4, pc}
    e2e4:	20008000 	.word	0x20008000
    e2e8:	20000000 	.word	0x20000000
    e2ec:	000156f8 	.word	0x000156f8
    e2f0:	20000160 	.word	0x20000160

0000e2f4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e2f4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2f6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e2f8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2fa:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    e2fe:	f004 021f 	and.w	r2, r4, #31
    e302:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e304:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e306:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e308:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e30c:	4905      	ldr	r1, [pc, #20]	; (e324 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e30e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e312:	f043 0301 	orr.w	r3, r3, #1
    e316:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e31a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e31e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e322:	bd10      	pop	{r4, pc}
    e324:	e000ed00 	.word	0xe000ed00

0000e328 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e328:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
		&new_region->attr, new_region->start, new_region->size);
    e32a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e32c:	680c      	ldr	r4, [r1, #0]
{
    e32e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e330:	890a      	ldrh	r2, [r1, #8]
    e332:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e334:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e336:	3b01      	subs	r3, #1
    e338:	f024 041f 	bic.w	r4, r4, #31
    e33c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e33e:	f002 021f 	and.w	r2, r2, #31
    e342:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e346:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e34a:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e34c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e34e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e352:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e354:	d909      	bls.n	e36a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e356:	4602      	mov	r2, r0
    e358:	2145      	movs	r1, #69	; 0x45
    e35a:	4806      	ldr	r0, [pc, #24]	; (e374 <mpu_configure_region+0x4c>)
    e35c:	f006 fc00 	bl	14b60 <z_log_minimal_printk>
    e360:	f06f 0415 	mvn.w	r4, #21

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e364:	4620      	mov	r0, r4
    e366:	b005      	add	sp, #20
    e368:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e36a:	4669      	mov	r1, sp
    e36c:	f7ff ffc2 	bl	e2f4 <region_init>
	return region_allocate_and_init(index,
    e370:	e7f8      	b.n	e364 <mpu_configure_region+0x3c>
    e372:	bf00      	nop
    e374:	000163b5 	.word	0x000163b5

0000e378 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e37c:	4689      	mov	r9, r1
    e37e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e380:	4606      	mov	r6, r0
    e382:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e386:	4d54      	ldr	r5, [pc, #336]	; (e4d8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e388:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e38a:	45c8      	cmp	r8, r9
    e38c:	da27      	bge.n	e3de <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e38e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e392:	f1ba 0f00 	cmp.w	sl, #0
    e396:	d045      	beq.n	e424 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    e398:	f1ba 0f1f 	cmp.w	sl, #31
    e39c:	d918      	bls.n	e3d0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e39e:	f01a 0f1f 	tst.w	sl, #31
    e3a2:	d115      	bne.n	e3d0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e3a4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e3a8:	f01b 0f1f 	tst.w	fp, #31
    e3ac:	d110      	bne.n	e3d0 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3ae:	4658      	mov	r0, fp
    e3b0:	f006 fc81 	bl	14cb6 <arm_cmse_mpu_region_get>
    e3b4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3b6:	eb0a 000b 	add.w	r0, sl, fp
    e3ba:	3801      	subs	r0, #1
    e3bc:	f006 fc7b 	bl	14cb6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e3c0:	4287      	cmp	r7, r0
    e3c2:	d010      	beq.n	e3e6 <mpu_configure_regions_and_partition.constprop.0+0x6e>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    e3c4:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e3c8:	463a      	mov	r2, r7
    e3ca:	2145      	movs	r1, #69	; 0x45
    e3cc:	4843      	ldr	r0, [pc, #268]	; (e4dc <mpu_configure_regions_and_partition.constprop.0+0x164>)
    e3ce:	e002      	b.n	e3d6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e3d0:	4642      	mov	r2, r8
    e3d2:	2145      	movs	r1, #69	; 0x45
    e3d4:	4842      	ldr	r0, [pc, #264]	; (e4e0 <mpu_configure_regions_and_partition.constprop.0+0x168>)
			LOG_ERR("Invalid underlying region index %u",
    e3d6:	f006 fbc3 	bl	14b60 <z_log_minimal_printk>
			return -EINVAL;
    e3da:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e3de:	4620      	mov	r0, r4
    e3e0:	b005      	add	sp, #20
    e3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e3e6:	f117 0f16 	cmn.w	r7, #22
    e3ea:	d0ed      	beq.n	e3c8 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e3ec:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e3ee:	42bb      	cmp	r3, r7
    e3f0:	dbea      	blt.n	e3c8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e3f2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e3f6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e3fa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e3fe:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e402:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e406:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e40a:	e9d6 3200 	ldrd	r3, r2, [r6]
    e40e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e410:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e412:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e416:	d11d      	bne.n	e454 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e418:	45d3      	cmp	fp, sl
    e41a:	d107      	bne.n	e42c <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e41c:	4631      	mov	r1, r6
    e41e:	b2f8      	uxtb	r0, r7
    e420:	f7ff ff82 	bl	e328 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e424:	f108 0801 	add.w	r8, r8, #1
    e428:	360c      	adds	r6, #12
    e42a:	e7ae      	b.n	e38a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e42c:	4631      	mov	r1, r6
	MPU->RNR = index;
    e42e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e432:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e436:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e43a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e43e:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e440:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e444:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e446:	f7ff ff6f 	bl	e328 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e44a:	f110 0f16 	cmn.w	r0, #22
    e44e:	d0c4      	beq.n	e3da <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e450:	1c44      	adds	r4, r0, #1
    e452:	e7e7      	b.n	e424 <mpu_configure_regions_and_partition.constprop.0+0xac>
	MPU->RNR = index;
    e454:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e458:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    e45c:	3b01      	subs	r3, #1
		| (limit & MPU_RLAR_LIMIT_Msk);
    e45e:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e462:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e466:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e468:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e46a:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    e46c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e46e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    e472:	d0e8      	beq.n	e446 <mpu_configure_regions_and_partition.constprop.0+0xce>
				mpu_configure_region(reg_index, &regions[i]);
    e474:	f7ff ff58 	bl	e328 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e478:	f110 0f16 	cmn.w	r0, #22
    e47c:	d0ad      	beq.n	e3da <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e47e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e482:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e486:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e48a:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e48e:	f362 0304 	bfi	r3, r2, #0, #5
    e492:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e496:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e49a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e49e:	085b      	lsrs	r3, r3, #1
    e4a0:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e4a4:	e9d6 3100 	ldrd	r3, r1, [r6]
    e4a8:	440b      	add	r3, r1
    e4aa:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e4ac:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e4b0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e4b2:	445b      	add	r3, fp
    e4b4:	eba3 030a 	sub.w	r3, r3, sl
    e4b8:	b2c0      	uxtb	r0, r0
    e4ba:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e4be:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4c0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e4c4:	9303      	str	r3, [sp, #12]
    e4c6:	d903      	bls.n	e4d0 <mpu_configure_regions_and_partition.constprop.0+0x158>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e4c8:	4602      	mov	r2, r0
    e4ca:	2145      	movs	r1, #69	; 0x45
    e4cc:	4805      	ldr	r0, [pc, #20]	; (e4e4 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    e4ce:	e782      	b.n	e3d6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e4d0:	4669      	mov	r1, sp
    e4d2:	f7ff ff0f 	bl	e2f4 <region_init>
    e4d6:	e7bb      	b.n	e450 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e4d8:	e000ed00 	.word	0xe000ed00
    e4dc:	00016408 	.word	0x00016408
    e4e0:	000163e0 	.word	0x000163e0
    e4e4:	000163b5 	.word	0x000163b5

0000e4e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e4e8:	2205      	movs	r2, #5
    e4ea:	4b04      	ldr	r3, [pc, #16]	; (e4fc <arm_core_mpu_enable+0x14>)
    e4ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e4f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e4f4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e4f8:	4770      	bx	lr
    e4fa:	bf00      	nop
    e4fc:	e000ed00 	.word	0xe000ed00

0000e500 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e500:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e504:	2200      	movs	r2, #0
    e506:	4b02      	ldr	r3, [pc, #8]	; (e510 <arm_core_mpu_disable+0x10>)
    e508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e50c:	4770      	bx	lr
    e50e:	bf00      	nop
    e510:	e000ed00 	.word	0xe000ed00

0000e514 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    e514:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e516:	4c0a      	ldr	r4, [pc, #40]	; (e540 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e518:	7822      	ldrb	r2, [r4, #0]
    e51a:	f7ff ff2d 	bl	e378 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e51e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e520:	3016      	adds	r0, #22
    e522:	d10c      	bne.n	e53e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e524:	4907      	ldr	r1, [pc, #28]	; (e544 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e526:	4808      	ldr	r0, [pc, #32]	; (e548 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e528:	f240 1211 	movw	r2, #273	; 0x111
    e52c:	f006 fa7e 	bl	14a2c <printk>
			regions_num);
	}
}
    e530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e534:	f240 1111 	movw	r1, #273	; 0x111
    e538:	4802      	ldr	r0, [pc, #8]	; (e544 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e53a:	f006 bafe 	b.w	14b3a <assert_post_action>
}
    e53e:	bd10      	pop	{r4, pc}
    e540:	2000144c 	.word	0x2000144c
    e544:	00016430 	.word	0x00016430
    e548:	00015a05 	.word	0x00015a05

0000e54c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    e54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e550:	4d30      	ldr	r5, [pc, #192]	; (e614 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e552:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e554:	4606      	mov	r6, r0
    e556:	f04f 0800 	mov.w	r8, #0
    e55a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e55c:	4f2e      	ldr	r7, [pc, #184]	; (e618 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e55e:	45d0      	cmp	r8, sl
    e560:	db02      	blt.n	e568 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    e562:	b003      	add	sp, #12
    e564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e568:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e56c:	f1b9 0f00 	cmp.w	r9, #0
    e570:	d04a      	beq.n	e608 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e572:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e574:	4608      	mov	r0, r1
    e576:	9101      	str	r1, [sp, #4]
    e578:	f006 fb9d 	bl	14cb6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e57c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e57e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e580:	eb09 0001 	add.w	r0, r9, r1
    e584:	3801      	subs	r0, #1
    e586:	f006 fb96 	bl	14cb6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e58a:	4284      	cmp	r4, r0
    e58c:	f04f 0214 	mov.w	r2, #20
    e590:	4b22      	ldr	r3, [pc, #136]	; (e61c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e592:	d013      	beq.n	e5bc <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e594:	fb02 f308 	mul.w	r3, r2, r8
    e598:	f06f 0215 	mvn.w	r2, #21
    e59c:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e5a0:	f240 1221 	movw	r2, #289	; 0x121
    e5a4:	491e      	ldr	r1, [pc, #120]	; (e620 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e5a6:	481f      	ldr	r0, [pc, #124]	; (e624 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e5a8:	f006 fa40 	bl	14a2c <printk>
    e5ac:	f240 1121 	movw	r1, #289	; 0x121
    e5b0:	481b      	ldr	r0, [pc, #108]	; (e620 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e5b2:	b003      	add	sp, #12
    e5b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e5b8:	f006 babf 	b.w	14b3a <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e5bc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e5c0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e5c2:	d0ed      	beq.n	e5a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e5c4:	7819      	ldrb	r1, [r3, #0]
    e5c6:	42a1      	cmp	r1, r4
    e5c8:	ddea      	ble.n	e5a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e5ca:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e5ce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e5d2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e5d6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e5da:	f100 0108 	add.w	r1, r0, #8
    e5de:	7b00      	ldrb	r0, [r0, #12]
    e5e0:	f364 0004 	bfi	r0, r4, #0, #5
    e5e4:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e5e6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e5ea:	790c      	ldrb	r4, [r1, #4]
    e5ec:	0840      	lsrs	r0, r0, #1
    e5ee:	f360 1447 	bfi	r4, r0, #5, #3
    e5f2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e5f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e5f8:	f021 011f 	bic.w	r1, r1, #31
    e5fc:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e5fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e602:	f021 011f 	bic.w	r1, r1, #31
    e606:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e608:	f108 0801 	add.w	r8, r8, #1
    e60c:	3514      	adds	r5, #20
    e60e:	360c      	adds	r6, #12
    e610:	e7a5      	b.n	e55e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e612:	bf00      	nop
    e614:	20000968 	.word	0x20000968
    e618:	e000ed00 	.word	0xe000ed00
    e61c:	2000144c 	.word	0x2000144c
    e620:	00016430 	.word	0x00016430
    e624:	00015a05 	.word	0x00015a05

0000e628 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e628:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e62a:	4d1d      	ldr	r5, [pc, #116]	; (e6a0 <z_arm_mpu_init+0x78>)
    e62c:	682c      	ldr	r4, [r5, #0]
    e62e:	2c10      	cmp	r4, #16
    e630:	d90d      	bls.n	e64e <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e632:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e636:	491b      	ldr	r1, [pc, #108]	; (e6a4 <z_arm_mpu_init+0x7c>)
    e638:	481b      	ldr	r0, [pc, #108]	; (e6a8 <z_arm_mpu_init+0x80>)
    e63a:	f006 f9f7 	bl	14a2c <printk>
    e63e:	4819      	ldr	r0, [pc, #100]	; (e6a4 <z_arm_mpu_init+0x7c>)
    e640:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e644:	f006 fa79 	bl	14b3a <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e648:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    e64c:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e64e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e650:	f7ff ff56 	bl	e500 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e654:	4b15      	ldr	r3, [pc, #84]	; (e6ac <z_arm_mpu_init+0x84>)
    e656:	4a16      	ldr	r2, [pc, #88]	; (e6b0 <z_arm_mpu_init+0x88>)
    e658:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e65c:	4284      	cmp	r4, r0
    e65e:	d10c      	bne.n	e67a <z_arm_mpu_init+0x52>
	static_regions_num = mpu_config.num_regions;
    e660:	4b14      	ldr	r3, [pc, #80]	; (e6b4 <z_arm_mpu_init+0x8c>)
    e662:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e664:	f7ff ff40 	bl	e4e8 <arm_core_mpu_enable>
	__ASSERT(
    e668:	4b10      	ldr	r3, [pc, #64]	; (e6ac <z_arm_mpu_init+0x84>)
    e66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e66e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e672:	2b10      	cmp	r3, #16
    e674:	d108      	bne.n	e688 <z_arm_mpu_init+0x60>
	return 0;
    e676:	2000      	movs	r0, #0
    e678:	e7e8      	b.n	e64c <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e67a:	6869      	ldr	r1, [r5, #4]
    e67c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e680:	f7ff fe38 	bl	e2f4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e684:	3001      	adds	r0, #1
    e686:	e7e9      	b.n	e65c <z_arm_mpu_init+0x34>
	__ASSERT(
    e688:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    e68c:	4905      	ldr	r1, [pc, #20]	; (e6a4 <z_arm_mpu_init+0x7c>)
    e68e:	4806      	ldr	r0, [pc, #24]	; (e6a8 <z_arm_mpu_init+0x80>)
    e690:	f006 f9cc 	bl	14a2c <printk>
    e694:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    e698:	4802      	ldr	r0, [pc, #8]	; (e6a4 <z_arm_mpu_init+0x7c>)
    e69a:	f006 fa4e 	bl	14b3a <assert_post_action>
    e69e:	e7ea      	b.n	e676 <z_arm_mpu_init+0x4e>
    e6a0:	00015704 	.word	0x00015704
    e6a4:	00016430 	.word	0x00016430
    e6a8:	00015a05 	.word	0x00015a05
    e6ac:	e000ed00 	.word	0xe000ed00
    e6b0:	0044ffaa 	.word	0x0044ffaa
    e6b4:	2000144c 	.word	0x2000144c

0000e6b8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e6b8:	4b01      	ldr	r3, [pc, #4]	; (e6c0 <__stdout_hook_install+0x8>)
    e6ba:	6018      	str	r0, [r3, #0]
}
    e6bc:	4770      	bx	lr
    e6be:	bf00      	nop
    e6c0:	20000024 	.word	0x20000024

0000e6c4 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
    e6c4:	b510      	push	{r4, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    e6c6:	482a      	ldr	r0, [pc, #168]	; (e770 <thingy91_board_init+0xac>)
    e6c8:	f7fe fdb6 	bl	d238 <adp536x_init>
	if (err) {
    e6cc:	4604      	mov	r4, r0
    e6ce:	b158      	cbz	r0, e6e8 <thingy91_board_init+0x24>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
    e6d0:	2145      	movs	r1, #69	; 0x45
    e6d2:	4602      	mov	r2, r0
    e6d4:	4827      	ldr	r0, [pc, #156]	; (e774 <thingy91_board_init+0xb0>)
		LOG_ERR("Could not enable charging: %d\n", err);
    e6d6:	f006 fa43 	bl	14b60 <z_log_minimal_printk>
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
    e6da:	4622      	mov	r2, r4
    e6dc:	2145      	movs	r1, #69	; 0x45
    e6de:	4826      	ldr	r0, [pc, #152]	; (e778 <thingy91_board_init+0xb4>)
    e6e0:	f006 fa3e 	bl	14b60 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
    e6e4:	4620      	mov	r0, r4
    e6e6:	bd10      	pop	{r4, pc}
	err = adp536x_buck_1v8_set();
    e6e8:	f006 fa64 	bl	14bb4 <adp536x_buck_1v8_set>
	if (err) {
    e6ec:	4604      	mov	r4, r0
    e6ee:	b118      	cbz	r0, e6f8 <thingy91_board_init+0x34>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
    e6f0:	4602      	mov	r2, r0
    e6f2:	2145      	movs	r1, #69	; 0x45
    e6f4:	4821      	ldr	r0, [pc, #132]	; (e77c <thingy91_board_init+0xb8>)
    e6f6:	e7ee      	b.n	e6d6 <thingy91_board_init+0x12>
	err = adp536x_buckbst_3v3_set();
    e6f8:	f006 fa68 	bl	14bcc <adp536x_buckbst_3v3_set>
	if (err) {
    e6fc:	4604      	mov	r4, r0
    e6fe:	b118      	cbz	r0, e708 <thingy91_board_init+0x44>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
    e700:	4602      	mov	r2, r0
    e702:	2145      	movs	r1, #69	; 0x45
    e704:	481e      	ldr	r0, [pc, #120]	; (e780 <thingy91_board_init+0xbc>)
    e706:	e7e6      	b.n	e6d6 <thingy91_board_init+0x12>
	err = adp536x_buckbst_enable(true);
    e708:	2001      	movs	r0, #1
    e70a:	f006 fa64 	bl	14bd6 <adp536x_buckbst_enable>
	if (err) {
    e70e:	4604      	mov	r4, r0
    e710:	b118      	cbz	r0, e71a <thingy91_board_init+0x56>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
    e712:	4602      	mov	r2, r0
    e714:	2145      	movs	r1, #69	; 0x45
    e716:	481b      	ldr	r0, [pc, #108]	; (e784 <thingy91_board_init+0xc0>)
    e718:	e7dd      	b.n	e6d6 <thingy91_board_init+0x12>
	err = adp536x_buck_discharge_set(true);
    e71a:	2001      	movs	r0, #1
    e71c:	f006 fa4f 	bl	14bbe <adp536x_buck_discharge_set>
	if (err) {
    e720:	4604      	mov	r4, r0
    e722:	2800      	cmp	r0, #0
    e724:	d1d9      	bne.n	e6da <thingy91_board_init+0x16>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    e726:	2007      	movs	r0, #7
    e728:	f006 fa32 	bl	14b90 <adp536x_vbus_current_set>
	if (err) {
    e72c:	4604      	mov	r4, r0
    e72e:	b118      	cbz	r0, e738 <thingy91_board_init+0x74>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
    e730:	4602      	mov	r2, r0
    e732:	2145      	movs	r1, #69	; 0x45
    e734:	4814      	ldr	r0, [pc, #80]	; (e788 <thingy91_board_init+0xc4>)
    e736:	e7ce      	b.n	e6d6 <thingy91_board_init+0x12>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    e738:	201f      	movs	r0, #31
    e73a:	f006 fa23 	bl	14b84 <adp536x_charger_current_set>
	if (err) {
    e73e:	4604      	mov	r4, r0
    e740:	b118      	cbz	r0, e74a <thingy91_board_init+0x86>
		LOG_ERR("Could not set charging current, error: %d\n", err);
    e742:	4602      	mov	r2, r0
    e744:	2145      	movs	r1, #69	; 0x45
    e746:	4811      	ldr	r0, [pc, #68]	; (e78c <thingy91_board_init+0xc8>)
    e748:	e7c5      	b.n	e6d6 <thingy91_board_init+0x12>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    e74a:	2007      	movs	r0, #7
    e74c:	f006 fa2b 	bl	14ba6 <adp536x_oc_chg_current_set>
	if (err) {
    e750:	4604      	mov	r4, r0
    e752:	b118      	cbz	r0, e75c <thingy91_board_init+0x98>
		LOG_ERR("Could not set charge current protection, error: %d\n",
    e754:	4602      	mov	r2, r0
    e756:	2145      	movs	r1, #69	; 0x45
    e758:	480d      	ldr	r0, [pc, #52]	; (e790 <thingy91_board_init+0xcc>)
    e75a:	e7bc      	b.n	e6d6 <thingy91_board_init+0x12>
	err = adp536x_charging_enable(true);
    e75c:	2001      	movs	r0, #1
    e75e:	f006 fa1d 	bl	14b9c <adp536x_charging_enable>
	if (err) {
    e762:	4604      	mov	r4, r0
    e764:	2800      	cmp	r0, #0
    e766:	d0bd      	beq.n	e6e4 <thingy91_board_init+0x20>
		LOG_ERR("Could not enable charging: %d\n", err);
    e768:	4602      	mov	r2, r0
    e76a:	2145      	movs	r1, #69	; 0x45
    e76c:	4809      	ldr	r0, [pc, #36]	; (e794 <thingy91_board_init+0xd0>)
    e76e:	e7b2      	b.n	e6d6 <thingy91_board_init+0x12>
    e770:	00016476 	.word	0x00016476
    e774:	0001647c 	.word	0x0001647c
    e778:	000165fd 	.word	0x000165fd
    e77c:	000164aa 	.word	0x000164aa
    e780:	000164d7 	.word	0x000164d7
    e784:	0001650a 	.word	0x0001650a
    e788:	0001653e 	.word	0x0001653e
    e78c:	00016570 	.word	0x00016570
    e790:	000165a0 	.word	0x000165a0
    e794:	000165d9 	.word	0x000165d9

0000e798 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e798:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e79a:	2340      	movs	r3, #64	; 0x40
{
    e79c:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e79e:	490a      	ldr	r1, [pc, #40]	; (e7c8 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e7a0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    e7a2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e7a4:	1149      	asrs	r1, r1, #5
{
    e7a6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e7a8:	4623      	mov	r3, r4
    e7aa:	4a08      	ldr	r2, [pc, #32]	; (e7cc <onoff_start+0x34>)
    e7ac:	4808      	ldr	r0, [pc, #32]	; (e7d0 <onoff_start+0x38>)
    e7ae:	f006 fafd 	bl	14dac <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    e7b2:	1e01      	subs	r1, r0, #0
    e7b4:	da05      	bge.n	e7c2 <onoff_start+0x2a>
		notify(mgr, err);
    e7b6:	4628      	mov	r0, r5
    e7b8:	4623      	mov	r3, r4
	}
}
    e7ba:	b003      	add	sp, #12
    e7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    e7c0:	4718      	bx	r3
}
    e7c2:	b003      	add	sp, #12
    e7c4:	bd30      	pop	{r4, r5, pc}
    e7c6:	bf00      	nop
    e7c8:	2000097c 	.word	0x2000097c
    e7cc:	00014e17 	.word	0x00014e17
    e7d0:	00015290 	.word	0x00015290

0000e7d4 <get_status>:
{
    e7d4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e7d6:	b2cc      	uxtb	r4, r1
    e7d8:	2c01      	cmp	r4, #1
{
    e7da:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e7dc:	d908      	bls.n	e7f0 <get_status+0x1c>
    e7de:	4908      	ldr	r1, [pc, #32]	; (e800 <get_status+0x2c>)
    e7e0:	4808      	ldr	r0, [pc, #32]	; (e804 <get_status+0x30>)
    e7e2:	2279      	movs	r2, #121	; 0x79
    e7e4:	f006 f922 	bl	14a2c <printk>
    e7e8:	2179      	movs	r1, #121	; 0x79
    e7ea:	4805      	ldr	r0, [pc, #20]	; (e800 <get_status+0x2c>)
    e7ec:	f006 f9a5 	bl	14b3a <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e7f0:	220c      	movs	r2, #12
    e7f2:	692b      	ldr	r3, [r5, #16]
    e7f4:	fb04 3302 	mla	r3, r4, r2, r3
    e7f8:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    e7fa:	f000 0007 	and.w	r0, r0, #7
    e7fe:	bd38      	pop	{r3, r4, r5, pc}
    e800:	00016635 	.word	0x00016635
    e804:	00015a05 	.word	0x00015a05

0000e808 <stop>:
{
    e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e80a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e80c:	2c01      	cmp	r4, #1
{
    e80e:	4605      	mov	r5, r0
    e810:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    e812:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e814:	d90a      	bls.n	e82c <stop+0x24>
    e816:	4918      	ldr	r1, [pc, #96]	; (e878 <stop+0x70>)
    e818:	4818      	ldr	r0, [pc, #96]	; (e87c <stop+0x74>)
    e81a:	f240 124d 	movw	r2, #333	; 0x14d
    e81e:	f006 f905 	bl	14a2c <printk>
    e822:	f240 114d 	movw	r1, #333	; 0x14d
    e826:	4814      	ldr	r0, [pc, #80]	; (e878 <stop+0x70>)
    e828:	f006 f987 	bl	14b3a <assert_post_action>
	__asm__ volatile(
    e82c:	f04f 0320 	mov.w	r3, #32
    e830:	f3ef 8211 	mrs	r2, BASEPRI
    e834:	f383 8812 	msr	BASEPRI_MAX, r3
    e838:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e83c:	210c      	movs	r1, #12
    e83e:	fb01 6304 	mla	r3, r1, r4, r6
    e842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e844:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e848:	d008      	beq.n	e85c <stop+0x54>
    e84a:	429f      	cmp	r7, r3
    e84c:	d006      	beq.n	e85c <stop+0x54>
	__asm__ volatile(
    e84e:	f382 8811 	msr	BASEPRI, r2
    e852:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    e856:	f04f 30ff 	mov.w	r0, #4294967295
}
    e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e85c:	2301      	movs	r3, #1
    e85e:	434c      	muls	r4, r1
    e860:	4426      	add	r6, r4
    e862:	64b3      	str	r3, [r6, #72]	; 0x48
    e864:	f382 8811 	msr	BASEPRI, r2
    e868:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    e86c:	686b      	ldr	r3, [r5, #4]
    e86e:	4423      	add	r3, r4
    e870:	685b      	ldr	r3, [r3, #4]
    e872:	4798      	blx	r3
	return 0;
    e874:	2000      	movs	r0, #0
    e876:	e7f0      	b.n	e85a <stop+0x52>
    e878:	00016635 	.word	0x00016635
    e87c:	00015a05 	.word	0x00015a05

0000e880 <onoff_stop>:
{
    e880:	b570      	push	{r4, r5, r6, lr}
    e882:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e884:	4906      	ldr	r1, [pc, #24]	; (e8a0 <onoff_stop+0x20>)
{
    e886:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e888:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e88a:	1149      	asrs	r1, r1, #5
    e88c:	2240      	movs	r2, #64	; 0x40
    e88e:	4805      	ldr	r0, [pc, #20]	; (e8a4 <onoff_stop+0x24>)
    e890:	f7ff ffba 	bl	e808 <stop>
	notify(mgr, res);
    e894:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e896:	4601      	mov	r1, r0
	notify(mgr, res);
    e898:	4620      	mov	r0, r4
}
    e89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    e89e:	4718      	bx	r3
    e8a0:	2000097c 	.word	0x2000097c
    e8a4:	00015290 	.word	0x00015290

0000e8a8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    e8a8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e8aa:	2200      	movs	r2, #0
    e8ac:	2101      	movs	r1, #1
{
    e8ae:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e8b0:	2005      	movs	r0, #5
    e8b2:	f7ff f85d 	bl	d970 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    e8b6:	2005      	movs	r0, #5
    e8b8:	f7ff f83e 	bl	d938 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    e8bc:	480f      	ldr	r0, [pc, #60]	; (e8fc <clk_init+0x54>)
    e8be:	f000 fe0d 	bl	f4dc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e8c2:	4b0f      	ldr	r3, [pc, #60]	; (e900 <clk_init+0x58>)
    e8c4:	4298      	cmp	r0, r3
    e8c6:	d115      	bne.n	e8f4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e8c8:	f000 fe28 	bl	f51c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    e8cc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    e8ce:	490d      	ldr	r1, [pc, #52]	; (e904 <clk_init+0x5c>)
    e8d0:	4630      	mov	r0, r6
    e8d2:	f006 f8b8 	bl	14a46 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    e8d6:	2800      	cmp	r0, #0
    e8d8:	db0b      	blt.n	e8f2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e8da:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    e8dc:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e8de:	4909      	ldr	r1, [pc, #36]	; (e904 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e8e0:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e8e2:	f104 0020 	add.w	r0, r4, #32
    e8e6:	f006 f8ae 	bl	14a46 <onoff_manager_init>
		if (err < 0) {
    e8ea:	2800      	cmp	r0, #0
    e8ec:	db01      	blt.n	e8f2 <clk_init+0x4a>
	}

	return 0;
    e8ee:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e8f0:	6565      	str	r5, [r4, #84]	; 0x54
}
    e8f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    e8f4:	f06f 0004 	mvn.w	r0, #4
    e8f8:	e7fb      	b.n	e8f2 <clk_init+0x4a>
    e8fa:	bf00      	nop
    e8fc:	0000e93d 	.word	0x0000e93d
    e900:	0bad0000 	.word	0x0bad0000
    e904:	0001572c 	.word	0x0001572c

0000e908 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    e908:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    e90a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    e90c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    e90e:	434b      	muls	r3, r1
    e910:	4808      	ldr	r0, [pc, #32]	; (e934 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    e912:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    e914:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    e916:	3348      	adds	r3, #72	; 0x48
    e918:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    e91a:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    e91e:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    e920:	f006 fa31 	bl	14d86 <set_on_state>
	if (callback) {
    e924:	b12d      	cbz	r5, e932 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e926:	4632      	mov	r2, r6
    e928:	462b      	mov	r3, r5
}
    e92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    e92e:	4802      	ldr	r0, [pc, #8]	; (e938 <clkstarted_handle.constprop.0+0x30>)
    e930:	4718      	bx	r3
}
    e932:	bd70      	pop	{r4, r5, r6, pc}
    e934:	2000097c 	.word	0x2000097c
    e938:	00015290 	.word	0x00015290

0000e93c <clock_event_handler>:
	switch (event) {
    e93c:	2801      	cmp	r0, #1
{
    e93e:	b508      	push	{r3, lr}
	switch (event) {
    e940:	d006      	beq.n	e950 <clock_event_handler+0x14>
    e942:	2803      	cmp	r0, #3
    e944:	d008      	beq.n	e958 <clock_event_handler+0x1c>
    e946:	b9a0      	cbnz	r0, e972 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    e948:	4b0f      	ldr	r3, [pc, #60]	; (e988 <clock_event_handler+0x4c>)
    e94a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e94c:	075b      	lsls	r3, r3, #29
    e94e:	d119      	bne.n	e984 <clock_event_handler+0x48>
}
    e950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e954:	f7ff bfd8 	b.w	e908 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    e958:	490c      	ldr	r1, [pc, #48]	; (e98c <clock_event_handler+0x50>)
    e95a:	f240 225e 	movw	r2, #606	; 0x25e
    e95e:	480c      	ldr	r0, [pc, #48]	; (e990 <clock_event_handler+0x54>)
    e960:	f006 f864 	bl	14a2c <printk>
    e964:	f240 215e 	movw	r1, #606	; 0x25e
}
    e968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    e96c:	4807      	ldr	r0, [pc, #28]	; (e98c <clock_event_handler+0x50>)
    e96e:	f006 b8e4 	b.w	14b3a <assert_post_action>
    e972:	4906      	ldr	r1, [pc, #24]	; (e98c <clock_event_handler+0x50>)
    e974:	f240 2262 	movw	r2, #610	; 0x262
    e978:	4805      	ldr	r0, [pc, #20]	; (e990 <clock_event_handler+0x54>)
    e97a:	f006 f857 	bl	14a2c <printk>
    e97e:	f240 2162 	movw	r1, #610	; 0x262
    e982:	e7f1      	b.n	e968 <clock_event_handler+0x2c>
}
    e984:	bd08      	pop	{r3, pc}
    e986:	bf00      	nop
    e988:	2000097c 	.word	0x2000097c
    e98c:	00016635 	.word	0x00016635
    e990:	00015a05 	.word	0x00015a05

0000e994 <generic_hfclk_start>:
{
    e994:	b508      	push	{r3, lr}
	__asm__ volatile(
    e996:	f04f 0320 	mov.w	r3, #32
    e99a:	f3ef 8111 	mrs	r1, BASEPRI
    e99e:	f383 8812 	msr	BASEPRI_MAX, r3
    e9a2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    e9a6:	4a12      	ldr	r2, [pc, #72]	; (e9f0 <generic_hfclk_start+0x5c>)
    e9a8:	6813      	ldr	r3, [r2, #0]
    e9aa:	f043 0002 	orr.w	r0, r3, #2
    e9ae:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    e9b0:	07da      	lsls	r2, r3, #31
    e9b2:	d408      	bmi.n	e9c6 <generic_hfclk_start+0x32>
	__asm__ volatile(
    e9b4:	f381 8811 	msr	BASEPRI, r1
    e9b8:	f3bf 8f6f 	isb	sy
}
    e9bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    e9c0:	2001      	movs	r0, #1
    e9c2:	f000 bdc9 	b.w	f558 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e9c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e9ca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e9ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    e9d2:	07d3      	lsls	r3, r2, #31
    e9d4:	d5ee      	bpl.n	e9b4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    e9d6:	4807      	ldr	r0, [pc, #28]	; (e9f4 <generic_hfclk_start+0x60>)
    e9d8:	f006 f9d5 	bl	14d86 <set_on_state>
    e9dc:	f381 8811 	msr	BASEPRI, r1
    e9e0:	f3bf 8f6f 	isb	sy
}
    e9e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    e9e8:	2000      	movs	r0, #0
    e9ea:	f7ff bf8d 	b.w	e908 <clkstarted_handle.constprop.0>
    e9ee:	bf00      	nop
    e9f0:	200009d4 	.word	0x200009d4
    e9f4:	200009c4 	.word	0x200009c4

0000e9f8 <api_blocking_start>:
{
    e9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e9fa:	2200      	movs	r2, #0
    e9fc:	2301      	movs	r3, #1
    e9fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ea02:	466b      	mov	r3, sp
    ea04:	4a08      	ldr	r2, [pc, #32]	; (ea28 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ea06:	f8cd d000 	str.w	sp, [sp]
    ea0a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ea0e:	f006 f9fb 	bl	14e08 <api_start>
	if (err < 0) {
    ea12:	2800      	cmp	r0, #0
    ea14:	db05      	blt.n	ea22 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    ea16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ea1a:	2300      	movs	r3, #0
    ea1c:	4668      	mov	r0, sp
    ea1e:	f001 ffcf 	bl	109c0 <z_impl_k_sem_take>
}
    ea22:	b005      	add	sp, #20
    ea24:	f85d fb04 	ldr.w	pc, [sp], #4
    ea28:	00014e35 	.word	0x00014e35

0000ea2c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ea2c:	4b07      	ldr	r3, [pc, #28]	; (ea4c <generic_hfclk_stop+0x20>)
    ea2e:	e8d3 2fef 	ldaex	r2, [r3]
    ea32:	f022 0102 	bic.w	r1, r2, #2
    ea36:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ea3a:	2800      	cmp	r0, #0
    ea3c:	d1f7      	bne.n	ea2e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    ea3e:	07d3      	lsls	r3, r2, #31
    ea40:	d402      	bmi.n	ea48 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ea42:	2001      	movs	r0, #1
    ea44:	f000 bdda 	b.w	f5fc <nrfx_clock_stop>
}
    ea48:	4770      	bx	lr
    ea4a:	bf00      	nop
    ea4c:	200009d4 	.word	0x200009d4

0000ea50 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    ea50:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    ea52:	4808      	ldr	r0, [pc, #32]	; (ea74 <uart_console_init+0x24>)
    ea54:	4b08      	ldr	r3, [pc, #32]	; (ea78 <uart_console_init+0x28>)
    ea56:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    ea58:	f006 fb7d 	bl	15156 <z_device_ready>
    ea5c:	b138      	cbz	r0, ea6e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    ea5e:	4807      	ldr	r0, [pc, #28]	; (ea7c <uart_console_init+0x2c>)
    ea60:	f7ff fe2a 	bl	e6b8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    ea64:	4805      	ldr	r0, [pc, #20]	; (ea7c <uart_console_init+0x2c>)
    ea66:	f7fd fe75 	bl	c754 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    ea6a:	2000      	movs	r0, #0
}
    ea6c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    ea6e:	f06f 0012 	mvn.w	r0, #18
    ea72:	e7fb      	b.n	ea6c <uart_console_init+0x1c>
    ea74:	000152d8 	.word	0x000152d8
    ea78:	200009d8 	.word	0x200009d8
    ea7c:	0000ea81 	.word	0x0000ea81

0000ea80 <console_out>:
	if ('\n' == c) {
    ea80:	280a      	cmp	r0, #10
{
    ea82:	b538      	push	{r3, r4, r5, lr}
    ea84:	4604      	mov	r4, r0
    ea86:	4d07      	ldr	r5, [pc, #28]	; (eaa4 <console_out+0x24>)
	if ('\n' == c) {
    ea88:	d104      	bne.n	ea94 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    ea8a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ea8c:	6883      	ldr	r3, [r0, #8]
    ea8e:	210d      	movs	r1, #13
    ea90:	685b      	ldr	r3, [r3, #4]
    ea92:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    ea94:	6828      	ldr	r0, [r5, #0]
    ea96:	6883      	ldr	r3, [r0, #8]
    ea98:	b2e1      	uxtb	r1, r4
    ea9a:	685b      	ldr	r3, [r3, #4]
    ea9c:	4798      	blx	r3
}
    ea9e:	4620      	mov	r0, r4
    eaa0:	bd38      	pop	{r3, r4, r5, pc}
    eaa2:	bf00      	nop
    eaa4:	200009d8 	.word	0x200009d8

0000eaa8 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    eaa8:	b508      	push	{r3, lr}
	return dev->config;
    eaaa:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    eaac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    eab0:	f001 fa1e 	bl	fef0 <nrfx_twi_twim_bus_recover>
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    eab4:	4b03      	ldr	r3, [pc, #12]	; (eac4 <i2c_nrfx_twim_recover_bus+0x1c>)
    eab6:	4298      	cmp	r0, r3
}
    eab8:	bf14      	ite	ne
    eaba:	f06f 000f 	mvnne.w	r0, #15
    eabe:	2000      	moveq	r0, #0
    eac0:	bd08      	pop	{r3, pc}
    eac2:	bf00      	nop
    eac4:	0bad0000 	.word	0x0bad0000

0000eac8 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    eac8:	07ca      	lsls	r2, r1, #31
{
    eaca:	b508      	push	{r3, lr}
	return dev->config;
    eacc:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    eace:	d409      	bmi.n	eae4 <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(dev_config)) {
    ead0:	f3c1 0242 	ubfx	r2, r1, #1, #3
    ead4:	2a01      	cmp	r2, #1
    ead6:	d008      	beq.n	eaea <i2c_nrfx_twim_configure+0x22>
    ead8:	2a02      	cmp	r2, #2
    eada:	d00f      	beq.n	eafc <i2c_nrfx_twim_configure+0x34>
		LOG_ERR("unsupported speed");
    eadc:	2145      	movs	r1, #69	; 0x45
    eade:	4809      	ldr	r0, [pc, #36]	; (eb04 <i2c_nrfx_twim_configure+0x3c>)
    eae0:	f006 f83e 	bl	14b60 <z_log_minimal_printk>
		return -EINVAL;
    eae4:	f06f 0015 	mvn.w	r0, #21
    eae8:	e007      	b.n	eafa <i2c_nrfx_twim_configure+0x32>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    eaea:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    eaee:	681b      	ldr	r3, [r3, #0]
    eaf0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    eaf4:	6903      	ldr	r3, [r0, #16]
	return 0;
    eaf6:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    eaf8:	6259      	str	r1, [r3, #36]	; 0x24
}
    eafa:	bd08      	pop	{r3, pc}
    eafc:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    eb00:	681b      	ldr	r3, [r3, #0]
    eb02:	e7f5      	b.n	eaf0 <i2c_nrfx_twim_configure+0x28>
    eb04:	00016690 	.word	0x00016690

0000eb08 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    eb08:	b510      	push	{r4, lr}
    eb0a:	4604      	mov	r4, r0
    eb0c:	2200      	movs	r2, #0
    eb0e:	2101      	movs	r1, #1
    eb10:	200a      	movs	r0, #10
    eb12:	f7fe ff2d 	bl	d970 <z_arm_irq_priority_set>
	return dev->config;
    eb16:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    eb18:	6923      	ldr	r3, [r4, #16]
    eb1a:	4a09      	ldr	r2, [pc, #36]	; (eb40 <twim_2_init+0x38>)
    eb1c:	f100 0108 	add.w	r1, r0, #8
    eb20:	f000 fe26 	bl	f770 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    eb24:	4b07      	ldr	r3, [pc, #28]	; (eb44 <twim_2_init+0x3c>)
    eb26:	4298      	cmp	r0, r3
    eb28:	d007      	beq.n	eb3a <twim_2_init+0x32>
		LOG_ERR("Failed to initialize device: %s",
    eb2a:	4807      	ldr	r0, [pc, #28]	; (eb48 <twim_2_init+0x40>)
    eb2c:	2145      	movs	r1, #69	; 0x45
    eb2e:	6822      	ldr	r2, [r4, #0]
    eb30:	f006 f816 	bl	14b60 <z_log_minimal_printk>
		return -EBUSY;
    eb34:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
    eb38:	bd10      	pop	{r4, pc}
	return 0;
    eb3a:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
    eb3c:	e7fc      	b.n	eb38 <twim_2_init+0x30>
    eb3e:	bf00      	nop
    eb40:	0000eb4d 	.word	0x0000eb4d
    eb44:	0bad0000 	.word	0x0bad0000
    eb48:	000166a7 	.word	0x000166a7

0000eb4c <event_handler>:
	switch (p_event->type) {
    eb4c:	7803      	ldrb	r3, [r0, #0]
    eb4e:	2b01      	cmp	r3, #1
    eb50:	d008      	beq.n	eb64 <event_handler+0x18>
    eb52:	2b02      	cmp	r3, #2
    eb54:	d008      	beq.n	eb68 <event_handler+0x1c>
    eb56:	b94b      	cbnz	r3, eb6c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    eb58:	4b05      	ldr	r3, [pc, #20]	; (eb70 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    eb5a:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    eb5c:	f101 0010 	add.w	r0, r1, #16
    eb60:	f001 bef8 	b.w	10954 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    eb64:	4b03      	ldr	r3, [pc, #12]	; (eb74 <event_handler+0x28>)
    eb66:	e7f8      	b.n	eb5a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    eb68:	4b03      	ldr	r3, [pc, #12]	; (eb78 <event_handler+0x2c>)
    eb6a:	e7f6      	b.n	eb5a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    eb6c:	4b03      	ldr	r3, [pc, #12]	; (eb7c <event_handler+0x30>)
    eb6e:	e7f4      	b.n	eb5a <event_handler+0xe>
    eb70:	0bad0000 	.word	0x0bad0000
    eb74:	0bae0001 	.word	0x0bae0001
    eb78:	0bae0002 	.word	0x0bae0002
    eb7c:	0bad0001 	.word	0x0bad0001

0000eb80 <i2c_nrfx_twim_transfer>:
{
    eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb84:	461d      	mov	r5, r3
	return dev->config;
    eb86:	6846      	ldr	r6, [r0, #4]
{
    eb88:	b08d      	sub	sp, #52	; 0x34
	return dev->data;
    eb8a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    eb8e:	8b33      	ldrh	r3, [r6, #24]
{
    eb90:	9203      	str	r2, [sp, #12]
    eb92:	4680      	mov	r8, r0
    eb94:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    eb96:	2214      	movs	r2, #20
    eb98:	2100      	movs	r1, #0
    eb9a:	a807      	add	r0, sp, #28
	uint8_t *msg_buf = dev_data->msg_buf;
    eb9c:	f8d9 a028 	ldr.w	sl, [r9, #40]	; 0x28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    eba0:	9302      	str	r3, [sp, #8]
	nrfx_twim_xfer_desc_t cur_xfer = {
    eba2:	f006 f8e4 	bl	14d6e <memset>
    eba6:	f88d 501d 	strb.w	r5, [sp, #29]
	return z_impl_k_sem_take(sem, timeout);
    ebaa:	f04f 32ff 	mov.w	r2, #4294967295
    ebae:	f04f 33ff 	mov.w	r3, #4294967295
    ebb2:	4648      	mov	r0, r9
    ebb4:	f001 ff04 	bl	109c0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    ebb8:	f109 0310 	add.w	r3, r9, #16
    ebbc:	9304      	str	r3, [sp, #16]
	for (size_t i = 0; i < num_msgs; i++) {
    ebbe:	2700      	movs	r7, #0
    ebc0:	2200      	movs	r2, #0
    ebc2:	2300      	movs	r3, #0
    ebc4:	f109 0010 	add.w	r0, r9, #16
    ebc8:	f001 fefa 	bl	109c0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    ebcc:	4630      	mov	r0, r6
    ebce:	f000 fe3f 	bl	f850 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
    ebd2:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    ebd4:	9b03      	ldr	r3, [sp, #12]
    ebd6:	429f      	cmp	r7, r3
    ebd8:	d301      	bcc.n	ebde <i2c_nrfx_twim_transfer+0x5e>
    ebda:	2400      	movs	r4, #0
    ebdc:	e028      	b.n	ec30 <i2c_nrfx_twim_transfer+0xb0>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    ebde:	7a20      	ldrb	r0, [r4, #8]
    ebe0:	0702      	lsls	r2, r0, #28
    ebe2:	f100 80b3 	bmi.w	ed4c <i2c_nrfx_twim_transfer+0x1cc>
				&& ((msgs[i].flags & I2C_MSG_READ)
    ebe6:	9b03      	ldr	r3, [sp, #12]
		bool concat_next = ((i + 1) < num_msgs)
    ebe8:	f107 0b01 	add.w	fp, r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    ebec:	459b      	cmp	fp, r3
    ebee:	d20a      	bcs.n	ec06 <i2c_nrfx_twim_transfer+0x86>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    ebf0:	0783      	lsls	r3, r0, #30
    ebf2:	d408      	bmi.n	ec06 <i2c_nrfx_twim_transfer+0x86>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    ebf4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    ebf6:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    ebfa:	f002 0201 	and.w	r2, r2, #1
    ebfe:	f003 0304 	and.w	r3, r3, #4
    ec02:	431a      	orrs	r2, r3
    ec04:	d01e      	beq.n	ec44 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
    ec06:	b395      	cbz	r5, ec6e <i2c_nrfx_twim_transfer+0xee>
		bool concat_next = ((i + 1) < num_msgs)
    ec08:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    ec0a:	6862      	ldr	r2, [r4, #4]
    ec0c:	f8dd c008 	ldr.w	ip, [sp, #8]
    ec10:	18a9      	adds	r1, r5, r2
    ec12:	4561      	cmp	r1, ip
    ec14:	d918      	bls.n	ec48 <i2c_nrfx_twim_transfer+0xc8>
				LOG_ERR("Need to use concatenation buffer and "
    ec16:	f8d8 3000 	ldr.w	r3, [r8]
    ec1a:	2145      	movs	r1, #69	; 0x45
    ec1c:	9301      	str	r3, [sp, #4]
    ec1e:	484d      	ldr	r0, [pc, #308]	; (ed54 <i2c_nrfx_twim_transfer+0x1d4>)
    ec20:	4613      	mov	r3, r2
    ec22:	f8cd c000 	str.w	ip, [sp]
    ec26:	462a      	mov	r2, r5
    ec28:	f005 ff9a 	bl	14b60 <z_log_minimal_printk>
				ret = -ENOSPC;
    ec2c:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
    ec30:	4630      	mov	r0, r6
    ec32:	f000 fe35 	bl	f8a0 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    ec36:	4648      	mov	r0, r9
    ec38:	f001 fe8c 	bl	10954 <z_impl_k_sem_give>
}
    ec3c:	4620      	mov	r0, r4
    ec3e:	b00d      	add	sp, #52	; 0x34
    ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
    ec44:	2301      	movs	r3, #1
    ec46:	e7e0      	b.n	ec0a <i2c_nrfx_twim_transfer+0x8a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    ec48:	07c1      	lsls	r1, r0, #31
    ec4a:	d406      	bmi.n	ec5a <i2c_nrfx_twim_transfer+0xda>
				memcpy(msg_buf + msg_buf_used,
    ec4c:	6821      	ldr	r1, [r4, #0]
    ec4e:	eb0a 0005 	add.w	r0, sl, r5
    ec52:	9305      	str	r3, [sp, #20]
    ec54:	f006 f880 	bl	14d58 <memcpy>
    ec58:	9b05      	ldr	r3, [sp, #20]
			msg_buf_used += msgs[i].len;
    ec5a:	6862      	ldr	r2, [r4, #4]
    ec5c:	442a      	add	r2, r5
    ec5e:	b295      	uxth	r5, r2
		if (concat_next) {
    ec60:	2b00      	cmp	r3, #0
    ec62:	d15f      	bne.n	ed24 <i2c_nrfx_twim_transfer+0x1a4>
		if (msg_buf_used == 0) {
    ec64:	b13d      	cbz	r5, ec76 <i2c_nrfx_twim_transfer+0xf6>
			cur_xfer.primary_length = msg_buf_used;
    ec66:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
    ec68:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    ec6c:	e007      	b.n	ec7e <i2c_nrfx_twim_transfer+0xfe>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    ec6e:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    ec70:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    ec74:	d51b      	bpl.n	ecae <i2c_nrfx_twim_transfer+0x12e>
			cur_xfer.p_primary_buf = msgs[i].buf;
    ec76:	2500      	movs	r5, #0
    ec78:	6823      	ldr	r3, [r4, #0]
    ec7a:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    ec7c:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    ec7e:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    ec80:	9308      	str	r3, [sp, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    ec82:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ec86:	f082 0202 	eor.w	r2, r2, #2
    ec8a:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ec8e:	4630      	mov	r0, r6
    ec90:	0152      	lsls	r2, r2, #5
    ec92:	a907      	add	r1, sp, #28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    ec94:	f88d 301c 	strb.w	r3, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ec98:	f000 fe36 	bl	f908 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    ec9c:	4b2e      	ldr	r3, [pc, #184]	; (ed58 <i2c_nrfx_twim_transfer+0x1d8>)
    ec9e:	4298      	cmp	r0, r3
    eca0:	d01b      	beq.n	ecda <i2c_nrfx_twim_transfer+0x15a>
			if (res == NRFX_ERROR_BUSY) {
    eca2:	330b      	adds	r3, #11
    eca4:	4298      	cmp	r0, r3
    eca6:	d12b      	bne.n	ed00 <i2c_nrfx_twim_transfer+0x180>
				ret = -EBUSY;
    eca8:	f06f 040f 	mvn.w	r4, #15
    ecac:	e7c0      	b.n	ec30 <i2c_nrfx_twim_transfer+0xb0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    ecae:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    ecb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ecb6:	d0de      	beq.n	ec76 <i2c_nrfx_twim_transfer+0xf6>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    ecb8:	8b73      	ldrh	r3, [r6, #26]
    ecba:	4293      	cmp	r3, r2
    ecbc:	d208      	bcs.n	ecd0 <i2c_nrfx_twim_transfer+0x150>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    ecbe:	2145      	movs	r1, #69	; 0x45
    ecc0:	f8d8 3000 	ldr.w	r3, [r8]
    ecc4:	4825      	ldr	r0, [pc, #148]	; (ed5c <i2c_nrfx_twim_transfer+0x1dc>)
    ecc6:	f005 ff4b 	bl	14b60 <z_log_minimal_printk>
				ret = -EINVAL;
    ecca:	f06f 0415 	mvn.w	r4, #21
				break;
    ecce:	e7af      	b.n	ec30 <i2c_nrfx_twim_transfer+0xb0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    ecd0:	4650      	mov	r0, sl
    ecd2:	f006 f841 	bl	14d58 <memcpy>
			msg_buf_used = msgs[i].len;
    ecd6:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    ecd8:	e7c4      	b.n	ec64 <i2c_nrfx_twim_transfer+0xe4>
	return z_impl_k_sem_take(sem, timeout);
    ecda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ecde:	2300      	movs	r3, #0
    ece0:	9804      	ldr	r0, [sp, #16]
    ece2:	f001 fe6d 	bl	109c0 <z_impl_k_sem_take>
		if (ret != 0) {
    ece6:	b170      	cbz	r0, ed06 <i2c_nrfx_twim_transfer+0x186>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    ece8:	2145      	movs	r1, #69	; 0x45
    ecea:	463a      	mov	r2, r7
    ecec:	481c      	ldr	r0, [pc, #112]	; (ed60 <i2c_nrfx_twim_transfer+0x1e0>)
    ecee:	f005 ff37 	bl	14b60 <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
    ecf2:	4630      	mov	r0, r6
    ecf4:	f000 fdd4 	bl	f8a0 <nrfx_twim_disable>
    ecf8:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    ecfc:	f001 f8f8 	bl	fef0 <nrfx_twi_twim_bus_recover>
				ret = -EIO;
    ed00:	f06f 0404 	mvn.w	r4, #4
    ed04:	e794      	b.n	ec30 <i2c_nrfx_twim_transfer+0xb0>
		res = dev_data->res;
    ed06:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (res != NRFX_SUCCESS) {
    ed0a:	4b13      	ldr	r3, [pc, #76]	; (ed58 <i2c_nrfx_twim_transfer+0x1d8>)
    ed0c:	429a      	cmp	r2, r3
    ed0e:	d005      	beq.n	ed1c <i2c_nrfx_twim_transfer+0x19c>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    ed10:	463b      	mov	r3, r7
    ed12:	2145      	movs	r1, #69	; 0x45
    ed14:	4813      	ldr	r0, [pc, #76]	; (ed64 <i2c_nrfx_twim_transfer+0x1e4>)
    ed16:	f005 ff23 	bl	14b60 <z_log_minimal_printk>
			break;
    ed1a:	e7f1      	b.n	ed00 <i2c_nrfx_twim_transfer+0x180>
		if ((msgs[i].flags & I2C_MSG_READ)
    ed1c:	7a23      	ldrb	r3, [r4, #8]
    ed1e:	07db      	lsls	r3, r3, #31
    ed20:	d403      	bmi.n	ed2a <i2c_nrfx_twim_transfer+0x1aa>
		msg_buf_used = 0;
    ed22:	2500      	movs	r5, #0
    ed24:	465f      	mov	r7, fp
    ed26:	340c      	adds	r4, #12
    ed28:	e754      	b.n	ebd4 <i2c_nrfx_twim_transfer+0x54>
		    && cur_xfer.p_primary_buf == msg_buf) {
    ed2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed2c:	459a      	cmp	sl, r3
    ed2e:	d1f8      	bne.n	ed22 <i2c_nrfx_twim_transfer+0x1a2>
    ed30:	4627      	mov	r7, r4
    ed32:	e006      	b.n	ed42 <i2c_nrfx_twim_transfer+0x1c2>
				msg_buf_used -= msgs[j].len;
    ed34:	1aa9      	subs	r1, r5, r2
    ed36:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    ed38:	68f8      	ldr	r0, [r7, #12]
    ed3a:	fa1a f181 	uxtah	r1, sl, r1
    ed3e:	f006 f80b 	bl	14d58 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    ed42:	687a      	ldr	r2, [r7, #4]
    ed44:	3f0c      	subs	r7, #12
    ed46:	4295      	cmp	r5, r2
    ed48:	d2f4      	bcs.n	ed34 <i2c_nrfx_twim_transfer+0x1b4>
    ed4a:	e7ea      	b.n	ed22 <i2c_nrfx_twim_transfer+0x1a2>
			ret = -ENOTSUP;
    ed4c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ed50:	e76e      	b.n	ec30 <i2c_nrfx_twim_transfer+0xb0>
    ed52:	bf00      	nop
    ed54:	000166cc 	.word	0x000166cc
    ed58:	0bad0000 	.word	0x0bad0000
    ed5c:	00016761 	.word	0x00016761
    ed60:	000167cc 	.word	0x000167cc
    ed64:	000167fb 	.word	0x000167fb

0000ed68 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ed68:	6802      	ldr	r2, [r0, #0]
{
    ed6a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    ed6c:	0953      	lsrs	r3, r2, #5
{
    ed6e:	4604      	mov	r4, r0
    switch (port)
    ed70:	d104      	bne.n	ed7c <nrf_gpio_pin_port_decode+0x14>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
    ed72:	f04f 33ff 	mov.w	r3, #4294967295
    ed76:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ed78:	07db      	lsls	r3, r3, #31
    ed7a:	d40a      	bmi.n	ed92 <nrf_gpio_pin_port_decode+0x2a>
    ed7c:	490e      	ldr	r1, [pc, #56]	; (edb8 <nrf_gpio_pin_port_decode+0x50>)
    ed7e:	480f      	ldr	r0, [pc, #60]	; (edbc <nrf_gpio_pin_port_decode+0x54>)
    ed80:	f240 2229 	movw	r2, #553	; 0x229
    ed84:	f005 fe52 	bl	14a2c <printk>
    ed88:	f240 2129 	movw	r1, #553	; 0x229
    ed8c:	480a      	ldr	r0, [pc, #40]	; (edb8 <nrf_gpio_pin_port_decode+0x50>)
    ed8e:	f005 fed4 	bl	14b3a <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    ed92:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ed94:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ed98:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    ed9a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ed9c:	d00a      	beq.n	edb4 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
    ed9e:	4906      	ldr	r1, [pc, #24]	; (edb8 <nrf_gpio_pin_port_decode+0x50>)
    eda0:	4806      	ldr	r0, [pc, #24]	; (edbc <nrf_gpio_pin_port_decode+0x54>)
    eda2:	f240 222e 	movw	r2, #558	; 0x22e
    eda6:	f005 fe41 	bl	14a2c <printk>
    edaa:	f240 212e 	movw	r1, #558	; 0x22e
    edae:	4802      	ldr	r0, [pc, #8]	; (edb8 <nrf_gpio_pin_port_decode+0x50>)
    edb0:	f005 fec3 	bl	14b3a <assert_post_action>
}
    edb4:	4802      	ldr	r0, [pc, #8]	; (edc0 <nrf_gpio_pin_port_decode+0x58>)
    edb6:	bd10      	pop	{r4, pc}
    edb8:	00016833 	.word	0x00016833
    edbc:	00015a05 	.word	0x00015a05
    edc0:	50842500 	.word	0x50842500

0000edc4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    edc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    edc6:	794b      	ldrb	r3, [r1, #5]
    edc8:	2b01      	cmp	r3, #1
    edca:	d026      	beq.n	ee1a <uarte_nrfx_configure+0x56>
    edcc:	2b03      	cmp	r3, #3
    edce:	d121      	bne.n	ee14 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    edd0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    edd2:	798b      	ldrb	r3, [r1, #6]
    edd4:	2b03      	cmp	r3, #3
    edd6:	d11d      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    edd8:	79cc      	ldrb	r4, [r1, #7]
    edda:	b10c      	cbz	r4, ede0 <uarte_nrfx_configure+0x1c>
    eddc:	2c01      	cmp	r4, #1
    edde:	d119      	bne.n	ee14 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    ede0:	790a      	ldrb	r2, [r1, #4]
    ede2:	b112      	cbz	r2, edea <uarte_nrfx_configure+0x26>
    ede4:	2a02      	cmp	r2, #2
    ede6:	d115      	bne.n	ee14 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ede8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    edea:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    edec:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    edee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    edf2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    edf4:	d065      	beq.n	eec2 <uarte_nrfx_configure+0xfe>
    edf6:	d82d      	bhi.n	ee54 <uarte_nrfx_configure+0x90>
    edf8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    edfc:	d064      	beq.n	eec8 <uarte_nrfx_configure+0x104>
    edfe:	d816      	bhi.n	ee2e <uarte_nrfx_configure+0x6a>
    ee00:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    ee04:	d062      	beq.n	eecc <uarte_nrfx_configure+0x108>
    ee06:	d80a      	bhi.n	ee1e <uarte_nrfx_configure+0x5a>
    ee08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ee0c:	d061      	beq.n	eed2 <uarte_nrfx_configure+0x10e>
    ee0e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    ee12:	d061      	beq.n	eed8 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    ee14:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ee18:	e052      	b.n	eec0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    ee1a:	2600      	movs	r6, #0
    ee1c:	e7d9      	b.n	edd2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    ee1e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    ee22:	d05c      	beq.n	eede <uarte_nrfx_configure+0x11a>
    ee24:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    ee28:	d1f4      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    ee2a:	4b37      	ldr	r3, [pc, #220]	; (ef08 <uarte_nrfx_configure+0x144>)
    ee2c:	e03c      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee2e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    ee32:	d057      	beq.n	eee4 <uarte_nrfx_configure+0x120>
    ee34:	d807      	bhi.n	ee46 <uarte_nrfx_configure+0x82>
    ee36:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    ee3a:	d055      	beq.n	eee8 <uarte_nrfx_configure+0x124>
    ee3c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    ee40:	d1e8      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    ee42:	4b32      	ldr	r3, [pc, #200]	; (ef0c <uarte_nrfx_configure+0x148>)
    ee44:	e030      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee46:	f647 2712 	movw	r7, #31250	; 0x7a12
    ee4a:	42bb      	cmp	r3, r7
    ee4c:	d1e2      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ee4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ee52:	e029      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee54:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    ee58:	d048      	beq.n	eeec <uarte_nrfx_configure+0x128>
    ee5a:	d813      	bhi.n	ee84 <uarte_nrfx_configure+0xc0>
    ee5c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    ee60:	d047      	beq.n	eef2 <uarte_nrfx_configure+0x12e>
    ee62:	d809      	bhi.n	ee78 <uarte_nrfx_configure+0xb4>
    ee64:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    ee68:	42bb      	cmp	r3, r7
    ee6a:	d044      	beq.n	eef6 <uarte_nrfx_configure+0x132>
    ee6c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    ee70:	d1d0      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    ee72:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    ee76:	e017      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee78:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    ee7c:	d1ca      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    ee7e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    ee82:	e011      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee84:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ee88:	d038      	beq.n	eefc <uarte_nrfx_configure+0x138>
    ee8a:	d808      	bhi.n	ee9e <uarte_nrfx_configure+0xda>
    ee8c:	4f20      	ldr	r7, [pc, #128]	; (ef10 <uarte_nrfx_configure+0x14c>)
    ee8e:	42bb      	cmp	r3, r7
    ee90:	d037      	beq.n	ef02 <uarte_nrfx_configure+0x13e>
    ee92:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    ee96:	d1bd      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    ee98:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    ee9c:	e004      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee9e:	4f1d      	ldr	r7, [pc, #116]	; (ef14 <uarte_nrfx_configure+0x150>)
    eea0:	42bb      	cmp	r3, r7
    eea2:	d1b7      	bne.n	ee14 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    eea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    eea8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    eeac:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    eeae:	4334      	orrs	r4, r6
    eeb0:	4322      	orrs	r2, r4
    eeb2:	3304      	adds	r3, #4
    eeb4:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    eeb6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    eeba:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    eebe:	2000      	movs	r0, #0
}
    eec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    eec2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    eec6:	e7ef      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    eec8:	4b13      	ldr	r3, [pc, #76]	; (ef18 <uarte_nrfx_configure+0x154>)
    eeca:	e7ed      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    eecc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    eed0:	e7ea      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    eed2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    eed6:	e7e7      	b.n	eea8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    eed8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    eedc:	e7e4      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    eede:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    eee2:	e7e1      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    eee4:	4b0d      	ldr	r3, [pc, #52]	; (ef1c <uarte_nrfx_configure+0x158>)
    eee6:	e7df      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    eee8:	4b0d      	ldr	r3, [pc, #52]	; (ef20 <uarte_nrfx_configure+0x15c>)
    eeea:	e7dd      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    eeec:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    eef0:	e7da      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    eef2:	4b0c      	ldr	r3, [pc, #48]	; (ef24 <uarte_nrfx_configure+0x160>)
    eef4:	e7d8      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    eef6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    eefa:	e7d5      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    eefc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    ef00:	e7d2      	b.n	eea8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    ef02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    ef06:	e7cf      	b.n	eea8 <uarte_nrfx_configure+0xe4>
    ef08:	0013b000 	.word	0x0013b000
    ef0c:	004ea000 	.word	0x004ea000
    ef10:	0003d090 	.word	0x0003d090
    ef14:	000f4240 	.word	0x000f4240
    ef18:	00275000 	.word	0x00275000
    ef1c:	0075c000 	.word	0x0075c000
    ef20:	003af000 	.word	0x003af000
    ef24:	013a9000 	.word	0x013a9000

0000ef28 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    ef28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef2a:	4605      	mov	r5, r0
    ef2c:	460f      	mov	r7, r1
	return dev->data;
    ef2e:	6906      	ldr	r6, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    ef30:	f006 f937 	bl	151a2 <k_is_in_isr>
    ef34:	b9b0      	cbnz	r0, ef64 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    ef36:	4b2c      	ldr	r3, [pc, #176]	; (efe8 <uarte_nrfx_poll_out+0xc0>)
    ef38:	781b      	ldrb	r3, [r3, #0]
    ef3a:	b19b      	cbz	r3, ef64 <uarte_nrfx_poll_out+0x3c>
{
    ef3c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ef3e:	6868      	ldr	r0, [r5, #4]
    ef40:	f005 ffaa 	bl	14e98 <is_tx_ready.isra.0>
    ef44:	b9f8      	cbnz	r0, ef86 <uarte_nrfx_poll_out+0x5e>
    ef46:	2001      	movs	r0, #1
    ef48:	f006 f8c6 	bl	150d8 <nrfx_busy_wait>
    ef4c:	3c01      	subs	r4, #1
    ef4e:	d1f6      	bne.n	ef3e <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    ef50:	2100      	movs	r1, #0
    ef52:	2021      	movs	r0, #33	; 0x21
    ef54:	f002 fc18 	bl	11788 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    ef58:	e7f0      	b.n	ef3c <uarte_nrfx_poll_out+0x14>
    ef5a:	f384 8811 	msr	BASEPRI, r4
    ef5e:	f3bf 8f6f 	isb	sy
}
    ef62:	e7f5      	b.n	ef50 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    ef64:	f04f 0320 	mov.w	r3, #32
    ef68:	f3ef 8411 	mrs	r4, BASEPRI
    ef6c:	f383 8812 	msr	BASEPRI_MAX, r3
    ef70:	f3bf 8f6f 	isb	sy
	int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    ef74:	6868      	ldr	r0, [r5, #4]
    ef76:	f005 ff8f 	bl	14e98 <is_tx_ready.isra.0>
    ef7a:	b988      	cbnz	r0, efa0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    ef7c:	f384 8811 	msr	BASEPRI, r4
    ef80:	f3bf 8f6f 	isb	sy
}
    ef84:	e7ee      	b.n	ef64 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    ef86:	f04f 0320 	mov.w	r3, #32
    ef8a:	f3ef 8411 	mrs	r4, BASEPRI
    ef8e:	f383 8812 	msr	BASEPRI_MAX, r3
    ef92:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ef96:	6868      	ldr	r0, [r5, #4]
    ef98:	f005 ff7e 	bl	14e98 <is_tx_ready.isra.0>
    ef9c:	2800      	cmp	r0, #0
    ef9e:	d0dc      	beq.n	ef5a <uarte_nrfx_poll_out+0x32>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    efa0:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    efa2:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    efa6:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    efa8:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    efaa:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    efae:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    efb2:	2200      	movs	r2, #0
    efb4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    efb8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    efbc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    efc0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    efc4:	684a      	ldr	r2, [r1, #4]
    efc6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    efc8:	bf41      	itttt	mi
    efca:	2208      	movmi	r2, #8
    efcc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    efd0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    efd4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    efd8:	2201      	movs	r2, #1
    efda:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    efdc:	f384 8811 	msr	BASEPRI, r4
    efe0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    efe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    efe6:	bf00      	nop
    efe8:	2000145d 	.word	0x2000145d

0000efec <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    efec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    efee:	460f      	mov	r7, r1
    eff0:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    eff2:	b940      	cbnz	r0, f006 <entropy_cc3xx_rng_get_entropy+0x1a>
    eff4:	4918      	ldr	r1, [pc, #96]	; (f058 <entropy_cc3xx_rng_get_entropy+0x6c>)
    eff6:	4819      	ldr	r0, [pc, #100]	; (f05c <entropy_cc3xx_rng_get_entropy+0x70>)
    eff8:	2224      	movs	r2, #36	; 0x24
    effa:	f005 fd17 	bl	14a2c <printk>
    effe:	2124      	movs	r1, #36	; 0x24
    f000:	4815      	ldr	r0, [pc, #84]	; (f058 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f002:	f005 fd9a 	bl	14b3a <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    f006:	b947      	cbnz	r7, f01a <entropy_cc3xx_rng_get_entropy+0x2e>
    f008:	4913      	ldr	r1, [pc, #76]	; (f058 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f00a:	4814      	ldr	r0, [pc, #80]	; (f05c <entropy_cc3xx_rng_get_entropy+0x70>)
    f00c:	2225      	movs	r2, #37	; 0x25
    f00e:	f005 fd0d 	bl	14a2c <printk>
    f012:	2125      	movs	r1, #37	; 0x25
    f014:	4810      	ldr	r0, [pc, #64]	; (f058 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f016:	f005 fd90 	bl	14b3a <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    f01a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    f01e:	2400      	movs	r4, #0
    f020:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    f024:	42a6      	cmp	r6, r4
    f026:	d801      	bhi.n	f02c <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    f028:	b003      	add	sp, #12
    f02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    f02c:	1b33      	subs	r3, r6, r4
    f02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f032:	bf38      	it	cc
    f034:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    f036:	2000      	movs	r0, #0
    f038:	ab01      	add	r3, sp, #4
    f03a:	462a      	mov	r2, r5
    f03c:	1939      	adds	r1, r7, r4
    f03e:	f002 ffa9 	bl	11f94 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    f042:	9b01      	ldr	r3, [sp, #4]
    f044:	42ab      	cmp	r3, r5
    f046:	d103      	bne.n	f050 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    f048:	2800      	cmp	r0, #0
    f04a:	d1ed      	bne.n	f028 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    f04c:	442c      	add	r4, r5
    f04e:	e7e9      	b.n	f024 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    f050:	f06f 0015 	mvn.w	r0, #21
    f054:	e7e8      	b.n	f028 <entropy_cc3xx_rng_get_entropy+0x3c>
    f056:	bf00      	nop
    f058:	00016884 	.word	0x00016884
    f05c:	00015a05 	.word	0x00015a05

0000f060 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    f060:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f064:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    f066:	6919      	ldr	r1, [r3, #16]
{
    f068:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    f06a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    f06e:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    f070:	4908      	ldr	r1, [pc, #32]	; (f094 <elapsed+0x34>)
    f072:	4b09      	ldr	r3, [pc, #36]	; (f098 <elapsed+0x38>)
    f074:	d101      	bne.n	f07a <elapsed+0x1a>
	    || (val1 < val2)) {
    f076:	4282      	cmp	r2, r0
    f078:	d206      	bcs.n	f088 <elapsed+0x28>
		overflow_cyc += last_load;
    f07a:	681a      	ldr	r2, [r3, #0]
    f07c:	680c      	ldr	r4, [r1, #0]
    f07e:	4422      	add	r2, r4
    f080:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    f082:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f086:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    f088:	681b      	ldr	r3, [r3, #0]
    f08a:	680a      	ldr	r2, [r1, #0]
    f08c:	4413      	add	r3, r2
}
    f08e:	1a18      	subs	r0, r3, r0
    f090:	bd10      	pop	{r4, pc}
    f092:	bf00      	nop
    f094:	200009e8 	.word	0x200009e8
    f098:	200009dc 	.word	0x200009dc

0000f09c <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f09c:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    f09e:	2000      	movs	r0, #0
    f0a0:	4b07      	ldr	r3, [pc, #28]	; (f0c0 <sys_clock_driver_init+0x24>)
    f0a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    f0a6:	4b07      	ldr	r3, [pc, #28]	; (f0c4 <sys_clock_driver_init+0x28>)
    f0a8:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    f0aa:	4b07      	ldr	r3, [pc, #28]	; (f0c8 <sys_clock_driver_init+0x2c>)
    f0ac:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    f0ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f0b2:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    f0b4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    f0b6:	691a      	ldr	r2, [r3, #16]
    f0b8:	f042 0207 	orr.w	r2, r2, #7
    f0bc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    f0be:	4770      	bx	lr
    f0c0:	e000ed00 	.word	0xe000ed00
    f0c4:	200009e8 	.word	0x200009e8
    f0c8:	200009dc 	.word	0x200009dc

0000f0cc <sys_clock_isr>:
{
    f0cc:	b508      	push	{r3, lr}
	elapsed();
    f0ce:	f7ff ffc7 	bl	f060 <elapsed>
	cycle_count += overflow_cyc;
    f0d2:	4a09      	ldr	r2, [pc, #36]	; (f0f8 <sys_clock_isr+0x2c>)
    f0d4:	4909      	ldr	r1, [pc, #36]	; (f0fc <sys_clock_isr+0x30>)
    f0d6:	6813      	ldr	r3, [r2, #0]
    f0d8:	6808      	ldr	r0, [r1, #0]
    f0da:	4403      	add	r3, r0
    f0dc:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    f0de:	2100      	movs	r1, #0
    f0e0:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    f0e2:	4a07      	ldr	r2, [pc, #28]	; (f100 <sys_clock_isr+0x34>)
    f0e4:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    f0e6:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    f0e8:	1a18      	subs	r0, r3, r0
    f0ea:	f002 fddf 	bl	11cac <sys_clock_announce>
}
    f0ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    f0f2:	f7fe bd29 	b.w	db48 <z_arm_exc_exit>
    f0f6:	bf00      	nop
    f0f8:	200009dc 	.word	0x200009dc
    f0fc:	200009e4 	.word	0x200009e4
    f100:	200009e0 	.word	0x200009e0

0000f104 <sys_clock_set_timeout>:
{
    f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f106:	4604      	mov	r4, r0
    f108:	4f37      	ldr	r7, [pc, #220]	; (f1e8 <sys_clock_set_timeout+0xe4>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    f10a:	2900      	cmp	r1, #0
    f10c:	d062      	beq.n	f1d4 <sys_clock_set_timeout+0xd0>
    f10e:	1c43      	adds	r3, r0, #1
    f110:	d109      	bne.n	f126 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    f112:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f116:	6913      	ldr	r3, [r2, #16]
    f118:	f023 0301 	bic.w	r3, r3, #1
    f11c:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    f11e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    f122:	603b      	str	r3, [r7, #0]
}
    f124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
    f126:	683e      	ldr	r6, [r7, #0]
	__asm__ volatile(
    f128:	f04f 0320 	mov.w	r3, #32
    f12c:	f3ef 8511 	mrs	r5, BASEPRI
    f130:	f383 8812 	msr	BASEPRI_MAX, r3
    f134:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f138:	482c      	ldr	r0, [pc, #176]	; (f1ec <sys_clock_set_timeout+0xe8>)
    f13a:	f001 fa55 	bl	105e8 <z_spin_lock_valid>
    f13e:	b940      	cbnz	r0, f152 <sys_clock_set_timeout+0x4e>
    f140:	492b      	ldr	r1, [pc, #172]	; (f1f0 <sys_clock_set_timeout+0xec>)
    f142:	482c      	ldr	r0, [pc, #176]	; (f1f4 <sys_clock_set_timeout+0xf0>)
    f144:	2281      	movs	r2, #129	; 0x81
    f146:	f005 fc71 	bl	14a2c <printk>
    f14a:	2181      	movs	r1, #129	; 0x81
    f14c:	4828      	ldr	r0, [pc, #160]	; (f1f0 <sys_clock_set_timeout+0xec>)
    f14e:	f005 fcf4 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
    f152:	4826      	ldr	r0, [pc, #152]	; (f1ec <sys_clock_set_timeout+0xe8>)
    f154:	f001 fa64 	bl	10620 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    f158:	f7ff ff82 	bl	f060 <elapsed>
	val1 = SysTick->VAL;
    f15c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
    f160:	f8df c094 	ldr.w	ip, [pc, #148]	; f1f8 <sys_clock_set_timeout+0xf4>
	val1 = SysTick->VAL;
    f164:	699a      	ldr	r2, [r3, #24]
	cycle_count += pending;
    f166:	f8dc 1000 	ldr.w	r1, [ip]
    f16a:	1843      	adds	r3, r0, r1
	overflow_cyc = 0U;
    f16c:	2000      	movs	r0, #0
    f16e:	4923      	ldr	r1, [pc, #140]	; (f1fc <sys_clock_set_timeout+0xf8>)
    f170:	6008      	str	r0, [r1, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    f172:	4923      	ldr	r1, [pc, #140]	; (f200 <sys_clock_set_timeout+0xfc>)
    f174:	6809      	ldr	r1, [r1, #0]
    f176:	1a59      	subs	r1, r3, r1
	if ((int32_t)unannounced < 0) {
    f178:	4281      	cmp	r1, r0
    f17a:	db32      	blt.n	f1e2 <sys_clock_set_timeout+0xde>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    f17c:	4921      	ldr	r1, [pc, #132]	; (f204 <sys_clock_set_timeout+0x100>)
    f17e:	1e60      	subs	r0, r4, #1
    f180:	4288      	cmp	r0, r1
    f182:	bfa8      	it	ge
    f184:	4608      	movge	r0, r1
    f186:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    f18a:	bfb8      	it	lt
    f18c:	f44f 6080 	movlt.w	r0, #1024	; 0x400
	val2 = SysTick->VAL;
    f190:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
    f194:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
    f196:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
    f198:	698c      	ldr	r4, [r1, #24]
	SysTick->LOAD = last_load - 1;
    f19a:	6148      	str	r0, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    f19c:	2000      	movs	r0, #0
	if (val1 < val2) {
    f19e:	42a2      	cmp	r2, r4
    f1a0:	eba2 0204 	sub.w	r2, r2, r4
		cycle_count += (val1 + (last_load_ - val2));
    f1a4:	bf38      	it	cc
    f1a6:	1992      	addcc	r2, r2, r6
	SysTick->VAL = 0; /* resets timer to last_load */
    f1a8:	6188      	str	r0, [r1, #24]
		cycle_count += (val1 - val2);
    f1aa:	4413      	add	r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1ac:	480f      	ldr	r0, [pc, #60]	; (f1ec <sys_clock_set_timeout+0xe8>)
    f1ae:	f8cc 3000 	str.w	r3, [ip]
    f1b2:	f001 fa27 	bl	10604 <z_spin_unlock_valid>
    f1b6:	b940      	cbnz	r0, f1ca <sys_clock_set_timeout+0xc6>
    f1b8:	490d      	ldr	r1, [pc, #52]	; (f1f0 <sys_clock_set_timeout+0xec>)
    f1ba:	480e      	ldr	r0, [pc, #56]	; (f1f4 <sys_clock_set_timeout+0xf0>)
    f1bc:	22ac      	movs	r2, #172	; 0xac
    f1be:	f005 fc35 	bl	14a2c <printk>
    f1c2:	21ac      	movs	r1, #172	; 0xac
    f1c4:	480a      	ldr	r0, [pc, #40]	; (f1f0 <sys_clock_set_timeout+0xec>)
    f1c6:	f005 fcb8 	bl	14b3a <assert_post_action>
	__asm__ volatile(
    f1ca:	f385 8811 	msr	BASEPRI, r5
    f1ce:	f3bf 8f6f 	isb	sy
    f1d2:	e7a7      	b.n	f124 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f1d4:	4b0b      	ldr	r3, [pc, #44]	; (f204 <sys_clock_set_timeout+0x100>)
	uint32_t last_load_ = last_load;
    f1d6:	683e      	ldr	r6, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f1d8:	f1b0 3fff 	cmp.w	r0, #4294967295
    f1dc:	bf08      	it	eq
    f1de:	461c      	moveq	r4, r3
    f1e0:	e7a2      	b.n	f128 <sys_clock_set_timeout+0x24>
    f1e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    f1e6:	e7d3      	b.n	f190 <sys_clock_set_timeout+0x8c>
    f1e8:	200009e8 	.word	0x200009e8
    f1ec:	200009ec 	.word	0x200009ec
    f1f0:	000159df 	.word	0x000159df
    f1f4:	00015a05 	.word	0x00015a05
    f1f8:	200009e4 	.word	0x200009e4
    f1fc:	200009dc 	.word	0x200009dc
    f200:	200009e0 	.word	0x200009e0
    f204:	00fffffe 	.word	0x00fffffe

0000f208 <sys_clock_elapsed>:
{
    f208:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f20a:	f04f 0320 	mov.w	r3, #32
    f20e:	f3ef 8511 	mrs	r5, BASEPRI
    f212:	f383 8812 	msr	BASEPRI_MAX, r3
    f216:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f21a:	4815      	ldr	r0, [pc, #84]	; (f270 <sys_clock_elapsed+0x68>)
    f21c:	f001 f9e4 	bl	105e8 <z_spin_lock_valid>
    f220:	b940      	cbnz	r0, f234 <sys_clock_elapsed+0x2c>
    f222:	4914      	ldr	r1, [pc, #80]	; (f274 <sys_clock_elapsed+0x6c>)
    f224:	4814      	ldr	r0, [pc, #80]	; (f278 <sys_clock_elapsed+0x70>)
    f226:	2281      	movs	r2, #129	; 0x81
    f228:	f005 fc00 	bl	14a2c <printk>
    f22c:	2181      	movs	r1, #129	; 0x81
    f22e:	4811      	ldr	r0, [pc, #68]	; (f274 <sys_clock_elapsed+0x6c>)
    f230:	f005 fc83 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
    f234:	480e      	ldr	r0, [pc, #56]	; (f270 <sys_clock_elapsed+0x68>)
    f236:	f001 f9f3 	bl	10620 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    f23a:	f7ff ff11 	bl	f060 <elapsed>
    f23e:	4b0f      	ldr	r3, [pc, #60]	; (f27c <sys_clock_elapsed+0x74>)
    f240:	681c      	ldr	r4, [r3, #0]
    f242:	4b0f      	ldr	r3, [pc, #60]	; (f280 <sys_clock_elapsed+0x78>)
    f244:	681b      	ldr	r3, [r3, #0]
    f246:	1ae4      	subs	r4, r4, r3
    f248:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f24a:	4809      	ldr	r0, [pc, #36]	; (f270 <sys_clock_elapsed+0x68>)
    f24c:	f001 f9da 	bl	10604 <z_spin_unlock_valid>
    f250:	b940      	cbnz	r0, f264 <sys_clock_elapsed+0x5c>
    f252:	4908      	ldr	r1, [pc, #32]	; (f274 <sys_clock_elapsed+0x6c>)
    f254:	4808      	ldr	r0, [pc, #32]	; (f278 <sys_clock_elapsed+0x70>)
    f256:	22ac      	movs	r2, #172	; 0xac
    f258:	f005 fbe8 	bl	14a2c <printk>
    f25c:	21ac      	movs	r1, #172	; 0xac
    f25e:	4805      	ldr	r0, [pc, #20]	; (f274 <sys_clock_elapsed+0x6c>)
    f260:	f005 fc6b 	bl	14b3a <assert_post_action>
	__asm__ volatile(
    f264:	f385 8811 	msr	BASEPRI, r5
    f268:	f3bf 8f6f 	isb	sy
}
    f26c:	4620      	mov	r0, r4
    f26e:	bd38      	pop	{r3, r4, r5, pc}
    f270:	200009ec 	.word	0x200009ec
    f274:	000159df 	.word	0x000159df
    f278:	00015a05 	.word	0x00015a05
    f27c:	200009e4 	.word	0x200009e4
    f280:	200009e0 	.word	0x200009e0

0000f284 <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    f284:	4b05      	ldr	r3, [pc, #20]	; (f29c <sys_clock_idle_exit+0x18>)
    f286:	681b      	ldr	r3, [r3, #0]
    f288:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    f28c:	bf01      	itttt	eq
    f28e:	f04f 22e0 	moveq.w	r2, #3758153728	; 0xe000e000
    f292:	6913      	ldreq	r3, [r2, #16]
    f294:	f043 0301 	orreq.w	r3, r3, #1
    f298:	6113      	streq	r3, [r2, #16]
}
    f29a:	4770      	bx	lr
    f29c:	200009e8 	.word	0x200009e8

0000f2a0 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    f2a0:	4803      	ldr	r0, [pc, #12]	; (f2b0 <k_sys_fatal_error_handler+0x10>)
    f2a2:	2145      	movs	r1, #69	; 0x45
{
    f2a4:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    f2a6:	f005 fc5b 	bl	14b60 <z_log_minimal_printk>
		sys_arch_reboot(0);
    f2aa:	2000      	movs	r0, #0
    f2ac:	f7fe ff2e 	bl	e10c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    f2b0:	000168bf 	.word	0x000168bf

0000f2b4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    f2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f2b8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    f2ba:	4c20      	ldr	r4, [pc, #128]	; (f33c <check_ext_api_requests+0x88>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    f2bc:	4e20      	ldr	r6, [pc, #128]	; (f340 <check_ext_api_requests+0x8c>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f2be:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    f2c2:	f8df 9080 	ldr.w	r9, [pc, #128]	; f344 <check_ext_api_requests+0x90>
{
    f2c6:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f2c8:	45a8      	cmp	r8, r5
    f2ca:	d803      	bhi.n	f2d4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    f2cc:	2000      	movs	r0, #0
    f2ce:	b005      	add	sp, #20
    f2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    f2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f2da:	681f      	ldr	r7, [r3, #0]
    f2dc:	ab01      	add	r3, sp, #4
    f2de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    f2e2:	220c      	movs	r2, #12
    f2e4:	4619      	mov	r1, r3
    f2e6:	4638      	mov	r0, r7
    f2e8:	f005 fd0f 	bl	14d0a <memcmp>
    f2ec:	b988      	cbnz	r0, f312 <check_ext_api_requests+0x5e>
    f2ee:	b187      	cbz	r7, f312 <check_ext_api_requests+0x5e>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    f2f2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f2f4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    f2f6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f2f8:	4291      	cmp	r1, r2
    f2fa:	d10a      	bne.n	f312 <check_ext_api_requests+0x5e>
		&&  (ext_api->ext_api_version >= req_min_version)
    f2fc:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    f2fe:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    f300:	4291      	cmp	r1, r2
    f302:	d806      	bhi.n	f312 <check_ext_api_requests+0x5e>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    f304:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    f306:	4291      	cmp	r1, r2
    f308:	d903      	bls.n	f312 <check_ext_api_requests+0x5e>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    f30a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f30c:	695b      	ldr	r3, [r3, #20]
    f30e:	439a      	bics	r2, r3
    f310:	d00a      	beq.n	f328 <check_ext_api_requests+0x74>
		} else if (ext_api_req->required) {
    f312:	6a27      	ldr	r7, [r4, #32]
    f314:	b167      	cbz	r7, f330 <check_ext_api_requests+0x7c>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    f316:	480c      	ldr	r0, [pc, #48]	; (f348 <check_ext_api_requests+0x94>)
    f318:	f005 fb88 	bl	14a2c <printk>
			k_panic();
    f31c:	4040      	eors	r0, r0
    f31e:	f380 8811 	msr	BASEPRI, r0
    f322:	f04f 0004 	mov.w	r0, #4
    f326:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    f328:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f32a:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    f32c:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f32e:	e7cb      	b.n	f2c8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    f330:	4648      	mov	r0, r9
    f332:	f005 fb7b 	bl	14a2c <printk>
			*ext_api_req->ext_api = NULL;
    f336:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f338:	601f      	str	r7, [r3, #0]
    f33a:	e7f5      	b.n	f328 <check_ext_api_requests+0x74>
    f33c:	0000c43c 	.word	0x0000c43c
    f340:	0001558c 	.word	0x0001558c
    f344:	0001690a 	.word	0x0001690a
    f348:	000168e1 	.word	0x000168e1

0000f34c <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    f34c:	4a5b      	ldr	r2, [pc, #364]	; (f4bc <SystemInit+0x170>)
{
    f34e:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    f350:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    f354:	f043 0302 	orr.w	r3, r3, #2
    f358:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f35c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f360:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f364:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    f368:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    f36c:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    f36e:	bf01      	itttt	eq
    f370:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    f374:	2200      	moveq	r2, #0
    f376:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    f37a:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    f37e:	f005 fe9a 	bl	150b6 <nrf91_errata_14>
    f382:	b128      	cbz	r0, f390 <SystemInit+0x44>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    f384:	2201      	movs	r2, #1
    f386:	4b4e      	ldr	r3, [pc, #312]	; (f4c0 <SystemInit+0x174>)
    f388:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    f38c:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f390:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f394:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f398:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    f39c:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    f3a0:	2a09      	cmp	r2, #9
    f3a2:	d105      	bne.n	f3b0 <SystemInit+0x64>
            {
                switch(var2)
    f3a4:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    f3a6:	bf1e      	ittt	ne
    f3a8:	2201      	movne	r2, #1
    f3aa:	4b45      	ldrne	r3, [pc, #276]	; (f4c0 <SystemInit+0x174>)
    f3ac:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    f3b0:	f005 fe81 	bl	150b6 <nrf91_errata_14>
    f3b4:	b118      	cbz	r0, f3be <SystemInit+0x72>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    f3b6:	220e      	movs	r2, #14
    f3b8:	4b42      	ldr	r3, [pc, #264]	; (f4c4 <SystemInit+0x178>)
    f3ba:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f3be:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f3c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f3c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    f3ca:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    f3ce:	2a09      	cmp	r2, #9
    f3d0:	d106      	bne.n	f3e0 <SystemInit+0x94>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    f3d2:	2200      	movs	r2, #0
    f3d4:	4b3a      	ldr	r3, [pc, #232]	; (f4c0 <SystemInit+0x174>)
    f3d6:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    f3da:	2201      	movs	r2, #1
    f3dc:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    f3e0:	2200      	movs	r2, #0
    f3e2:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f3e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    f3e8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    f3ec:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f3f0:	3101      	adds	r1, #1
    f3f2:	d008      	beq.n	f406 <SystemInit+0xba>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f3f4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f3f8:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f3fa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f3fe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f402:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f404:	d1ed      	bne.n	f3e2 <SystemInit+0x96>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    f406:	4b30      	ldr	r3, [pc, #192]	; (f4c8 <SystemInit+0x17c>)
    f408:	69da      	ldr	r2, [r3, #28]
    f40a:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    f40e:	07d1      	lsls	r1, r2, #31
    f410:	d543      	bpl.n	f49a <SystemInit+0x14e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f412:	4b2e      	ldr	r3, [pc, #184]	; (f4cc <SystemInit+0x180>)
    f414:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f418:	2a01      	cmp	r2, #1
    f41a:	d1fb      	bne.n	f414 <SystemInit+0xc8>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    f41c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f420:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f424:	2a01      	cmp	r2, #1
    f426:	d1fb      	bne.n	f420 <SystemInit+0xd4>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    f428:	4b27      	ldr	r3, [pc, #156]	; (f4c8 <SystemInit+0x17c>)
    f42a:	69da      	ldr	r2, [r3, #28]
    f42c:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    f430:	07d2      	lsls	r2, r2, #31
    f432:	d50a      	bpl.n	f44a <SystemInit+0xfe>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    f434:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    f436:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    f43a:	61da      	str	r2, [r3, #28]
    f43c:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f440:	4a22      	ldr	r2, [pc, #136]	; (f4cc <SystemInit+0x180>)
    f442:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f446:	2b01      	cmp	r3, #1
    f448:	d1fb      	bne.n	f442 <SystemInit+0xf6>
        uint32_t val = *word;
    f44a:	4a1f      	ldr	r2, [pc, #124]	; (f4c8 <SystemInit+0x17c>)
    f44c:	6a13      	ldr	r3, [r2, #32]
    f44e:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    f452:	3301      	adds	r3, #1
    f454:	d10c      	bne.n	f470 <SystemInit+0x124>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    f456:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    f458:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f45c:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    f460:	6213      	str	r3, [r2, #32]
    f462:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f466:	4a19      	ldr	r2, [pc, #100]	; (f4cc <SystemInit+0x180>)
    f468:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f46c:	2b01      	cmp	r3, #1
    f46e:	d1fb      	bne.n	f468 <SystemInit+0x11c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    f470:	2200      	movs	r2, #0
    f472:	4b16      	ldr	r3, [pc, #88]	; (f4cc <SystemInit+0x180>)
    f474:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f478:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f47c:	2a01      	cmp	r2, #1
    f47e:	d1fb      	bne.n	f478 <SystemInit+0x12c>
    f480:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f484:	490d      	ldr	r1, [pc, #52]	; (f4bc <SystemInit+0x170>)
    f486:	4b12      	ldr	r3, [pc, #72]	; (f4d0 <SystemInit+0x184>)
    f488:	68ca      	ldr	r2, [r1, #12]
    f48a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f48e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f490:	60cb      	str	r3, [r1, #12]
    f492:	f3bf 8f4f 	dsb	sy
    __NOP();
    f496:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f498:	e7fd      	b.n	f496 <SystemInit+0x14a>
        uint32_t val = *word;
    f49a:	6a1b      	ldr	r3, [r3, #32]
    f49c:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    f4a0:	3301      	adds	r3, #1
    f4a2:	d0b6      	beq.n	f412 <SystemInit+0xc6>
        SCB->NSACR |= (3UL << 10);
    f4a4:	4a05      	ldr	r2, [pc, #20]	; (f4bc <SystemInit+0x170>)
    f4a6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    f4aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    f4ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    f4b2:	4b08      	ldr	r3, [pc, #32]	; (f4d4 <SystemInit+0x188>)
    f4b4:	4a08      	ldr	r2, [pc, #32]	; (f4d8 <SystemInit+0x18c>)
    f4b6:	601a      	str	r2, [r3, #0]
}
    f4b8:	bd08      	pop	{r3, pc}
    f4ba:	bf00      	nop
    f4bc:	e000ed00 	.word	0xe000ed00
    f4c0:	50004000 	.word	0x50004000
    f4c4:	5003a000 	.word	0x5003a000
    f4c8:	00ff8000 	.word	0x00ff8000
    f4cc:	50039000 	.word	0x50039000
    f4d0:	05fa0004 	.word	0x05fa0004
    f4d4:	2000007c 	.word	0x2000007c
    f4d8:	03d09000 	.word	0x03d09000

0000f4dc <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    f4dc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    f4de:	4604      	mov	r4, r0
    f4e0:	b940      	cbnz	r0, f4f4 <nrfx_clock_init+0x18>
    f4e2:	4909      	ldr	r1, [pc, #36]	; (f508 <nrfx_clock_init+0x2c>)
    f4e4:	4809      	ldr	r0, [pc, #36]	; (f50c <nrfx_clock_init+0x30>)
    f4e6:	22bd      	movs	r2, #189	; 0xbd
    f4e8:	f005 faa0 	bl	14a2c <printk>
    f4ec:	21bd      	movs	r1, #189	; 0xbd
    f4ee:	4806      	ldr	r0, [pc, #24]	; (f508 <nrfx_clock_init+0x2c>)
    f4f0:	f005 fb23 	bl	14b3a <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    f4f4:	4b06      	ldr	r3, [pc, #24]	; (f510 <nrfx_clock_init+0x34>)
    f4f6:	791a      	ldrb	r2, [r3, #4]
    f4f8:	b922      	cbnz	r2, f504 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    f4fa:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    f4fc:	4805      	ldr	r0, [pc, #20]	; (f514 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    f4fe:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    f500:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f502:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    f504:	4804      	ldr	r0, [pc, #16]	; (f518 <nrfx_clock_init+0x3c>)
    return err_code;
    f506:	e7fc      	b.n	f502 <nrfx_clock_init+0x26>
    f508:	0001693d 	.word	0x0001693d
    f50c:	00015a05 	.word	0x00015a05
    f510:	200009f0 	.word	0x200009f0
    f514:	0bad0000 	.word	0x0bad0000
    f518:	0bad000c 	.word	0x0bad000c

0000f51c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    f51c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f51e:	4b0b      	ldr	r3, [pc, #44]	; (f54c <nrfx_clock_enable+0x30>)
    f520:	791b      	ldrb	r3, [r3, #4]
    f522:	b943      	cbnz	r3, f536 <nrfx_clock_enable+0x1a>
    f524:	490a      	ldr	r1, [pc, #40]	; (f550 <nrfx_clock_enable+0x34>)
    f526:	480b      	ldr	r0, [pc, #44]	; (f554 <nrfx_clock_enable+0x38>)
    f528:	22d6      	movs	r2, #214	; 0xd6
    f52a:	f005 fa7f 	bl	14a2c <printk>
    f52e:	21d6      	movs	r1, #214	; 0xd6
    f530:	4807      	ldr	r0, [pc, #28]	; (f550 <nrfx_clock_enable+0x34>)
    f532:	f005 fb02 	bl	14b3a <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    f536:	2005      	movs	r0, #5
    f538:	f7fe fa0c 	bl	d954 <arch_irq_is_enabled>
    f53c:	b920      	cbnz	r0, f548 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    f53e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    f542:	2005      	movs	r0, #5
    f544:	f7fe b9f8 	b.w	d938 <arch_irq_enable>
    f548:	bd08      	pop	{r3, pc}
    f54a:	bf00      	nop
    f54c:	200009f0 	.word	0x200009f0
    f550:	0001693d 	.word	0x0001693d
    f554:	00015a05 	.word	0x00015a05

0000f558 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f558:	4b25      	ldr	r3, [pc, #148]	; (f5f0 <nrfx_clock_start+0x98>)
{
    f55a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f55c:	791b      	ldrb	r3, [r3, #4]
{
    f55e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f560:	b953      	cbnz	r3, f578 <nrfx_clock_start+0x20>
    f562:	4924      	ldr	r1, [pc, #144]	; (f5f4 <nrfx_clock_start+0x9c>)
    f564:	4824      	ldr	r0, [pc, #144]	; (f5f8 <nrfx_clock_start+0xa0>)
    f566:	f44f 7289 	mov.w	r2, #274	; 0x112
    f56a:	f005 fa5f 	bl	14a2c <printk>
    f56e:	f44f 7189 	mov.w	r1, #274	; 0x112
    f572:	4820      	ldr	r0, [pc, #128]	; (f5f4 <nrfx_clock_start+0x9c>)
    f574:	f005 fae1 	bl	14b3a <assert_post_action>
    switch (domain)
    f578:	b174      	cbz	r4, f598 <nrfx_clock_start+0x40>
    f57a:	2c01      	cmp	r4, #1
    f57c:	d02d      	beq.n	f5da <nrfx_clock_start+0x82>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    f57e:	491d      	ldr	r1, [pc, #116]	; (f5f4 <nrfx_clock_start+0x9c>)
    f580:	481d      	ldr	r0, [pc, #116]	; (f5f8 <nrfx_clock_start+0xa0>)
    f582:	f44f 72a2 	mov.w	r2, #324	; 0x144
    f586:	f005 fa51 	bl	14a2c <printk>
            break;
    }
}
    f58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    f58e:	f44f 71a2 	mov.w	r1, #324	; 0x144
    f592:	4818      	ldr	r0, [pc, #96]	; (f5f4 <nrfx_clock_start+0x9c>)
    f594:	f005 bad1 	b.w	14b3a <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f598:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    f59c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f5a0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    f5a4:	03c9      	lsls	r1, r1, #15
    f5a6:	d512      	bpl.n	f5ce <nrfx_clock_start+0x76>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    f5a8:	f003 0303 	and.w	r3, r3, #3
    f5ac:	2b02      	cmp	r3, #2
    f5ae:	d10e      	bne.n	f5ce <nrfx_clock_start+0x76>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f5b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5b8:	2200      	movs	r2, #0
    f5ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f5be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    f5c2:	2202      	movs	r2, #2
    f5c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f5c8:	2201      	movs	r2, #1
    f5ca:	609a      	str	r2, [r3, #8]
}
    f5cc:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    f5ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5d2:	2201      	movs	r2, #1
    f5d4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    f5d8:	e7ec      	b.n	f5b4 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5de:	2200      	movs	r2, #0
    f5e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f5e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    f5e8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f5ec:	601c      	str	r4, [r3, #0]
}
    f5ee:	e7ed      	b.n	f5cc <nrfx_clock_start+0x74>
    f5f0:	200009f0 	.word	0x200009f0
    f5f4:	0001693d 	.word	0x0001693d
    f5f8:	00015a05 	.word	0x00015a05

0000f5fc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    f5fc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f5fe:	4b28      	ldr	r3, [pc, #160]	; (f6a0 <nrfx_clock_stop+0xa4>)
{
    f600:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f602:	791b      	ldrb	r3, [r3, #4]
    f604:	b953      	cbnz	r3, f61c <nrfx_clock_stop+0x20>
    f606:	4927      	ldr	r1, [pc, #156]	; (f6a4 <nrfx_clock_stop+0xa8>)
    f608:	4827      	ldr	r0, [pc, #156]	; (f6a8 <nrfx_clock_stop+0xac>)
    f60a:	f240 124b 	movw	r2, #331	; 0x14b
    f60e:	f005 fa0d 	bl	14a2c <printk>
    f612:	f240 114b 	movw	r1, #331	; 0x14b
    f616:	4823      	ldr	r0, [pc, #140]	; (f6a4 <nrfx_clock_stop+0xa8>)
    f618:	f005 fa8f 	bl	14b3a <assert_post_action>
    switch (domain)
    f61c:	b174      	cbz	r4, f63c <nrfx_clock_stop+0x40>
    f61e:	2c01      	cmp	r4, #1
    f620:	d023      	beq.n	f66a <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    f622:	4920      	ldr	r1, [pc, #128]	; (f6a4 <nrfx_clock_stop+0xa8>)
    f624:	4820      	ldr	r0, [pc, #128]	; (f6a8 <nrfx_clock_stop+0xac>)
    f626:	f240 1267 	movw	r2, #359	; 0x167
    f62a:	f005 f9ff 	bl	14a2c <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    f62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
    f632:	f240 1167 	movw	r1, #359	; 0x167
    f636:	481b      	ldr	r0, [pc, #108]	; (f6a4 <nrfx_clock_stop+0xa8>)
    f638:	f005 ba7f 	b.w	14b3a <assert_post_action>
    p_reg->INTENCLR = mask;
    f63c:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    f640:	2302      	movs	r3, #2
    f642:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f646:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    f64a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f64e:	2301      	movs	r3, #1
    f650:	f242 7410 	movw	r4, #10000	; 0x2710
    f654:	60eb      	str	r3, [r5, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f656:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
    f65a:	03db      	lsls	r3, r3, #15
    f65c:	d51f      	bpl.n	f69e <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    f65e:	2001      	movs	r0, #1
    f660:	f005 fd3a 	bl	150d8 <nrfx_busy_wait>
    f664:	3c01      	subs	r4, #1
    f666:	d1f6      	bne.n	f656 <nrfx_clock_stop+0x5a>
    f668:	e019      	b.n	f69e <nrfx_clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    f66a:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f66e:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    f670:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f674:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    f678:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f67c:	606c      	str	r4, [r5, #4]
    f67e:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f682:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f686:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f68a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f68e:	03d2      	lsls	r2, r2, #15
    f690:	d505      	bpl.n	f69e <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    f692:	b123      	cbz	r3, f69e <nrfx_clock_stop+0xa2>
    f694:	2001      	movs	r0, #1
    f696:	f005 fd1f 	bl	150d8 <nrfx_busy_wait>
    f69a:	3c01      	subs	r4, #1
    f69c:	d1f1      	bne.n	f682 <nrfx_clock_stop+0x86>
}
    f69e:	bd38      	pop	{r3, r4, r5, pc}
    f6a0:	200009f0 	.word	0x200009f0
    f6a4:	0001693d 	.word	0x0001693d
    f6a8:	00015a05 	.word	0x00015a05

0000f6ac <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f6ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f6b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    f6b4:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    f6b6:	b152      	cbz	r2, f6ce <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6b8:	2000      	movs	r0, #0
    f6ba:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    f6be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    f6c2:	2201      	movs	r2, #1
    f6c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f6c8:	4b11      	ldr	r3, [pc, #68]	; (f710 <nrfx_power_clock_irq_handler+0x64>)
    f6ca:	681b      	ldr	r3, [r3, #0]
    f6cc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f6ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f6d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    f6d6:	b18a      	cbz	r2, f6fc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6d8:	2200      	movs	r2, #0
    f6da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f6de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f6e2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f6e6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    f6ea:	f002 0203 	and.w	r2, r2, #3
    f6ee:	2a01      	cmp	r2, #1
    f6f0:	f04f 0102 	mov.w	r1, #2
    f6f4:	d103      	bne.n	f6fe <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f6f6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6fa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    f6fc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    f6fe:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f702:	4b03      	ldr	r3, [pc, #12]	; (f710 <nrfx_power_clock_irq_handler+0x64>)
    f704:	2001      	movs	r0, #1
}
    f706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f70a:	681b      	ldr	r3, [r3, #0]
    f70c:	4718      	bx	r3
    f70e:	bf00      	nop
    f710:	200009f0 	.word	0x200009f0

0000f714 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f714:	6802      	ldr	r2, [r0, #0]
{
    f716:	b510      	push	{r4, lr}
    switch (port)
    f718:	0953      	lsrs	r3, r2, #5
{
    f71a:	4604      	mov	r4, r0
    switch (port)
    f71c:	d104      	bne.n	f728 <nrf_gpio_pin_port_decode+0x14>
    return (mask & (1UL << pin_number)) ? true : false;
    f71e:	f04f 33ff 	mov.w	r3, #4294967295
    f722:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f724:	07db      	lsls	r3, r3, #31
    f726:	d40a      	bmi.n	f73e <nrf_gpio_pin_port_decode+0x2a>
    f728:	490e      	ldr	r1, [pc, #56]	; (f764 <nrf_gpio_pin_port_decode+0x50>)
    f72a:	480f      	ldr	r0, [pc, #60]	; (f768 <nrf_gpio_pin_port_decode+0x54>)
    f72c:	f240 2229 	movw	r2, #553	; 0x229
    f730:	f005 f97c 	bl	14a2c <printk>
    f734:	f240 2129 	movw	r1, #553	; 0x229
    f738:	480a      	ldr	r0, [pc, #40]	; (f764 <nrf_gpio_pin_port_decode+0x50>)
    f73a:	f005 f9fe 	bl	14b3a <assert_post_action>
    uint32_t pin_number = *p_pin;
    f73e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    f740:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f744:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    f746:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f748:	d00a      	beq.n	f760 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
    f74a:	4906      	ldr	r1, [pc, #24]	; (f764 <nrf_gpio_pin_port_decode+0x50>)
    f74c:	4806      	ldr	r0, [pc, #24]	; (f768 <nrf_gpio_pin_port_decode+0x54>)
    f74e:	f240 222e 	movw	r2, #558	; 0x22e
    f752:	f005 f96b 	bl	14a2c <printk>
    f756:	f240 212e 	movw	r1, #558	; 0x22e
    f75a:	4802      	ldr	r0, [pc, #8]	; (f764 <nrf_gpio_pin_port_decode+0x50>)
    f75c:	f005 f9ed 	bl	14b3a <assert_post_action>
}
    f760:	4802      	ldr	r0, [pc, #8]	; (f76c <nrf_gpio_pin_port_decode+0x58>)
    f762:	bd10      	pop	{r4, pc}
    f764:	00016833 	.word	0x00016833
    f768:	00015a05 	.word	0x00015a05
    f76c:	50842500 	.word	0x50842500

0000f770 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    f770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f774:	4606      	mov	r6, r0
    f776:	4690      	mov	r8, r2
    f778:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
    f77a:	460c      	mov	r4, r1
    f77c:	b951      	cbnz	r1, f794 <nrfx_twim_init+0x24>
    f77e:	492f      	ldr	r1, [pc, #188]	; (f83c <nrfx_twim_init+0xcc>)
    f780:	482f      	ldr	r0, [pc, #188]	; (f840 <nrfx_twim_init+0xd0>)
    f782:	f240 1215 	movw	r2, #277	; 0x115
    f786:	f005 f951 	bl	14a2c <printk>
    f78a:	f240 1115 	movw	r1, #277	; 0x115
    f78e:	482b      	ldr	r0, [pc, #172]	; (f83c <nrfx_twim_init+0xcc>)
    f790:	f005 f9d3 	bl	14b3a <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f794:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    f796:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f79a:	4d2a      	ldr	r5, [pc, #168]	; (f844 <nrfx_twim_init+0xd4>)
    f79c:	fb07 f70a 	mul.w	r7, r7, sl
    f7a0:	19e9      	adds	r1, r5, r7
    f7a2:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    f7a6:	2800      	cmp	r0, #0
    f7a8:	d145      	bne.n	f836 <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f7aa:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    f7ac:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f7b0:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f7b4:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
    f7b6:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
    f7b8:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
    f7bc:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
    f7c0:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
    f7c4:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f7c8:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    f7cc:	b1f3      	cbz	r3, f80c <nrfx_twim_init+0x9c>
    f7ce:	7be3      	ldrb	r3, [r4, #15]
    f7d0:	b92b      	cbnz	r3, f7de <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    f7d2:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
    f7d6:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    f7da:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    f7de:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
    f7e0:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
    f7e4:	2334      	movs	r3, #52	; 0x34
    f7e6:	fb03 f30a 	mul.w	r3, r3, sl
    f7ea:	58eb      	ldr	r3, [r5, r3]
    f7ec:	b123      	cbz	r3, f7f8 <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    f7ee:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    f7f0:	f340 3007 	sbfx	r0, r0, #12, #8
    f7f4:	f7fe f8a0 	bl	d938 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f7f8:	2334      	movs	r3, #52	; 0x34
    f7fa:	fb03 550a 	mla	r5, r3, sl, r5
    f7fe:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f800:	4811      	ldr	r0, [pc, #68]	; (f848 <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f802:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    f806:	b003      	add	sp, #12
    f808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    f80c:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f80e:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
    f810:	f240 670c 	movw	r7, #1548	; 0x60c
    f814:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f816:	f7ff ff7d 	bl	f714 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f81a:	9b01      	ldr	r3, [sp, #4]
    f81c:	3380      	adds	r3, #128	; 0x80
    f81e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    f822:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f824:	a801      	add	r0, sp, #4
    f826:	9301      	str	r3, [sp, #4]
    f828:	f7ff ff74 	bl	f714 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f82c:	9b01      	ldr	r3, [sp, #4]
    f82e:	3380      	adds	r3, #128	; 0x80
    f830:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    f834:	e7cb      	b.n	f7ce <nrfx_twim_init+0x5e>
        return err_code;
    f836:	4805      	ldr	r0, [pc, #20]	; (f84c <nrfx_twim_init+0xdc>)
    f838:	e7e5      	b.n	f806 <nrfx_twim_init+0x96>
    f83a:	bf00      	nop
    f83c:	0001697a 	.word	0x0001697a
    f840:	00015a05 	.word	0x00015a05
    f844:	200009f8 	.word	0x200009f8
    f848:	0bad0000 	.word	0x0bad0000
    f84c:	0bad0005 	.word	0x0bad0005

0000f850 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f850:	2334      	movs	r3, #52	; 0x34
{
    f852:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f854:	4c0f      	ldr	r4, [pc, #60]	; (f894 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f856:	7906      	ldrb	r6, [r0, #4]
{
    f858:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f85a:	fb03 4306 	mla	r3, r3, r6, r4
    f85e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f862:	2b01      	cmp	r3, #1
    f864:	d00a      	beq.n	f87c <nrfx_twim_enable+0x2c>
    f866:	490c      	ldr	r1, [pc, #48]	; (f898 <nrfx_twim_enable+0x48>)
    f868:	480c      	ldr	r0, [pc, #48]	; (f89c <nrfx_twim_enable+0x4c>)
    f86a:	f240 1279 	movw	r2, #377	; 0x179
    f86e:	f005 f8dd 	bl	14a2c <printk>
    f872:	f240 1179 	movw	r1, #377	; 0x179
    f876:	4808      	ldr	r0, [pc, #32]	; (f898 <nrfx_twim_enable+0x48>)
    f878:	f005 f95f 	bl	14b3a <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    f87c:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
    f87e:	682b      	ldr	r3, [r5, #0]
    f880:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    f884:	2334      	movs	r3, #52	; 0x34
    f886:	fb03 4406 	mla	r4, r3, r6, r4
    f88a:	2302      	movs	r3, #2
    f88c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    f890:	bd70      	pop	{r4, r5, r6, pc}
    f892:	bf00      	nop
    f894:	200009f8 	.word	0x200009f8
    f898:	0001697a 	.word	0x0001697a
    f89c:	00015a05 	.word	0x00015a05

0000f8a0 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    f8a0:	2334      	movs	r3, #52	; 0x34
{
    f8a2:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    f8a4:	4c14      	ldr	r4, [pc, #80]	; (f8f8 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f8a6:	7906      	ldrb	r6, [r0, #4]
{
    f8a8:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    f8aa:	fb03 4306 	mla	r3, r3, r6, r4
    f8ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f8b2:	b953      	cbnz	r3, f8ca <nrfx_twim_disable+0x2a>
    f8b4:	4911      	ldr	r1, [pc, #68]	; (f8fc <nrfx_twim_disable+0x5c>)
    f8b6:	4812      	ldr	r0, [pc, #72]	; (f900 <nrfx_twim_disable+0x60>)
    f8b8:	f44f 72c2 	mov.w	r2, #388	; 0x184
    f8bc:	f005 f8b6 	bl	14a2c <printk>
    f8c0:	f44f 71c2 	mov.w	r1, #388	; 0x184
    f8c4:	480d      	ldr	r0, [pc, #52]	; (f8fc <nrfx_twim_disable+0x5c>)
    f8c6:	f005 f938 	bl	14b3a <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    f8ca:	2334      	movs	r3, #52	; 0x34
    f8cc:	2100      	movs	r1, #0
    f8ce:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    f8d2:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
    f8d4:	480b      	ldr	r0, [pc, #44]	; (f904 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
    f8d6:	6099      	str	r1, [r3, #8]
    f8d8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    f8dc:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    f8e0:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    f8e4:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    f8e8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f8ec:	2201      	movs	r2, #1
    p_cb->busy = false;
    f8ee:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f8f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    f8f6:	bd70      	pop	{r4, r5, r6, pc}
    f8f8:	200009f8 	.word	0x200009f8
    f8fc:	0001697a 	.word	0x0001697a
    f900:	00015a05 	.word	0x00015a05
    f904:	019c0202 	.word	0x019c0202

0000f908 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    f908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    f90c:	7903      	ldrb	r3, [r0, #4]
{
    f90e:	4604      	mov	r4, r0
    f910:	460d      	mov	r5, r1
    f912:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    f914:	b93b      	cbnz	r3, f926 <nrfx_twim_xfer+0x1e>
    f916:	684b      	ldr	r3, [r1, #4]
    f918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f91c:	d203      	bcs.n	f926 <nrfx_twim_xfer+0x1e>
    f91e:	688b      	ldr	r3, [r1, #8]
    f920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f924:	d30a      	bcc.n	f93c <nrfx_twim_xfer+0x34>
    f926:	49bb      	ldr	r1, [pc, #748]	; (fc14 <nrfx_twim_xfer+0x30c>)
    f928:	48bb      	ldr	r0, [pc, #748]	; (fc18 <nrfx_twim_xfer+0x310>)
    f92a:	f240 2299 	movw	r2, #665	; 0x299
    f92e:	f005 f87d 	bl	14a2c <printk>
    f932:	f240 2199 	movw	r1, #665	; 0x299
    f936:	48b7      	ldr	r0, [pc, #732]	; (fc14 <nrfx_twim_xfer+0x30c>)
    f938:	f005 f8ff 	bl	14b3a <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    f93c:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f93e:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    f942:	f8df 82d8 	ldr.w	r8, [pc, #728]	; fc1c <nrfx_twim_xfer+0x314>
    f946:	fb07 f709 	mul.w	r7, r7, r9
    f94a:	f858 3007 	ldr.w	r3, [r8, r7]
    f94e:	bb03      	cbnz	r3, f992 <nrfx_twim_xfer+0x8a>
    f950:	782b      	ldrb	r3, [r5, #0]
    f952:	2b02      	cmp	r3, #2
    f954:	d00e      	beq.n	f974 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    f956:	782b      	ldrb	r3, [r5, #0]
    f958:	2b03      	cmp	r3, #3
    f95a:	d11a      	bne.n	f992 <nrfx_twim_xfer+0x8a>
    f95c:	f240 22a2 	movw	r2, #674	; 0x2a2
    f960:	49ac      	ldr	r1, [pc, #688]	; (fc14 <nrfx_twim_xfer+0x30c>)
    f962:	48ad      	ldr	r0, [pc, #692]	; (fc18 <nrfx_twim_xfer+0x310>)
    f964:	f005 f862 	bl	14a2c <printk>
    f968:	f240 21a2 	movw	r1, #674	; 0x2a2
    f96c:	48a9      	ldr	r0, [pc, #676]	; (fc14 <nrfx_twim_xfer+0x30c>)
    f96e:	f005 f8e4 	bl	14b3a <assert_post_action>
    f972:	e00e      	b.n	f992 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    f974:	f240 22a1 	movw	r2, #673	; 0x2a1
    f978:	49a6      	ldr	r1, [pc, #664]	; (fc14 <nrfx_twim_xfer+0x30c>)
    f97a:	48a7      	ldr	r0, [pc, #668]	; (fc18 <nrfx_twim_xfer+0x310>)
    f97c:	f005 f856 	bl	14a2c <printk>
    f980:	f240 21a1 	movw	r1, #673	; 0x2a1
    f984:	48a3      	ldr	r0, [pc, #652]	; (fc14 <nrfx_twim_xfer+0x30c>)
    f986:	f005 f8d8 	bl	14b3a <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    f98a:	f858 3007 	ldr.w	r3, [r8, r7]
    f98e:	2b00      	cmp	r3, #0
    f990:	d0e1      	beq.n	f956 <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
    f992:	2334      	movs	r3, #52	; 0x34
    f994:	2200      	movs	r2, #0
    f996:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    f99a:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
    f99c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    f9a0:	686b      	ldr	r3, [r5, #4]
    f9a2:	b14b      	cbz	r3, f9b8 <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    f9a4:	68eb      	ldr	r3, [r5, #12]
    f9a6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    f9aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    f9ae:	d003      	beq.n	f9b8 <nrfx_twim_xfer+0xb0>
        return err_code;
    f9b0:	4f9b      	ldr	r7, [pc, #620]	; (fc20 <nrfx_twim_xfer+0x318>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f9b2:	4638      	mov	r0, r7
    f9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    f9b8:	2734      	movs	r7, #52	; 0x34
    f9ba:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
    f9be:	4b99      	ldr	r3, [pc, #612]	; (fc24 <nrfx_twim_xfer+0x31c>)
    f9c0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    f9c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    f9c8:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    f9cc:	b123      	cbz	r3, f9d8 <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    f9ce:	68bb      	ldr	r3, [r7, #8]
        return err_code;
    f9d0:	4f95      	ldr	r7, [pc, #596]	; (fc28 <nrfx_twim_xfer+0x320>)
    p_reg->INTENSET = mask;
    f9d2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    f9d6:	e7ec      	b.n	f9b2 <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    f9d8:	f016 0f14 	tst.w	r6, #20
    f9dc:	bf0c      	ite	eq
    f9de:	2301      	moveq	r3, #1
    f9e0:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    f9e2:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    f9e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    f9e8:	f107 0c0c 	add.w	ip, r7, #12
    f9ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f9f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f9f4:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
    f9f8:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    f9fa:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    f9fe:	f3c6 1300 	ubfx	r3, r6, #4, #1
    fa02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    fa06:	786b      	ldrb	r3, [r5, #1]
    fa08:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fa0c:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    fa10:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    fa14:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    fa18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fa1c:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    fa20:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    fa24:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    fa28:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    fa2c:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    fa30:	bf18      	it	ne
    fa32:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    fa34:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    fa38:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    fa3c:	bf18      	it	ne
    fa3e:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    fa40:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    fa44:	782b      	ldrb	r3, [r5, #0]
    fa46:	2b03      	cmp	r3, #3
    fa48:	f200 80e1 	bhi.w	fc0e <nrfx_twim_xfer+0x306>
    fa4c:	e8df f003 	tbb	[pc, r3]
    fa50:	0295ccb3 	.word	0x0295ccb3
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    fa54:	06f2      	lsls	r2, r6, #27
    fa56:	d50a      	bpl.n	fa6e <nrfx_twim_xfer+0x166>
    fa58:	496e      	ldr	r1, [pc, #440]	; (fc14 <nrfx_twim_xfer+0x30c>)
    fa5a:	486f      	ldr	r0, [pc, #444]	; (fc18 <nrfx_twim_xfer+0x310>)
    fa5c:	f240 12dd 	movw	r2, #477	; 0x1dd
    fa60:	f004 ffe4 	bl	14a2c <printk>
    fa64:	f240 11dd 	movw	r1, #477	; 0x1dd
    fa68:	486a      	ldr	r0, [pc, #424]	; (fc14 <nrfx_twim_xfer+0x30c>)
    fa6a:	f005 f866 	bl	14b3a <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    fa6e:	0733      	lsls	r3, r6, #28
    fa70:	d50a      	bpl.n	fa88 <nrfx_twim_xfer+0x180>
    fa72:	4968      	ldr	r1, [pc, #416]	; (fc14 <nrfx_twim_xfer+0x30c>)
    fa74:	4868      	ldr	r0, [pc, #416]	; (fc18 <nrfx_twim_xfer+0x310>)
    fa76:	f44f 72ef 	mov.w	r2, #478	; 0x1de
    fa7a:	f004 ffd7 	bl	14a2c <printk>
    fa7e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    fa82:	4864      	ldr	r0, [pc, #400]	; (fc14 <nrfx_twim_xfer+0x30c>)
    fa84:	f005 f859 	bl	14b3a <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    fa88:	0777      	lsls	r7, r6, #29
    fa8a:	d50a      	bpl.n	faa2 <nrfx_twim_xfer+0x19a>
    fa8c:	4961      	ldr	r1, [pc, #388]	; (fc14 <nrfx_twim_xfer+0x30c>)
    fa8e:	4862      	ldr	r0, [pc, #392]	; (fc18 <nrfx_twim_xfer+0x310>)
    fa90:	f240 12df 	movw	r2, #479	; 0x1df
    fa94:	f004 ffca 	bl	14a2c <printk>
    fa98:	f240 11df 	movw	r1, #479	; 0x1df
    fa9c:	485d      	ldr	r0, [pc, #372]	; (fc14 <nrfx_twim_xfer+0x30c>)
    fa9e:	f005 f84c 	bl	14b3a <assert_post_action>
    faa2:	692b      	ldr	r3, [r5, #16]
    faa4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    faa8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    faac:	d180      	bne.n	f9b0 <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
    faae:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fab2:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    fab4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fab8:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    faba:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fabe:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fac2:	2200      	movs	r2, #0
    fac4:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    fac8:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    facc:	2101      	movs	r1, #1
    face:	6221      	str	r1, [r4, #32]
    fad0:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fad2:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    fad6:	2900      	cmp	r1, #0
    fad8:	d0fb      	beq.n	fad2 <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fada:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    fade:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    fae2:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fae4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    fae8:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
    faea:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    faee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    faf2:	fb03 8309 	mla	r3, r3, r9, r8
    faf6:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    faf8:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    fafa:	4f4c      	ldr	r7, [pc, #304]	; (fc2c <nrfx_twim_xfer+0x324>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    fafc:	0730      	lsls	r0, r6, #28
    fafe:	d407      	bmi.n	fb10 <nrfx_twim_xfer+0x208>
    fb00:	782a      	ldrb	r2, [r5, #0]
    fb02:	2a03      	cmp	r2, #3
    fb04:	d004      	beq.n	fb10 <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb06:	2201      	movs	r2, #1
    fb08:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    fb0a:	686b      	ldr	r3, [r5, #4]
    fb0c:	b903      	cbnz	r3, fb10 <nrfx_twim_xfer+0x208>
    fb0e:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    fb10:	2334      	movs	r3, #52	; 0x34
    fb12:	fb03 f309 	mul.w	r3, r3, r9
    fb16:	f858 1003 	ldr.w	r1, [r8, r3]
    fb1a:	eb08 0203 	add.w	r2, r8, r3
    fb1e:	2900      	cmp	r1, #0
    fb20:	f040 8088 	bne.w	fc34 <nrfx_twim_xfer+0x32c>
    fb24:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb26:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	f000 809a 	beq.w	fc64 <nrfx_twim_xfer+0x35c>
    fb30:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fb34:	2b00      	cmp	r3, #0
    fb36:	f040 8098 	bne.w	fc6a <nrfx_twim_xfer+0x362>
    fb3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    fb3e:	2b00      	cmp	r3, #0
    fb40:	f000 80a7 	beq.w	fc92 <nrfx_twim_xfer+0x38a>
                transmission_finished = true;
    fb44:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb46:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    fb4a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb4e:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    fb52:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    fb56:	2d00      	cmp	r5, #0
    fb58:	f000 8092 	beq.w	fc80 <nrfx_twim_xfer+0x378>
    fb5c:	f412 7f00 	tst.w	r2, #512	; 0x200
    fb60:	f402 7280 	and.w	r2, r2, #256	; 0x100
    fb64:	f040 808f 	bne.w	fc86 <nrfx_twim_xfer+0x37e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb68:	6220      	str	r0, [r4, #32]
    fb6a:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    fb6c:	2a00      	cmp	r2, #0
    fb6e:	d0da      	beq.n	fb26 <nrfx_twim_xfer+0x21e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb70:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    fb74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    fb78:	e7d5      	b.n	fb26 <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fb7a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fb7c:	68ea      	ldr	r2, [r5, #12]
    fb7e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fb82:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    fb86:	692b      	ldr	r3, [r5, #16]
    fb88:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    fb8c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    fb90:	f47f af0e 	bne.w	f9b0 <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    fb94:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fb96:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    fb9a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    fb9e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    fba2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fba6:	2334      	movs	r3, #52	; 0x34
    fba8:	2202      	movs	r2, #2
    fbaa:	fb03 8309 	mla	r3, r3, r9, r8
    fbae:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fbb0:	2301      	movs	r3, #1
    fbb2:	6223      	str	r3, [r4, #32]
    fbb4:	e7a0      	b.n	faf8 <nrfx_twim_xfer+0x1f0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fbb6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fbb8:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    fbba:	f016 0f20 	tst.w	r6, #32
    fbbe:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fbc2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    fbc6:	f04f 0334 	mov.w	r3, #52	; 0x34
    fbca:	d008      	beq.n	fbde <nrfx_twim_xfer+0x2d6>
    p_reg->SHORTS = mask;
    fbcc:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    fbd0:	fb03 8309 	mla	r3, r3, r9, r8
    fbd4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    fbd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    fbdc:	e7e7      	b.n	fbae <nrfx_twim_xfer+0x2a6>
    fbde:	f44f 7200 	mov.w	r2, #512	; 0x200
    fbe2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fbe6:	e7df      	b.n	fba8 <nrfx_twim_xfer+0x2a0>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fbe8:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fbea:	68ea      	ldr	r2, [r5, #12]
    fbec:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fbf0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    fbf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    fbf8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fbfc:	2334      	movs	r3, #52	; 0x34
    fbfe:	2202      	movs	r2, #2
    fc00:	fb03 8309 	mla	r3, r3, r9, r8
    fc04:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc06:	2301      	movs	r3, #1
    fc08:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    fc0a:	2300      	movs	r3, #0
    fc0c:	e775      	b.n	fafa <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
    fc0e:	2308      	movs	r3, #8
    fc10:	4f07      	ldr	r7, [pc, #28]	; (fc30 <nrfx_twim_xfer+0x328>)
    fc12:	e773      	b.n	fafc <nrfx_twim_xfer+0x1f4>
    fc14:	0001697a 	.word	0x0001697a
    fc18:	00015a05 	.word	0x00015a05
    fc1c:	200009f8 	.word	0x200009f8
    fc20:	0bad000a 	.word	0x0bad000a
    fc24:	019c0202 	.word	0x019c0202
    fc28:	0bad000b 	.word	0x0bad000b
    fc2c:	0bad0000 	.word	0x0bad0000
    fc30:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    fc34:	0771      	lsls	r1, r6, #29
            p_cb->int_mask = 0;
    fc36:	bf44      	itt	mi
    fc38:	2300      	movmi	r3, #0
    fc3a:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    fc3c:	0672      	lsls	r2, r6, #25
    fc3e:	d406      	bmi.n	fc4e <nrfx_twim_xfer+0x346>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    fc40:	2334      	movs	r3, #52	; 0x34
    fc42:	fb03 8309 	mla	r3, r3, r9, r8
    fc46:	689a      	ldr	r2, [r3, #8]
    fc48:	f042 0202 	orr.w	r2, r2, #2
    fc4c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    fc4e:	2334      	movs	r3, #52	; 0x34
    fc50:	fb03 8309 	mla	r3, r3, r9, r8
    fc54:	689a      	ldr	r2, [r3, #8]
    fc56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    fc5a:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fc5c:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    fc5e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    fc62:	e6a6      	b.n	f9b2 <nrfx_twim_xfer+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fc68:	b123      	cbz	r3, fc74 <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc6a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    fc6e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc72:	e762      	b.n	fb3a <nrfx_twim_xfer+0x232>
    fc74:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    fc78:	2a00      	cmp	r2, #0
    fc7a:	f43f af54 	beq.w	fb26 <nrfx_twim_xfer+0x21e>
    fc7e:	e762      	b.n	fb46 <nrfx_twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc80:	6220      	str	r0, [r4, #32]
    fc82:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    fc84:	e74f      	b.n	fb26 <nrfx_twim_xfer+0x21e>
    fc86:	2a00      	cmp	r2, #0
    fc88:	f47f af72 	bne.w	fb70 <nrfx_twim_xfer+0x268>
        } while (!transmission_finished);
    fc8c:	2b00      	cmp	r3, #0
    fc8e:	f43f af4a 	beq.w	fb26 <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
    fc92:	2134      	movs	r1, #52	; 0x34
    fc94:	2000      	movs	r0, #0
    fc96:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
    fc9a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    fc9e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    fca2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    fca6:	b18b      	cbz	r3, fccc <nrfx_twim_xfer+0x3c4>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    fca8:	4a0f      	ldr	r2, [pc, #60]	; (fce8 <nrfx_twim_xfer+0x3e0>)
    fcaa:	f013 0f01 	tst.w	r3, #1
    fcae:	4f0f      	ldr	r7, [pc, #60]	; (fcec <nrfx_twim_xfer+0x3e4>)
    fcb0:	bf18      	it	ne
    fcb2:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    fcb4:	f013 0f02 	tst.w	r3, #2
    fcb8:	f102 0201 	add.w	r2, r2, #1
    fcbc:	bf18      	it	ne
    fcbe:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    fcc0:	f013 0f04 	tst.w	r3, #4
    fcc4:	4b0a      	ldr	r3, [pc, #40]	; (fcf0 <nrfx_twim_xfer+0x3e8>)
    fcc6:	bf18      	it	ne
    fcc8:	461f      	movne	r7, r3
    fcca:	e672      	b.n	f9b2 <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    fccc:	0673      	lsls	r3, r6, #25
    fcce:	f53f ae70 	bmi.w	f9b2 <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
    fcd2:	4620      	mov	r0, r4
    fcd4:	fb09 8101 	mla	r1, r9, r1, r8
    fcd8:	f005 fa00 	bl	150dc <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    fcdc:	4b03      	ldr	r3, [pc, #12]	; (fcec <nrfx_twim_xfer+0x3e4>)
    fcde:	2800      	cmp	r0, #0
    fce0:	bf08      	it	eq
    fce2:	461f      	moveq	r7, r3
    fce4:	e665      	b.n	f9b2 <nrfx_twim_xfer+0xaa>
    fce6:	bf00      	nop
    fce8:	0bae0000 	.word	0x0bae0000
    fcec:	0bad0001 	.word	0x0bad0001
    fcf0:	0bae0002 	.word	0x0bae0002

0000fcf4 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    fcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
    fcf6:	4c60      	ldr	r4, [pc, #384]	; (fe78 <nrfx_twim_2_irq_handler+0x184>)
{
    fcf8:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
    fcfa:	6823      	ldr	r3, [r4, #0]
    fcfc:	b953      	cbnz	r3, fd14 <nrfx_twim_2_irq_handler+0x20>
    fcfe:	495f      	ldr	r1, [pc, #380]	; (fe7c <nrfx_twim_2_irq_handler+0x188>)
    fd00:	485f      	ldr	r0, [pc, #380]	; (fe80 <nrfx_twim_2_irq_handler+0x18c>)
    fd02:	f44f 7237 	mov.w	r2, #732	; 0x2dc
    fd06:	f004 fe91 	bl	14a2c <printk>
    fd0a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    fd0e:	485b      	ldr	r0, [pc, #364]	; (fe7c <nrfx_twim_2_irq_handler+0x188>)
    fd10:	f004 ff13 	bl	14b3a <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd14:	4d5b      	ldr	r5, [pc, #364]	; (fe84 <nrfx_twim_2_irq_handler+0x190>)
    fd16:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    fd1a:	b1fb      	cbz	r3, fd5c <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd1c:	2300      	movs	r3, #0
    fd1e:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    fd22:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd26:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fd2a:	b9bb      	cbnz	r3, fd5c <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    fd2c:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    fd2e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fd32:	2302      	movs	r3, #2
    fd34:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fd36:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    fd38:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd3c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    fd40:	b11b      	cbz	r3, fd4a <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
    fd42:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    fd46:	059e      	lsls	r6, r3, #22
    fd48:	d403      	bmi.n	fd52 <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd4a:	2201      	movs	r2, #1
    fd4c:	4b4d      	ldr	r3, [pc, #308]	; (fe84 <nrfx_twim_2_irq_handler+0x190>)
    fd4e:	621a      	str	r2, [r3, #32]
    fd50:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    fd52:	2301      	movs	r3, #1
    fd54:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    fd58:	b007      	add	sp, #28
    fd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd5c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fd60:	2b00      	cmp	r3, #0
    fd62:	d05a      	beq.n	fe1a <nrfx_twim_2_irq_handler+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd64:	2300      	movs	r3, #0
    fd66:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    fd6a:	6a27      	ldr	r7, [r4, #32]
    fd6c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    fd70:	067d      	lsls	r5, r7, #25
    fd72:	d40a      	bmi.n	fd8a <nrfx_twim_2_irq_handler+0x96>
    fd74:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    fd78:	b93b      	cbnz	r3, fd8a <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    fd7a:	493f      	ldr	r1, [pc, #252]	; (fe78 <nrfx_twim_2_irq_handler+0x184>)
    fd7c:	4841      	ldr	r0, [pc, #260]	; (fe84 <nrfx_twim_2_irq_handler+0x190>)
    fd7e:	f005 f9ad 	bl	150dc <xfer_completeness_check>
    fd82:	f080 0001 	eor.w	r0, r0, #1
    fd86:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    fd8a:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    fd8e:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    fd92:	d120      	bne.n	fdd6 <nrfx_twim_2_irq_handler+0xe2>
            event.xfer_desc = p_cb->xfer_desc;
    fd94:	4e3c      	ldr	r6, [pc, #240]	; (fe88 <nrfx_twim_2_irq_handler+0x194>)
    fd96:	ad01      	add	r5, sp, #4
    fd98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fd9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fd9c:	6833      	ldr	r3, [r6, #0]
    fd9e:	602b      	str	r3, [r5, #0]
    fda0:	4b38      	ldr	r3, [pc, #224]	; (fe84 <nrfx_twim_2_irq_handler+0x190>)
    fda2:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    fda6:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    fdaa:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    fdae:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    fdb2:	f1bc 0f00 	cmp.w	ip, #0
    fdb6:	d002      	beq.n	fdbe <nrfx_twim_2_irq_handler+0xca>
    fdb8:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    fdbc:	b15a      	cbz	r2, fdd6 <nrfx_twim_2_irq_handler+0xe2>
    p_reg->SHORTS = mask;
    fdbe:	2200      	movs	r2, #0
    fdc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    fdc4:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    fdc6:	4a31      	ldr	r2, [pc, #196]	; (fe8c <nrfx_twim_2_irq_handler+0x198>)
    fdc8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fdcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fdd0:	4b2f      	ldr	r3, [pc, #188]	; (fe90 <nrfx_twim_2_irq_handler+0x19c>)
    fdd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    fdd6:	4a2b      	ldr	r2, [pc, #172]	; (fe84 <nrfx_twim_2_irq_handler+0x190>)
    fdd8:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    fddc:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    fdde:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    fde2:	d443      	bmi.n	fe6c <nrfx_twim_2_irq_handler+0x178>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    fde4:	0759      	lsls	r1, r3, #29
    fde6:	d443      	bmi.n	fe70 <nrfx_twim_2_irq_handler+0x17c>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    fde8:	07da      	lsls	r2, r3, #31
    fdea:	d443      	bmi.n	fe74 <nrfx_twim_2_irq_handler+0x180>
    else if (p_cb->error)
    fdec:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    fdf0:	009b      	lsls	r3, r3, #2
    fdf2:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    fdf4:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    fdf8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    fdfc:	b90b      	cbnz	r3, fe02 <nrfx_twim_2_irq_handler+0x10e>
        p_cb->busy = false;
    fdfe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    fe02:	6a23      	ldr	r3, [r4, #32]
    fe04:	075b      	lsls	r3, r3, #29
    fe06:	d503      	bpl.n	fe10 <nrfx_twim_2_irq_handler+0x11c>
    fe08:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	d0a3      	beq.n	fd58 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
    fe10:	e9d4 3100 	ldrd	r3, r1, [r4]
    fe14:	4668      	mov	r0, sp
    fe16:	4798      	blx	r3
}
    fe18:	e79e      	b.n	fd58 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe1a:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    fe1e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    fe22:	7b23      	ldrb	r3, [r4, #12]
    fe24:	b983      	cbnz	r3, fe48 <nrfx_twim_2_irq_handler+0x154>
            event.xfer_desc = p_cb->xfer_desc;
    fe26:	4f18      	ldr	r7, [pc, #96]	; (fe88 <nrfx_twim_2_irq_handler+0x194>)
    fe28:	ae01      	add	r6, sp, #4
    fe2a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    fe2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    fe2e:	683b      	ldr	r3, [r7, #0]
    fe30:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    fe32:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    fe36:	2b00      	cmp	r3, #0
    fe38:	d1cd      	bne.n	fdd6 <nrfx_twim_2_irq_handler+0xe2>
    p_reg->SHORTS = mask;
    fe3a:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    fe3e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    fe40:	4b12      	ldr	r3, [pc, #72]	; (fe8c <nrfx_twim_2_irq_handler+0x198>)
    fe42:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    fe46:	e7c1      	b.n	fdcc <nrfx_twim_2_irq_handler+0xd8>
    p_reg->SHORTS = mask;
    fe48:	f44f 7300 	mov.w	r3, #512	; 0x200
    fe4c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    fe50:	f240 2302 	movw	r3, #514	; 0x202
    fe54:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    fe56:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    fe5a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fe5e:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    fe60:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe64:	2301      	movs	r3, #1
    fe66:	60ab      	str	r3, [r5, #8]
    fe68:	622b      	str	r3, [r5, #32]
            return;
    fe6a:	e775      	b.n	fd58 <nrfx_twim_2_irq_handler+0x64>
    fe6c:	2301      	movs	r3, #1
    fe6e:	e7c1      	b.n	fdf4 <nrfx_twim_2_irq_handler+0x100>
    fe70:	2302      	movs	r3, #2
    fe72:	e7bf      	b.n	fdf4 <nrfx_twim_2_irq_handler+0x100>
    fe74:	2303      	movs	r3, #3
    fe76:	e7bd      	b.n	fdf4 <nrfx_twim_2_irq_handler+0x100>
    fe78:	200009f8 	.word	0x200009f8
    fe7c:	0001697a 	.word	0x0001697a
    fe80:	00015a05 	.word	0x00015a05
    fe84:	5000a000 	.word	0x5000a000
    fe88:	20000a04 	.word	0x20000a04
    fe8c:	019c0202 	.word	0x019c0202
    fe90:	e000e100 	.word	0xe000e100

0000fe94 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    fe94:	6802      	ldr	r2, [r0, #0]
{
    fe96:	b510      	push	{r4, lr}
    switch (port)
    fe98:	0953      	lsrs	r3, r2, #5
{
    fe9a:	4604      	mov	r4, r0
    switch (port)
    fe9c:	d104      	bne.n	fea8 <nrf_gpio_pin_port_decode+0x14>
    return (mask & (1UL << pin_number)) ? true : false;
    fe9e:	f04f 33ff 	mov.w	r3, #4294967295
    fea2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    fea4:	07db      	lsls	r3, r3, #31
    fea6:	d40a      	bmi.n	febe <nrf_gpio_pin_port_decode+0x2a>
    fea8:	490e      	ldr	r1, [pc, #56]	; (fee4 <nrf_gpio_pin_port_decode+0x50>)
    feaa:	480f      	ldr	r0, [pc, #60]	; (fee8 <nrf_gpio_pin_port_decode+0x54>)
    feac:	f240 2229 	movw	r2, #553	; 0x229
    feb0:	f004 fdbc 	bl	14a2c <printk>
    feb4:	f240 2129 	movw	r1, #553	; 0x229
    feb8:	480a      	ldr	r0, [pc, #40]	; (fee4 <nrf_gpio_pin_port_decode+0x50>)
    feba:	f004 fe3e 	bl	14b3a <assert_post_action>
    uint32_t pin_number = *p_pin;
    febe:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    fec0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fec4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    fec6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fec8:	d00a      	beq.n	fee0 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
    feca:	4906      	ldr	r1, [pc, #24]	; (fee4 <nrf_gpio_pin_port_decode+0x50>)
    fecc:	4806      	ldr	r0, [pc, #24]	; (fee8 <nrf_gpio_pin_port_decode+0x54>)
    fece:	f240 222e 	movw	r2, #558	; 0x22e
    fed2:	f004 fdab 	bl	14a2c <printk>
    fed6:	f240 212e 	movw	r1, #558	; 0x22e
    feda:	4802      	ldr	r0, [pc, #8]	; (fee4 <nrf_gpio_pin_port_decode+0x50>)
    fedc:	f004 fe2d 	bl	14b3a <assert_post_action>
}
    fee0:	4802      	ldr	r0, [pc, #8]	; (feec <nrf_gpio_pin_port_decode+0x58>)
    fee2:	bd10      	pop	{r4, pc}
    fee4:	00016833 	.word	0x00016833
    fee8:	00015a05 	.word	0x00015a05
    feec:	50842500 	.word	0x50842500

0000fef0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    fef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fef2:	460c      	mov	r4, r1
    fef4:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    fef6:	f005 f921 	bl	1513c <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    fefa:	4620      	mov	r0, r4
    fefc:	f005 f91e 	bl	1513c <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff00:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
    ff02:	f240 650d 	movw	r5, #1549	; 0x60d
    ff06:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff08:	f7ff ffc4 	bl	fe94 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    ff0c:	9b01      	ldr	r3, [sp, #4]
    ff0e:	9401      	str	r4, [sp, #4]
    ff10:	3380      	adds	r3, #128	; 0x80
    ff12:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff16:	a801      	add	r0, sp, #4
    ff18:	f7ff ffbc 	bl	fe94 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    ff1c:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ff1e:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
    ff20:	3380      	adds	r3, #128	; 0x80
    ff22:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    ff26:	2004      	movs	r0, #4
    ff28:	f005 f8d6 	bl	150d8 <nrfx_busy_wait>
    ff2c:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff2e:	a801      	add	r0, sp, #4
    ff30:	9401      	str	r4, [sp, #4]
    ff32:	f7ff ffaf 	bl	fe94 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ff36:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    ff38:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ff3a:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    ff3c:	07db      	lsls	r3, r3, #31
    ff3e:	d414      	bmi.n	ff6a <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff40:	a801      	add	r0, sp, #4
    ff42:	9601      	str	r6, [sp, #4]
    ff44:	f7ff ffa6 	bl	fe94 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ff48:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
    ff4a:	3d01      	subs	r5, #1
    ff4c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    ff50:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    ff52:	2004      	movs	r0, #4
    ff54:	f005 f8c0 	bl	150d8 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    ff58:	4630      	mov	r0, r6
    ff5a:	f005 f8ef 	bl	1513c <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
    ff5e:	2004      	movs	r0, #4
    ff60:	f005 f8ba 	bl	150d8 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    ff64:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    ff68:	d1e1      	bne.n	ff2e <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff6a:	a801      	add	r0, sp, #4
    ff6c:	9401      	str	r4, [sp, #4]
    ff6e:	f7ff ff91 	bl	fe94 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ff72:	2301      	movs	r3, #1
    ff74:	9a01      	ldr	r2, [sp, #4]
    ff76:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    ff78:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    ff7a:	2004      	movs	r0, #4
    ff7c:	f005 f8ac 	bl	150d8 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    ff80:	4620      	mov	r0, r4
    ff82:	f005 f8db 	bl	1513c <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    ff86:	2004      	movs	r0, #4
    ff88:	f005 f8a6 	bl	150d8 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ff8c:	a801      	add	r0, sp, #4
    ff8e:	9401      	str	r4, [sp, #4]
    ff90:	f7ff ff80 	bl	fe94 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ff94:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    ff96:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    ff98:	4803      	ldr	r0, [pc, #12]	; (ffa8 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ff9a:	40d3      	lsrs	r3, r2
    ff9c:	f003 0301 	and.w	r3, r3, #1
    ffa0:	1ac0      	subs	r0, r0, r3
    ffa2:	b003      	add	sp, #12
    ffa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffa6:	bf00      	nop
    ffa8:	0bad0001 	.word	0x0bad0001

0000ffac <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ffac:	4b0e      	ldr	r3, [pc, #56]	; (ffe8 <z_sys_init_run_level+0x3c>)
{
    ffae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ffb0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ffb4:	3001      	adds	r0, #1
    ffb6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ffba:	42a6      	cmp	r6, r4
    ffbc:	d800      	bhi.n	ffc0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    ffbe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    ffc0:	e9d4 3500 	ldrd	r3, r5, [r4]
    ffc4:	4628      	mov	r0, r5
    ffc6:	4798      	blx	r3
		if (dev != NULL) {
    ffc8:	b165      	cbz	r5, ffe4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    ffca:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    ffcc:	b130      	cbz	r0, ffdc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ffce:	2800      	cmp	r0, #0
    ffd0:	bfb8      	it	lt
    ffd2:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    ffd4:	28ff      	cmp	r0, #255	; 0xff
    ffd6:	bfa8      	it	ge
    ffd8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    ffda:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    ffdc:	785a      	ldrb	r2, [r3, #1]
    ffde:	f042 0201 	orr.w	r2, r2, #1
    ffe2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ffe4:	3408      	adds	r4, #8
    ffe6:	e7e8      	b.n	ffba <z_sys_init_run_level+0xe>
    ffe8:	000157f8 	.word	0x000157f8

0000ffec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    ffec:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    ffee:	4605      	mov	r5, r0
    fff0:	b910      	cbnz	r0, fff8 <z_impl_device_get_binding+0xc>
		return NULL;
    fff2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    fff4:	4620      	mov	r0, r4
    fff6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    fff8:	7803      	ldrb	r3, [r0, #0]
    fffa:	2b00      	cmp	r3, #0
    fffc:	d0f9      	beq.n	fff2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    fffe:	4c0e      	ldr	r4, [pc, #56]	; (10038 <CONFIG_PM_PARTITION_SIZE_SPM+0x38>)
   10000:	4e0e      	ldr	r6, [pc, #56]	; (1003c <CONFIG_PM_PARTITION_SIZE_SPM+0x3c>)
   10002:	42b4      	cmp	r4, r6
   10004:	d108      	bne.n	10018 <CONFIG_PM_PARTITION_SIZE_SPM+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   10006:	4c0c      	ldr	r4, [pc, #48]	; (10038 <CONFIG_PM_PARTITION_SIZE_SPM+0x38>)
   10008:	42b4      	cmp	r4, r6
   1000a:	d0f2      	beq.n	fff2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1000c:	4620      	mov	r0, r4
   1000e:	f005 f8a2 	bl	15156 <z_device_ready>
   10012:	b950      	cbnz	r0, 1002a <CONFIG_PM_PARTITION_SIZE_SPM+0x2a>
	for (dev = __device_start; dev != __device_end; dev++) {
   10014:	3418      	adds	r4, #24
   10016:	e7f7      	b.n	10008 <CONFIG_PM_PARTITION_SIZE_SPM+0x8>
		if (z_device_ready(dev) && (dev->name == name)) {
   10018:	4620      	mov	r0, r4
   1001a:	f005 f89c 	bl	15156 <z_device_ready>
   1001e:	b110      	cbz	r0, 10026 <CONFIG_PM_PARTITION_SIZE_SPM+0x26>
   10020:	6823      	ldr	r3, [r4, #0]
   10022:	42ab      	cmp	r3, r5
   10024:	d0e6      	beq.n	fff4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   10026:	3418      	adds	r4, #24
   10028:	e7eb      	b.n	10002 <CONFIG_PM_PARTITION_SIZE_SPM+0x2>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1002a:	4628      	mov	r0, r5
   1002c:	6821      	ldr	r1, [r4, #0]
   1002e:	f004 fe60 	bl	14cf2 <strcmp>
   10032:	2800      	cmp	r0, #0
   10034:	d1ee      	bne.n	10014 <CONFIG_PM_PARTITION_SIZE_SPM+0x14>
   10036:	e7dd      	b.n	fff4 <z_impl_device_get_binding+0x8>
   10038:	00015290 	.word	0x00015290
   1003c:	00015308 	.word	0x00015308

00010040 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10042:	4604      	mov	r4, r0
   10044:	460e      	mov	r6, r1
	__asm__ volatile(
   10046:	f04f 0320 	mov.w	r3, #32
   1004a:	f3ef 8711 	mrs	r7, BASEPRI
   1004e:	f383 8812 	msr	BASEPRI_MAX, r3
   10052:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   10056:	f001 fbc7 	bl	117e8 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1005a:	2200      	movs	r2, #0
   1005c:	2c04      	cmp	r4, #4
   1005e:	bf98      	it	ls
   10060:	4b1d      	ldrls	r3, [pc, #116]	; (100d8 <z_fatal_error+0x98>)
   10062:	4605      	mov	r5, r0
	switch (reason) {
   10064:	bf94      	ite	ls
   10066:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   1006a:	4b1c      	ldrhi	r3, [pc, #112]	; (100dc <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1006c:	9200      	str	r2, [sp, #0]
   1006e:	2145      	movs	r1, #69	; 0x45
   10070:	4622      	mov	r2, r4
   10072:	481b      	ldr	r0, [pc, #108]	; (100e0 <z_fatal_error+0xa0>)
   10074:	f004 fd74 	bl	14b60 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   10078:	b13e      	cbz	r6, 1008a <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1007a:	69f3      	ldr	r3, [r6, #28]
   1007c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   10080:	b11b      	cbz	r3, 1008a <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   10082:	2145      	movs	r1, #69	; 0x45
   10084:	4817      	ldr	r0, [pc, #92]	; (100e4 <z_fatal_error+0xa4>)
   10086:	f004 fd6b 	bl	14b60 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1008a:	b135      	cbz	r5, 1009a <z_fatal_error+0x5a>
   1008c:	4628      	mov	r0, r5
   1008e:	f005 f88e 	bl	151ae <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   10092:	4603      	mov	r3, r0
   10094:	b108      	cbz	r0, 1009a <z_fatal_error+0x5a>
   10096:	7802      	ldrb	r2, [r0, #0]
   10098:	b902      	cbnz	r2, 1009c <z_fatal_error+0x5c>
		thread_name = "unknown";
   1009a:	4b13      	ldr	r3, [pc, #76]	; (100e8 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1009c:	462a      	mov	r2, r5
   1009e:	2145      	movs	r1, #69	; 0x45
   100a0:	4812      	ldr	r0, [pc, #72]	; (100ec <z_fatal_error+0xac>)
   100a2:	f004 fd5d 	bl	14b60 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   100a6:	4631      	mov	r1, r6
   100a8:	4620      	mov	r0, r4
   100aa:	f7ff f8f9 	bl	f2a0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   100ae:	2c04      	cmp	r4, #4
   100b0:	d108      	bne.n	100c4 <z_fatal_error+0x84>
   100b2:	490f      	ldr	r1, [pc, #60]	; (100f0 <z_fatal_error+0xb0>)
   100b4:	480f      	ldr	r0, [pc, #60]	; (100f4 <z_fatal_error+0xb4>)
   100b6:	228f      	movs	r2, #143	; 0x8f
   100b8:	f004 fcb8 	bl	14a2c <printk>
   100bc:	218f      	movs	r1, #143	; 0x8f
   100be:	480c      	ldr	r0, [pc, #48]	; (100f0 <z_fatal_error+0xb0>)
   100c0:	f004 fd3b 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   100c4:	f387 8811 	msr	BASEPRI, r7
   100c8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   100cc:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   100ce:	b003      	add	sp, #12
   100d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   100d4:	f7fe b864 	b.w	e1a0 <z_impl_k_thread_abort>
   100d8:	00015810 	.word	0x00015810
   100dc:	000169b6 	.word	0x000169b6
   100e0:	000169cc 	.word	0x000169cc
   100e4:	000169f9 	.word	0x000169f9
   100e8:	000169c4 	.word	0x000169c4
   100ec:	00016a1f 	.word	0x00016a1f
   100f0:	00016a3c 	.word	0x00016a3c
   100f4:	00015a05 	.word	0x00015a05

000100f8 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   100f8:	2300      	movs	r3, #0
   100fa:	2201      	movs	r2, #1
{
   100fc:	b510      	push	{r4, lr}
   100fe:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   10100:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10104:	220f      	movs	r2, #15
   10106:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1010a:	2218      	movs	r2, #24
	z_setup_new_thread(thread, stack,
   1010c:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1010e:	4b0b      	ldr	r3, [pc, #44]	; (1013c <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
   10110:	4c0b      	ldr	r4, [pc, #44]	; (10140 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10112:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   10116:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1011a:	490a      	ldr	r1, [pc, #40]	; (10144 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
   1011c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
   10120:	fb02 1100 	mla	r1, r2, r0, r1
   10124:	9300      	str	r3, [sp, #0]
   10126:	4620      	mov	r0, r4
   10128:	4b07      	ldr	r3, [pc, #28]	; (10148 <init_idle_thread+0x50>)
   1012a:	f000 f98d 	bl	10448 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1012e:	7b63      	ldrb	r3, [r4, #13]
   10130:	f023 0304 	bic.w	r3, r3, #4
   10134:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   10136:	b006      	add	sp, #24
   10138:	bd10      	pop	{r4, pc}
   1013a:	bf00      	nop
   1013c:	20000a2c 	.word	0x20000a2c
   10140:	20000160 	.word	0x20000160
   10144:	20001e20 	.word	0x20001e20
   10148:	00010631 	.word	0x00010631

0001014c <bg_thread_main>:
	z_sys_post_kernel = true;
   1014c:	2201      	movs	r2, #1
{
   1014e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   10150:	4b09      	ldr	r3, [pc, #36]	; (10178 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10152:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   10154:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10156:	f7ff ff29 	bl	ffac <z_sys_init_run_level>
	boot_banner();
   1015a:	f001 fe83 	bl	11e64 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1015e:	2003      	movs	r0, #3
   10160:	f7ff ff24 	bl	ffac <z_sys_init_run_level>
	z_init_static_threads();
   10164:	f000 f9c4 	bl	104f0 <z_init_static_threads>
	main();
   10168:	f004 fc57 	bl	14a1a <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1016c:	4a03      	ldr	r2, [pc, #12]	; (1017c <bg_thread_main+0x30>)
   1016e:	7b13      	ldrb	r3, [r2, #12]
   10170:	f023 0301 	bic.w	r3, r3, #1
   10174:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10176:	bd08      	pop	{r3, pc}
   10178:	2000145d 	.word	0x2000145d
   1017c:	200001e0 	.word	0x200001e0

00010180 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   10180:	4802      	ldr	r0, [pc, #8]	; (1018c <z_bss_zero+0xc>)
   10182:	4a03      	ldr	r2, [pc, #12]	; (10190 <z_bss_zero+0x10>)
   10184:	2100      	movs	r1, #0
   10186:	1a12      	subs	r2, r2, r0
   10188:	f004 bdf1 	b.w	14d6e <memset>
   1018c:	20000160 	.word	0x20000160
   10190:	2000161c 	.word	0x2000161c

00010194 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   10194:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   10196:	4b35      	ldr	r3, [pc, #212]	; (1026c <z_cstart+0xd8>)
   10198:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   1019a:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1019e:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   101a2:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101a6:	2400      	movs	r4, #0
   101a8:	23e0      	movs	r3, #224	; 0xe0
   101aa:	4d31      	ldr	r5, [pc, #196]	; (10270 <z_cstart+0xdc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   101ac:	4e31      	ldr	r6, [pc, #196]	; (10274 <z_cstart+0xe0>)
   101ae:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   101b2:	77ec      	strb	r4, [r5, #31]
   101b4:	762c      	strb	r4, [r5, #24]
   101b6:	766c      	strb	r4, [r5, #25]
   101b8:	76ac      	strb	r4, [r5, #26]
   101ba:	f885 4020 	strb.w	r4, [r5, #32]
   101be:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   101c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   101c2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 10278 <z_cstart+0xe4>
   101c6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   101ca:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   101cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   101ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   101d2:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   101d4:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   101d6:	68eb      	ldr	r3, [r5, #12]
   101d8:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   101da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   101de:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   101e2:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   101e4:	f7fd ff40 	bl	e068 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   101e8:	f7fd fb64 	bl	d8b4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   101ec:	f04f 33ff 	mov.w	r3, #4294967295
   101f0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   101f2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   101f4:	f7fe fa18 	bl	e628 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   101f8:	f7fe f860 	bl	e2bc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   101fc:	f240 1301 	movw	r3, #257	; 0x101
   10200:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   10204:	ab06      	add	r3, sp, #24
   10206:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   10208:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1020c:	f004 ffa2 	bl	15154 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10210:	4620      	mov	r0, r4
   10212:	f7ff fecb 	bl	ffac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10216:	2001      	movs	r0, #1
   10218:	f7ff fec8 	bl	ffac <z_sys_init_run_level>
	z_sched_init();
   1021c:	f001 f99a 	bl	11554 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10220:	4b16      	ldr	r3, [pc, #88]	; (1027c <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   10222:	4d17      	ldr	r5, [pc, #92]	; (10280 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10224:	9305      	str	r3, [sp, #20]
   10226:	2301      	movs	r3, #1
   10228:	4916      	ldr	r1, [pc, #88]	; (10284 <z_cstart+0xf0>)
   1022a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1022e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10232:	4628      	mov	r0, r5
   10234:	464b      	mov	r3, r9
   10236:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1023a:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   1023c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1023e:	f000 f903 	bl	10448 <z_setup_new_thread>
   10242:	4680      	mov	r8, r0
   10244:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   10246:	4628      	mov	r0, r5
   10248:	f022 0204 	bic.w	r2, r2, #4
   1024c:	736a      	strb	r2, [r5, #13]
   1024e:	f000 fd07 	bl	10c60 <z_ready_thread>
		init_idle_thread(i);
   10252:	4620      	mov	r0, r4
   10254:	f7ff ff50 	bl	100f8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10258:	4b0b      	ldr	r3, [pc, #44]	; (10288 <z_cstart+0xf4>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1025a:	464a      	mov	r2, r9
   1025c:	4641      	mov	r1, r8
   1025e:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10260:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
   10262:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   10264:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10266:	f7fd fc3b 	bl	dae0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1026a:	bf00      	nop
   1026c:	20001620 	.word	0x20001620
   10270:	e000ed00 	.word	0xe000ed00
   10274:	20000a2c 	.word	0x20000a2c
   10278:	0001014d 	.word	0x0001014d
   1027c:	00016aa8 	.word	0x00016aa8
   10280:	200001e0 	.word	0x200001e0
   10284:	20001f60 	.word	0x20001f60
   10288:	20000160 	.word	0x20000160

0001028c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1028e:	4c14      	ldr	r4, [pc, #80]	; (102e0 <init_mem_slab_module+0x54>)
   10290:	4d14      	ldr	r5, [pc, #80]	; (102e4 <init_mem_slab_module+0x58>)
   10292:	4e15      	ldr	r6, [pc, #84]	; (102e8 <init_mem_slab_module+0x5c>)
   10294:	42ac      	cmp	r4, r5
   10296:	d908      	bls.n	102aa <init_mem_slab_module+0x1e>
   10298:	4631      	mov	r1, r6
   1029a:	4814      	ldr	r0, [pc, #80]	; (102ec <init_mem_slab_module+0x60>)
   1029c:	223c      	movs	r2, #60	; 0x3c
   1029e:	f004 fbc5 	bl	14a2c <printk>
   102a2:	213c      	movs	r1, #60	; 0x3c
   102a4:	4630      	mov	r0, r6
   102a6:	f004 fc48 	bl	14b3a <assert_post_action>
   102aa:	42ac      	cmp	r4, r5
   102ac:	d301      	bcc.n	102b2 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   102ae:	2000      	movs	r0, #0
	return rc;
}
   102b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   102b2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   102b6:	ea42 0301 	orr.w	r3, r2, r1
   102ba:	f013 0303 	ands.w	r3, r3, #3
   102be:	d10b      	bne.n	102d8 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   102c0:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   102c2:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   102c4:	4283      	cmp	r3, r0
   102c6:	d101      	bne.n	102cc <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   102c8:	3420      	adds	r4, #32
   102ca:	e7e3      	b.n	10294 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   102cc:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   102ce:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   102d0:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   102d2:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   102d4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   102d6:	e7f5      	b.n	102c4 <init_mem_slab_module+0x38>
	return rc;
   102d8:	f06f 0015 	mvn.w	r0, #21
   102dc:	e7e8      	b.n	102b0 <init_mem_slab_module+0x24>
   102de:	bf00      	nop
   102e0:	2000010c 	.word	0x2000010c
   102e4:	2000010c 	.word	0x2000010c
   102e8:	00016ab0 	.word	0x00016ab0
   102ec:	00015a05 	.word	0x00015a05

000102f0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   102f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   102f4:	4604      	mov	r4, r0
   102f6:	460d      	mov	r5, r1
   102f8:	4690      	mov	r8, r2
   102fa:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   102fc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   10300:	f04f 0320 	mov.w	r3, #32
   10304:	f3ef 8911 	mrs	r9, BASEPRI
   10308:	f383 8812 	msr	BASEPRI_MAX, r3
   1030c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10310:	4630      	mov	r0, r6
   10312:	f000 f969 	bl	105e8 <z_spin_lock_valid>
   10316:	b940      	cbnz	r0, 1032a <k_mem_slab_alloc+0x3a>
   10318:	491f      	ldr	r1, [pc, #124]	; (10398 <k_mem_slab_alloc+0xa8>)
   1031a:	4820      	ldr	r0, [pc, #128]	; (1039c <k_mem_slab_alloc+0xac>)
   1031c:	2281      	movs	r2, #129	; 0x81
   1031e:	f004 fb85 	bl	14a2c <printk>
   10322:	2181      	movs	r1, #129	; 0x81
   10324:	481c      	ldr	r0, [pc, #112]	; (10398 <k_mem_slab_alloc+0xa8>)
   10326:	f004 fc08 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1032a:	4630      	mov	r0, r6
   1032c:	f000 f978 	bl	10620 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   10330:	69a3      	ldr	r3, [r4, #24]
   10332:	b1c3      	cbz	r3, 10366 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   10334:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   10336:	681b      	ldr	r3, [r3, #0]
   10338:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1033a:	69e3      	ldr	r3, [r4, #28]
   1033c:	3301      	adds	r3, #1
   1033e:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   10340:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10342:	4630      	mov	r0, r6
   10344:	f000 f95e 	bl	10604 <z_spin_unlock_valid>
   10348:	b940      	cbnz	r0, 1035c <k_mem_slab_alloc+0x6c>
   1034a:	4913      	ldr	r1, [pc, #76]	; (10398 <k_mem_slab_alloc+0xa8>)
   1034c:	4813      	ldr	r0, [pc, #76]	; (1039c <k_mem_slab_alloc+0xac>)
   1034e:	22ac      	movs	r2, #172	; 0xac
   10350:	f004 fb6c 	bl	14a2c <printk>
   10354:	21ac      	movs	r1, #172	; 0xac
   10356:	4810      	ldr	r0, [pc, #64]	; (10398 <k_mem_slab_alloc+0xa8>)
   10358:	f004 fbef 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   1035c:	f389 8811 	msr	BASEPRI, r9
   10360:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   10364:	e013      	b.n	1038e <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   10366:	ea58 0207 	orrs.w	r2, r8, r7
   1036a:	d103      	bne.n	10374 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   1036c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   10370:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   10372:	e7e6      	b.n	10342 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   10374:	4622      	mov	r2, r4
   10376:	4649      	mov	r1, r9
   10378:	4630      	mov	r0, r6
   1037a:	e9cd 8700 	strd	r8, r7, [sp]
   1037e:	f000 ff43 	bl	11208 <z_pend_curr>
		if (result == 0) {
   10382:	4604      	mov	r4, r0
   10384:	b918      	cbnz	r0, 1038e <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   10386:	4b06      	ldr	r3, [pc, #24]	; (103a0 <k_mem_slab_alloc+0xb0>)
   10388:	689b      	ldr	r3, [r3, #8]
   1038a:	695b      	ldr	r3, [r3, #20]
   1038c:	602b      	str	r3, [r5, #0]
}
   1038e:	4620      	mov	r0, r4
   10390:	b003      	add	sp, #12
   10392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10396:	bf00      	nop
   10398:	000159df 	.word	0x000159df
   1039c:	00015a05 	.word	0x00015a05
   103a0:	20000a2c 	.word	0x20000a2c

000103a4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   103a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103a8:	4604      	mov	r4, r0
   103aa:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   103ac:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   103b0:	f04f 0320 	mov.w	r3, #32
   103b4:	f3ef 8711 	mrs	r7, BASEPRI
   103b8:	f383 8812 	msr	BASEPRI_MAX, r3
   103bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   103c0:	4630      	mov	r0, r6
   103c2:	f000 f911 	bl	105e8 <z_spin_lock_valid>
   103c6:	b940      	cbnz	r0, 103da <k_mem_slab_free+0x36>
   103c8:	491d      	ldr	r1, [pc, #116]	; (10440 <k_mem_slab_free+0x9c>)
   103ca:	481e      	ldr	r0, [pc, #120]	; (10444 <k_mem_slab_free+0xa0>)
   103cc:	2281      	movs	r2, #129	; 0x81
   103ce:	f004 fb2d 	bl	14a2c <printk>
   103d2:	2181      	movs	r1, #129	; 0x81
   103d4:	481a      	ldr	r0, [pc, #104]	; (10440 <k_mem_slab_free+0x9c>)
   103d6:	f004 fbb0 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   103da:	4630      	mov	r0, r6
   103dc:	f000 f920 	bl	10620 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   103e0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   103e4:	f1b8 0f00 	cmp.w	r8, #0
   103e8:	d10f      	bne.n	1040a <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   103ea:	4620      	mov	r0, r4
   103ec:	f001 f872 	bl	114d4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   103f0:	b158      	cbz	r0, 1040a <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   103f2:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   103f4:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   103f8:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   103fa:	f000 fc31 	bl	10c60 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   103fe:	4639      	mov	r1, r7
   10400:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   10402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   10406:	f000 bc61 	b.w	10ccc <z_reschedule>
	**(char ***) mem = slab->free_list;
   1040a:	682b      	ldr	r3, [r5, #0]
   1040c:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1040e:	4630      	mov	r0, r6
   10410:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   10412:	682b      	ldr	r3, [r5, #0]
   10414:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   10416:	69e3      	ldr	r3, [r4, #28]
   10418:	3b01      	subs	r3, #1
   1041a:	61e3      	str	r3, [r4, #28]
   1041c:	f000 f8f2 	bl	10604 <z_spin_unlock_valid>
   10420:	b940      	cbnz	r0, 10434 <k_mem_slab_free+0x90>
   10422:	4907      	ldr	r1, [pc, #28]	; (10440 <k_mem_slab_free+0x9c>)
   10424:	4807      	ldr	r0, [pc, #28]	; (10444 <k_mem_slab_free+0xa0>)
   10426:	22ac      	movs	r2, #172	; 0xac
   10428:	f004 fb00 	bl	14a2c <printk>
   1042c:	21ac      	movs	r1, #172	; 0xac
   1042e:	4804      	ldr	r0, [pc, #16]	; (10440 <k_mem_slab_free+0x9c>)
   10430:	f004 fb83 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10434:	f387 8811 	msr	BASEPRI, r7
   10438:	f3bf 8f6f 	isb	sy
}
   1043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10440:	000159df 	.word	0x000159df
   10444:	00015a05 	.word	0x00015a05

00010448 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1044c:	b085      	sub	sp, #20
   1044e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   10452:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   10454:	f1b9 0f0f 	cmp.w	r9, #15
{
   10458:	460f      	mov	r7, r1
   1045a:	4615      	mov	r5, r2
   1045c:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   1045e:	d12e      	bne.n	104be <z_setup_new_thread+0x76>
   10460:	4b1f      	ldr	r3, [pc, #124]	; (104e0 <z_setup_new_thread+0x98>)
   10462:	4598      	cmp	r8, r3
   10464:	d12f      	bne.n	104c6 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   10466:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1046a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1046e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   10470:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   10472:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10474:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10476:	1de8      	adds	r0, r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   10478:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1047a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1047c:	f020 0007 	bic.w	r0, r0, #7
	new_thread->stack_info.size = stack_buf_size;
   10480:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   10484:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   10488:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   1048a:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   1048e:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   10490:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10492:	9302      	str	r3, [sp, #8]
   10494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	stack_ptr = (char *)stack + stack_obj_size;
   10496:	183d      	adds	r5, r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10498:	9301      	str	r3, [sp, #4]
   1049a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1049c:	462a      	mov	r2, r5
   1049e:	9300      	str	r3, [sp, #0]
   104a0:	4639      	mov	r1, r7
   104a2:	4643      	mov	r3, r8
   104a4:	4620      	mov	r0, r4
   104a6:	f7fd faff 	bl	daa8 <arch_new_thread>
	if (!_current) {
   104aa:	4b0e      	ldr	r3, [pc, #56]	; (104e4 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   104ac:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   104ae:	689b      	ldr	r3, [r3, #8]
   104b0:	b103      	cbz	r3, 104b4 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   104b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   104b4:	4628      	mov	r0, r5
   104b6:	6723      	str	r3, [r4, #112]	; 0x70
   104b8:	b005      	add	sp, #20
   104ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   104be:	f109 0310 	add.w	r3, r9, #16
   104c2:	2b1e      	cmp	r3, #30
   104c4:	d9cf      	bls.n	10466 <z_setup_new_thread+0x1e>
   104c6:	f240 12ff 	movw	r2, #511	; 0x1ff
   104ca:	4907      	ldr	r1, [pc, #28]	; (104e8 <z_setup_new_thread+0xa0>)
   104cc:	4807      	ldr	r0, [pc, #28]	; (104ec <z_setup_new_thread+0xa4>)
   104ce:	f004 faad 	bl	14a2c <printk>
   104d2:	f240 11ff 	movw	r1, #511	; 0x1ff
   104d6:	4804      	ldr	r0, [pc, #16]	; (104e8 <z_setup_new_thread+0xa0>)
   104d8:	f004 fb2f 	bl	14b3a <assert_post_action>
   104dc:	e7c3      	b.n	10466 <z_setup_new_thread+0x1e>
   104de:	bf00      	nop
   104e0:	00010631 	.word	0x00010631
   104e4:	20000a2c 	.word	0x20000a2c
   104e8:	00016ad5 	.word	0x00016ad5
   104ec:	00015a05 	.word	0x00015a05

000104f0 <z_init_static_threads>:
{
   104f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   104f4:	4c37      	ldr	r4, [pc, #220]	; (105d4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   104f6:	4d38      	ldr	r5, [pc, #224]	; (105d8 <z_init_static_threads+0xe8>)
   104f8:	4f38      	ldr	r7, [pc, #224]	; (105dc <z_init_static_threads+0xec>)
{
   104fa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   104fc:	42ac      	cmp	r4, r5
   104fe:	4626      	mov	r6, r4
   10500:	d90a      	bls.n	10518 <z_init_static_threads+0x28>
   10502:	4639      	mov	r1, r7
   10504:	4836      	ldr	r0, [pc, #216]	; (105e0 <z_init_static_threads+0xf0>)
   10506:	f240 22cf 	movw	r2, #719	; 0x2cf
   1050a:	f004 fa8f 	bl	14a2c <printk>
   1050e:	f240 21cf 	movw	r1, #719	; 0x2cf
   10512:	4638      	mov	r0, r7
   10514:	f004 fb11 	bl	14b3a <assert_post_action>
   10518:	42ae      	cmp	r6, r5
   1051a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1051e:	d31b      	bcc.n	10558 <z_init_static_threads+0x68>
	k_sched_lock();
   10520:	f000 fc4c 	bl	10dbc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10524:	4c2b      	ldr	r4, [pc, #172]	; (105d4 <z_init_static_threads+0xe4>)
   10526:	4e2d      	ldr	r6, [pc, #180]	; (105dc <z_init_static_threads+0xec>)
   10528:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 105e0 <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1052c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 105e4 <z_init_static_threads+0xf4>
   10530:	42ac      	cmp	r4, r5
   10532:	d90a      	bls.n	1054a <z_init_static_threads+0x5a>
   10534:	4631      	mov	r1, r6
   10536:	4640      	mov	r0, r8
   10538:	f240 22ee 	movw	r2, #750	; 0x2ee
   1053c:	f004 fa76 	bl	14a2c <printk>
   10540:	f240 21ee 	movw	r1, #750	; 0x2ee
   10544:	4630      	mov	r0, r6
   10546:	f004 faf8 	bl	14b3a <assert_post_action>
   1054a:	42ac      	cmp	r4, r5
   1054c:	d320      	bcc.n	10590 <z_init_static_threads+0xa0>
}
   1054e:	b007      	add	sp, #28
   10550:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   10554:	f000 bc86 	b.w	10e64 <k_sched_unlock>
		z_setup_new_thread(
   10558:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1055c:	9305      	str	r3, [sp, #20]
   1055e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10562:	9304      	str	r3, [sp, #16]
   10564:	f854 3c14 	ldr.w	r3, [r4, #-20]
   10568:	9303      	str	r3, [sp, #12]
   1056a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1056e:	9302      	str	r3, [sp, #8]
   10570:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10574:	9301      	str	r3, [sp, #4]
   10576:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1057a:	9300      	str	r3, [sp, #0]
   1057c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10580:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10584:	f7ff ff60 	bl	10448 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10588:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1058c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1058e:	e7b5      	b.n	104fc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10590:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10592:	1c5a      	adds	r2, r3, #1
   10594:	d00f      	beq.n	105b6 <z_init_static_threads+0xc6>
		} else {
			return (t * to_hz + off) / from_hz;
   10596:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1059a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1059e:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   105a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   105a4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   105a8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   105ac:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   105ae:	d104      	bne.n	105ba <z_init_static_threads+0xca>
	z_sched_start(thread);
   105b0:	4638      	mov	r0, r7
   105b2:	f000 fbc1 	bl	10d38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   105b6:	3430      	adds	r4, #48	; 0x30
   105b8:	e7ba      	b.n	10530 <z_init_static_threads+0x40>
   105ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   105be:	2300      	movs	r3, #0
   105c0:	f7fb ff3c 	bl	c43c <__aeabi_uldivmod>
   105c4:	4602      	mov	r2, r0
   105c6:	460b      	mov	r3, r1
   105c8:	f107 0018 	add.w	r0, r7, #24
   105cc:	4649      	mov	r1, r9
   105ce:	f001 fa0d 	bl	119ec <z_add_timeout>
   105d2:	e7f0      	b.n	105b6 <z_init_static_threads+0xc6>
   105d4:	2000010c 	.word	0x2000010c
   105d8:	2000010c 	.word	0x2000010c
   105dc:	00016ad5 	.word	0x00016ad5
   105e0:	00015a05 	.word	0x00015a05
   105e4:	00011445 	.word	0x00011445

000105e8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   105e8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   105ea:	b138      	cbz	r0, 105fc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   105ec:	4b04      	ldr	r3, [pc, #16]	; (10600 <z_spin_lock_valid+0x18>)
   105ee:	f000 0003 	and.w	r0, r0, #3
   105f2:	7d1b      	ldrb	r3, [r3, #20]
   105f4:	1ac0      	subs	r0, r0, r3
   105f6:	bf18      	it	ne
   105f8:	2001      	movne	r0, #1
   105fa:	4770      	bx	lr
			return false;
		}
	}
	return true;
   105fc:	2001      	movs	r0, #1
}
   105fe:	4770      	bx	lr
   10600:	20000a2c 	.word	0x20000a2c

00010604 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10604:	4a05      	ldr	r2, [pc, #20]	; (1061c <z_spin_unlock_valid+0x18>)
{
   10606:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10608:	7d11      	ldrb	r1, [r2, #20]
   1060a:	6892      	ldr	r2, [r2, #8]
   1060c:	430a      	orrs	r2, r1
   1060e:	6801      	ldr	r1, [r0, #0]
   10610:	2000      	movs	r0, #0
   10612:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   10614:	bf04      	itt	eq
   10616:	6018      	streq	r0, [r3, #0]
	return true;
   10618:	2001      	moveq	r0, #1
}
   1061a:	4770      	bx	lr
   1061c:	20000a2c 	.word	0x20000a2c

00010620 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   10620:	4b02      	ldr	r3, [pc, #8]	; (1062c <z_spin_lock_set_owner+0xc>)
   10622:	7d1a      	ldrb	r2, [r3, #20]
   10624:	689b      	ldr	r3, [r3, #8]
   10626:	4313      	orrs	r3, r2
   10628:	6003      	str	r3, [r0, #0]
}
   1062a:	4770      	bx	lr
   1062c:	20000a2c 	.word	0x20000a2c

00010630 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   10630:	4c10      	ldr	r4, [pc, #64]	; (10674 <idle+0x44>)
{
   10632:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   10634:	68a3      	ldr	r3, [r4, #8]
   10636:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1063a:	2b00      	cmp	r3, #0
   1063c:	da08      	bge.n	10650 <idle+0x20>
   1063e:	490e      	ldr	r1, [pc, #56]	; (10678 <idle+0x48>)
   10640:	480e      	ldr	r0, [pc, #56]	; (1067c <idle+0x4c>)
   10642:	2227      	movs	r2, #39	; 0x27
   10644:	f004 f9f2 	bl	14a2c <printk>
   10648:	2127      	movs	r1, #39	; 0x27
   1064a:	480b      	ldr	r0, [pc, #44]	; (10678 <idle+0x48>)
   1064c:	f004 fa75 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10650:	f04f 0220 	mov.w	r2, #32
   10654:	f3ef 8311 	mrs	r3, BASEPRI
   10658:	f382 8812 	msr	BASEPRI_MAX, r2
   1065c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   10660:	f001 faae 	bl	11bc0 <z_get_next_timeout_expiry>
   10664:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   10666:	f7fc fd2b 	bl	d0c0 <pm_system_suspend>
   1066a:	2800      	cmp	r0, #0
   1066c:	d1f0      	bne.n	10650 <idle+0x20>
	arch_cpu_idle();
   1066e:	f7fd f927 	bl	d8c0 <arch_cpu_idle>
}
   10672:	e7ed      	b.n	10650 <idle+0x20>
   10674:	20000a2c 	.word	0x20000a2c
   10678:	00016af8 	.word	0x00016af8
   1067c:	00015a05 	.word	0x00015a05

00010680 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10684:	4604      	mov	r4, r0
   10686:	4617      	mov	r7, r2
   10688:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1068a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1068e:	b143      	cbz	r3, 106a2 <z_impl_k_mutex_lock+0x22>
   10690:	495f      	ldr	r1, [pc, #380]	; (10810 <z_impl_k_mutex_lock+0x190>)
   10692:	4860      	ldr	r0, [pc, #384]	; (10814 <z_impl_k_mutex_lock+0x194>)
   10694:	2265      	movs	r2, #101	; 0x65
   10696:	f004 f9c9 	bl	14a2c <printk>
   1069a:	2165      	movs	r1, #101	; 0x65
   1069c:	485c      	ldr	r0, [pc, #368]	; (10810 <z_impl_k_mutex_lock+0x190>)
   1069e:	f004 fa4c 	bl	14b3a <assert_post_action>
   106a2:	f04f 0320 	mov.w	r3, #32
   106a6:	f3ef 8811 	mrs	r8, BASEPRI
   106aa:	f383 8812 	msr	BASEPRI_MAX, r3
   106ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   106b2:	4859      	ldr	r0, [pc, #356]	; (10818 <z_impl_k_mutex_lock+0x198>)
   106b4:	f7ff ff98 	bl	105e8 <z_spin_lock_valid>
   106b8:	b940      	cbnz	r0, 106cc <z_impl_k_mutex_lock+0x4c>
   106ba:	4958      	ldr	r1, [pc, #352]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   106bc:	4855      	ldr	r0, [pc, #340]	; (10814 <z_impl_k_mutex_lock+0x194>)
   106be:	2281      	movs	r2, #129	; 0x81
   106c0:	f004 f9b4 	bl	14a2c <printk>
   106c4:	2181      	movs	r1, #129	; 0x81
   106c6:	4855      	ldr	r0, [pc, #340]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   106c8:	f004 fa37 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   106cc:	4852      	ldr	r0, [pc, #328]	; (10818 <z_impl_k_mutex_lock+0x198>)
   106ce:	f7ff ffa7 	bl	10620 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   106d2:	68e3      	ldr	r3, [r4, #12]
   106d4:	4a52      	ldr	r2, [pc, #328]	; (10820 <z_impl_k_mutex_lock+0x1a0>)
   106d6:	b1e3      	cbz	r3, 10712 <z_impl_k_mutex_lock+0x92>
   106d8:	68a0      	ldr	r0, [r4, #8]
   106da:	6891      	ldr	r1, [r2, #8]
   106dc:	4288      	cmp	r0, r1
   106de:	d033      	beq.n	10748 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   106e0:	ea57 0306 	orrs.w	r3, r7, r6
   106e4:	d132      	bne.n	1074c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   106e6:	484c      	ldr	r0, [pc, #304]	; (10818 <z_impl_k_mutex_lock+0x198>)
   106e8:	f7ff ff8c 	bl	10604 <z_spin_unlock_valid>
   106ec:	b940      	cbnz	r0, 10700 <z_impl_k_mutex_lock+0x80>
   106ee:	494b      	ldr	r1, [pc, #300]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   106f0:	4848      	ldr	r0, [pc, #288]	; (10814 <z_impl_k_mutex_lock+0x194>)
   106f2:	22ac      	movs	r2, #172	; 0xac
   106f4:	f004 f99a 	bl	14a2c <printk>
   106f8:	21ac      	movs	r1, #172	; 0xac
   106fa:	4848      	ldr	r0, [pc, #288]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   106fc:	f004 fa1d 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10700:	f388 8811 	msr	BASEPRI, r8
   10704:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   10708:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1070c:	b002      	add	sp, #8
   1070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   10712:	6891      	ldr	r1, [r2, #8]
   10714:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   10718:	3301      	adds	r3, #1
   1071a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1071c:	6893      	ldr	r3, [r2, #8]
   1071e:	483e      	ldr	r0, [pc, #248]	; (10818 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10720:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   10722:	60a3      	str	r3, [r4, #8]
   10724:	f7ff ff6e 	bl	10604 <z_spin_unlock_valid>
   10728:	b940      	cbnz	r0, 1073c <z_impl_k_mutex_lock+0xbc>
   1072a:	493c      	ldr	r1, [pc, #240]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   1072c:	4839      	ldr	r0, [pc, #228]	; (10814 <z_impl_k_mutex_lock+0x194>)
   1072e:	22ac      	movs	r2, #172	; 0xac
   10730:	f004 f97c 	bl	14a2c <printk>
   10734:	21ac      	movs	r1, #172	; 0xac
   10736:	4839      	ldr	r0, [pc, #228]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   10738:	f004 f9ff 	bl	14b3a <assert_post_action>
   1073c:	f388 8811 	msr	BASEPRI, r8
   10740:	f3bf 8f6f 	isb	sy
		return 0;
   10744:	2000      	movs	r0, #0
   10746:	e7e1      	b.n	1070c <z_impl_k_mutex_lock+0x8c>
					_current->base.prio :
   10748:	6921      	ldr	r1, [r4, #16]
   1074a:	e7e5      	b.n	10718 <z_impl_k_mutex_lock+0x98>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1074c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   10750:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   10754:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   10758:	4299      	cmp	r1, r3
   1075a:	bfa8      	it	ge
   1075c:	4619      	movge	r1, r3
   1075e:	4291      	cmp	r1, r2
   10760:	bfb8      	it	lt
   10762:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10764:	428b      	cmp	r3, r1
   10766:	dd49      	ble.n	107fc <z_impl_k_mutex_lock+0x17c>
		resched = adjust_owner_prio(mutex, new_prio);
   10768:	f004 fd2a 	bl	151c0 <adjust_owner_prio.isra.0>
   1076c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1076e:	4622      	mov	r2, r4
   10770:	4641      	mov	r1, r8
   10772:	e9cd 7600 	strd	r7, r6, [sp]
   10776:	4828      	ldr	r0, [pc, #160]	; (10818 <z_impl_k_mutex_lock+0x198>)
   10778:	f000 fd46 	bl	11208 <z_pend_curr>
	if (got_mutex == 0) {
   1077c:	2800      	cmp	r0, #0
   1077e:	d0e1      	beq.n	10744 <z_impl_k_mutex_lock+0xc4>
	__asm__ volatile(
   10780:	f04f 0320 	mov.w	r3, #32
   10784:	f3ef 8611 	mrs	r6, BASEPRI
   10788:	f383 8812 	msr	BASEPRI_MAX, r3
   1078c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10790:	4821      	ldr	r0, [pc, #132]	; (10818 <z_impl_k_mutex_lock+0x198>)
   10792:	f7ff ff29 	bl	105e8 <z_spin_lock_valid>
   10796:	b940      	cbnz	r0, 107aa <z_impl_k_mutex_lock+0x12a>
   10798:	4920      	ldr	r1, [pc, #128]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   1079a:	481e      	ldr	r0, [pc, #120]	; (10814 <z_impl_k_mutex_lock+0x194>)
   1079c:	2281      	movs	r2, #129	; 0x81
   1079e:	f004 f945 	bl	14a2c <printk>
   107a2:	2181      	movs	r1, #129	; 0x81
   107a4:	481d      	ldr	r0, [pc, #116]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   107a6:	f004 f9c8 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   107aa:	481b      	ldr	r0, [pc, #108]	; (10818 <z_impl_k_mutex_lock+0x198>)
   107ac:	f7ff ff38 	bl	10620 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   107b0:	6823      	ldr	r3, [r4, #0]
   107b2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   107b4:	429c      	cmp	r4, r3
   107b6:	d00a      	beq.n	107ce <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   107b8:	b14b      	cbz	r3, 107ce <z_impl_k_mutex_lock+0x14e>
   107ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
   107be:	4299      	cmp	r1, r3
   107c0:	bfa8      	it	ge
   107c2:	4619      	movge	r1, r3
   107c4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   107c8:	4299      	cmp	r1, r3
   107ca:	bfb8      	it	lt
   107cc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   107ce:	68a0      	ldr	r0, [r4, #8]
   107d0:	f004 fcf6 	bl	151c0 <adjust_owner_prio.isra.0>
   107d4:	b9a0      	cbnz	r0, 10800 <z_impl_k_mutex_lock+0x180>
   107d6:	b99d      	cbnz	r5, 10800 <z_impl_k_mutex_lock+0x180>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   107d8:	480f      	ldr	r0, [pc, #60]	; (10818 <z_impl_k_mutex_lock+0x198>)
   107da:	f7ff ff13 	bl	10604 <z_spin_unlock_valid>
   107de:	b940      	cbnz	r0, 107f2 <z_impl_k_mutex_lock+0x172>
   107e0:	490e      	ldr	r1, [pc, #56]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   107e2:	480c      	ldr	r0, [pc, #48]	; (10814 <z_impl_k_mutex_lock+0x194>)
   107e4:	22ac      	movs	r2, #172	; 0xac
   107e6:	f004 f921 	bl	14a2c <printk>
   107ea:	21ac      	movs	r1, #172	; 0xac
   107ec:	480b      	ldr	r0, [pc, #44]	; (1081c <z_impl_k_mutex_lock+0x19c>)
   107ee:	f004 f9a4 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   107f2:	f386 8811 	msr	BASEPRI, r6
   107f6:	f3bf 8f6f 	isb	sy
   107fa:	e005      	b.n	10808 <z_impl_k_mutex_lock+0x188>
	bool resched = false;
   107fc:	2500      	movs	r5, #0
   107fe:	e7b6      	b.n	1076e <z_impl_k_mutex_lock+0xee>
		z_reschedule(&lock, key);
   10800:	4631      	mov	r1, r6
   10802:	4805      	ldr	r0, [pc, #20]	; (10818 <z_impl_k_mutex_lock+0x198>)
   10804:	f000 fa62 	bl	10ccc <z_reschedule>
	return -EAGAIN;
   10808:	f06f 000a 	mvn.w	r0, #10
   1080c:	e77e      	b.n	1070c <z_impl_k_mutex_lock+0x8c>
   1080e:	bf00      	nop
   10810:	00016b19 	.word	0x00016b19
   10814:	00015a05 	.word	0x00015a05
   10818:	20000a54 	.word	0x20000a54
   1081c:	000159df 	.word	0x000159df
   10820:	20000a2c 	.word	0x20000a2c

00010824 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10824:	b538      	push	{r3, r4, r5, lr}
   10826:	4604      	mov	r4, r0
   10828:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1082c:	b143      	cbz	r3, 10840 <z_impl_k_mutex_unlock+0x1c>
   1082e:	4943      	ldr	r1, [pc, #268]	; (1093c <z_impl_k_mutex_unlock+0x118>)
   10830:	4843      	ldr	r0, [pc, #268]	; (10940 <z_impl_k_mutex_unlock+0x11c>)
   10832:	22c7      	movs	r2, #199	; 0xc7
   10834:	f004 f8fa 	bl	14a2c <printk>
   10838:	21c7      	movs	r1, #199	; 0xc7
   1083a:	4840      	ldr	r0, [pc, #256]	; (1093c <z_impl_k_mutex_unlock+0x118>)
   1083c:	f004 f97d 	bl	14b3a <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10840:	68a3      	ldr	r3, [r4, #8]
   10842:	2b00      	cmp	r3, #0
   10844:	d074      	beq.n	10930 <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10846:	4d3f      	ldr	r5, [pc, #252]	; (10944 <z_impl_k_mutex_unlock+0x120>)
   10848:	68aa      	ldr	r2, [r5, #8]
   1084a:	4293      	cmp	r3, r2
   1084c:	d173      	bne.n	10936 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1084e:	68e3      	ldr	r3, [r4, #12]
   10850:	b943      	cbnz	r3, 10864 <z_impl_k_mutex_unlock+0x40>
   10852:	493a      	ldr	r1, [pc, #232]	; (1093c <z_impl_k_mutex_unlock+0x118>)
   10854:	483a      	ldr	r0, [pc, #232]	; (10940 <z_impl_k_mutex_unlock+0x11c>)
   10856:	22df      	movs	r2, #223	; 0xdf
   10858:	f004 f8e8 	bl	14a2c <printk>
   1085c:	21df      	movs	r1, #223	; 0xdf
   1085e:	4837      	ldr	r0, [pc, #220]	; (1093c <z_impl_k_mutex_unlock+0x118>)
   10860:	f004 f96b 	bl	14b3a <assert_post_action>
   10864:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   10868:	b143      	cbz	r3, 1087c <z_impl_k_mutex_unlock+0x58>
   1086a:	4937      	ldr	r1, [pc, #220]	; (10948 <z_impl_k_mutex_unlock+0x124>)
   1086c:	4834      	ldr	r0, [pc, #208]	; (10940 <z_impl_k_mutex_unlock+0x11c>)
   1086e:	22fd      	movs	r2, #253	; 0xfd
   10870:	f004 f8dc 	bl	14a2c <printk>
   10874:	21fd      	movs	r1, #253	; 0xfd
   10876:	4834      	ldr	r0, [pc, #208]	; (10948 <z_impl_k_mutex_unlock+0x124>)
   10878:	f004 f95f 	bl	14b3a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1087c:	68ab      	ldr	r3, [r5, #8]
   1087e:	7bdb      	ldrb	r3, [r3, #15]
   10880:	2b01      	cmp	r3, #1
   10882:	d108      	bne.n	10896 <z_impl_k_mutex_unlock+0x72>
   10884:	4930      	ldr	r1, [pc, #192]	; (10948 <z_impl_k_mutex_unlock+0x124>)
   10886:	482e      	ldr	r0, [pc, #184]	; (10940 <z_impl_k_mutex_unlock+0x11c>)
   10888:	22fe      	movs	r2, #254	; 0xfe
   1088a:	f004 f8cf 	bl	14a2c <printk>
   1088e:	21fe      	movs	r1, #254	; 0xfe
   10890:	482d      	ldr	r0, [pc, #180]	; (10948 <z_impl_k_mutex_unlock+0x124>)
   10892:	f004 f952 	bl	14b3a <assert_post_action>

	--_current->base.sched_locked;
   10896:	68aa      	ldr	r2, [r5, #8]
   10898:	7bd3      	ldrb	r3, [r2, #15]
   1089a:	3b01      	subs	r3, #1
   1089c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1089e:	68e3      	ldr	r3, [r4, #12]
   108a0:	2b01      	cmp	r3, #1
   108a2:	d905      	bls.n	108b0 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   108a4:	3b01      	subs	r3, #1
   108a6:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   108a8:	f000 fadc 	bl	10e64 <k_sched_unlock>

	return 0;
   108ac:	2000      	movs	r0, #0
}
   108ae:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   108b0:	f04f 0320 	mov.w	r3, #32
   108b4:	f3ef 8511 	mrs	r5, BASEPRI
   108b8:	f383 8812 	msr	BASEPRI_MAX, r3
   108bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   108c0:	4822      	ldr	r0, [pc, #136]	; (1094c <z_impl_k_mutex_unlock+0x128>)
   108c2:	f7ff fe91 	bl	105e8 <z_spin_lock_valid>
   108c6:	b940      	cbnz	r0, 108da <z_impl_k_mutex_unlock+0xb6>
   108c8:	4921      	ldr	r1, [pc, #132]	; (10950 <z_impl_k_mutex_unlock+0x12c>)
   108ca:	481d      	ldr	r0, [pc, #116]	; (10940 <z_impl_k_mutex_unlock+0x11c>)
   108cc:	2281      	movs	r2, #129	; 0x81
   108ce:	f004 f8ad 	bl	14a2c <printk>
   108d2:	2181      	movs	r1, #129	; 0x81
   108d4:	481e      	ldr	r0, [pc, #120]	; (10950 <z_impl_k_mutex_unlock+0x12c>)
   108d6:	f004 f930 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   108da:	481c      	ldr	r0, [pc, #112]	; (1094c <z_impl_k_mutex_unlock+0x128>)
   108dc:	f7ff fea0 	bl	10620 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   108e0:	6921      	ldr	r1, [r4, #16]
   108e2:	68a0      	ldr	r0, [r4, #8]
   108e4:	f004 fc6c 	bl	151c0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   108e8:	4620      	mov	r0, r4
   108ea:	f000 fdf3 	bl	114d4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   108ee:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   108f0:	b158      	cbz	r0, 1090a <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
   108f2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   108f6:	6122      	str	r2, [r4, #16]
   108f8:	2200      	movs	r2, #0
   108fa:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   108fc:	f000 f9b0 	bl	10c60 <z_ready_thread>
		z_reschedule(&lock, key);
   10900:	4629      	mov	r1, r5
   10902:	4812      	ldr	r0, [pc, #72]	; (1094c <z_impl_k_mutex_unlock+0x128>)
   10904:	f000 f9e2 	bl	10ccc <z_reschedule>
   10908:	e7ce      	b.n	108a8 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   1090a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1090c:	480f      	ldr	r0, [pc, #60]	; (1094c <z_impl_k_mutex_unlock+0x128>)
   1090e:	f7ff fe79 	bl	10604 <z_spin_unlock_valid>
   10912:	b940      	cbnz	r0, 10926 <z_impl_k_mutex_unlock+0x102>
   10914:	490e      	ldr	r1, [pc, #56]	; (10950 <z_impl_k_mutex_unlock+0x12c>)
   10916:	480a      	ldr	r0, [pc, #40]	; (10940 <z_impl_k_mutex_unlock+0x11c>)
   10918:	22ac      	movs	r2, #172	; 0xac
   1091a:	f004 f887 	bl	14a2c <printk>
   1091e:	21ac      	movs	r1, #172	; 0xac
   10920:	480b      	ldr	r0, [pc, #44]	; (10950 <z_impl_k_mutex_unlock+0x12c>)
   10922:	f004 f90a 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10926:	f385 8811 	msr	BASEPRI, r5
   1092a:	f3bf 8f6f 	isb	sy
   1092e:	e7bb      	b.n	108a8 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   10930:	f06f 0015 	mvn.w	r0, #21
   10934:	e7bb      	b.n	108ae <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   10936:	f04f 30ff 	mov.w	r0, #4294967295
   1093a:	e7b8      	b.n	108ae <z_impl_k_mutex_unlock+0x8a>
   1093c:	00016b19 	.word	0x00016b19
   10940:	00015a05 	.word	0x00015a05
   10944:	20000a2c 	.word	0x20000a2c
   10948:	00016b3b 	.word	0x00016b3b
   1094c:	20000a54 	.word	0x20000a54
   10950:	000159df 	.word	0x000159df

00010954 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10954:	b538      	push	{r3, r4, r5, lr}
   10956:	4604      	mov	r4, r0
	__asm__ volatile(
   10958:	f04f 0320 	mov.w	r3, #32
   1095c:	f3ef 8511 	mrs	r5, BASEPRI
   10960:	f383 8812 	msr	BASEPRI_MAX, r3
   10964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10968:	4812      	ldr	r0, [pc, #72]	; (109b4 <z_impl_k_sem_give+0x60>)
   1096a:	f7ff fe3d 	bl	105e8 <z_spin_lock_valid>
   1096e:	b940      	cbnz	r0, 10982 <z_impl_k_sem_give+0x2e>
   10970:	4911      	ldr	r1, [pc, #68]	; (109b8 <z_impl_k_sem_give+0x64>)
   10972:	4812      	ldr	r0, [pc, #72]	; (109bc <z_impl_k_sem_give+0x68>)
   10974:	2281      	movs	r2, #129	; 0x81
   10976:	f004 f859 	bl	14a2c <printk>
   1097a:	2181      	movs	r1, #129	; 0x81
   1097c:	480e      	ldr	r0, [pc, #56]	; (109b8 <z_impl_k_sem_give+0x64>)
   1097e:	f004 f8dc 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   10982:	480c      	ldr	r0, [pc, #48]	; (109b4 <z_impl_k_sem_give+0x60>)
   10984:	f7ff fe4c 	bl	10620 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10988:	4620      	mov	r0, r4
   1098a:	f000 fda3 	bl	114d4 <z_unpend_first_thread>

	if (thread != NULL) {
   1098e:	b148      	cbz	r0, 109a4 <z_impl_k_sem_give+0x50>
   10990:	2200      	movs	r2, #0
   10992:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10994:	f000 f964 	bl	10c60 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10998:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1099a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1099e:	4805      	ldr	r0, [pc, #20]	; (109b4 <z_impl_k_sem_give+0x60>)
   109a0:	f000 b994 	b.w	10ccc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   109a4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   109a8:	429a      	cmp	r2, r3
   109aa:	bf18      	it	ne
   109ac:	3301      	addne	r3, #1
   109ae:	60a3      	str	r3, [r4, #8]
}
   109b0:	e7f2      	b.n	10998 <z_impl_k_sem_give+0x44>
   109b2:	bf00      	nop
   109b4:	20000a58 	.word	0x20000a58
   109b8:	000159df 	.word	0x000159df
   109bc:	00015a05 	.word	0x00015a05

000109c0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   109c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   109c2:	4604      	mov	r4, r0
   109c4:	4617      	mov	r7, r2
   109c6:	461d      	mov	r5, r3
   109c8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   109cc:	b15b      	cbz	r3, 109e6 <z_impl_k_sem_take+0x26>
   109ce:	ea52 0305 	orrs.w	r3, r2, r5
   109d2:	d008      	beq.n	109e6 <z_impl_k_sem_take+0x26>
   109d4:	492b      	ldr	r1, [pc, #172]	; (10a84 <z_impl_k_sem_take+0xc4>)
   109d6:	482c      	ldr	r0, [pc, #176]	; (10a88 <z_impl_k_sem_take+0xc8>)
   109d8:	2279      	movs	r2, #121	; 0x79
   109da:	f004 f827 	bl	14a2c <printk>
   109de:	2179      	movs	r1, #121	; 0x79
   109e0:	4828      	ldr	r0, [pc, #160]	; (10a84 <z_impl_k_sem_take+0xc4>)
   109e2:	f004 f8aa 	bl	14b3a <assert_post_action>
   109e6:	f04f 0320 	mov.w	r3, #32
   109ea:	f3ef 8611 	mrs	r6, BASEPRI
   109ee:	f383 8812 	msr	BASEPRI_MAX, r3
   109f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   109f6:	4825      	ldr	r0, [pc, #148]	; (10a8c <z_impl_k_sem_take+0xcc>)
   109f8:	f7ff fdf6 	bl	105e8 <z_spin_lock_valid>
   109fc:	b940      	cbnz	r0, 10a10 <z_impl_k_sem_take+0x50>
   109fe:	4924      	ldr	r1, [pc, #144]	; (10a90 <z_impl_k_sem_take+0xd0>)
   10a00:	4821      	ldr	r0, [pc, #132]	; (10a88 <z_impl_k_sem_take+0xc8>)
   10a02:	2281      	movs	r2, #129	; 0x81
   10a04:	f004 f812 	bl	14a2c <printk>
   10a08:	2181      	movs	r1, #129	; 0x81
   10a0a:	4821      	ldr	r0, [pc, #132]	; (10a90 <z_impl_k_sem_take+0xd0>)
   10a0c:	f004 f895 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   10a10:	481e      	ldr	r0, [pc, #120]	; (10a8c <z_impl_k_sem_take+0xcc>)
   10a12:	f7ff fe05 	bl	10620 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10a16:	68a3      	ldr	r3, [r4, #8]
   10a18:	b1ab      	cbz	r3, 10a46 <z_impl_k_sem_take+0x86>
		sem->count--;
   10a1a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a1c:	481b      	ldr	r0, [pc, #108]	; (10a8c <z_impl_k_sem_take+0xcc>)
   10a1e:	60a3      	str	r3, [r4, #8]
   10a20:	f7ff fdf0 	bl	10604 <z_spin_unlock_valid>
   10a24:	b940      	cbnz	r0, 10a38 <z_impl_k_sem_take+0x78>
   10a26:	491a      	ldr	r1, [pc, #104]	; (10a90 <z_impl_k_sem_take+0xd0>)
   10a28:	4817      	ldr	r0, [pc, #92]	; (10a88 <z_impl_k_sem_take+0xc8>)
   10a2a:	22ac      	movs	r2, #172	; 0xac
   10a2c:	f003 fffe 	bl	14a2c <printk>
   10a30:	21ac      	movs	r1, #172	; 0xac
   10a32:	4817      	ldr	r0, [pc, #92]	; (10a90 <z_impl_k_sem_take+0xd0>)
   10a34:	f004 f881 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10a38:	f386 8811 	msr	BASEPRI, r6
   10a3c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10a40:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10a42:	b003      	add	sp, #12
   10a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10a46:	ea57 0305 	orrs.w	r3, r7, r5
   10a4a:	d113      	bne.n	10a74 <z_impl_k_sem_take+0xb4>
   10a4c:	480f      	ldr	r0, [pc, #60]	; (10a8c <z_impl_k_sem_take+0xcc>)
   10a4e:	f7ff fdd9 	bl	10604 <z_spin_unlock_valid>
   10a52:	b940      	cbnz	r0, 10a66 <z_impl_k_sem_take+0xa6>
   10a54:	490e      	ldr	r1, [pc, #56]	; (10a90 <z_impl_k_sem_take+0xd0>)
   10a56:	480c      	ldr	r0, [pc, #48]	; (10a88 <z_impl_k_sem_take+0xc8>)
   10a58:	22ac      	movs	r2, #172	; 0xac
   10a5a:	f003 ffe7 	bl	14a2c <printk>
   10a5e:	21ac      	movs	r1, #172	; 0xac
   10a60:	480b      	ldr	r0, [pc, #44]	; (10a90 <z_impl_k_sem_take+0xd0>)
   10a62:	f004 f86a 	bl	14b3a <assert_post_action>
   10a66:	f386 8811 	msr	BASEPRI, r6
   10a6a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10a6e:	f06f 000f 	mvn.w	r0, #15
   10a72:	e7e6      	b.n	10a42 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10a74:	4622      	mov	r2, r4
   10a76:	4631      	mov	r1, r6
   10a78:	e9cd 7500 	strd	r7, r5, [sp]
   10a7c:	4803      	ldr	r0, [pc, #12]	; (10a8c <z_impl_k_sem_take+0xcc>)
   10a7e:	f000 fbc3 	bl	11208 <z_pend_curr>
	return ret;
   10a82:	e7de      	b.n	10a42 <z_impl_k_sem_take+0x82>
   10a84:	00016b66 	.word	0x00016b66
   10a88:	00015a05 	.word	0x00015a05
   10a8c:	20000a58 	.word	0x20000a58
   10a90:	000159df 	.word	0x000159df

00010a94 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   10a94:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   10a96:	4c08      	ldr	r4, [pc, #32]	; (10ab8 <z_reset_time_slice+0x24>)
   10a98:	6823      	ldr	r3, [r4, #0]
   10a9a:	b15b      	cbz	r3, 10ab4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10a9c:	f7fe fbb4 	bl	f208 <sys_clock_elapsed>
   10aa0:	4603      	mov	r3, r0
   10aa2:	6820      	ldr	r0, [r4, #0]
   10aa4:	4a05      	ldr	r2, [pc, #20]	; (10abc <z_reset_time_slice+0x28>)
   10aa6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   10aa8:	2100      	movs	r1, #0
	}
}
   10aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10aae:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   10ab0:	f001 b8bc 	b.w	11c2c <z_set_timeout_expiry>
}
   10ab4:	bd10      	pop	{r4, pc}
   10ab6:	bf00      	nop
   10ab8:	20000a64 	.word	0x20000a64
   10abc:	20000a2c 	.word	0x20000a2c

00010ac0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   10ac0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   10ac2:	4c14      	ldr	r4, [pc, #80]	; (10b14 <update_cache+0x54>)
   10ac4:	4623      	mov	r3, r4
   10ac6:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10aca:	429d      	cmp	r5, r3
   10acc:	d000      	beq.n	10ad0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10ace:	b905      	cbnz	r5, 10ad2 <update_cache+0x12>
   10ad0:	68e5      	ldr	r5, [r4, #12]
	__ASSERT(_current != NULL, "");
   10ad2:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   10ad4:	b120      	cbz	r0, 10ae0 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   10ad6:	68a3      	ldr	r3, [r4, #8]
   10ad8:	42ab      	cmp	r3, r5
   10ada:	d117      	bne.n	10b0c <update_cache+0x4c>
			z_reset_time_slice();
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   10adc:	462b      	mov	r3, r5
   10ade:	e013      	b.n	10b08 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   10ae0:	b943      	cbnz	r3, 10af4 <update_cache+0x34>
   10ae2:	490d      	ldr	r1, [pc, #52]	; (10b18 <update_cache+0x58>)
   10ae4:	480d      	ldr	r0, [pc, #52]	; (10b1c <update_cache+0x5c>)
   10ae6:	2289      	movs	r2, #137	; 0x89
   10ae8:	f003 ffa0 	bl	14a2c <printk>
   10aec:	2189      	movs	r1, #137	; 0x89
   10aee:	480a      	ldr	r0, [pc, #40]	; (10b18 <update_cache+0x58>)
   10af0:	f004 f823 	bl	14b3a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   10af4:	68a3      	ldr	r3, [r4, #8]
   10af6:	7b5a      	ldrb	r2, [r3, #13]
   10af8:	06d2      	lsls	r2, r2, #27
   10afa:	d1ec      	bne.n	10ad6 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10afc:	69aa      	ldr	r2, [r5, #24]
   10afe:	2a00      	cmp	r2, #0
   10b00:	d1e9      	bne.n	10ad6 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
   10b02:	89da      	ldrh	r2, [r3, #14]
   10b04:	2a7f      	cmp	r2, #127	; 0x7f
   10b06:	d9e6      	bls.n	10ad6 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
   10b08:	61e3      	str	r3, [r4, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   10b0a:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice();
   10b0c:	f7ff ffc2 	bl	10a94 <z_reset_time_slice>
   10b10:	e7e4      	b.n	10adc <update_cache+0x1c>
   10b12:	bf00      	nop
   10b14:	20000a2c 	.word	0x20000a2c
   10b18:	00016b86 	.word	0x00016b86
   10b1c:	00015a05 	.word	0x00015a05

00010b20 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   10b20:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10b22:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10b26:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10b28:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   10b2a:	7b43      	ldrb	r3, [r0, #13]
   10b2c:	db38      	blt.n	10ba0 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10b2e:	06da      	lsls	r2, r3, #27
   10b30:	d136      	bne.n	10ba0 <ready_thread+0x80>
	return node->next != NULL;
   10b32:	6985      	ldr	r5, [r0, #24]
   10b34:	2d00      	cmp	r5, #0
   10b36:	d133      	bne.n	10ba0 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   10b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10b3c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10b3e:	4b19      	ldr	r3, [pc, #100]	; (10ba4 <ready_thread+0x84>)
   10b40:	4298      	cmp	r0, r3
   10b42:	d108      	bne.n	10b56 <ready_thread+0x36>
   10b44:	4918      	ldr	r1, [pc, #96]	; (10ba8 <ready_thread+0x88>)
   10b46:	4819      	ldr	r0, [pc, #100]	; (10bac <ready_thread+0x8c>)
   10b48:	22ba      	movs	r2, #186	; 0xba
   10b4a:	f003 ff6f 	bl	14a2c <printk>
   10b4e:	21ba      	movs	r1, #186	; 0xba
   10b50:	4815      	ldr	r0, [pc, #84]	; (10ba8 <ready_thread+0x88>)
   10b52:	f003 fff2 	bl	14b3a <assert_post_action>
	return list->head == list;
   10b56:	4916      	ldr	r1, [pc, #88]	; (10bb0 <ready_thread+0x90>)
   10b58:	460b      	mov	r3, r1
   10b5a:	f853 2f20 	ldr.w	r2, [r3, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10b5e:	6a48      	ldr	r0, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b60:	429a      	cmp	r2, r3
   10b62:	bf18      	it	ne
   10b64:	4615      	movne	r5, r2
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10b66:	b925      	cbnz	r5, 10b72 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   10b68:	e9c4 3000 	strd	r3, r0, [r4]

	tail->next = node;
   10b6c:	6004      	str	r4, [r0, #0]
	list->tail = node;
   10b6e:	624c      	str	r4, [r1, #36]	; 0x24
}
   10b70:	e00d      	b.n	10b8e <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
   10b72:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10b76:	f995 200e 	ldrsb.w	r2, [r5, #14]
	if (b1 != b2) {
   10b7a:	4296      	cmp	r6, r2
   10b7c:	d00c      	beq.n	10b98 <ready_thread+0x78>
		return b2 - b1;
   10b7e:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10b80:	2a00      	cmp	r2, #0
   10b82:	dd09      	ble.n	10b98 <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10b84:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
   10b86:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   10b8a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10b8c:	606c      	str	r4, [r5, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   10b8e:	2000      	movs	r0, #0
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
   10b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   10b94:	f7ff bf94 	b.w	10ac0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10b98:	4285      	cmp	r5, r0
   10b9a:	d0e5      	beq.n	10b68 <ready_thread+0x48>
   10b9c:	682d      	ldr	r5, [r5, #0]
   10b9e:	e7e2      	b.n	10b66 <ready_thread+0x46>
}
   10ba0:	bd70      	pop	{r4, r5, r6, pc}
   10ba2:	bf00      	nop
   10ba4:	20000160 	.word	0x20000160
   10ba8:	00016b86 	.word	0x00016b86
   10bac:	00015a05 	.word	0x00015a05
   10bb0:	20000a2c 	.word	0x20000a2c

00010bb4 <k_sched_time_slice_set>:
{
   10bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bb8:	4604      	mov	r4, r0
   10bba:	460d      	mov	r5, r1
	__asm__ volatile(
   10bbc:	f04f 0320 	mov.w	r3, #32
   10bc0:	f3ef 8811 	mrs	r8, BASEPRI
   10bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   10bc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10bcc:	481e      	ldr	r0, [pc, #120]	; (10c48 <k_sched_time_slice_set+0x94>)
   10bce:	f7ff fd0b 	bl	105e8 <z_spin_lock_valid>
   10bd2:	b940      	cbnz	r0, 10be6 <k_sched_time_slice_set+0x32>
   10bd4:	491d      	ldr	r1, [pc, #116]	; (10c4c <k_sched_time_slice_set+0x98>)
   10bd6:	481e      	ldr	r0, [pc, #120]	; (10c50 <k_sched_time_slice_set+0x9c>)
   10bd8:	2281      	movs	r2, #129	; 0x81
   10bda:	f003 ff27 	bl	14a2c <printk>
   10bde:	2181      	movs	r1, #129	; 0x81
   10be0:	481a      	ldr	r0, [pc, #104]	; (10c4c <k_sched_time_slice_set+0x98>)
   10be2:	f003 ffaa 	bl	14b3a <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10be6:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   10be8:	4817      	ldr	r0, [pc, #92]	; (10c48 <k_sched_time_slice_set+0x94>)
   10bea:	f7ff fd19 	bl	10620 <z_spin_lock_set_owner>
   10bee:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10bf2:	f240 30e7 	movw	r0, #999	; 0x3e7
   10bf6:	4631      	mov	r1, r6
   10bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10bfc:	2300      	movs	r3, #0
   10bfe:	fbe4 0107 	umlal	r0, r1, r4, r7
   10c02:	f7fb fc1b 	bl	c43c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   10c06:	42b4      	cmp	r4, r6
   10c08:	dd02      	ble.n	10c10 <k_sched_time_slice_set+0x5c>
			slice_time = MAX(2, slice_time);
   10c0a:	2802      	cmp	r0, #2
   10c0c:	bfb8      	it	lt
   10c0e:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
   10c10:	4b10      	ldr	r3, [pc, #64]	; (10c54 <k_sched_time_slice_set+0xa0>)
   10c12:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   10c14:	4b10      	ldr	r3, [pc, #64]	; (10c58 <k_sched_time_slice_set+0xa4>)
   10c16:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   10c18:	4b10      	ldr	r3, [pc, #64]	; (10c5c <k_sched_time_slice_set+0xa8>)
   10c1a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   10c1c:	f7ff ff3a 	bl	10a94 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c20:	4809      	ldr	r0, [pc, #36]	; (10c48 <k_sched_time_slice_set+0x94>)
   10c22:	f7ff fcef 	bl	10604 <z_spin_unlock_valid>
   10c26:	b940      	cbnz	r0, 10c3a <k_sched_time_slice_set+0x86>
   10c28:	4908      	ldr	r1, [pc, #32]	; (10c4c <k_sched_time_slice_set+0x98>)
   10c2a:	4809      	ldr	r0, [pc, #36]	; (10c50 <k_sched_time_slice_set+0x9c>)
   10c2c:	22ac      	movs	r2, #172	; 0xac
   10c2e:	f003 fefd 	bl	14a2c <printk>
   10c32:	21ac      	movs	r1, #172	; 0xac
   10c34:	4805      	ldr	r0, [pc, #20]	; (10c4c <k_sched_time_slice_set+0x98>)
   10c36:	f003 ff80 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10c3a:	f388 8811 	msr	BASEPRI, r8
   10c3e:	f3bf 8f6f 	isb	sy
}
   10c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c46:	bf00      	nop
   10c48:	20000a68 	.word	0x20000a68
   10c4c:	000159df 	.word	0x000159df
   10c50:	00015a05 	.word	0x00015a05
   10c54:	20000a2c 	.word	0x20000a2c
   10c58:	20000a64 	.word	0x20000a64
   10c5c:	20000a60 	.word	0x20000a60

00010c60 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   10c60:	b538      	push	{r3, r4, r5, lr}
   10c62:	4604      	mov	r4, r0
	__asm__ volatile(
   10c64:	f04f 0320 	mov.w	r3, #32
   10c68:	f3ef 8511 	mrs	r5, BASEPRI
   10c6c:	f383 8812 	msr	BASEPRI_MAX, r3
   10c70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10c74:	4812      	ldr	r0, [pc, #72]	; (10cc0 <z_ready_thread+0x60>)
   10c76:	f7ff fcb7 	bl	105e8 <z_spin_lock_valid>
   10c7a:	b940      	cbnz	r0, 10c8e <z_ready_thread+0x2e>
   10c7c:	4911      	ldr	r1, [pc, #68]	; (10cc4 <z_ready_thread+0x64>)
   10c7e:	4812      	ldr	r0, [pc, #72]	; (10cc8 <z_ready_thread+0x68>)
   10c80:	2281      	movs	r2, #129	; 0x81
   10c82:	f003 fed3 	bl	14a2c <printk>
   10c86:	2181      	movs	r1, #129	; 0x81
   10c88:	480e      	ldr	r0, [pc, #56]	; (10cc4 <z_ready_thread+0x64>)
   10c8a:	f003 ff56 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   10c8e:	480c      	ldr	r0, [pc, #48]	; (10cc0 <z_ready_thread+0x60>)
   10c90:	f7ff fcc6 	bl	10620 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   10c94:	4620      	mov	r0, r4
   10c96:	f7ff ff43 	bl	10b20 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c9a:	4809      	ldr	r0, [pc, #36]	; (10cc0 <z_ready_thread+0x60>)
   10c9c:	f7ff fcb2 	bl	10604 <z_spin_unlock_valid>
   10ca0:	b940      	cbnz	r0, 10cb4 <z_ready_thread+0x54>
   10ca2:	4908      	ldr	r1, [pc, #32]	; (10cc4 <z_ready_thread+0x64>)
   10ca4:	4808      	ldr	r0, [pc, #32]	; (10cc8 <z_ready_thread+0x68>)
   10ca6:	22ac      	movs	r2, #172	; 0xac
   10ca8:	f003 fec0 	bl	14a2c <printk>
   10cac:	21ac      	movs	r1, #172	; 0xac
   10cae:	4805      	ldr	r0, [pc, #20]	; (10cc4 <z_ready_thread+0x64>)
   10cb0:	f003 ff43 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10cb4:	f385 8811 	msr	BASEPRI, r5
   10cb8:	f3bf 8f6f 	isb	sy
		}
	}
}
   10cbc:	bd38      	pop	{r3, r4, r5, pc}
   10cbe:	bf00      	nop
   10cc0:	20000a68 	.word	0x20000a68
   10cc4:	000159df 	.word	0x000159df
   10cc8:	00015a05 	.word	0x00015a05

00010ccc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   10ccc:	b510      	push	{r4, lr}
   10cce:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10cd0:	460c      	mov	r4, r1
   10cd2:	b9c1      	cbnz	r1, 10d06 <z_reschedule+0x3a>
   10cd4:	f3ef 8205 	mrs	r2, IPSR
   10cd8:	b9aa      	cbnz	r2, 10d06 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   10cda:	4a14      	ldr	r2, [pc, #80]	; (10d2c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   10cdc:	69d1      	ldr	r1, [r2, #28]
   10cde:	6892      	ldr	r2, [r2, #8]
   10ce0:	4291      	cmp	r1, r2
   10ce2:	d010      	beq.n	10d06 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ce4:	f7ff fc8e 	bl	10604 <z_spin_unlock_valid>
   10ce8:	b940      	cbnz	r0, 10cfc <z_reschedule+0x30>
   10cea:	4911      	ldr	r1, [pc, #68]	; (10d30 <z_reschedule+0x64>)
   10cec:	4811      	ldr	r0, [pc, #68]	; (10d34 <z_reschedule+0x68>)
   10cee:	22c3      	movs	r2, #195	; 0xc3
   10cf0:	f003 fe9c 	bl	14a2c <printk>
   10cf4:	21c3      	movs	r1, #195	; 0xc3
   10cf6:	480e      	ldr	r0, [pc, #56]	; (10d30 <z_reschedule+0x64>)
   10cf8:	f003 ff1f 	bl	14b3a <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   10cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   10d00:	2000      	movs	r0, #0
   10d02:	f7fc be7b 	b.w	d9fc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d06:	4618      	mov	r0, r3
   10d08:	f7ff fc7c 	bl	10604 <z_spin_unlock_valid>
   10d0c:	b940      	cbnz	r0, 10d20 <z_reschedule+0x54>
   10d0e:	4908      	ldr	r1, [pc, #32]	; (10d30 <z_reschedule+0x64>)
   10d10:	4808      	ldr	r0, [pc, #32]	; (10d34 <z_reschedule+0x68>)
   10d12:	22ac      	movs	r2, #172	; 0xac
   10d14:	f003 fe8a 	bl	14a2c <printk>
   10d18:	21ac      	movs	r1, #172	; 0xac
   10d1a:	4805      	ldr	r0, [pc, #20]	; (10d30 <z_reschedule+0x64>)
   10d1c:	f003 ff0d 	bl	14b3a <assert_post_action>
   10d20:	f384 8811 	msr	BASEPRI, r4
   10d24:	f3bf 8f6f 	isb	sy
   10d28:	bd10      	pop	{r4, pc}
   10d2a:	bf00      	nop
   10d2c:	20000a2c 	.word	0x20000a2c
   10d30:	000159df 	.word	0x000159df
   10d34:	00015a05 	.word	0x00015a05

00010d38 <z_sched_start>:
{
   10d38:	b538      	push	{r3, r4, r5, lr}
   10d3a:	4604      	mov	r4, r0
	__asm__ volatile(
   10d3c:	f04f 0320 	mov.w	r3, #32
   10d40:	f3ef 8511 	mrs	r5, BASEPRI
   10d44:	f383 8812 	msr	BASEPRI_MAX, r3
   10d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10d4c:	4818      	ldr	r0, [pc, #96]	; (10db0 <z_sched_start+0x78>)
   10d4e:	f7ff fc4b 	bl	105e8 <z_spin_lock_valid>
   10d52:	b940      	cbnz	r0, 10d66 <z_sched_start+0x2e>
   10d54:	4917      	ldr	r1, [pc, #92]	; (10db4 <z_sched_start+0x7c>)
   10d56:	4818      	ldr	r0, [pc, #96]	; (10db8 <z_sched_start+0x80>)
   10d58:	2281      	movs	r2, #129	; 0x81
   10d5a:	f003 fe67 	bl	14a2c <printk>
   10d5e:	2181      	movs	r1, #129	; 0x81
   10d60:	4814      	ldr	r0, [pc, #80]	; (10db4 <z_sched_start+0x7c>)
   10d62:	f003 feea 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   10d66:	4812      	ldr	r0, [pc, #72]	; (10db0 <z_sched_start+0x78>)
   10d68:	f7ff fc5a 	bl	10620 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   10d6c:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   10d6e:	075a      	lsls	r2, r3, #29
   10d70:	d411      	bmi.n	10d96 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d72:	480f      	ldr	r0, [pc, #60]	; (10db0 <z_sched_start+0x78>)
   10d74:	f7ff fc46 	bl	10604 <z_spin_unlock_valid>
   10d78:	b940      	cbnz	r0, 10d8c <z_sched_start+0x54>
   10d7a:	490e      	ldr	r1, [pc, #56]	; (10db4 <z_sched_start+0x7c>)
   10d7c:	480e      	ldr	r0, [pc, #56]	; (10db8 <z_sched_start+0x80>)
   10d7e:	22ac      	movs	r2, #172	; 0xac
   10d80:	f003 fe54 	bl	14a2c <printk>
   10d84:	21ac      	movs	r1, #172	; 0xac
   10d86:	480b      	ldr	r0, [pc, #44]	; (10db4 <z_sched_start+0x7c>)
   10d88:	f003 fed7 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10d8c:	f385 8811 	msr	BASEPRI, r5
   10d90:	f3bf 8f6f 	isb	sy
}
   10d94:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10d96:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   10d9a:	4620      	mov	r0, r4
   10d9c:	7363      	strb	r3, [r4, #13]
   10d9e:	f7ff febf 	bl	10b20 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   10da2:	4629      	mov	r1, r5
}
   10da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   10da8:	4801      	ldr	r0, [pc, #4]	; (10db0 <z_sched_start+0x78>)
   10daa:	f7ff bf8f 	b.w	10ccc <z_reschedule>
   10dae:	bf00      	nop
   10db0:	20000a68 	.word	0x20000a68
   10db4:	000159df 	.word	0x000159df
   10db8:	00015a05 	.word	0x00015a05

00010dbc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   10dbc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10dbe:	f04f 0320 	mov.w	r3, #32
   10dc2:	f3ef 8511 	mrs	r5, BASEPRI
   10dc6:	f383 8812 	msr	BASEPRI_MAX, r3
   10dca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10dce:	4820      	ldr	r0, [pc, #128]	; (10e50 <k_sched_lock+0x94>)
   10dd0:	f7ff fc0a 	bl	105e8 <z_spin_lock_valid>
   10dd4:	b940      	cbnz	r0, 10de8 <k_sched_lock+0x2c>
   10dd6:	491f      	ldr	r1, [pc, #124]	; (10e54 <k_sched_lock+0x98>)
   10dd8:	481f      	ldr	r0, [pc, #124]	; (10e58 <k_sched_lock+0x9c>)
   10dda:	2281      	movs	r2, #129	; 0x81
   10ddc:	f003 fe26 	bl	14a2c <printk>
   10de0:	2181      	movs	r1, #129	; 0x81
   10de2:	481c      	ldr	r0, [pc, #112]	; (10e54 <k_sched_lock+0x98>)
   10de4:	f003 fea9 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   10de8:	4819      	ldr	r0, [pc, #100]	; (10e50 <k_sched_lock+0x94>)
   10dea:	f7ff fc19 	bl	10620 <z_spin_lock_set_owner>
   10dee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   10df2:	b143      	cbz	r3, 10e06 <k_sched_lock+0x4a>
   10df4:	4919      	ldr	r1, [pc, #100]	; (10e5c <k_sched_lock+0xa0>)
   10df6:	4818      	ldr	r0, [pc, #96]	; (10e58 <k_sched_lock+0x9c>)
   10df8:	22fd      	movs	r2, #253	; 0xfd
   10dfa:	f003 fe17 	bl	14a2c <printk>
   10dfe:	21fd      	movs	r1, #253	; 0xfd
   10e00:	4816      	ldr	r0, [pc, #88]	; (10e5c <k_sched_lock+0xa0>)
   10e02:	f003 fe9a 	bl	14b3a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   10e06:	4c16      	ldr	r4, [pc, #88]	; (10e60 <k_sched_lock+0xa4>)
   10e08:	68a3      	ldr	r3, [r4, #8]
   10e0a:	7bdb      	ldrb	r3, [r3, #15]
   10e0c:	2b01      	cmp	r3, #1
   10e0e:	d108      	bne.n	10e22 <k_sched_lock+0x66>
   10e10:	4912      	ldr	r1, [pc, #72]	; (10e5c <k_sched_lock+0xa0>)
   10e12:	4811      	ldr	r0, [pc, #68]	; (10e58 <k_sched_lock+0x9c>)
   10e14:	22fe      	movs	r2, #254	; 0xfe
   10e16:	f003 fe09 	bl	14a2c <printk>
   10e1a:	21fe      	movs	r1, #254	; 0xfe
   10e1c:	480f      	ldr	r0, [pc, #60]	; (10e5c <k_sched_lock+0xa0>)
   10e1e:	f003 fe8c 	bl	14b3a <assert_post_action>
	--_current->base.sched_locked;
   10e22:	68a2      	ldr	r2, [r4, #8]
   10e24:	7bd3      	ldrb	r3, [r2, #15]
   10e26:	3b01      	subs	r3, #1
   10e28:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10e2a:	4809      	ldr	r0, [pc, #36]	; (10e50 <k_sched_lock+0x94>)
   10e2c:	f7ff fbea 	bl	10604 <z_spin_unlock_valid>
   10e30:	b940      	cbnz	r0, 10e44 <k_sched_lock+0x88>
   10e32:	4908      	ldr	r1, [pc, #32]	; (10e54 <k_sched_lock+0x98>)
   10e34:	4808      	ldr	r0, [pc, #32]	; (10e58 <k_sched_lock+0x9c>)
   10e36:	22ac      	movs	r2, #172	; 0xac
   10e38:	f003 fdf8 	bl	14a2c <printk>
   10e3c:	21ac      	movs	r1, #172	; 0xac
   10e3e:	4805      	ldr	r0, [pc, #20]	; (10e54 <k_sched_lock+0x98>)
   10e40:	f003 fe7b 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10e44:	f385 8811 	msr	BASEPRI, r5
   10e48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   10e4c:	bd38      	pop	{r3, r4, r5, pc}
   10e4e:	bf00      	nop
   10e50:	20000a68 	.word	0x20000a68
   10e54:	000159df 	.word	0x000159df
   10e58:	00015a05 	.word	0x00015a05
   10e5c:	00016b3b 	.word	0x00016b3b
   10e60:	20000a2c 	.word	0x20000a2c

00010e64 <k_sched_unlock>:

void k_sched_unlock(void)
{
   10e64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10e66:	f04f 0320 	mov.w	r3, #32
   10e6a:	f3ef 8511 	mrs	r5, BASEPRI
   10e6e:	f383 8812 	msr	BASEPRI_MAX, r3
   10e72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e76:	4824      	ldr	r0, [pc, #144]	; (10f08 <k_sched_unlock+0xa4>)
   10e78:	f7ff fbb6 	bl	105e8 <z_spin_lock_valid>
   10e7c:	b940      	cbnz	r0, 10e90 <k_sched_unlock+0x2c>
   10e7e:	4923      	ldr	r1, [pc, #140]	; (10f0c <k_sched_unlock+0xa8>)
   10e80:	4823      	ldr	r0, [pc, #140]	; (10f10 <k_sched_unlock+0xac>)
   10e82:	2281      	movs	r2, #129	; 0x81
   10e84:	f003 fdd2 	bl	14a2c <printk>
   10e88:	2181      	movs	r1, #129	; 0x81
   10e8a:	4820      	ldr	r0, [pc, #128]	; (10f0c <k_sched_unlock+0xa8>)
   10e8c:	f003 fe55 	bl	14b3a <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   10e90:	4c20      	ldr	r4, [pc, #128]	; (10f14 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   10e92:	481d      	ldr	r0, [pc, #116]	; (10f08 <k_sched_unlock+0xa4>)
   10e94:	f7ff fbc4 	bl	10620 <z_spin_lock_set_owner>
   10e98:	68a3      	ldr	r3, [r4, #8]
   10e9a:	7bdb      	ldrb	r3, [r3, #15]
   10e9c:	b953      	cbnz	r3, 10eb4 <k_sched_unlock+0x50>
   10e9e:	491e      	ldr	r1, [pc, #120]	; (10f18 <k_sched_unlock+0xb4>)
   10ea0:	481b      	ldr	r0, [pc, #108]	; (10f10 <k_sched_unlock+0xac>)
   10ea2:	f240 3285 	movw	r2, #901	; 0x385
   10ea6:	f003 fdc1 	bl	14a2c <printk>
   10eaa:	f240 3185 	movw	r1, #901	; 0x385
   10eae:	481a      	ldr	r0, [pc, #104]	; (10f18 <k_sched_unlock+0xb4>)
   10eb0:	f003 fe43 	bl	14b3a <assert_post_action>
   10eb4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   10eb8:	b153      	cbz	r3, 10ed0 <k_sched_unlock+0x6c>
   10eba:	4917      	ldr	r1, [pc, #92]	; (10f18 <k_sched_unlock+0xb4>)
   10ebc:	4814      	ldr	r0, [pc, #80]	; (10f10 <k_sched_unlock+0xac>)
   10ebe:	f240 3286 	movw	r2, #902	; 0x386
   10ec2:	f003 fdb3 	bl	14a2c <printk>
   10ec6:	f240 3186 	movw	r1, #902	; 0x386
   10eca:	4813      	ldr	r0, [pc, #76]	; (10f18 <k_sched_unlock+0xb4>)
   10ecc:	f003 fe35 	bl	14b3a <assert_post_action>

		++_current->base.sched_locked;
   10ed0:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   10ed2:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   10ed4:	7bd3      	ldrb	r3, [r2, #15]
   10ed6:	3301      	adds	r3, #1
   10ed8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10eda:	f7ff fdf1 	bl	10ac0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ede:	480a      	ldr	r0, [pc, #40]	; (10f08 <k_sched_unlock+0xa4>)
   10ee0:	f7ff fb90 	bl	10604 <z_spin_unlock_valid>
   10ee4:	b940      	cbnz	r0, 10ef8 <k_sched_unlock+0x94>
   10ee6:	4909      	ldr	r1, [pc, #36]	; (10f0c <k_sched_unlock+0xa8>)
   10ee8:	4809      	ldr	r0, [pc, #36]	; (10f10 <k_sched_unlock+0xac>)
   10eea:	22ac      	movs	r2, #172	; 0xac
   10eec:	f003 fd9e 	bl	14a2c <printk>
   10ef0:	21ac      	movs	r1, #172	; 0xac
   10ef2:	4806      	ldr	r0, [pc, #24]	; (10f0c <k_sched_unlock+0xa8>)
   10ef4:	f003 fe21 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   10ef8:	f385 8811 	msr	BASEPRI, r5
   10efc:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   10f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   10f04:	f004 b977 	b.w	151f6 <z_reschedule_unlocked>
   10f08:	20000a68 	.word	0x20000a68
   10f0c:	000159df 	.word	0x000159df
   10f10:	00015a05 	.word	0x00015a05
   10f14:	20000a2c 	.word	0x20000a2c
   10f18:	00016b86 	.word	0x00016b86

00010f1c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10f1c:	4b0b      	ldr	r3, [pc, #44]	; (10f4c <z_priq_dumb_remove+0x30>)
{
   10f1e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10f20:	4299      	cmp	r1, r3
{
   10f22:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10f24:	d10a      	bne.n	10f3c <z_priq_dumb_remove+0x20>
   10f26:	490a      	ldr	r1, [pc, #40]	; (10f50 <z_priq_dumb_remove+0x34>)
   10f28:	480a      	ldr	r0, [pc, #40]	; (10f54 <z_priq_dumb_remove+0x38>)
   10f2a:	f240 32e7 	movw	r2, #999	; 0x3e7
   10f2e:	f003 fd7d 	bl	14a2c <printk>
   10f32:	f240 31e7 	movw	r1, #999	; 0x3e7
   10f36:	4806      	ldr	r0, [pc, #24]	; (10f50 <z_priq_dumb_remove+0x34>)
   10f38:	f003 fdff 	bl	14b3a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   10f3c:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   10f40:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10f42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10f44:	2300      	movs	r3, #0
	node->prev = NULL;
   10f46:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10f4a:	bd10      	pop	{r4, pc}
   10f4c:	20000160 	.word	0x20000160
   10f50:	00016b86 	.word	0x00016b86
   10f54:	00015a05 	.word	0x00015a05

00010f58 <move_thread_to_end_of_prio_q>:
{
   10f58:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   10f5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10f5e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10f60:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   10f62:	7b43      	ldrb	r3, [r0, #13]
   10f64:	da06      	bge.n	10f74 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   10f6a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10f6c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10f6e:	481d      	ldr	r0, [pc, #116]	; (10fe4 <move_thread_to_end_of_prio_q+0x8c>)
   10f70:	f7ff ffd4 	bl	10f1c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10f74:	7b63      	ldrb	r3, [r4, #13]
   10f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10f7a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10f7c:	4b1a      	ldr	r3, [pc, #104]	; (10fe8 <move_thread_to_end_of_prio_q+0x90>)
   10f7e:	429c      	cmp	r4, r3
   10f80:	d108      	bne.n	10f94 <move_thread_to_end_of_prio_q+0x3c>
   10f82:	491a      	ldr	r1, [pc, #104]	; (10fec <move_thread_to_end_of_prio_q+0x94>)
   10f84:	481a      	ldr	r0, [pc, #104]	; (10ff0 <move_thread_to_end_of_prio_q+0x98>)
   10f86:	22ba      	movs	r2, #186	; 0xba
   10f88:	f003 fd50 	bl	14a2c <printk>
   10f8c:	21ba      	movs	r1, #186	; 0xba
   10f8e:	4817      	ldr	r0, [pc, #92]	; (10fec <move_thread_to_end_of_prio_q+0x94>)
   10f90:	f003 fdd3 	bl	14b3a <assert_post_action>
	return list->head == list;
   10f94:	4a17      	ldr	r2, [pc, #92]	; (10ff4 <move_thread_to_end_of_prio_q+0x9c>)
   10f96:	4611      	mov	r1, r2
   10f98:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   10f9c:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10f9e:	428b      	cmp	r3, r1
   10fa0:	bf08      	it	eq
   10fa2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10fa4:	b923      	cbnz	r3, 10fb0 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   10fa6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   10faa:	602c      	str	r4, [r5, #0]
	list->tail = node;
   10fac:	6254      	str	r4, [r2, #36]	; 0x24
}
   10fae:	e00d      	b.n	10fcc <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   10fb0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10fb4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   10fb8:	4286      	cmp	r6, r0
   10fba:	d00f      	beq.n	10fdc <move_thread_to_end_of_prio_q+0x84>
		return b2 - b1;
   10fbc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10fbe:	2800      	cmp	r0, #0
   10fc0:	dd0c      	ble.n	10fdc <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   10fc2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10fc4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   10fc8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10fca:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   10fcc:	6890      	ldr	r0, [r2, #8]
   10fce:	1b03      	subs	r3, r0, r4
   10fd0:	4258      	negs	r0, r3
   10fd2:	4158      	adcs	r0, r3
}
   10fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   10fd8:	f7ff bd72 	b.w	10ac0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10fdc:	429d      	cmp	r5, r3
   10fde:	d0e2      	beq.n	10fa6 <move_thread_to_end_of_prio_q+0x4e>
   10fe0:	681b      	ldr	r3, [r3, #0]
   10fe2:	e7df      	b.n	10fa4 <move_thread_to_end_of_prio_q+0x4c>
   10fe4:	20000a4c 	.word	0x20000a4c
   10fe8:	20000160 	.word	0x20000160
   10fec:	00016b86 	.word	0x00016b86
   10ff0:	00015a05 	.word	0x00015a05
   10ff4:	20000a2c 	.word	0x20000a2c

00010ff8 <z_time_slice>:
{
   10ff8:	b538      	push	{r3, r4, r5, lr}
   10ffa:	4604      	mov	r4, r0
	__asm__ volatile(
   10ffc:	f04f 0320 	mov.w	r3, #32
   11000:	f3ef 8511 	mrs	r5, BASEPRI
   11004:	f383 8812 	msr	BASEPRI_MAX, r3
   11008:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1100c:	4824      	ldr	r0, [pc, #144]	; (110a0 <z_time_slice+0xa8>)
   1100e:	f7ff faeb 	bl	105e8 <z_spin_lock_valid>
   11012:	b940      	cbnz	r0, 11026 <z_time_slice+0x2e>
   11014:	4923      	ldr	r1, [pc, #140]	; (110a4 <z_time_slice+0xac>)
   11016:	4824      	ldr	r0, [pc, #144]	; (110a8 <z_time_slice+0xb0>)
   11018:	2281      	movs	r2, #129	; 0x81
   1101a:	f003 fd07 	bl	14a2c <printk>
   1101e:	2181      	movs	r1, #129	; 0x81
   11020:	4820      	ldr	r0, [pc, #128]	; (110a4 <z_time_slice+0xac>)
   11022:	f003 fd8a 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11026:	481e      	ldr	r0, [pc, #120]	; (110a0 <z_time_slice+0xa8>)
   11028:	f7ff fafa 	bl	10620 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1102c:	4b1f      	ldr	r3, [pc, #124]	; (110ac <z_time_slice+0xb4>)
   1102e:	4a20      	ldr	r2, [pc, #128]	; (110b0 <z_time_slice+0xb8>)
   11030:	6898      	ldr	r0, [r3, #8]
   11032:	6811      	ldr	r1, [r2, #0]
   11034:	4288      	cmp	r0, r1
   11036:	d113      	bne.n	11060 <z_time_slice+0x68>
			z_reset_time_slice();
   11038:	f7ff fd2c 	bl	10a94 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1103c:	4818      	ldr	r0, [pc, #96]	; (110a0 <z_time_slice+0xa8>)
   1103e:	f7ff fae1 	bl	10604 <z_spin_unlock_valid>
   11042:	b940      	cbnz	r0, 11056 <z_time_slice+0x5e>
   11044:	4917      	ldr	r1, [pc, #92]	; (110a4 <z_time_slice+0xac>)
   11046:	4818      	ldr	r0, [pc, #96]	; (110a8 <z_time_slice+0xb0>)
   11048:	22ac      	movs	r2, #172	; 0xac
   1104a:	f003 fcef 	bl	14a2c <printk>
   1104e:	21ac      	movs	r1, #172	; 0xac
   11050:	4814      	ldr	r0, [pc, #80]	; (110a4 <z_time_slice+0xac>)
   11052:	f003 fd72 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11056:	f385 8811 	msr	BASEPRI, r5
   1105a:	f3bf 8f6f 	isb	sy
}
   1105e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   11060:	2100      	movs	r1, #0
   11062:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   11064:	4a13      	ldr	r2, [pc, #76]	; (110b4 <z_time_slice+0xbc>)
   11066:	6812      	ldr	r2, [r2, #0]
   11068:	b1ba      	cbz	r2, 1109a <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1106a:	89c2      	ldrh	r2, [r0, #14]
   1106c:	2a7f      	cmp	r2, #127	; 0x7f
   1106e:	d814      	bhi.n	1109a <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   11070:	7b42      	ldrb	r2, [r0, #13]
   11072:	06d2      	lsls	r2, r2, #27
   11074:	d111      	bne.n	1109a <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11076:	4a10      	ldr	r2, [pc, #64]	; (110b8 <z_time_slice+0xc0>)
   11078:	f990 100e 	ldrsb.w	r1, [r0, #14]
   1107c:	6812      	ldr	r2, [r2, #0]
   1107e:	4291      	cmp	r1, r2
   11080:	db0b      	blt.n	1109a <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   11082:	4a0e      	ldr	r2, [pc, #56]	; (110bc <z_time_slice+0xc4>)
   11084:	4290      	cmp	r0, r2
   11086:	d008      	beq.n	1109a <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   11088:	691a      	ldr	r2, [r3, #16]
   1108a:	42a2      	cmp	r2, r4
   1108c:	dc02      	bgt.n	11094 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   1108e:	f7ff ff63 	bl	10f58 <move_thread_to_end_of_prio_q>
   11092:	e7d1      	b.n	11038 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   11094:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   11096:	611a      	str	r2, [r3, #16]
   11098:	e7d0      	b.n	1103c <z_time_slice+0x44>
   1109a:	2200      	movs	r2, #0
   1109c:	e7fb      	b.n	11096 <z_time_slice+0x9e>
   1109e:	bf00      	nop
   110a0:	20000a68 	.word	0x20000a68
   110a4:	000159df 	.word	0x000159df
   110a8:	00015a05 	.word	0x00015a05
   110ac:	20000a2c 	.word	0x20000a2c
   110b0:	20000a5c 	.word	0x20000a5c
   110b4:	20000a64 	.word	0x20000a64
   110b8:	20000a60 	.word	0x20000a60
   110bc:	20000160 	.word	0x20000160

000110c0 <unready_thread>:
{
   110c0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   110c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   110c6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   110c8:	2a00      	cmp	r2, #0
   110ca:	7b43      	ldrb	r3, [r0, #13]
   110cc:	da06      	bge.n	110dc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   110ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   110d2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   110d4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   110d6:	4806      	ldr	r0, [pc, #24]	; (110f0 <unready_thread+0x30>)
   110d8:	f7ff ff20 	bl	10f1c <z_priq_dumb_remove>
	update_cache(thread == _current);
   110dc:	4b05      	ldr	r3, [pc, #20]	; (110f4 <unready_thread+0x34>)
   110de:	6898      	ldr	r0, [r3, #8]
   110e0:	1b03      	subs	r3, r0, r4
   110e2:	4258      	negs	r0, r3
   110e4:	4158      	adcs	r0, r3
}
   110e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   110ea:	f7ff bce9 	b.w	10ac0 <update_cache>
   110ee:	bf00      	nop
   110f0:	20000a4c 	.word	0x20000a4c
   110f4:	20000a2c 	.word	0x20000a2c

000110f8 <add_to_waitq_locked>:
{
   110f8:	b538      	push	{r3, r4, r5, lr}
   110fa:	4604      	mov	r4, r0
   110fc:	460d      	mov	r5, r1
	unready_thread(thread);
   110fe:	f7ff ffdf 	bl	110c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   11102:	7b63      	ldrb	r3, [r4, #13]
   11104:	f043 0302 	orr.w	r3, r3, #2
   11108:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1110a:	b34d      	cbz	r5, 11160 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1110c:	4b15      	ldr	r3, [pc, #84]	; (11164 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1110e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11110:	429c      	cmp	r4, r3
   11112:	d108      	bne.n	11126 <add_to_waitq_locked+0x2e>
   11114:	4914      	ldr	r1, [pc, #80]	; (11168 <add_to_waitq_locked+0x70>)
   11116:	4815      	ldr	r0, [pc, #84]	; (1116c <add_to_waitq_locked+0x74>)
   11118:	22ba      	movs	r2, #186	; 0xba
   1111a:	f003 fc87 	bl	14a2c <printk>
   1111e:	21ba      	movs	r1, #186	; 0xba
   11120:	4811      	ldr	r0, [pc, #68]	; (11168 <add_to_waitq_locked+0x70>)
   11122:	f003 fd0a 	bl	14b3a <assert_post_action>
	return list->head == list;
   11126:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11128:	429d      	cmp	r5, r3
   1112a:	d109      	bne.n	11140 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   1112c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1112e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   11132:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11134:	606c      	str	r4, [r5, #4]
}
   11136:	e013      	b.n	11160 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   11138:	686a      	ldr	r2, [r5, #4]
   1113a:	4293      	cmp	r3, r2
   1113c:	d0f6      	beq.n	1112c <add_to_waitq_locked+0x34>
   1113e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11140:	2b00      	cmp	r3, #0
   11142:	d0f3      	beq.n	1112c <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   11144:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11148:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1114c:	4291      	cmp	r1, r2
   1114e:	d0f3      	beq.n	11138 <add_to_waitq_locked+0x40>
		return b2 - b1;
   11150:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   11152:	2a00      	cmp	r2, #0
   11154:	ddf0      	ble.n	11138 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   11156:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11158:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1115c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1115e:	605c      	str	r4, [r3, #4]
}
   11160:	bd38      	pop	{r3, r4, r5, pc}
   11162:	bf00      	nop
   11164:	20000160 	.word	0x20000160
   11168:	00016b86 	.word	0x00016b86
   1116c:	00015a05 	.word	0x00015a05

00011170 <pend>:
{
   11170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11174:	4604      	mov	r4, r0
   11176:	4688      	mov	r8, r1
   11178:	4616      	mov	r6, r2
   1117a:	461d      	mov	r5, r3
	__asm__ volatile(
   1117c:	f04f 0320 	mov.w	r3, #32
   11180:	f3ef 8711 	mrs	r7, BASEPRI
   11184:	f383 8812 	msr	BASEPRI_MAX, r3
   11188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1118c:	481a      	ldr	r0, [pc, #104]	; (111f8 <pend+0x88>)
   1118e:	f7ff fa2b 	bl	105e8 <z_spin_lock_valid>
   11192:	b940      	cbnz	r0, 111a6 <pend+0x36>
   11194:	4919      	ldr	r1, [pc, #100]	; (111fc <pend+0x8c>)
   11196:	481a      	ldr	r0, [pc, #104]	; (11200 <pend+0x90>)
   11198:	2281      	movs	r2, #129	; 0x81
   1119a:	f003 fc47 	bl	14a2c <printk>
   1119e:	2181      	movs	r1, #129	; 0x81
   111a0:	4816      	ldr	r0, [pc, #88]	; (111fc <pend+0x8c>)
   111a2:	f003 fcca 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   111a6:	4814      	ldr	r0, [pc, #80]	; (111f8 <pend+0x88>)
   111a8:	f7ff fa3a 	bl	10620 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   111ac:	4620      	mov	r0, r4
   111ae:	4641      	mov	r1, r8
   111b0:	f7ff ffa2 	bl	110f8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   111b4:	4810      	ldr	r0, [pc, #64]	; (111f8 <pend+0x88>)
   111b6:	f7ff fa25 	bl	10604 <z_spin_unlock_valid>
   111ba:	b940      	cbnz	r0, 111ce <pend+0x5e>
   111bc:	490f      	ldr	r1, [pc, #60]	; (111fc <pend+0x8c>)
   111be:	4810      	ldr	r0, [pc, #64]	; (11200 <pend+0x90>)
   111c0:	22ac      	movs	r2, #172	; 0xac
   111c2:	f003 fc33 	bl	14a2c <printk>
   111c6:	21ac      	movs	r1, #172	; 0xac
   111c8:	480c      	ldr	r0, [pc, #48]	; (111fc <pend+0x8c>)
   111ca:	f003 fcb6 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   111ce:	f387 8811 	msr	BASEPRI, r7
   111d2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   111d6:	f1b5 3fff 	cmp.w	r5, #4294967295
   111da:	bf08      	it	eq
   111dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   111e0:	d008      	beq.n	111f4 <pend+0x84>
   111e2:	4632      	mov	r2, r6
   111e4:	462b      	mov	r3, r5
   111e6:	f104 0018 	add.w	r0, r4, #24
   111ea:	4906      	ldr	r1, [pc, #24]	; (11204 <pend+0x94>)
}
   111ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   111f0:	f000 bbfc 	b.w	119ec <z_add_timeout>
   111f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111f8:	20000a68 	.word	0x20000a68
   111fc:	000159df 	.word	0x000159df
   11200:	00015a05 	.word	0x00015a05
   11204:	00011445 	.word	0x00011445

00011208 <z_pend_curr>:
{
   11208:	b538      	push	{r3, r4, r5, lr}
   1120a:	4605      	mov	r5, r0
	pending_current = _current;
   1120c:	4b0d      	ldr	r3, [pc, #52]	; (11244 <z_pend_curr+0x3c>)
{
   1120e:	460c      	mov	r4, r1
	pending_current = _current;
   11210:	6898      	ldr	r0, [r3, #8]
   11212:	4b0d      	ldr	r3, [pc, #52]	; (11248 <z_pend_curr+0x40>)
{
   11214:	4611      	mov	r1, r2
	pending_current = _current;
   11216:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   11218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1121c:	f7ff ffa8 	bl	11170 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11220:	4628      	mov	r0, r5
   11222:	f7ff f9ef 	bl	10604 <z_spin_unlock_valid>
   11226:	b940      	cbnz	r0, 1123a <z_pend_curr+0x32>
   11228:	4908      	ldr	r1, [pc, #32]	; (1124c <z_pend_curr+0x44>)
   1122a:	4809      	ldr	r0, [pc, #36]	; (11250 <z_pend_curr+0x48>)
   1122c:	22c3      	movs	r2, #195	; 0xc3
   1122e:	f003 fbfd 	bl	14a2c <printk>
   11232:	21c3      	movs	r1, #195	; 0xc3
   11234:	4805      	ldr	r0, [pc, #20]	; (1124c <z_pend_curr+0x44>)
   11236:	f003 fc80 	bl	14b3a <assert_post_action>
   1123a:	4620      	mov	r0, r4
}
   1123c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11240:	f7fc bbdc 	b.w	d9fc <arch_swap>
   11244:	20000a2c 	.word	0x20000a2c
   11248:	20000a5c 	.word	0x20000a5c
   1124c:	000159df 	.word	0x000159df
   11250:	00015a05 	.word	0x00015a05

00011254 <z_set_prio>:
{
   11254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11256:	4604      	mov	r4, r0
   11258:	460e      	mov	r6, r1
	__asm__ volatile(
   1125a:	f04f 0320 	mov.w	r3, #32
   1125e:	f3ef 8711 	mrs	r7, BASEPRI
   11262:	f383 8812 	msr	BASEPRI_MAX, r3
   11266:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1126a:	4834      	ldr	r0, [pc, #208]	; (1133c <z_set_prio+0xe8>)
   1126c:	f7ff f9bc 	bl	105e8 <z_spin_lock_valid>
   11270:	b940      	cbnz	r0, 11284 <z_set_prio+0x30>
   11272:	4933      	ldr	r1, [pc, #204]	; (11340 <z_set_prio+0xec>)
   11274:	4833      	ldr	r0, [pc, #204]	; (11344 <z_set_prio+0xf0>)
   11276:	2281      	movs	r2, #129	; 0x81
   11278:	f003 fbd8 	bl	14a2c <printk>
   1127c:	2181      	movs	r1, #129	; 0x81
   1127e:	4830      	ldr	r0, [pc, #192]	; (11340 <z_set_prio+0xec>)
   11280:	f003 fc5b 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11284:	482d      	ldr	r0, [pc, #180]	; (1133c <z_set_prio+0xe8>)
   11286:	f7ff f9cb 	bl	10620 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1128a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1128c:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1128e:	06da      	lsls	r2, r3, #27
   11290:	d127      	bne.n	112e2 <z_set_prio+0x8e>
	return node->next != NULL;
   11292:	69a5      	ldr	r5, [r4, #24]
   11294:	bb2d      	cbnz	r5, 112e2 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1129a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1129c:	4621      	mov	r1, r4
   1129e:	482a      	ldr	r0, [pc, #168]	; (11348 <z_set_prio+0xf4>)
   112a0:	f7ff fe3c 	bl	10f1c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   112a4:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   112a6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   112a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   112ac:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   112ae:	4b27      	ldr	r3, [pc, #156]	; (1134c <z_set_prio+0xf8>)
   112b0:	429c      	cmp	r4, r3
   112b2:	d108      	bne.n	112c6 <z_set_prio+0x72>
   112b4:	4926      	ldr	r1, [pc, #152]	; (11350 <z_set_prio+0xfc>)
   112b6:	4823      	ldr	r0, [pc, #140]	; (11344 <z_set_prio+0xf0>)
   112b8:	22ba      	movs	r2, #186	; 0xba
   112ba:	f003 fbb7 	bl	14a2c <printk>
   112be:	21ba      	movs	r1, #186	; 0xba
   112c0:	4823      	ldr	r0, [pc, #140]	; (11350 <z_set_prio+0xfc>)
   112c2:	f003 fc3a 	bl	14b3a <assert_post_action>
	return list->head == list;
   112c6:	4923      	ldr	r1, [pc, #140]	; (11354 <z_set_prio+0x100>)
   112c8:	460b      	mov	r3, r1
   112ca:	f853 2f20 	ldr.w	r2, [r3, #32]!
	return (node == list->tail) ? NULL : node->next;
   112ce:	6a48      	ldr	r0, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   112d0:	429a      	cmp	r2, r3
   112d2:	bf18      	it	ne
   112d4:	4615      	movne	r5, r2
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   112d6:	b9cd      	cbnz	r5, 1130c <z_set_prio+0xb8>
	node->prev = tail;
   112d8:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   112dc:	6004      	str	r4, [r0, #0]
	list->tail = node;
   112de:	624c      	str	r4, [r1, #36]	; 0x24
}
   112e0:	e022      	b.n	11328 <z_set_prio+0xd4>
			thread->base.prio = prio;
   112e2:	73a6      	strb	r6, [r4, #14]
   112e4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   112e6:	4815      	ldr	r0, [pc, #84]	; (1133c <z_set_prio+0xe8>)
   112e8:	f7ff f98c 	bl	10604 <z_spin_unlock_valid>
   112ec:	b940      	cbnz	r0, 11300 <z_set_prio+0xac>
   112ee:	4914      	ldr	r1, [pc, #80]	; (11340 <z_set_prio+0xec>)
   112f0:	4814      	ldr	r0, [pc, #80]	; (11344 <z_set_prio+0xf0>)
   112f2:	22ac      	movs	r2, #172	; 0xac
   112f4:	f003 fb9a 	bl	14a2c <printk>
   112f8:	21ac      	movs	r1, #172	; 0xac
   112fa:	4811      	ldr	r0, [pc, #68]	; (11340 <z_set_prio+0xec>)
   112fc:	f003 fc1d 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11300:	f387 8811 	msr	BASEPRI, r7
   11304:	f3bf 8f6f 	isb	sy
}
   11308:	4620      	mov	r0, r4
   1130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
   1130c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11310:	f995 200e 	ldrsb.w	r2, [r5, #14]
	if (b1 != b2) {
   11314:	4296      	cmp	r6, r2
   11316:	d00c      	beq.n	11332 <z_set_prio+0xde>
		return b2 - b1;
   11318:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1131a:	2a00      	cmp	r2, #0
   1131c:	dd09      	ble.n	11332 <z_set_prio+0xde>
	sys_dnode_t *const prev = successor->prev;
   1131e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   11320:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   11324:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11326:	606c      	str	r4, [r5, #4]
			update_cache(1);
   11328:	2001      	movs	r0, #1
   1132a:	f7ff fbc9 	bl	10ac0 <update_cache>
   1132e:	2401      	movs	r4, #1
   11330:	e7d9      	b.n	112e6 <z_set_prio+0x92>
	return (node == list->tail) ? NULL : node->next;
   11332:	42a8      	cmp	r0, r5
   11334:	d0d0      	beq.n	112d8 <z_set_prio+0x84>
   11336:	682d      	ldr	r5, [r5, #0]
   11338:	e7cd      	b.n	112d6 <z_set_prio+0x82>
   1133a:	bf00      	nop
   1133c:	20000a68 	.word	0x20000a68
   11340:	000159df 	.word	0x000159df
   11344:	00015a05 	.word	0x00015a05
   11348:	20000a4c 	.word	0x20000a4c
   1134c:	20000160 	.word	0x20000160
   11350:	00016b86 	.word	0x00016b86
   11354:	20000a2c 	.word	0x20000a2c

00011358 <z_impl_k_thread_suspend>:
{
   11358:	b570      	push	{r4, r5, r6, lr}
   1135a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1135c:	3018      	adds	r0, #24
   1135e:	f000 fbf3 	bl	11b48 <z_abort_timeout>
	__asm__ volatile(
   11362:	f04f 0320 	mov.w	r3, #32
   11366:	f3ef 8611 	mrs	r6, BASEPRI
   1136a:	f383 8812 	msr	BASEPRI_MAX, r3
   1136e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11372:	4820      	ldr	r0, [pc, #128]	; (113f4 <z_impl_k_thread_suspend+0x9c>)
   11374:	f7ff f938 	bl	105e8 <z_spin_lock_valid>
   11378:	b940      	cbnz	r0, 1138c <z_impl_k_thread_suspend+0x34>
   1137a:	491f      	ldr	r1, [pc, #124]	; (113f8 <z_impl_k_thread_suspend+0xa0>)
   1137c:	481f      	ldr	r0, [pc, #124]	; (113fc <z_impl_k_thread_suspend+0xa4>)
   1137e:	2281      	movs	r2, #129	; 0x81
   11380:	f003 fb54 	bl	14a2c <printk>
   11384:	2181      	movs	r1, #129	; 0x81
   11386:	481c      	ldr	r0, [pc, #112]	; (113f8 <z_impl_k_thread_suspend+0xa0>)
   11388:	f003 fbd7 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1138c:	4819      	ldr	r0, [pc, #100]	; (113f4 <z_impl_k_thread_suspend+0x9c>)
   1138e:	f7ff f947 	bl	10620 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   11392:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   11396:	7b63      	ldrb	r3, [r4, #13]
   11398:	2a00      	cmp	r2, #0
   1139a:	da06      	bge.n	113aa <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1139c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   113a0:	4621      	mov	r1, r4
   113a2:	4817      	ldr	r0, [pc, #92]	; (11400 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   113a4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   113a6:	f7ff fdb9 	bl	10f1c <z_priq_dumb_remove>
		update_cache(thread == _current);
   113aa:	4d16      	ldr	r5, [pc, #88]	; (11404 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   113ac:	7b63      	ldrb	r3, [r4, #13]
   113ae:	68a8      	ldr	r0, [r5, #8]
   113b0:	f043 0310 	orr.w	r3, r3, #16
   113b4:	7363      	strb	r3, [r4, #13]
   113b6:	1b03      	subs	r3, r0, r4
   113b8:	4258      	negs	r0, r3
   113ba:	4158      	adcs	r0, r3
   113bc:	f7ff fb80 	bl	10ac0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   113c0:	480c      	ldr	r0, [pc, #48]	; (113f4 <z_impl_k_thread_suspend+0x9c>)
   113c2:	f7ff f91f 	bl	10604 <z_spin_unlock_valid>
   113c6:	b940      	cbnz	r0, 113da <z_impl_k_thread_suspend+0x82>
   113c8:	490b      	ldr	r1, [pc, #44]	; (113f8 <z_impl_k_thread_suspend+0xa0>)
   113ca:	480c      	ldr	r0, [pc, #48]	; (113fc <z_impl_k_thread_suspend+0xa4>)
   113cc:	22ac      	movs	r2, #172	; 0xac
   113ce:	f003 fb2d 	bl	14a2c <printk>
   113d2:	21ac      	movs	r1, #172	; 0xac
   113d4:	4808      	ldr	r0, [pc, #32]	; (113f8 <z_impl_k_thread_suspend+0xa0>)
   113d6:	f003 fbb0 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   113da:	f386 8811 	msr	BASEPRI, r6
   113de:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   113e2:	68ab      	ldr	r3, [r5, #8]
   113e4:	42a3      	cmp	r3, r4
   113e6:	d103      	bne.n	113f0 <z_impl_k_thread_suspend+0x98>
}
   113e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   113ec:	f003 bf03 	b.w	151f6 <z_reschedule_unlocked>
}
   113f0:	bd70      	pop	{r4, r5, r6, pc}
   113f2:	bf00      	nop
   113f4:	20000a68 	.word	0x20000a68
   113f8:	000159df 	.word	0x000159df
   113fc:	00015a05 	.word	0x00015a05
   11400:	20000a4c 	.word	0x20000a4c
   11404:	20000a2c 	.word	0x20000a2c

00011408 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   11408:	6883      	ldr	r3, [r0, #8]
{
   1140a:	b510      	push	{r4, lr}
   1140c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1140e:	b953      	cbnz	r3, 11426 <unpend_thread_no_timeout+0x1e>
   11410:	490a      	ldr	r1, [pc, #40]	; (1143c <unpend_thread_no_timeout+0x34>)
   11412:	480b      	ldr	r0, [pc, #44]	; (11440 <unpend_thread_no_timeout+0x38>)
   11414:	f240 2283 	movw	r2, #643	; 0x283
   11418:	f003 fb08 	bl	14a2c <printk>
   1141c:	f240 2183 	movw	r1, #643	; 0x283
   11420:	4806      	ldr	r0, [pc, #24]	; (1143c <unpend_thread_no_timeout+0x34>)
   11422:	f003 fb8a 	bl	14b3a <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11426:	4621      	mov	r1, r4
   11428:	68a0      	ldr	r0, [r4, #8]
   1142a:	f7ff fd77 	bl	10f1c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1142e:	7b63      	ldrb	r3, [r4, #13]
   11430:	f023 0302 	bic.w	r3, r3, #2
   11434:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   11436:	2300      	movs	r3, #0
   11438:	60a3      	str	r3, [r4, #8]
}
   1143a:	bd10      	pop	{r4, pc}
   1143c:	00016b86 	.word	0x00016b86
   11440:	00015a05 	.word	0x00015a05

00011444 <z_thread_timeout>:
{
   11444:	b570      	push	{r4, r5, r6, lr}
   11446:	4604      	mov	r4, r0
	__asm__ volatile(
   11448:	f04f 0320 	mov.w	r3, #32
   1144c:	f3ef 8611 	mrs	r6, BASEPRI
   11450:	f383 8812 	msr	BASEPRI_MAX, r3
   11454:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11458:	481b      	ldr	r0, [pc, #108]	; (114c8 <z_thread_timeout+0x84>)
   1145a:	f7ff f8c5 	bl	105e8 <z_spin_lock_valid>
   1145e:	b940      	cbnz	r0, 11472 <z_thread_timeout+0x2e>
   11460:	491a      	ldr	r1, [pc, #104]	; (114cc <z_thread_timeout+0x88>)
   11462:	481b      	ldr	r0, [pc, #108]	; (114d0 <z_thread_timeout+0x8c>)
   11464:	2281      	movs	r2, #129	; 0x81
   11466:	f003 fae1 	bl	14a2c <printk>
   1146a:	2181      	movs	r1, #129	; 0x81
   1146c:	4817      	ldr	r0, [pc, #92]	; (114cc <z_thread_timeout+0x88>)
   1146e:	f003 fb64 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11472:	4815      	ldr	r0, [pc, #84]	; (114c8 <z_thread_timeout+0x84>)
   11474:	f7ff f8d4 	bl	10620 <z_spin_lock_set_owner>
		if (!killed) {
   11478:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1147c:	f013 0f28 	tst.w	r3, #40	; 0x28
   11480:	d110      	bne.n	114a4 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   11482:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   11486:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1148a:	b113      	cbz	r3, 11492 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   1148c:	4628      	mov	r0, r5
   1148e:	f7ff ffbb 	bl	11408 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   11492:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   11496:	4628      	mov	r0, r5
   11498:	f023 0314 	bic.w	r3, r3, #20
   1149c:	f804 3c0b 	strb.w	r3, [r4, #-11]
   114a0:	f7ff fb3e 	bl	10b20 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   114a4:	4808      	ldr	r0, [pc, #32]	; (114c8 <z_thread_timeout+0x84>)
   114a6:	f7ff f8ad 	bl	10604 <z_spin_unlock_valid>
   114aa:	b940      	cbnz	r0, 114be <z_thread_timeout+0x7a>
   114ac:	4907      	ldr	r1, [pc, #28]	; (114cc <z_thread_timeout+0x88>)
   114ae:	4808      	ldr	r0, [pc, #32]	; (114d0 <z_thread_timeout+0x8c>)
   114b0:	22ac      	movs	r2, #172	; 0xac
   114b2:	f003 fabb 	bl	14a2c <printk>
   114b6:	21ac      	movs	r1, #172	; 0xac
   114b8:	4804      	ldr	r0, [pc, #16]	; (114cc <z_thread_timeout+0x88>)
   114ba:	f003 fb3e 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   114be:	f386 8811 	msr	BASEPRI, r6
   114c2:	f3bf 8f6f 	isb	sy
}
   114c6:	bd70      	pop	{r4, r5, r6, pc}
   114c8:	20000a68 	.word	0x20000a68
   114cc:	000159df 	.word	0x000159df
   114d0:	00015a05 	.word	0x00015a05

000114d4 <z_unpend_first_thread>:
{
   114d4:	b570      	push	{r4, r5, r6, lr}
   114d6:	4605      	mov	r5, r0
	__asm__ volatile(
   114d8:	f04f 0320 	mov.w	r3, #32
   114dc:	f3ef 8611 	mrs	r6, BASEPRI
   114e0:	f383 8812 	msr	BASEPRI_MAX, r3
   114e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114e8:	4817      	ldr	r0, [pc, #92]	; (11548 <z_unpend_first_thread+0x74>)
   114ea:	f7ff f87d 	bl	105e8 <z_spin_lock_valid>
   114ee:	b940      	cbnz	r0, 11502 <z_unpend_first_thread+0x2e>
   114f0:	4916      	ldr	r1, [pc, #88]	; (1154c <z_unpend_first_thread+0x78>)
   114f2:	4817      	ldr	r0, [pc, #92]	; (11550 <z_unpend_first_thread+0x7c>)
   114f4:	2281      	movs	r2, #129	; 0x81
   114f6:	f003 fa99 	bl	14a2c <printk>
   114fa:	2181      	movs	r1, #129	; 0x81
   114fc:	4813      	ldr	r0, [pc, #76]	; (1154c <z_unpend_first_thread+0x78>)
   114fe:	f003 fb1c 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11502:	4811      	ldr	r0, [pc, #68]	; (11548 <z_unpend_first_thread+0x74>)
   11504:	f7ff f88c 	bl	10620 <z_spin_lock_set_owner>
	return list->head == list;
   11508:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1150a:	42a5      	cmp	r5, r4
   1150c:	d01a      	beq.n	11544 <z_unpend_first_thread+0x70>
		if (thread != NULL) {
   1150e:	b134      	cbz	r4, 1151e <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   11510:	4620      	mov	r0, r4
   11512:	f7ff ff79 	bl	11408 <unpend_thread_no_timeout>
   11516:	f104 0018 	add.w	r0, r4, #24
   1151a:	f000 fb15 	bl	11b48 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1151e:	480a      	ldr	r0, [pc, #40]	; (11548 <z_unpend_first_thread+0x74>)
   11520:	f7ff f870 	bl	10604 <z_spin_unlock_valid>
   11524:	b940      	cbnz	r0, 11538 <z_unpend_first_thread+0x64>
   11526:	4909      	ldr	r1, [pc, #36]	; (1154c <z_unpend_first_thread+0x78>)
   11528:	4809      	ldr	r0, [pc, #36]	; (11550 <z_unpend_first_thread+0x7c>)
   1152a:	22ac      	movs	r2, #172	; 0xac
   1152c:	f003 fa7e 	bl	14a2c <printk>
   11530:	21ac      	movs	r1, #172	; 0xac
   11532:	4806      	ldr	r0, [pc, #24]	; (1154c <z_unpend_first_thread+0x78>)
   11534:	f003 fb01 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11538:	f386 8811 	msr	BASEPRI, r6
   1153c:	f3bf 8f6f 	isb	sy
}
   11540:	4620      	mov	r0, r4
   11542:	bd70      	pop	{r4, r5, r6, pc}
   11544:	2400      	movs	r4, #0
   11546:	e7ea      	b.n	1151e <z_unpend_first_thread+0x4a>
   11548:	20000a68 	.word	0x20000a68
   1154c:	000159df 	.word	0x000159df
   11550:	00015a05 	.word	0x00015a05

00011554 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11554:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   11556:	4b04      	ldr	r3, [pc, #16]	; (11568 <z_sched_init+0x14>)
   11558:	4608      	mov	r0, r1
   1155a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1155e:	e9c3 2208 	strd	r2, r2, [r3, #32]
   11562:	f7ff bb27 	b.w	10bb4 <k_sched_time_slice_set>
   11566:	bf00      	nop
   11568:	20000a2c 	.word	0x20000a2c

0001156c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1156e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   11572:	b153      	cbz	r3, 1158a <z_impl_k_yield+0x1e>
   11574:	4938      	ldr	r1, [pc, #224]	; (11658 <z_impl_k_yield+0xec>)
   11576:	4839      	ldr	r0, [pc, #228]	; (1165c <z_impl_k_yield+0xf0>)
   11578:	f240 42dc 	movw	r2, #1244	; 0x4dc
   1157c:	f003 fa56 	bl	14a2c <printk>
   11580:	f240 41dc 	movw	r1, #1244	; 0x4dc
   11584:	4834      	ldr	r0, [pc, #208]	; (11658 <z_impl_k_yield+0xec>)
   11586:	f003 fad8 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   1158a:	f04f 0320 	mov.w	r3, #32
   1158e:	f3ef 8611 	mrs	r6, BASEPRI
   11592:	f383 8812 	msr	BASEPRI_MAX, r3
   11596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1159a:	4831      	ldr	r0, [pc, #196]	; (11660 <z_impl_k_yield+0xf4>)
   1159c:	f7ff f824 	bl	105e8 <z_spin_lock_valid>
   115a0:	b940      	cbnz	r0, 115b4 <z_impl_k_yield+0x48>
   115a2:	4930      	ldr	r1, [pc, #192]	; (11664 <z_impl_k_yield+0xf8>)
   115a4:	482d      	ldr	r0, [pc, #180]	; (1165c <z_impl_k_yield+0xf0>)
   115a6:	2281      	movs	r2, #129	; 0x81
   115a8:	f003 fa40 	bl	14a2c <printk>
   115ac:	2181      	movs	r1, #129	; 0x81
   115ae:	482d      	ldr	r0, [pc, #180]	; (11664 <z_impl_k_yield+0xf8>)
   115b0:	f003 fac3 	bl	14b3a <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   115b4:	4d2c      	ldr	r5, [pc, #176]	; (11668 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   115b6:	482a      	ldr	r0, [pc, #168]	; (11660 <z_impl_k_yield+0xf4>)
   115b8:	f7ff f832 	bl	10620 <z_spin_lock_set_owner>
   115bc:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   115be:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   115c2:	7b4b      	ldrb	r3, [r1, #13]
   115c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   115c8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   115ca:	f7ff fca7 	bl	10f1c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   115ce:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   115d0:	7b63      	ldrb	r3, [r4, #13]
   115d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   115d6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   115d8:	4b24      	ldr	r3, [pc, #144]	; (1166c <z_impl_k_yield+0x100>)
   115da:	429c      	cmp	r4, r3
   115dc:	d108      	bne.n	115f0 <z_impl_k_yield+0x84>
   115de:	491e      	ldr	r1, [pc, #120]	; (11658 <z_impl_k_yield+0xec>)
   115e0:	481e      	ldr	r0, [pc, #120]	; (1165c <z_impl_k_yield+0xf0>)
   115e2:	22ba      	movs	r2, #186	; 0xba
   115e4:	f003 fa22 	bl	14a2c <printk>
   115e8:	21ba      	movs	r1, #186	; 0xba
   115ea:	481b      	ldr	r0, [pc, #108]	; (11658 <z_impl_k_yield+0xec>)
   115ec:	f003 faa5 	bl	14b3a <assert_post_action>
	return list->head == list;
   115f0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   115f2:	481f      	ldr	r0, [pc, #124]	; (11670 <z_impl_k_yield+0x104>)
	return (node == list->tail) ? NULL : node->next;
   115f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   115f6:	4283      	cmp	r3, r0
   115f8:	bf08      	it	eq
   115fa:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   115fc:	b923      	cbnz	r3, 11608 <z_impl_k_yield+0x9c>
	node->prev = tail;
   115fe:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   11602:	600c      	str	r4, [r1, #0]
	list->tail = node;
   11604:	626c      	str	r4, [r5, #36]	; 0x24
}
   11606:	e00d      	b.n	11624 <z_impl_k_yield+0xb8>
	int32_t b1 = thread_1->base.prio;
   11608:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1160c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   11610:	4297      	cmp	r7, r2
   11612:	d01c      	beq.n	1164e <z_impl_k_yield+0xe2>
		return b2 - b1;
   11614:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   11616:	2a00      	cmp	r2, #0
   11618:	dd19      	ble.n	1164e <z_impl_k_yield+0xe2>
	sys_dnode_t *const prev = successor->prev;
   1161a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1161c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11620:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11622:	605c      	str	r4, [r3, #4]
	update_cache(1);
   11624:	2001      	movs	r0, #1
   11626:	f7ff fa4b 	bl	10ac0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1162a:	480d      	ldr	r0, [pc, #52]	; (11660 <z_impl_k_yield+0xf4>)
   1162c:	f7fe ffea 	bl	10604 <z_spin_unlock_valid>
   11630:	b940      	cbnz	r0, 11644 <z_impl_k_yield+0xd8>
   11632:	490c      	ldr	r1, [pc, #48]	; (11664 <z_impl_k_yield+0xf8>)
   11634:	4809      	ldr	r0, [pc, #36]	; (1165c <z_impl_k_yield+0xf0>)
   11636:	22c3      	movs	r2, #195	; 0xc3
   11638:	f003 f9f8 	bl	14a2c <printk>
   1163c:	21c3      	movs	r1, #195	; 0xc3
   1163e:	4809      	ldr	r0, [pc, #36]	; (11664 <z_impl_k_yield+0xf8>)
   11640:	f003 fa7b 	bl	14b3a <assert_post_action>
   11644:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   11646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1164a:	f7fc b9d7 	b.w	d9fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1164e:	428b      	cmp	r3, r1
   11650:	d0d5      	beq.n	115fe <z_impl_k_yield+0x92>
   11652:	681b      	ldr	r3, [r3, #0]
   11654:	e7d2      	b.n	115fc <z_impl_k_yield+0x90>
   11656:	bf00      	nop
   11658:	00016b86 	.word	0x00016b86
   1165c:	00015a05 	.word	0x00015a05
   11660:	20000a68 	.word	0x20000a68
   11664:	000159df 	.word	0x000159df
   11668:	20000a2c 	.word	0x20000a2c
   1166c:	20000160 	.word	0x20000160
   11670:	20000a4c 	.word	0x20000a4c

00011674 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   11674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11678:	4605      	mov	r5, r0
   1167a:	460e      	mov	r6, r1
   1167c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11680:	b153      	cbz	r3, 11698 <z_tick_sleep+0x24>
   11682:	493a      	ldr	r1, [pc, #232]	; (1176c <z_tick_sleep+0xf8>)
   11684:	483a      	ldr	r0, [pc, #232]	; (11770 <z_tick_sleep+0xfc>)
   11686:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   1168a:	f003 f9cf 	bl	14a2c <printk>
   1168e:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   11692:	4836      	ldr	r0, [pc, #216]	; (1176c <z_tick_sleep+0xf8>)
   11694:	f003 fa51 	bl	14b3a <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   11698:	ea55 0306 	orrs.w	r3, r5, r6
   1169c:	d103      	bne.n	116a6 <z_tick_sleep+0x32>
	z_impl_k_yield();
   1169e:	f7ff ff65 	bl	1156c <z_impl_k_yield>
		k_yield();
		return 0;
   116a2:	2000      	movs	r0, #0
   116a4:	e05f      	b.n	11766 <z_tick_sleep+0xf2>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   116a6:	f06f 0401 	mvn.w	r4, #1
   116aa:	f04f 33ff 	mov.w	r3, #4294967295
   116ae:	1b64      	subs	r4, r4, r5
   116b0:	eb63 0306 	sbc.w	r3, r3, r6
   116b4:	2c01      	cmp	r4, #1
   116b6:	f173 0300 	sbcs.w	r3, r3, #0
   116ba:	da02      	bge.n	116c2 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   116bc:	f003 fda5 	bl	1520a <sys_clock_tick_get_32>
   116c0:	1944      	adds	r4, r0, r5
   116c2:	f04f 0320 	mov.w	r3, #32
   116c6:	f3ef 8811 	mrs	r8, BASEPRI
   116ca:	f383 8812 	msr	BASEPRI_MAX, r3
   116ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   116d2:	4828      	ldr	r0, [pc, #160]	; (11774 <z_tick_sleep+0x100>)
   116d4:	f7fe ff88 	bl	105e8 <z_spin_lock_valid>
   116d8:	b940      	cbnz	r0, 116ec <z_tick_sleep+0x78>
   116da:	4927      	ldr	r1, [pc, #156]	; (11778 <z_tick_sleep+0x104>)
   116dc:	4824      	ldr	r0, [pc, #144]	; (11770 <z_tick_sleep+0xfc>)
   116de:	2281      	movs	r2, #129	; 0x81
   116e0:	f003 f9a4 	bl	14a2c <printk>
   116e4:	2181      	movs	r1, #129	; 0x81
   116e6:	4824      	ldr	r0, [pc, #144]	; (11778 <z_tick_sleep+0x104>)
   116e8:	f003 fa27 	bl	14b3a <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   116ec:	4f23      	ldr	r7, [pc, #140]	; (1177c <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   116ee:	4821      	ldr	r0, [pc, #132]	; (11774 <z_tick_sleep+0x100>)
   116f0:	f7fe ff96 	bl	10620 <z_spin_lock_set_owner>
   116f4:	68b8      	ldr	r0, [r7, #8]
   116f6:	4b22      	ldr	r3, [pc, #136]	; (11780 <z_tick_sleep+0x10c>)
   116f8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   116fa:	f7ff fce1 	bl	110c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   116fe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11700:	462a      	mov	r2, r5
   11702:	4633      	mov	r3, r6
   11704:	3018      	adds	r0, #24
   11706:	491f      	ldr	r1, [pc, #124]	; (11784 <z_tick_sleep+0x110>)
   11708:	f000 f970 	bl	119ec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1170c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1170e:	4819      	ldr	r0, [pc, #100]	; (11774 <z_tick_sleep+0x100>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11710:	7b53      	ldrb	r3, [r2, #13]
   11712:	f043 0310 	orr.w	r3, r3, #16
   11716:	7353      	strb	r3, [r2, #13]
   11718:	f7fe ff74 	bl	10604 <z_spin_unlock_valid>
   1171c:	b940      	cbnz	r0, 11730 <z_tick_sleep+0xbc>
   1171e:	4916      	ldr	r1, [pc, #88]	; (11778 <z_tick_sleep+0x104>)
   11720:	4813      	ldr	r0, [pc, #76]	; (11770 <z_tick_sleep+0xfc>)
   11722:	22c3      	movs	r2, #195	; 0xc3
   11724:	f003 f982 	bl	14a2c <printk>
   11728:	21c3      	movs	r1, #195	; 0xc3
   1172a:	4813      	ldr	r0, [pc, #76]	; (11778 <z_tick_sleep+0x104>)
   1172c:	f003 fa05 	bl	14b3a <assert_post_action>
   11730:	4640      	mov	r0, r8
   11732:	f7fc f963 	bl	d9fc <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   11736:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   11738:	7b5b      	ldrb	r3, [r3, #13]
   1173a:	06db      	lsls	r3, r3, #27
   1173c:	d50a      	bpl.n	11754 <z_tick_sleep+0xe0>
   1173e:	490b      	ldr	r1, [pc, #44]	; (1176c <z_tick_sleep+0xf8>)
   11740:	480b      	ldr	r0, [pc, #44]	; (11770 <z_tick_sleep+0xfc>)
   11742:	f240 5219 	movw	r2, #1305	; 0x519
   11746:	f003 f971 	bl	14a2c <printk>
   1174a:	f240 5119 	movw	r1, #1305	; 0x519
   1174e:	4807      	ldr	r0, [pc, #28]	; (1176c <z_tick_sleep+0xf8>)
   11750:	f003 f9f3 	bl	14b3a <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11754:	f003 fd59 	bl	1520a <sys_clock_tick_get_32>
   11758:	1a20      	subs	r0, r4, r0
   1175a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1175e:	2801      	cmp	r0, #1
   11760:	f173 0300 	sbcs.w	r3, r3, #0
   11764:	db9d      	blt.n	116a2 <z_tick_sleep+0x2e>
		return ticks;
	}
#endif

	return 0;
}
   11766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1176a:	bf00      	nop
   1176c:	00016b86 	.word	0x00016b86
   11770:	00015a05 	.word	0x00015a05
   11774:	20000a68 	.word	0x20000a68
   11778:	000159df 	.word	0x000159df
   1177c:	20000a2c 	.word	0x20000a2c
   11780:	20000a5c 	.word	0x20000a5c
   11784:	00011445 	.word	0x00011445

00011788 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   11788:	b538      	push	{r3, r4, r5, lr}
   1178a:	4605      	mov	r5, r0
   1178c:	460c      	mov	r4, r1
   1178e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11792:	b153      	cbz	r3, 117aa <z_impl_k_sleep+0x22>
   11794:	4911      	ldr	r1, [pc, #68]	; (117dc <z_impl_k_sleep+0x54>)
   11796:	4812      	ldr	r0, [pc, #72]	; (117e0 <z_impl_k_sleep+0x58>)
   11798:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   1179c:	f003 f946 	bl	14a2c <printk>
   117a0:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   117a4:	480d      	ldr	r0, [pc, #52]	; (117dc <z_impl_k_sleep+0x54>)
   117a6:	f003 f9c8 	bl	14b3a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   117aa:	f1b4 3fff 	cmp.w	r4, #4294967295
   117ae:	bf08      	it	eq
   117b0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   117b4:	d106      	bne.n	117c4 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   117b6:	4b0b      	ldr	r3, [pc, #44]	; (117e4 <z_impl_k_sleep+0x5c>)
   117b8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   117ba:	f7ff fdcd 	bl	11358 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   117be:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   117c2:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   117c4:	4628      	mov	r0, r5
   117c6:	4621      	mov	r1, r4
   117c8:	f7ff ff54 	bl	11674 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   117cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   117d0:	fb80 0303 	smull	r0, r3, r0, r3
   117d4:	0bc0      	lsrs	r0, r0, #15
   117d6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   117da:	e7f2      	b.n	117c2 <z_impl_k_sleep+0x3a>
   117dc:	00016b86 	.word	0x00016b86
   117e0:	00015a05 	.word	0x00015a05
   117e4:	20000a2c 	.word	0x20000a2c

000117e8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   117e8:	4b01      	ldr	r3, [pc, #4]	; (117f0 <z_impl_z_current_get+0x8>)
   117ea:	6898      	ldr	r0, [r3, #8]
   117ec:	4770      	bx	lr
   117ee:	bf00      	nop
   117f0:	20000a2c 	.word	0x20000a2c

000117f4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   117f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117f8:	4604      	mov	r4, r0
   117fa:	f04f 0320 	mov.w	r3, #32
   117fe:	f3ef 8611 	mrs	r6, BASEPRI
   11802:	f383 8812 	msr	BASEPRI_MAX, r3
   11806:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1180a:	483e      	ldr	r0, [pc, #248]	; (11904 <z_thread_abort+0x110>)
   1180c:	f7fe feec 	bl	105e8 <z_spin_lock_valid>
   11810:	b940      	cbnz	r0, 11824 <z_thread_abort+0x30>
   11812:	493d      	ldr	r1, [pc, #244]	; (11908 <z_thread_abort+0x114>)
   11814:	483d      	ldr	r0, [pc, #244]	; (1190c <z_thread_abort+0x118>)
   11816:	2281      	movs	r2, #129	; 0x81
   11818:	f003 f908 	bl	14a2c <printk>
   1181c:	2181      	movs	r1, #129	; 0x81
   1181e:	483a      	ldr	r0, [pc, #232]	; (11908 <z_thread_abort+0x114>)
   11820:	f003 f98b 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11824:	4837      	ldr	r0, [pc, #220]	; (11904 <z_thread_abort+0x110>)
   11826:	f7fe fefb 	bl	10620 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1182a:	7b63      	ldrb	r3, [r4, #13]
   1182c:	071a      	lsls	r2, r3, #28
   1182e:	d512      	bpl.n	11856 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11830:	4834      	ldr	r0, [pc, #208]	; (11904 <z_thread_abort+0x110>)
   11832:	f7fe fee7 	bl	10604 <z_spin_unlock_valid>
   11836:	b940      	cbnz	r0, 1184a <z_thread_abort+0x56>
   11838:	4933      	ldr	r1, [pc, #204]	; (11908 <z_thread_abort+0x114>)
   1183a:	4834      	ldr	r0, [pc, #208]	; (1190c <z_thread_abort+0x118>)
   1183c:	22ac      	movs	r2, #172	; 0xac
   1183e:	f003 f8f5 	bl	14a2c <printk>
   11842:	21ac      	movs	r1, #172	; 0xac
   11844:	4830      	ldr	r0, [pc, #192]	; (11908 <z_thread_abort+0x114>)
   11846:	f003 f978 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   1184a:	f386 8811 	msr	BASEPRI, r6
   1184e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11856:	f023 0220 	bic.w	r2, r3, #32
   1185a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1185e:	09d2      	lsrs	r2, r2, #7
   11860:	d138      	bne.n	118d4 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11862:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   11864:	68a3      	ldr	r3, [r4, #8]
   11866:	b113      	cbz	r3, 1186e <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   11868:	4620      	mov	r0, r4
   1186a:	f7ff fdcd 	bl	11408 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1186e:	f104 0018 	add.w	r0, r4, #24
   11872:	f000 f969 	bl	11b48 <z_abort_timeout>
   11876:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1187a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1187e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11880:	42bd      	cmp	r5, r7
   11882:	d000      	beq.n	11886 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11884:	bb85      	cbnz	r5, 118e8 <z_thread_abort+0xf4>
		update_cache(1);
   11886:	2001      	movs	r0, #1
   11888:	f7ff f91a 	bl	10ac0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1188c:	4b20      	ldr	r3, [pc, #128]	; (11910 <z_thread_abort+0x11c>)
   1188e:	689b      	ldr	r3, [r3, #8]
   11890:	42a3      	cmp	r3, r4
   11892:	d1cd      	bne.n	11830 <z_thread_abort+0x3c>
   11894:	f3ef 8305 	mrs	r3, IPSR
   11898:	2b00      	cmp	r3, #0
   1189a:	d1c9      	bne.n	11830 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1189c:	4819      	ldr	r0, [pc, #100]	; (11904 <z_thread_abort+0x110>)
   1189e:	f7fe feb1 	bl	10604 <z_spin_unlock_valid>
   118a2:	b940      	cbnz	r0, 118b6 <z_thread_abort+0xc2>
   118a4:	4918      	ldr	r1, [pc, #96]	; (11908 <z_thread_abort+0x114>)
   118a6:	4819      	ldr	r0, [pc, #100]	; (1190c <z_thread_abort+0x118>)
   118a8:	22c3      	movs	r2, #195	; 0xc3
   118aa:	f003 f8bf 	bl	14a2c <printk>
   118ae:	21c3      	movs	r1, #195	; 0xc3
   118b0:	4815      	ldr	r0, [pc, #84]	; (11908 <z_thread_abort+0x114>)
   118b2:	f003 f942 	bl	14b3a <assert_post_action>
   118b6:	4630      	mov	r0, r6
   118b8:	f7fc f8a0 	bl	d9fc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   118bc:	f240 624b 	movw	r2, #1611	; 0x64b
   118c0:	4914      	ldr	r1, [pc, #80]	; (11914 <z_thread_abort+0x120>)
   118c2:	4812      	ldr	r0, [pc, #72]	; (1190c <z_thread_abort+0x118>)
   118c4:	f003 f8b2 	bl	14a2c <printk>
   118c8:	f240 614b 	movw	r1, #1611	; 0x64b
   118cc:	4811      	ldr	r0, [pc, #68]	; (11914 <z_thread_abort+0x120>)
   118ce:	f003 f934 	bl	14b3a <assert_post_action>
   118d2:	e7ad      	b.n	11830 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   118d4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   118d8:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   118dc:	4621      	mov	r1, r4
   118de:	480e      	ldr	r0, [pc, #56]	; (11918 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   118e0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   118e2:	f7ff fb1b 	bl	10f1c <z_priq_dumb_remove>
}
   118e6:	e7bd      	b.n	11864 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   118e8:	4628      	mov	r0, r5
   118ea:	f7ff fd8d 	bl	11408 <unpend_thread_no_timeout>
   118ee:	f105 0018 	add.w	r0, r5, #24
   118f2:	f000 f929 	bl	11b48 <z_abort_timeout>
		ready_thread(thread);
   118f6:	4628      	mov	r0, r5
   118f8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   118fc:	f7ff f910 	bl	10b20 <ready_thread>
   11900:	e7bd      	b.n	1187e <z_thread_abort+0x8a>
   11902:	bf00      	nop
   11904:	20000a68 	.word	0x20000a68
   11908:	000159df 	.word	0x000159df
   1190c:	00015a05 	.word	0x00015a05
   11910:	20000a2c 	.word	0x20000a2c
   11914:	00016b86 	.word	0x00016b86
   11918:	20000a4c 	.word	0x20000a4c

0001191c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1191c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1191e:	4806      	ldr	r0, [pc, #24]	; (11938 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   11920:	4a06      	ldr	r2, [pc, #24]	; (1193c <z_data_copy+0x20>)
   11922:	4907      	ldr	r1, [pc, #28]	; (11940 <z_data_copy+0x24>)
   11924:	1a12      	subs	r2, r2, r0
   11926:	f003 fa17 	bl	14d58 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1192a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1192e:	4a05      	ldr	r2, [pc, #20]	; (11944 <z_data_copy+0x28>)
   11930:	4905      	ldr	r1, [pc, #20]	; (11948 <z_data_copy+0x2c>)
   11932:	4806      	ldr	r0, [pc, #24]	; (1194c <z_data_copy+0x30>)
   11934:	f003 ba10 	b.w	14d58 <memcpy>
   11938:	20000000 	.word	0x20000000
   1193c:	2000015c 	.word	0x2000015c
   11940:	00016c04 	.word	0x00016c04
   11944:	00000000 	.word	0x00000000
   11948:	00016c04 	.word	0x00016c04
   1194c:	20000000 	.word	0x20000000

00011950 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11950:	4b03      	ldr	r3, [pc, #12]	; (11960 <elapsed+0x10>)
   11952:	681b      	ldr	r3, [r3, #0]
   11954:	b90b      	cbnz	r3, 1195a <elapsed+0xa>
   11956:	f7fd bc57 	b.w	f208 <sys_clock_elapsed>
}
   1195a:	2000      	movs	r0, #0
   1195c:	4770      	bx	lr
   1195e:	bf00      	nop
   11960:	20000a6c 	.word	0x20000a6c

00011964 <next_timeout>:
	return list->head == list;
   11964:	4b12      	ldr	r3, [pc, #72]	; (119b0 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
   11966:	b510      	push	{r4, lr}
   11968:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1196a:	429c      	cmp	r4, r3
   1196c:	d104      	bne.n	11978 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1196e:	f7ff ffef 	bl	11950 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11972:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11976:	e012      	b.n	1199e <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
   11978:	f7ff ffea 	bl	11950 <elapsed>
   1197c:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1197e:	2c00      	cmp	r4, #0
   11980:	d0f7      	beq.n	11972 <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11982:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   11986:	1a40      	subs	r0, r0, r1
   11988:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1198c:	2801      	cmp	r0, #1
   1198e:	f173 0200 	sbcs.w	r2, r3, #0
   11992:	db0b      	blt.n	119ac <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11994:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   11998:	f173 0300 	sbcs.w	r3, r3, #0
   1199c:	dae9      	bge.n	11972 <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1199e:	4b05      	ldr	r3, [pc, #20]	; (119b4 <next_timeout+0x50>)
   119a0:	691b      	ldr	r3, [r3, #16]
   119a2:	b113      	cbz	r3, 119aa <next_timeout+0x46>
   119a4:	4298      	cmp	r0, r3
   119a6:	bfa8      	it	ge
   119a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   119aa:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   119ac:	2000      	movs	r0, #0
   119ae:	e7f6      	b.n	1199e <next_timeout+0x3a>
   119b0:	20000080 	.word	0x20000080
   119b4:	20000a2c 	.word	0x20000a2c

000119b8 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
   119b8:	4a0b      	ldr	r2, [pc, #44]	; (119e8 <remove_timeout+0x30>)
{
   119ba:	b530      	push	{r4, r5, lr}
   119bc:	6852      	ldr	r2, [r2, #4]
   119be:	6803      	ldr	r3, [r0, #0]
   119c0:	4290      	cmp	r0, r2
   119c2:	d009      	beq.n	119d8 <remove_timeout+0x20>
	if (next(t) != NULL) {
   119c4:	b143      	cbz	r3, 119d8 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
   119c6:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   119ca:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   119ce:	1912      	adds	r2, r2, r4
   119d0:	eb41 0105 	adc.w	r1, r1, r5
   119d4:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   119d8:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   119da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   119dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   119de:	2300      	movs	r3, #0
	node->prev = NULL;
   119e0:	e9c0 3300 	strd	r3, r3, [r0]
}
   119e4:	bd30      	pop	{r4, r5, pc}
   119e6:	bf00      	nop
   119e8:	20000080 	.word	0x20000080

000119ec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   119ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   119f0:	bf08      	it	eq
   119f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   119f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119fa:	4604      	mov	r4, r0
   119fc:	460e      	mov	r6, r1
   119fe:	461d      	mov	r5, r3
   11a00:	4617      	mov	r7, r2
   11a02:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11a04:	f000 8087 	beq.w	11b16 <z_add_timeout+0x12a>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   11a08:	6803      	ldr	r3, [r0, #0]
   11a0a:	b143      	cbz	r3, 11a1e <z_add_timeout+0x32>
   11a0c:	4947      	ldr	r1, [pc, #284]	; (11b2c <z_add_timeout+0x140>)
   11a0e:	4848      	ldr	r0, [pc, #288]	; (11b30 <z_add_timeout+0x144>)
   11a10:	225d      	movs	r2, #93	; 0x5d
   11a12:	f003 f80b 	bl	14a2c <printk>
   11a16:	215d      	movs	r1, #93	; 0x5d
   11a18:	4844      	ldr	r0, [pc, #272]	; (11b2c <z_add_timeout+0x140>)
   11a1a:	f003 f88e 	bl	14b3a <assert_post_action>
	to->fn = fn;
   11a1e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   11a20:	f04f 0320 	mov.w	r3, #32
   11a24:	f3ef 8611 	mrs	r6, BASEPRI
   11a28:	f383 8812 	msr	BASEPRI_MAX, r3
   11a2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11a30:	4840      	ldr	r0, [pc, #256]	; (11b34 <z_add_timeout+0x148>)
   11a32:	f7fe fdd9 	bl	105e8 <z_spin_lock_valid>
   11a36:	b940      	cbnz	r0, 11a4a <z_add_timeout+0x5e>
   11a38:	493f      	ldr	r1, [pc, #252]	; (11b38 <z_add_timeout+0x14c>)
   11a3a:	483d      	ldr	r0, [pc, #244]	; (11b30 <z_add_timeout+0x144>)
   11a3c:	2281      	movs	r2, #129	; 0x81
   11a3e:	f002 fff5 	bl	14a2c <printk>
   11a42:	2181      	movs	r1, #129	; 0x81
   11a44:	483c      	ldr	r0, [pc, #240]	; (11b38 <z_add_timeout+0x14c>)
   11a46:	f003 f878 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11a4a:	483a      	ldr	r0, [pc, #232]	; (11b34 <z_add_timeout+0x148>)
   11a4c:	f7fe fde8 	bl	10620 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11a50:	f06f 0301 	mvn.w	r3, #1
   11a54:	f04f 3cff 	mov.w	ip, #4294967295
   11a58:	1bda      	subs	r2, r3, r7
   11a5a:	eb6c 0208 	sbc.w	r2, ip, r8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11a5e:	2a00      	cmp	r2, #0
   11a60:	db1e      	blt.n	11aa0 <z_add_timeout+0xb4>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11a62:	4936      	ldr	r1, [pc, #216]	; (11b3c <z_add_timeout+0x150>)
   11a64:	e9d1 2000 	ldrd	r2, r0, [r1]
   11a68:	1a9b      	subs	r3, r3, r2
   11a6a:	eb6c 0000 	sbc.w	r0, ip, r0
   11a6e:	1bda      	subs	r2, r3, r7
   11a70:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
   11a74:	2a01      	cmp	r2, #1
   11a76:	f170 0300 	sbcs.w	r3, r0, #0
   11a7a:	da01      	bge.n	11a80 <z_add_timeout+0x94>
   11a7c:	2201      	movs	r2, #1
   11a7e:	2000      	movs	r0, #0
   11a80:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
   11a84:	4a2e      	ldr	r2, [pc, #184]	; (11b40 <z_add_timeout+0x154>)
   11a86:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   11a88:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a8c:	4293      	cmp	r3, r2
   11a8e:	bf08      	it	eq
   11a90:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   11a92:	b973      	cbnz	r3, 11ab2 <z_add_timeout+0xc6>
	node->prev = tail;
   11a94:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   11a98:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   11a9c:	6054      	str	r4, [r2, #4]
}
   11a9e:	e01a      	b.n	11ad6 <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   11aa0:	f7ff ff56 	bl	11950 <elapsed>
   11aa4:	1c7a      	adds	r2, r7, #1
   11aa6:	f145 0500 	adc.w	r5, r5, #0
   11aaa:	1812      	adds	r2, r2, r0
   11aac:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   11ab0:	e7e6      	b.n	11a80 <z_add_timeout+0x94>
			if (t->dticks > to->dticks) {
   11ab2:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   11ab6:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   11aba:	4281      	cmp	r1, r0
   11abc:	eb75 0e07 	sbcs.w	lr, r5, r7
   11ac0:	da2b      	bge.n	11b1a <z_add_timeout+0x12e>
				t->dticks -= to->dticks;
   11ac2:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
   11ac4:	6859      	ldr	r1, [r3, #4]
   11ac6:	eb67 0705 	sbc.w	r7, r7, r5
   11aca:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
   11ace:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   11ad2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   11ad4:	605c      	str	r4, [r3, #4]
	return list->head == list;
   11ad6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11ad8:	4293      	cmp	r3, r2
   11ada:	d00b      	beq.n	11af4 <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11adc:	429c      	cmp	r4, r3
   11ade:	d109      	bne.n	11af4 <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11ae0:	f7ff ff40 	bl	11964 <next_timeout>

			if (next_time == 0 ||
   11ae4:	b118      	cbz	r0, 11aee <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   11ae6:	4b17      	ldr	r3, [pc, #92]	; (11b44 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   11ae8:	691b      	ldr	r3, [r3, #16]
   11aea:	4283      	cmp	r3, r0
   11aec:	d002      	beq.n	11af4 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   11aee:	2100      	movs	r1, #0
   11af0:	f7fd fb08 	bl	f104 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11af4:	480f      	ldr	r0, [pc, #60]	; (11b34 <z_add_timeout+0x148>)
   11af6:	f7fe fd85 	bl	10604 <z_spin_unlock_valid>
   11afa:	b940      	cbnz	r0, 11b0e <z_add_timeout+0x122>
   11afc:	490e      	ldr	r1, [pc, #56]	; (11b38 <z_add_timeout+0x14c>)
   11afe:	480c      	ldr	r0, [pc, #48]	; (11b30 <z_add_timeout+0x144>)
   11b00:	22ac      	movs	r2, #172	; 0xac
   11b02:	f002 ff93 	bl	14a2c <printk>
   11b06:	21ac      	movs	r1, #172	; 0xac
   11b08:	480b      	ldr	r0, [pc, #44]	; (11b38 <z_add_timeout+0x14c>)
   11b0a:	f003 f816 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11b0e:	f386 8811 	msr	BASEPRI, r6
   11b12:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			to->dticks -= t->dticks;
   11b1a:	1a09      	subs	r1, r1, r0
   11b1c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   11b20:	4563      	cmp	r3, ip
   11b22:	e9c4 1504 	strd	r1, r5, [r4, #16]
   11b26:	d0b5      	beq.n	11a94 <z_add_timeout+0xa8>
   11b28:	681b      	ldr	r3, [r3, #0]
   11b2a:	e7b2      	b.n	11a92 <z_add_timeout+0xa6>
   11b2c:	00016ba8 	.word	0x00016ba8
   11b30:	00015a05 	.word	0x00015a05
   11b34:	20000a70 	.word	0x20000a70
   11b38:	000159df 	.word	0x000159df
   11b3c:	20000260 	.word	0x20000260
   11b40:	20000080 	.word	0x20000080
   11b44:	20000a2c 	.word	0x20000a2c

00011b48 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   11b48:	b538      	push	{r3, r4, r5, lr}
   11b4a:	4604      	mov	r4, r0
	__asm__ volatile(
   11b4c:	f04f 0320 	mov.w	r3, #32
   11b50:	f3ef 8511 	mrs	r5, BASEPRI
   11b54:	f383 8812 	msr	BASEPRI_MAX, r3
   11b58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11b5c:	4815      	ldr	r0, [pc, #84]	; (11bb4 <z_abort_timeout+0x6c>)
   11b5e:	f7fe fd43 	bl	105e8 <z_spin_lock_valid>
   11b62:	b940      	cbnz	r0, 11b76 <z_abort_timeout+0x2e>
   11b64:	4914      	ldr	r1, [pc, #80]	; (11bb8 <z_abort_timeout+0x70>)
   11b66:	4815      	ldr	r0, [pc, #84]	; (11bbc <z_abort_timeout+0x74>)
   11b68:	2281      	movs	r2, #129	; 0x81
   11b6a:	f002 ff5f 	bl	14a2c <printk>
   11b6e:	2181      	movs	r1, #129	; 0x81
   11b70:	4811      	ldr	r0, [pc, #68]	; (11bb8 <z_abort_timeout+0x70>)
   11b72:	f002 ffe2 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11b76:	480f      	ldr	r0, [pc, #60]	; (11bb4 <z_abort_timeout+0x6c>)
   11b78:	f7fe fd52 	bl	10620 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   11b7c:	6823      	ldr	r3, [r4, #0]
   11b7e:	b1b3      	cbz	r3, 11bae <z_abort_timeout+0x66>
			remove_timeout(to);
   11b80:	4620      	mov	r0, r4
   11b82:	f7ff ff19 	bl	119b8 <remove_timeout>
			ret = 0;
   11b86:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11b88:	480a      	ldr	r0, [pc, #40]	; (11bb4 <z_abort_timeout+0x6c>)
   11b8a:	f7fe fd3b 	bl	10604 <z_spin_unlock_valid>
   11b8e:	b940      	cbnz	r0, 11ba2 <z_abort_timeout+0x5a>
   11b90:	4909      	ldr	r1, [pc, #36]	; (11bb8 <z_abort_timeout+0x70>)
   11b92:	480a      	ldr	r0, [pc, #40]	; (11bbc <z_abort_timeout+0x74>)
   11b94:	22ac      	movs	r2, #172	; 0xac
   11b96:	f002 ff49 	bl	14a2c <printk>
   11b9a:	21ac      	movs	r1, #172	; 0xac
   11b9c:	4806      	ldr	r0, [pc, #24]	; (11bb8 <z_abort_timeout+0x70>)
   11b9e:	f002 ffcc 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11ba2:	f385 8811 	msr	BASEPRI, r5
   11ba6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   11baa:	4620      	mov	r0, r4
   11bac:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   11bae:	f06f 0415 	mvn.w	r4, #21
   11bb2:	e7e9      	b.n	11b88 <z_abort_timeout+0x40>
   11bb4:	20000a70 	.word	0x20000a70
   11bb8:	000159df 	.word	0x000159df
   11bbc:	00015a05 	.word	0x00015a05

00011bc0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   11bc0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11bc2:	f04f 0320 	mov.w	r3, #32
   11bc6:	f3ef 8511 	mrs	r5, BASEPRI
   11bca:	f383 8812 	msr	BASEPRI_MAX, r3
   11bce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11bd2:	4813      	ldr	r0, [pc, #76]	; (11c20 <z_get_next_timeout_expiry+0x60>)
   11bd4:	f7fe fd08 	bl	105e8 <z_spin_lock_valid>
   11bd8:	b940      	cbnz	r0, 11bec <z_get_next_timeout_expiry+0x2c>
   11bda:	4912      	ldr	r1, [pc, #72]	; (11c24 <z_get_next_timeout_expiry+0x64>)
   11bdc:	4812      	ldr	r0, [pc, #72]	; (11c28 <z_get_next_timeout_expiry+0x68>)
   11bde:	2281      	movs	r2, #129	; 0x81
   11be0:	f002 ff24 	bl	14a2c <printk>
   11be4:	2181      	movs	r1, #129	; 0x81
   11be6:	480f      	ldr	r0, [pc, #60]	; (11c24 <z_get_next_timeout_expiry+0x64>)
   11be8:	f002 ffa7 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11bec:	480c      	ldr	r0, [pc, #48]	; (11c20 <z_get_next_timeout_expiry+0x60>)
   11bee:	f7fe fd17 	bl	10620 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   11bf2:	f7ff feb7 	bl	11964 <next_timeout>
   11bf6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11bf8:	4809      	ldr	r0, [pc, #36]	; (11c20 <z_get_next_timeout_expiry+0x60>)
   11bfa:	f7fe fd03 	bl	10604 <z_spin_unlock_valid>
   11bfe:	b940      	cbnz	r0, 11c12 <z_get_next_timeout_expiry+0x52>
   11c00:	4908      	ldr	r1, [pc, #32]	; (11c24 <z_get_next_timeout_expiry+0x64>)
   11c02:	4809      	ldr	r0, [pc, #36]	; (11c28 <z_get_next_timeout_expiry+0x68>)
   11c04:	22ac      	movs	r2, #172	; 0xac
   11c06:	f002 ff11 	bl	14a2c <printk>
   11c0a:	21ac      	movs	r1, #172	; 0xac
   11c0c:	4805      	ldr	r0, [pc, #20]	; (11c24 <z_get_next_timeout_expiry+0x64>)
   11c0e:	f002 ff94 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11c12:	f385 8811 	msr	BASEPRI, r5
   11c16:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   11c1a:	4620      	mov	r0, r4
   11c1c:	bd38      	pop	{r3, r4, r5, pc}
   11c1e:	bf00      	nop
   11c20:	20000a70 	.word	0x20000a70
   11c24:	000159df 	.word	0x000159df
   11c28:	00015a05 	.word	0x00015a05

00011c2c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   11c2c:	b570      	push	{r4, r5, r6, lr}
   11c2e:	4604      	mov	r4, r0
   11c30:	460d      	mov	r5, r1
	__asm__ volatile(
   11c32:	f04f 0320 	mov.w	r3, #32
   11c36:	f3ef 8611 	mrs	r6, BASEPRI
   11c3a:	f383 8812 	msr	BASEPRI_MAX, r3
   11c3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11c42:	4817      	ldr	r0, [pc, #92]	; (11ca0 <z_set_timeout_expiry+0x74>)
   11c44:	f7fe fcd0 	bl	105e8 <z_spin_lock_valid>
   11c48:	b940      	cbnz	r0, 11c5c <z_set_timeout_expiry+0x30>
   11c4a:	4916      	ldr	r1, [pc, #88]	; (11ca4 <z_set_timeout_expiry+0x78>)
   11c4c:	4816      	ldr	r0, [pc, #88]	; (11ca8 <z_set_timeout_expiry+0x7c>)
   11c4e:	2281      	movs	r2, #129	; 0x81
   11c50:	f002 feec 	bl	14a2c <printk>
   11c54:	2181      	movs	r1, #129	; 0x81
   11c56:	4813      	ldr	r0, [pc, #76]	; (11ca4 <z_set_timeout_expiry+0x78>)
   11c58:	f002 ff6f 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11c5c:	4810      	ldr	r0, [pc, #64]	; (11ca0 <z_set_timeout_expiry+0x74>)
   11c5e:	f7fe fcdf 	bl	10620 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   11c62:	f7ff fe7f 	bl	11964 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   11c66:	2801      	cmp	r0, #1
   11c68:	dd07      	ble.n	11c7a <z_set_timeout_expiry+0x4e>
   11c6a:	42a0      	cmp	r0, r4
   11c6c:	db05      	blt.n	11c7a <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   11c6e:	42a0      	cmp	r0, r4
   11c70:	4629      	mov	r1, r5
   11c72:	bfa8      	it	ge
   11c74:	4620      	movge	r0, r4
   11c76:	f7fd fa45 	bl	f104 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11c7a:	4809      	ldr	r0, [pc, #36]	; (11ca0 <z_set_timeout_expiry+0x74>)
   11c7c:	f7fe fcc2 	bl	10604 <z_spin_unlock_valid>
   11c80:	b940      	cbnz	r0, 11c94 <z_set_timeout_expiry+0x68>
   11c82:	4908      	ldr	r1, [pc, #32]	; (11ca4 <z_set_timeout_expiry+0x78>)
   11c84:	4808      	ldr	r0, [pc, #32]	; (11ca8 <z_set_timeout_expiry+0x7c>)
   11c86:	22ac      	movs	r2, #172	; 0xac
   11c88:	f002 fed0 	bl	14a2c <printk>
   11c8c:	21ac      	movs	r1, #172	; 0xac
   11c8e:	4805      	ldr	r0, [pc, #20]	; (11ca4 <z_set_timeout_expiry+0x78>)
   11c90:	f002 ff53 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11c94:	f386 8811 	msr	BASEPRI, r6
   11c98:	f3bf 8f6f 	isb	sy
		}
	}
}
   11c9c:	bd70      	pop	{r4, r5, r6, pc}
   11c9e:	bf00      	nop
   11ca0:	20000a70 	.word	0x20000a70
   11ca4:	000159df 	.word	0x000159df
   11ca8:	00015a05 	.word	0x00015a05

00011cac <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   11cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11cb0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11cb2:	f7ff f9a1 	bl	10ff8 <z_time_slice>
	__asm__ volatile(
   11cb6:	f04f 0320 	mov.w	r3, #32
   11cba:	f3ef 8511 	mrs	r5, BASEPRI
   11cbe:	f383 8812 	msr	BASEPRI_MAX, r3
   11cc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11cc6:	4842      	ldr	r0, [pc, #264]	; (11dd0 <sys_clock_announce+0x124>)
   11cc8:	f7fe fc8e 	bl	105e8 <z_spin_lock_valid>
   11ccc:	b940      	cbnz	r0, 11ce0 <sys_clock_announce+0x34>
   11cce:	4941      	ldr	r1, [pc, #260]	; (11dd4 <sys_clock_announce+0x128>)
   11cd0:	4841      	ldr	r0, [pc, #260]	; (11dd8 <sys_clock_announce+0x12c>)
   11cd2:	2281      	movs	r2, #129	; 0x81
   11cd4:	f002 feaa 	bl	14a2c <printk>
   11cd8:	2181      	movs	r1, #129	; 0x81
   11cda:	483e      	ldr	r0, [pc, #248]	; (11dd4 <sys_clock_announce+0x128>)
   11cdc:	f002 ff2d 	bl	14b3a <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11ce0:	4f3e      	ldr	r7, [pc, #248]	; (11ddc <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   11ce2:	483b      	ldr	r0, [pc, #236]	; (11dd0 <sys_clock_announce+0x124>)
	return list->head == list;
   11ce4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 11de0 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   11ce8:	4e3e      	ldr	r6, [pc, #248]	; (11de4 <sys_clock_announce+0x138>)
   11cea:	f7fe fc99 	bl	10620 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   11cee:	603c      	str	r4, [r7, #0]
   11cf0:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11cf4:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11cf6:	4544      	cmp	r4, r8
   11cf8:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   11cfc:	e9d6 1e00 	ldrd	r1, lr, [r6]
   11d00:	d00b      	beq.n	11d1a <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11d02:	b154      	cbz	r4, 11d1a <sys_clock_announce+0x6e>
   11d04:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   11d08:	429a      	cmp	r2, r3
   11d0a:	eb70 090c 	sbcs.w	r9, r0, ip
   11d0e:	da23      	bge.n	11d58 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11d10:	1a9b      	subs	r3, r3, r2
   11d12:	eb6c 0c00 	sbc.w	ip, ip, r0
   11d16:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11d1a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11d1c:	1851      	adds	r1, r2, r1
   11d1e:	eb4e 0000 	adc.w	r0, lr, r0
   11d22:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
   11d26:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11d28:	f7ff fe1c 	bl	11964 <next_timeout>
   11d2c:	4621      	mov	r1, r4
   11d2e:	f7fd f9e9 	bl	f104 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d32:	4827      	ldr	r0, [pc, #156]	; (11dd0 <sys_clock_announce+0x124>)
   11d34:	f7fe fc66 	bl	10604 <z_spin_unlock_valid>
   11d38:	b940      	cbnz	r0, 11d4c <sys_clock_announce+0xa0>
   11d3a:	4926      	ldr	r1, [pc, #152]	; (11dd4 <sys_clock_announce+0x128>)
   11d3c:	4826      	ldr	r0, [pc, #152]	; (11dd8 <sys_clock_announce+0x12c>)
   11d3e:	22ac      	movs	r2, #172	; 0xac
   11d40:	f002 fe74 	bl	14a2c <printk>
   11d44:	21ac      	movs	r1, #172	; 0xac
   11d46:	4823      	ldr	r0, [pc, #140]	; (11dd4 <sys_clock_announce+0x128>)
   11d48:	f002 fef7 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11d4c:	f385 8811 	msr	BASEPRI, r5
   11d50:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   11d58:	1859      	adds	r1, r3, r1
   11d5a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   11d5e:	1ad3      	subs	r3, r2, r3
   11d60:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   11d62:	2200      	movs	r2, #0
   11d64:	2300      	movs	r3, #0
		curr_tick += dt;
   11d66:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   11d6a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   11d6e:	4620      	mov	r0, r4
   11d70:	f7ff fe22 	bl	119b8 <remove_timeout>
   11d74:	4816      	ldr	r0, [pc, #88]	; (11dd0 <sys_clock_announce+0x124>)
   11d76:	f7fe fc45 	bl	10604 <z_spin_unlock_valid>
   11d7a:	b940      	cbnz	r0, 11d8e <sys_clock_announce+0xe2>
   11d7c:	4915      	ldr	r1, [pc, #84]	; (11dd4 <sys_clock_announce+0x128>)
   11d7e:	4816      	ldr	r0, [pc, #88]	; (11dd8 <sys_clock_announce+0x12c>)
   11d80:	22ac      	movs	r2, #172	; 0xac
   11d82:	f002 fe53 	bl	14a2c <printk>
   11d86:	21ac      	movs	r1, #172	; 0xac
   11d88:	4812      	ldr	r0, [pc, #72]	; (11dd4 <sys_clock_announce+0x128>)
   11d8a:	f002 fed6 	bl	14b3a <assert_post_action>
   11d8e:	f385 8811 	msr	BASEPRI, r5
   11d92:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11d96:	4620      	mov	r0, r4
   11d98:	68a3      	ldr	r3, [r4, #8]
   11d9a:	4798      	blx	r3
	__asm__ volatile(
   11d9c:	f04f 0320 	mov.w	r3, #32
   11da0:	f3ef 8511 	mrs	r5, BASEPRI
   11da4:	f383 8812 	msr	BASEPRI_MAX, r3
   11da8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11dac:	4808      	ldr	r0, [pc, #32]	; (11dd0 <sys_clock_announce+0x124>)
   11dae:	f7fe fc1b 	bl	105e8 <z_spin_lock_valid>
   11db2:	b940      	cbnz	r0, 11dc6 <sys_clock_announce+0x11a>
   11db4:	4907      	ldr	r1, [pc, #28]	; (11dd4 <sys_clock_announce+0x128>)
   11db6:	4808      	ldr	r0, [pc, #32]	; (11dd8 <sys_clock_announce+0x12c>)
   11db8:	2281      	movs	r2, #129	; 0x81
   11dba:	f002 fe37 	bl	14a2c <printk>
   11dbe:	2181      	movs	r1, #129	; 0x81
   11dc0:	4804      	ldr	r0, [pc, #16]	; (11dd4 <sys_clock_announce+0x128>)
   11dc2:	f002 feba 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11dc6:	4802      	ldr	r0, [pc, #8]	; (11dd0 <sys_clock_announce+0x124>)
   11dc8:	f7fe fc2a 	bl	10620 <z_spin_lock_set_owner>
	return k;
   11dcc:	e790      	b.n	11cf0 <sys_clock_announce+0x44>
   11dce:	bf00      	nop
   11dd0:	20000a70 	.word	0x20000a70
   11dd4:	000159df 	.word	0x000159df
   11dd8:	00015a05 	.word	0x00015a05
   11ddc:	20000a6c 	.word	0x20000a6c
   11de0:	20000080 	.word	0x20000080
   11de4:	20000260 	.word	0x20000260

00011de8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11de8:	b570      	push	{r4, r5, r6, lr}
   11dea:	f04f 0320 	mov.w	r3, #32
   11dee:	f3ef 8611 	mrs	r6, BASEPRI
   11df2:	f383 8812 	msr	BASEPRI_MAX, r3
   11df6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11dfa:	4816      	ldr	r0, [pc, #88]	; (11e54 <sys_clock_tick_get+0x6c>)
   11dfc:	f7fe fbf4 	bl	105e8 <z_spin_lock_valid>
   11e00:	b940      	cbnz	r0, 11e14 <sys_clock_tick_get+0x2c>
   11e02:	4915      	ldr	r1, [pc, #84]	; (11e58 <sys_clock_tick_get+0x70>)
   11e04:	4815      	ldr	r0, [pc, #84]	; (11e5c <sys_clock_tick_get+0x74>)
   11e06:	2281      	movs	r2, #129	; 0x81
   11e08:	f002 fe10 	bl	14a2c <printk>
   11e0c:	2181      	movs	r1, #129	; 0x81
   11e0e:	4812      	ldr	r0, [pc, #72]	; (11e58 <sys_clock_tick_get+0x70>)
   11e10:	f002 fe93 	bl	14b3a <assert_post_action>
	z_spin_lock_set_owner(l);
   11e14:	480f      	ldr	r0, [pc, #60]	; (11e54 <sys_clock_tick_get+0x6c>)
   11e16:	f7fe fc03 	bl	10620 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   11e1a:	f7fd f9f5 	bl	f208 <sys_clock_elapsed>
   11e1e:	4a10      	ldr	r2, [pc, #64]	; (11e60 <sys_clock_tick_get+0x78>)
   11e20:	e9d2 4500 	ldrd	r4, r5, [r2]
   11e24:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11e26:	480b      	ldr	r0, [pc, #44]	; (11e54 <sys_clock_tick_get+0x6c>)
   11e28:	f145 0500 	adc.w	r5, r5, #0
   11e2c:	f7fe fbea 	bl	10604 <z_spin_unlock_valid>
   11e30:	b940      	cbnz	r0, 11e44 <sys_clock_tick_get+0x5c>
   11e32:	4909      	ldr	r1, [pc, #36]	; (11e58 <sys_clock_tick_get+0x70>)
   11e34:	4809      	ldr	r0, [pc, #36]	; (11e5c <sys_clock_tick_get+0x74>)
   11e36:	22ac      	movs	r2, #172	; 0xac
   11e38:	f002 fdf8 	bl	14a2c <printk>
   11e3c:	21ac      	movs	r1, #172	; 0xac
   11e3e:	4806      	ldr	r0, [pc, #24]	; (11e58 <sys_clock_tick_get+0x70>)
   11e40:	f002 fe7b 	bl	14b3a <assert_post_action>
	__asm__ volatile(
   11e44:	f386 8811 	msr	BASEPRI, r6
   11e48:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11e4c:	4620      	mov	r0, r4
   11e4e:	4629      	mov	r1, r5
   11e50:	bd70      	pop	{r4, r5, r6, pc}
   11e52:	bf00      	nop
   11e54:	20000a70 	.word	0x20000a70
   11e58:	000159df 	.word	0x000159df
   11e5c:	00015a05 	.word	0x00015a05
   11e60:	20000260 	.word	0x20000260

00011e64 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   11e64:	4a02      	ldr	r2, [pc, #8]	; (11e70 <boot_banner+0xc>)
   11e66:	4903      	ldr	r1, [pc, #12]	; (11e74 <boot_banner+0x10>)
   11e68:	4803      	ldr	r0, [pc, #12]	; (11e78 <boot_banner+0x14>)
   11e6a:	f002 bddf 	b.w	14a2c <printk>
   11e6e:	bf00      	nop
   11e70:	00015a28 	.word	0x00015a28
   11e74:	00016bcc 	.word	0x00016bcc
   11e78:	00016bd9 	.word	0x00016bd9

00011e7c <nrf_cc3xx_platform_init>:
   11e7c:	b510      	push	{r4, lr}
   11e7e:	4c0c      	ldr	r4, [pc, #48]	; (11eb0 <nrf_cc3xx_platform_init+0x34>)
   11e80:	6823      	ldr	r3, [r4, #0]
   11e82:	b113      	cbz	r3, 11e8a <nrf_cc3xx_platform_init+0xe>
   11e84:	4b0b      	ldr	r3, [pc, #44]	; (11eb4 <nrf_cc3xx_platform_init+0x38>)
   11e86:	681b      	ldr	r3, [r3, #0]
   11e88:	b92b      	cbnz	r3, 11e96 <nrf_cc3xx_platform_init+0x1a>
   11e8a:	f000 fe73 	bl	12b74 <CC_LibInit>
   11e8e:	b930      	cbnz	r0, 11e9e <nrf_cc3xx_platform_init+0x22>
   11e90:	2201      	movs	r2, #1
   11e92:	4b08      	ldr	r3, [pc, #32]	; (11eb4 <nrf_cc3xx_platform_init+0x38>)
   11e94:	601a      	str	r2, [r3, #0]
   11e96:	2301      	movs	r3, #1
   11e98:	2000      	movs	r0, #0
   11e9a:	6023      	str	r3, [r4, #0]
   11e9c:	bd10      	pop	{r4, pc}
   11e9e:	3801      	subs	r0, #1
   11ea0:	2806      	cmp	r0, #6
   11ea2:	d901      	bls.n	11ea8 <nrf_cc3xx_platform_init+0x2c>
   11ea4:	4804      	ldr	r0, [pc, #16]	; (11eb8 <nrf_cc3xx_platform_init+0x3c>)
   11ea6:	bd10      	pop	{r4, pc}
   11ea8:	4b04      	ldr	r3, [pc, #16]	; (11ebc <nrf_cc3xx_platform_init+0x40>)
   11eaa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11eae:	bd10      	pop	{r4, pc}
   11eb0:	20000a74 	.word	0x20000a74
   11eb4:	20000a78 	.word	0x20000a78
   11eb8:	ffff8ffe 	.word	0xffff8ffe
   11ebc:	00015824 	.word	0x00015824

00011ec0 <nrf_cc3xx_platform_abort>:
   11ec0:	f3bf 8f4f 	dsb	sy
   11ec4:	4905      	ldr	r1, [pc, #20]	; (11edc <nrf_cc3xx_platform_abort+0x1c>)
   11ec6:	4b06      	ldr	r3, [pc, #24]	; (11ee0 <nrf_cc3xx_platform_abort+0x20>)
   11ec8:	68ca      	ldr	r2, [r1, #12]
   11eca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11ece:	4313      	orrs	r3, r2
   11ed0:	60cb      	str	r3, [r1, #12]
   11ed2:	f3bf 8f4f 	dsb	sy
   11ed6:	bf00      	nop
   11ed8:	e7fd      	b.n	11ed6 <nrf_cc3xx_platform_abort+0x16>
   11eda:	bf00      	nop
   11edc:	e000ed00 	.word	0xe000ed00
   11ee0:	05fa0004 	.word	0x05fa0004

00011ee4 <CC_PalAbort>:
   11ee4:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   11ee8:	2100      	movs	r1, #0
   11eea:	b430      	push	{r4, r5}
   11eec:	4a06      	ldr	r2, [pc, #24]	; (11f08 <CC_PalAbort+0x24>)
   11eee:	4d07      	ldr	r5, [pc, #28]	; (11f0c <CC_PalAbort+0x28>)
   11ef0:	4c07      	ldr	r4, [pc, #28]	; (11f10 <CC_PalAbort+0x2c>)
   11ef2:	602b      	str	r3, [r5, #0]
   11ef4:	6013      	str	r3, [r2, #0]
   11ef6:	6023      	str	r3, [r4, #0]
   11ef8:	4a06      	ldr	r2, [pc, #24]	; (11f14 <CC_PalAbort+0x30>)
   11efa:	4c07      	ldr	r4, [pc, #28]	; (11f18 <CC_PalAbort+0x34>)
   11efc:	60eb      	str	r3, [r5, #12]
   11efe:	6863      	ldr	r3, [r4, #4]
   11f00:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   11f04:	bc30      	pop	{r4, r5}
   11f06:	4718      	bx	r3
   11f08:	50841404 	.word	0x50841404
   11f0c:	50841400 	.word	0x50841400
   11f10:	50841408 	.word	0x50841408
   11f14:	50840000 	.word	0x50840000
   11f18:	20000088 	.word	0x20000088

00011f1c <nrf_cc3xx_platform_set_abort>:
   11f1c:	4b02      	ldr	r3, [pc, #8]	; (11f28 <nrf_cc3xx_platform_set_abort+0xc>)
   11f1e:	e9d0 1200 	ldrd	r1, r2, [r0]
   11f22:	e9c3 1200 	strd	r1, r2, [r3]
   11f26:	4770      	bx	lr
   11f28:	20000088 	.word	0x20000088

00011f2c <nrf_cc3xx_platform_ctr_drbg_init>:
   11f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11f30:	4c15      	ldr	r4, [pc, #84]	; (11f88 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   11f32:	f8df 805c 	ldr.w	r8, [pc, #92]	; 11f90 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   11f36:	2800      	cmp	r0, #0
   11f38:	bf18      	it	ne
   11f3a:	4604      	movne	r4, r0
   11f3c:	6820      	ldr	r0, [r4, #0]
   11f3e:	b083      	sub	sp, #12
   11f40:	4540      	cmp	r0, r8
   11f42:	d01d      	beq.n	11f80 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   11f44:	4616      	mov	r6, r2
   11f46:	460d      	mov	r5, r1
   11f48:	4620      	mov	r0, r4
   11f4a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   11f4e:	f104 0904 	add.w	r9, r4, #4
   11f52:	f000 f8d3 	bl	120fc <mbedtls_platform_zeroize>
   11f56:	f504 778c 	add.w	r7, r4, #280	; 0x118
   11f5a:	4648      	mov	r0, r9
   11f5c:	f000 fcf2 	bl	12944 <cc_mbedtls_entropy_init>
   11f60:	4638      	mov	r0, r7
   11f62:	f000 fb1d 	bl	125a0 <cc_mbedtls_ctr_drbg_init>
   11f66:	464a      	mov	r2, r9
   11f68:	4638      	mov	r0, r7
   11f6a:	462b      	mov	r3, r5
   11f6c:	4907      	ldr	r1, [pc, #28]	; (11f8c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   11f6e:	9600      	str	r6, [sp, #0]
   11f70:	f000 fb2c 	bl	125cc <cc_mbedtls_ctr_drbg_seed>
   11f74:	b908      	cbnz	r0, 11f7a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   11f76:	f8c4 8000 	str.w	r8, [r4]
   11f7a:	b003      	add	sp, #12
   11f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f80:	2000      	movs	r0, #0
   11f82:	b003      	add	sp, #12
   11f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f88:	20001460 	.word	0x20001460
   11f8c:	000129c5 	.word	0x000129c5
   11f90:	5ac9bca5 	.word	0x5ac9bca5

00011f94 <nrf_cc3xx_platform_ctr_drbg_get>:
   11f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f96:	4c0d      	ldr	r4, [pc, #52]	; (11fcc <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   11f98:	4e0d      	ldr	r6, [pc, #52]	; (11fd0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   11f9a:	2800      	cmp	r0, #0
   11f9c:	bf08      	it	eq
   11f9e:	4620      	moveq	r0, r4
   11fa0:	6807      	ldr	r7, [r0, #0]
   11fa2:	b083      	sub	sp, #12
   11fa4:	42b7      	cmp	r7, r6
   11fa6:	d10e      	bne.n	11fc6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   11fa8:	2600      	movs	r6, #0
   11faa:	461d      	mov	r5, r3
   11fac:	f500 708c 	add.w	r0, r0, #280	; 0x118
   11fb0:	4633      	mov	r3, r6
   11fb2:	9600      	str	r6, [sp, #0]
   11fb4:	4614      	mov	r4, r2
   11fb6:	f000 fb57 	bl	12668 <cc_mbedtls_ctr_drbg_random_with_add>
   11fba:	2800      	cmp	r0, #0
   11fbc:	bf18      	it	ne
   11fbe:	4634      	movne	r4, r6
   11fc0:	602c      	str	r4, [r5, #0]
   11fc2:	b003      	add	sp, #12
   11fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11fc6:	4803      	ldr	r0, [pc, #12]	; (11fd4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   11fc8:	e7fb      	b.n	11fc2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   11fca:	bf00      	nop
   11fcc:	20001460 	.word	0x20001460
   11fd0:	5ac9bca5 	.word	0x5ac9bca5
   11fd4:	ffff8fe8 	.word	0xffff8fe8

00011fd8 <mutex_free>:
   11fd8:	b510      	push	{r4, lr}
   11fda:	4604      	mov	r4, r0
   11fdc:	b130      	cbz	r0, 11fec <mutex_free+0x14>
   11fde:	6863      	ldr	r3, [r4, #4]
   11fe0:	06db      	lsls	r3, r3, #27
   11fe2:	d502      	bpl.n	11fea <mutex_free+0x12>
   11fe4:	2300      	movs	r3, #0
   11fe6:	6023      	str	r3, [r4, #0]
   11fe8:	6063      	str	r3, [r4, #4]
   11fea:	bd10      	pop	{r4, pc}
   11fec:	4b02      	ldr	r3, [pc, #8]	; (11ff8 <mutex_free+0x20>)
   11fee:	4803      	ldr	r0, [pc, #12]	; (11ffc <mutex_free+0x24>)
   11ff0:	685b      	ldr	r3, [r3, #4]
   11ff2:	4798      	blx	r3
   11ff4:	e7f3      	b.n	11fde <mutex_free+0x6>
   11ff6:	bf00      	nop
   11ff8:	20000088 	.word	0x20000088
   11ffc:	00015840 	.word	0x00015840

00012000 <mutex_unlock>:
   12000:	b168      	cbz	r0, 1201e <mutex_unlock+0x1e>
   12002:	6843      	ldr	r3, [r0, #4]
   12004:	b13b      	cbz	r3, 12016 <mutex_unlock+0x16>
   12006:	06db      	lsls	r3, r3, #27
   12008:	d507      	bpl.n	1201a <mutex_unlock+0x1a>
   1200a:	f3bf 8f5f 	dmb	sy
   1200e:	2300      	movs	r3, #0
   12010:	6003      	str	r3, [r0, #0]
   12012:	4618      	mov	r0, r3
   12014:	4770      	bx	lr
   12016:	4803      	ldr	r0, [pc, #12]	; (12024 <mutex_unlock+0x24>)
   12018:	4770      	bx	lr
   1201a:	4803      	ldr	r0, [pc, #12]	; (12028 <mutex_unlock+0x28>)
   1201c:	4770      	bx	lr
   1201e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12022:	4770      	bx	lr
   12024:	ffff8fea 	.word	0xffff8fea
   12028:	ffff8fe9 	.word	0xffff8fe9

0001202c <mutex_init>:
   1202c:	b510      	push	{r4, lr}
   1202e:	4604      	mov	r4, r0
   12030:	b120      	cbz	r0, 1203c <mutex_init+0x10>
   12032:	2200      	movs	r2, #0
   12034:	2311      	movs	r3, #17
   12036:	6022      	str	r2, [r4, #0]
   12038:	6063      	str	r3, [r4, #4]
   1203a:	bd10      	pop	{r4, pc}
   1203c:	4801      	ldr	r0, [pc, #4]	; (12044 <mutex_init+0x18>)
   1203e:	f7ff ff51 	bl	11ee4 <CC_PalAbort>
   12042:	e7f6      	b.n	12032 <mutex_init+0x6>
   12044:	00015868 	.word	0x00015868

00012048 <mutex_lock>:
   12048:	b1a0      	cbz	r0, 12074 <mutex_lock+0x2c>
   1204a:	6843      	ldr	r3, [r0, #4]
   1204c:	b183      	cbz	r3, 12070 <mutex_lock+0x28>
   1204e:	06db      	lsls	r3, r3, #27
   12050:	d50c      	bpl.n	1206c <mutex_lock+0x24>
   12052:	2201      	movs	r2, #1
   12054:	e8d0 3fef 	ldaex	r3, [r0]
   12058:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1205c:	2900      	cmp	r1, #0
   1205e:	d1f9      	bne.n	12054 <mutex_lock+0xc>
   12060:	2b01      	cmp	r3, #1
   12062:	d0f7      	beq.n	12054 <mutex_lock+0xc>
   12064:	f3bf 8f5f 	dmb	sy
   12068:	2000      	movs	r0, #0
   1206a:	4770      	bx	lr
   1206c:	4803      	ldr	r0, [pc, #12]	; (1207c <mutex_lock+0x34>)
   1206e:	4770      	bx	lr
   12070:	4803      	ldr	r0, [pc, #12]	; (12080 <mutex_lock+0x38>)
   12072:	4770      	bx	lr
   12074:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12078:	4770      	bx	lr
   1207a:	bf00      	nop
   1207c:	ffff8fe9 	.word	0xffff8fe9
   12080:	ffff8fea 	.word	0xffff8fea

00012084 <nrf_cc3xx_platform_set_mutexes>:
   12084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12088:	4c14      	ldr	r4, [pc, #80]	; (120dc <nrf_cc3xx_platform_set_mutexes+0x58>)
   1208a:	6802      	ldr	r2, [r0, #0]
   1208c:	68c3      	ldr	r3, [r0, #12]
   1208e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   12092:	e9c4 6302 	strd	r6, r3, [r4, #8]
   12096:	e9c4 2500 	strd	r2, r5, [r4]
   1209a:	4b11      	ldr	r3, [pc, #68]	; (120e0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1209c:	680e      	ldr	r6, [r1, #0]
   1209e:	6848      	ldr	r0, [r1, #4]
   120a0:	4d10      	ldr	r5, [pc, #64]	; (120e4 <nrf_cc3xx_platform_set_mutexes+0x60>)
   120a2:	e9c3 6000 	strd	r6, r0, [r3]
   120a6:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   120aa:	6908      	ldr	r0, [r1, #16]
   120ac:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   120b0:	e9c3 7602 	strd	r7, r6, [r3, #8]
   120b4:	6118      	str	r0, [r3, #16]
   120b6:	06cb      	lsls	r3, r1, #27
   120b8:	d50d      	bpl.n	120d6 <nrf_cc3xx_platform_set_mutexes+0x52>
   120ba:	2300      	movs	r3, #0
   120bc:	f505 7088 	add.w	r0, r5, #272	; 0x110
   120c0:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   120c4:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   120c8:	4790      	blx	r2
   120ca:	6823      	ldr	r3, [r4, #0]
   120cc:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   120d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   120d4:	4718      	bx	r3
   120d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120da:	bf00      	nop
   120dc:	20000098 	.word	0x20000098
   120e0:	200000a8 	.word	0x200000a8
   120e4:	20001460 	.word	0x20001460

000120e8 <mbedtls_zeroize_internal>:
   120e8:	b138      	cbz	r0, 120fa <mbedtls_zeroize_internal+0x12>
   120ea:	b131      	cbz	r1, 120fa <mbedtls_zeroize_internal+0x12>
   120ec:	2200      	movs	r2, #0
   120ee:	4401      	add	r1, r0
   120f0:	4603      	mov	r3, r0
   120f2:	3001      	adds	r0, #1
   120f4:	4281      	cmp	r1, r0
   120f6:	701a      	strb	r2, [r3, #0]
   120f8:	d1fa      	bne.n	120f0 <mbedtls_zeroize_internal+0x8>
   120fa:	4770      	bx	lr

000120fc <mbedtls_platform_zeroize>:
   120fc:	b138      	cbz	r0, 1210e <mbedtls_platform_zeroize+0x12>
   120fe:	b131      	cbz	r1, 1210e <mbedtls_platform_zeroize+0x12>
   12100:	2200      	movs	r2, #0
   12102:	4401      	add	r1, r0
   12104:	4603      	mov	r3, r0
   12106:	3001      	adds	r0, #1
   12108:	4288      	cmp	r0, r1
   1210a:	701a      	strb	r2, [r3, #0]
   1210c:	d1fa      	bne.n	12104 <mbedtls_platform_zeroize+0x8>
   1210e:	4770      	bx	lr

00012110 <block_cipher_df>:
   12110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12114:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   12118:	b0af      	sub	sp, #188	; 0xbc
   1211a:	f200 812c 	bhi.w	12376 <block_cipher_df+0x266>
   1211e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1238c <block_cipher_df+0x27c>
   12122:	4690      	mov	r8, r2
   12124:	460c      	mov	r4, r1
   12126:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1212a:	2100      	movs	r1, #0
   1212c:	4682      	mov	sl, r0
   1212e:	4648      	mov	r0, r9
   12130:	f002 fe1d 	bl	14d6e <memset>
   12134:	a811      	add	r0, sp, #68	; 0x44
   12136:	f001 f9e9 	bl	1350c <cc_mbedtls_aes_init>
   1213a:	2200      	movs	r2, #0
   1213c:	2320      	movs	r3, #32
   1213e:	4621      	mov	r1, r4
   12140:	f8a9 2010 	strh.w	r2, [r9, #16]
   12144:	fa98 f498 	rev16.w	r4, r8
   12148:	4642      	mov	r2, r8
   1214a:	f109 0018 	add.w	r0, r9, #24
   1214e:	f8a9 4012 	strh.w	r4, [r9, #18]
   12152:	f889 3017 	strb.w	r3, [r9, #23]
   12156:	f002 fdff 	bl	14d58 <memcpy>
   1215a:	2280      	movs	r2, #128	; 0x80
   1215c:	4b87      	ldr	r3, [pc, #540]	; (1237c <block_cipher_df+0x26c>)
   1215e:	4988      	ldr	r1, [pc, #544]	; (12380 <block_cipher_df+0x270>)
   12160:	4c88      	ldr	r4, [pc, #544]	; (12384 <block_cipher_df+0x274>)
   12162:	eb09 0008 	add.w	r0, r9, r8
   12166:	e9cd 4102 	strd	r4, r1, [sp, #8]
   1216a:	7602      	strb	r2, [r0, #24]
   1216c:	9301      	str	r3, [sp, #4]
   1216e:	a811      	add	r0, sp, #68	; 0x44
   12170:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
   12174:	a901      	add	r1, sp, #4
   12176:	9304      	str	r3, [sp, #16]
   12178:	f001 f9de 	bl	13538 <cc_mbedtls_aes_setkey_enc>
   1217c:	4607      	mov	r7, r0
   1217e:	2800      	cmp	r0, #0
   12180:	f040 80d8 	bne.w	12334 <block_cipher_df+0x224>
   12184:	f108 0819 	add.w	r8, r8, #25
   12188:	ae05      	add	r6, sp, #20
   1218a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   1218e:	2210      	movs	r2, #16
   12190:	2100      	movs	r1, #0
   12192:	4630      	mov	r0, r6
   12194:	f002 fdeb 	bl	14d6e <memset>
   12198:	4645      	mov	r5, r8
   1219a:	4c7b      	ldr	r4, [pc, #492]	; (12388 <block_cipher_df+0x278>)
   1219c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   121a0:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   121a4:	f89d c015 	ldrb.w	ip, [sp, #21]
   121a8:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   121ac:	f89d 0016 	ldrb.w	r0, [sp, #22]
   121b0:	4053      	eors	r3, r2
   121b2:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   121b6:	ea8c 0c01 	eor.w	ip, ip, r1
   121ba:	4050      	eors	r0, r2
   121bc:	f89d 1017 	ldrb.w	r1, [sp, #23]
   121c0:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   121c4:	f89d e018 	ldrb.w	lr, [sp, #24]
   121c8:	4051      	eors	r1, r2
   121ca:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
   121ce:	f88d 3014 	strb.w	r3, [sp, #20]
   121d2:	ea8e 0202 	eor.w	r2, lr, r2
   121d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   121da:	f89d e019 	ldrb.w	lr, [sp, #25]
   121de:	f88d c015 	strb.w	ip, [sp, #21]
   121e2:	ea8e 0303 	eor.w	r3, lr, r3
   121e6:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
   121ea:	f89d e01a 	ldrb.w	lr, [sp, #26]
   121ee:	f88d 0016 	strb.w	r0, [sp, #22]
   121f2:	ea8e 0c0c 	eor.w	ip, lr, ip
   121f6:	f814 0c09 	ldrb.w	r0, [r4, #-9]
   121fa:	f89d e01b 	ldrb.w	lr, [sp, #27]
   121fe:	f88d 1017 	strb.w	r1, [sp, #23]
   12202:	ea8e 0000 	eor.w	r0, lr, r0
   12206:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1220a:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1220e:	f88d 2018 	strb.w	r2, [sp, #24]
   12212:	ea8e 0101 	eor.w	r1, lr, r1
   12216:	f814 2c07 	ldrb.w	r2, [r4, #-7]
   1221a:	f89d e01d 	ldrb.w	lr, [sp, #29]
   1221e:	f88d 3019 	strb.w	r3, [sp, #25]
   12222:	ea8e 0202 	eor.w	r2, lr, r2
   12226:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1222a:	f814 ec06 	ldrb.w	lr, [r4, #-6]
   1222e:	f88d c01a 	strb.w	ip, [sp, #26]
   12232:	ea83 030e 	eor.w	r3, r3, lr
   12236:	f88d 001b 	strb.w	r0, [sp, #27]
   1223a:	f88d 101c 	strb.w	r1, [sp, #28]
   1223e:	f88d 201d 	strb.w	r2, [sp, #29]
   12242:	f88d 301e 	strb.w	r3, [sp, #30]
   12246:	f89d 101f 	ldrb.w	r1, [sp, #31]
   1224a:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   1224e:	f89d c020 	ldrb.w	ip, [sp, #32]
   12252:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   12256:	404b      	eors	r3, r1
   12258:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   1225c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   12260:	ea8c 0202 	eor.w	r2, ip, r2
   12264:	4041      	eors	r1, r0
   12266:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1226a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1226e:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
   12272:	ea8c 0000 	eor.w	r0, ip, r0
   12276:	f814 cc01 	ldrb.w	ip, [r4, #-1]
   1227a:	f88d 301f 	strb.w	r3, [sp, #31]
   1227e:	ea8e 0c0c 	eor.w	ip, lr, ip
   12282:	f88d 2020 	strb.w	r2, [sp, #32]
   12286:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   1228a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   1228e:	4633      	mov	r3, r6
   12290:	4632      	mov	r2, r6
   12292:	2101      	movs	r1, #1
   12294:	a811      	add	r0, sp, #68	; 0x44
   12296:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
   1229a:	f001 f967 	bl	1356c <cc_mbedtls_aes_crypt_ecb>
   1229e:	2d10      	cmp	r5, #16
   122a0:	bf94      	ite	ls
   122a2:	1b6d      	subls	r5, r5, r5
   122a4:	3d10      	subhi	r5, #16
   122a6:	2800      	cmp	r0, #0
   122a8:	d163      	bne.n	12372 <block_cipher_df+0x262>
   122aa:	3410      	adds	r4, #16
   122ac:	2d00      	cmp	r5, #0
   122ae:	f47f af75 	bne.w	1219c <block_cipher_df+0x8c>
   122b2:	eb0b 0007 	add.w	r0, fp, r7
   122b6:	2210      	movs	r2, #16
   122b8:	4631      	mov	r1, r6
   122ba:	f002 fd4d 	bl	14d58 <memcpy>
   122be:	f899 3003 	ldrb.w	r3, [r9, #3]
   122c2:	3710      	adds	r7, #16
   122c4:	3301      	adds	r3, #1
   122c6:	2f20      	cmp	r7, #32
   122c8:	f889 3003 	strb.w	r3, [r9, #3]
   122cc:	f47f af5f 	bne.w	1218e <block_cipher_df+0x7e>
   122d0:	2280      	movs	r2, #128	; 0x80
   122d2:	4659      	mov	r1, fp
   122d4:	a811      	add	r0, sp, #68	; 0x44
   122d6:	f001 f92f 	bl	13538 <cc_mbedtls_aes_setkey_enc>
   122da:	4607      	mov	r7, r0
   122dc:	bb68      	cbnz	r0, 1233a <block_cipher_df+0x22a>
   122de:	4654      	mov	r4, sl
   122e0:	f10a 0520 	add.w	r5, sl, #32
   122e4:	ab0d      	add	r3, sp, #52	; 0x34
   122e6:	461a      	mov	r2, r3
   122e8:	2101      	movs	r1, #1
   122ea:	a811      	add	r0, sp, #68	; 0x44
   122ec:	f001 f93e 	bl	1356c <cc_mbedtls_aes_crypt_ecb>
   122f0:	4607      	mov	r7, r0
   122f2:	bb10      	cbnz	r0, 1233a <block_cipher_df+0x22a>
   122f4:	2210      	movs	r2, #16
   122f6:	4620      	mov	r0, r4
   122f8:	a90d      	add	r1, sp, #52	; 0x34
   122fa:	4414      	add	r4, r2
   122fc:	f002 fd2c 	bl	14d58 <memcpy>
   12300:	42ac      	cmp	r4, r5
   12302:	d1ef      	bne.n	122e4 <block_cipher_df+0x1d4>
   12304:	a811      	add	r0, sp, #68	; 0x44
   12306:	f001 f911 	bl	1352c <cc_mbedtls_aes_free>
   1230a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1230e:	481f      	ldr	r0, [pc, #124]	; (1238c <block_cipher_df+0x27c>)
   12310:	f7ff fef4 	bl	120fc <mbedtls_platform_zeroize>
   12314:	4658      	mov	r0, fp
   12316:	2120      	movs	r1, #32
   12318:	f7ff fef0 	bl	120fc <mbedtls_platform_zeroize>
   1231c:	a801      	add	r0, sp, #4
   1231e:	2110      	movs	r1, #16
   12320:	f7ff feec 	bl	120fc <mbedtls_platform_zeroize>
   12324:	4630      	mov	r0, r6
   12326:	2110      	movs	r1, #16
   12328:	f7ff fee8 	bl	120fc <mbedtls_platform_zeroize>
   1232c:	4638      	mov	r0, r7
   1232e:	b02f      	add	sp, #188	; 0xbc
   12330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12334:	ae05      	add	r6, sp, #20
   12336:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   1233a:	a811      	add	r0, sp, #68	; 0x44
   1233c:	f001 f8f6 	bl	1352c <cc_mbedtls_aes_free>
   12340:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   12344:	4811      	ldr	r0, [pc, #68]	; (1238c <block_cipher_df+0x27c>)
   12346:	f7ff fed9 	bl	120fc <mbedtls_platform_zeroize>
   1234a:	4658      	mov	r0, fp
   1234c:	2120      	movs	r1, #32
   1234e:	f7ff fed5 	bl	120fc <mbedtls_platform_zeroize>
   12352:	2110      	movs	r1, #16
   12354:	a801      	add	r0, sp, #4
   12356:	f7ff fed1 	bl	120fc <mbedtls_platform_zeroize>
   1235a:	4630      	mov	r0, r6
   1235c:	2110      	movs	r1, #16
   1235e:	f7ff fecd 	bl	120fc <mbedtls_platform_zeroize>
   12362:	4650      	mov	r0, sl
   12364:	2120      	movs	r1, #32
   12366:	f7ff fec9 	bl	120fc <mbedtls_platform_zeroize>
   1236a:	4638      	mov	r0, r7
   1236c:	b02f      	add	sp, #188	; 0xbc
   1236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12372:	4607      	mov	r7, r0
   12374:	e7e1      	b.n	1233a <block_cipher_df+0x22a>
   12376:	f06f 0737 	mvn.w	r7, #55	; 0x37
   1237a:	e7f6      	b.n	1236a <block_cipher_df+0x25a>
   1237c:	03020100 	.word	0x03020100
   12380:	0b0a0908 	.word	0x0b0a0908
   12384:	07060504 	.word	0x07060504
   12388:	20000a9c 	.word	0x20000a9c
   1238c:	20000a8c 	.word	0x20000a8c

00012390 <ctr_drbg_update_internal>:
   12390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12394:	2220      	movs	r2, #32
   12396:	4604      	mov	r4, r0
   12398:	b088      	sub	sp, #32
   1239a:	460d      	mov	r5, r1
   1239c:	4668      	mov	r0, sp
   1239e:	2100      	movs	r1, #0
   123a0:	18a6      	adds	r6, r4, r2
   123a2:	466f      	mov	r7, sp
   123a4:	f002 fce3 	bl	14d6e <memset>
   123a8:	7be2      	ldrb	r2, [r4, #15]
   123aa:	3201      	adds	r2, #1
   123ac:	b2d2      	uxtb	r2, r2
   123ae:	73e2      	strb	r2, [r4, #15]
   123b0:	2a00      	cmp	r2, #0
   123b2:	d14d      	bne.n	12450 <ctr_drbg_update_internal+0xc0>
   123b4:	7ba2      	ldrb	r2, [r4, #14]
   123b6:	3201      	adds	r2, #1
   123b8:	b2d2      	uxtb	r2, r2
   123ba:	73a2      	strb	r2, [r4, #14]
   123bc:	2a00      	cmp	r2, #0
   123be:	d147      	bne.n	12450 <ctr_drbg_update_internal+0xc0>
   123c0:	7b63      	ldrb	r3, [r4, #13]
   123c2:	3301      	adds	r3, #1
   123c4:	b2db      	uxtb	r3, r3
   123c6:	7363      	strb	r3, [r4, #13]
   123c8:	2b00      	cmp	r3, #0
   123ca:	d141      	bne.n	12450 <ctr_drbg_update_internal+0xc0>
   123cc:	7b23      	ldrb	r3, [r4, #12]
   123ce:	3301      	adds	r3, #1
   123d0:	b2db      	uxtb	r3, r3
   123d2:	7323      	strb	r3, [r4, #12]
   123d4:	2b00      	cmp	r3, #0
   123d6:	d13b      	bne.n	12450 <ctr_drbg_update_internal+0xc0>
   123d8:	7ae3      	ldrb	r3, [r4, #11]
   123da:	3301      	adds	r3, #1
   123dc:	b2db      	uxtb	r3, r3
   123de:	72e3      	strb	r3, [r4, #11]
   123e0:	2b00      	cmp	r3, #0
   123e2:	d135      	bne.n	12450 <ctr_drbg_update_internal+0xc0>
   123e4:	7aa3      	ldrb	r3, [r4, #10]
   123e6:	3301      	adds	r3, #1
   123e8:	b2db      	uxtb	r3, r3
   123ea:	72a3      	strb	r3, [r4, #10]
   123ec:	2b00      	cmp	r3, #0
   123ee:	d12f      	bne.n	12450 <ctr_drbg_update_internal+0xc0>
   123f0:	7a63      	ldrb	r3, [r4, #9]
   123f2:	3301      	adds	r3, #1
   123f4:	b2db      	uxtb	r3, r3
   123f6:	7263      	strb	r3, [r4, #9]
   123f8:	bb53      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   123fa:	7a23      	ldrb	r3, [r4, #8]
   123fc:	3301      	adds	r3, #1
   123fe:	b2db      	uxtb	r3, r3
   12400:	7223      	strb	r3, [r4, #8]
   12402:	bb2b      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   12404:	79e3      	ldrb	r3, [r4, #7]
   12406:	3301      	adds	r3, #1
   12408:	b2db      	uxtb	r3, r3
   1240a:	71e3      	strb	r3, [r4, #7]
   1240c:	bb03      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   1240e:	79a3      	ldrb	r3, [r4, #6]
   12410:	3301      	adds	r3, #1
   12412:	b2db      	uxtb	r3, r3
   12414:	71a3      	strb	r3, [r4, #6]
   12416:	b9db      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   12418:	7963      	ldrb	r3, [r4, #5]
   1241a:	3301      	adds	r3, #1
   1241c:	b2db      	uxtb	r3, r3
   1241e:	7163      	strb	r3, [r4, #5]
   12420:	b9b3      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   12422:	7923      	ldrb	r3, [r4, #4]
   12424:	3301      	adds	r3, #1
   12426:	b2db      	uxtb	r3, r3
   12428:	7123      	strb	r3, [r4, #4]
   1242a:	b98b      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   1242c:	78e3      	ldrb	r3, [r4, #3]
   1242e:	3301      	adds	r3, #1
   12430:	b2db      	uxtb	r3, r3
   12432:	70e3      	strb	r3, [r4, #3]
   12434:	b963      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   12436:	78a3      	ldrb	r3, [r4, #2]
   12438:	3301      	adds	r3, #1
   1243a:	b2db      	uxtb	r3, r3
   1243c:	70a3      	strb	r3, [r4, #2]
   1243e:	b93b      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   12440:	7863      	ldrb	r3, [r4, #1]
   12442:	3301      	adds	r3, #1
   12444:	b2db      	uxtb	r3, r3
   12446:	7063      	strb	r3, [r4, #1]
   12448:	b913      	cbnz	r3, 12450 <ctr_drbg_update_internal+0xc0>
   1244a:	7823      	ldrb	r3, [r4, #0]
   1244c:	3301      	adds	r3, #1
   1244e:	7023      	strb	r3, [r4, #0]
   12450:	463b      	mov	r3, r7
   12452:	4622      	mov	r2, r4
   12454:	2101      	movs	r1, #1
   12456:	4630      	mov	r0, r6
   12458:	f001 f888 	bl	1356c <cc_mbedtls_aes_crypt_ecb>
   1245c:	4680      	mov	r8, r0
   1245e:	2800      	cmp	r0, #0
   12460:	d12a      	bne.n	124b8 <ctr_drbg_update_internal+0x128>
   12462:	3710      	adds	r7, #16
   12464:	ab08      	add	r3, sp, #32
   12466:	429f      	cmp	r7, r3
   12468:	d19e      	bne.n	123a8 <ctr_drbg_update_internal+0x18>
   1246a:	9900      	ldr	r1, [sp, #0]
   1246c:	682b      	ldr	r3, [r5, #0]
   1246e:	686a      	ldr	r2, [r5, #4]
   12470:	404b      	eors	r3, r1
   12472:	9901      	ldr	r1, [sp, #4]
   12474:	4630      	mov	r0, r6
   12476:	404a      	eors	r2, r1
   12478:	68ae      	ldr	r6, [r5, #8]
   1247a:	9902      	ldr	r1, [sp, #8]
   1247c:	9300      	str	r3, [sp, #0]
   1247e:	4071      	eors	r1, r6
   12480:	68eb      	ldr	r3, [r5, #12]
   12482:	9e03      	ldr	r6, [sp, #12]
   12484:	9201      	str	r2, [sp, #4]
   12486:	4073      	eors	r3, r6
   12488:	692a      	ldr	r2, [r5, #16]
   1248a:	9e04      	ldr	r6, [sp, #16]
   1248c:	9102      	str	r1, [sp, #8]
   1248e:	4056      	eors	r6, r2
   12490:	9905      	ldr	r1, [sp, #20]
   12492:	696a      	ldr	r2, [r5, #20]
   12494:	9303      	str	r3, [sp, #12]
   12496:	4051      	eors	r1, r2
   12498:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1249c:	9d06      	ldr	r5, [sp, #24]
   1249e:	9105      	str	r1, [sp, #20]
   124a0:	4055      	eors	r5, r2
   124a2:	9a07      	ldr	r2, [sp, #28]
   124a4:	4669      	mov	r1, sp
   124a6:	4053      	eors	r3, r2
   124a8:	2280      	movs	r2, #128	; 0x80
   124aa:	e9cd 5306 	strd	r5, r3, [sp, #24]
   124ae:	9604      	str	r6, [sp, #16]
   124b0:	f001 f842 	bl	13538 <cc_mbedtls_aes_setkey_enc>
   124b4:	4680      	mov	r8, r0
   124b6:	b138      	cbz	r0, 124c8 <ctr_drbg_update_internal+0x138>
   124b8:	4668      	mov	r0, sp
   124ba:	2120      	movs	r1, #32
   124bc:	f7ff fe1e 	bl	120fc <mbedtls_platform_zeroize>
   124c0:	4640      	mov	r0, r8
   124c2:	b008      	add	sp, #32
   124c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   124c8:	2210      	movs	r2, #16
   124ca:	4620      	mov	r0, r4
   124cc:	eb0d 0102 	add.w	r1, sp, r2
   124d0:	f002 fc42 	bl	14d58 <memcpy>
   124d4:	e7f0      	b.n	124b8 <ctr_drbg_update_internal+0x128>
   124d6:	bf00      	nop

000124d8 <mbedtls_ctr_drbg_reseed_internal>:
   124d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124dc:	4604      	mov	r4, r0
   124de:	6980      	ldr	r0, [r0, #24]
   124e0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   124e4:	d854      	bhi.n	12590 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   124e6:	461d      	mov	r5, r3
   124e8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   124ec:	42ab      	cmp	r3, r5
   124ee:	d34f      	bcc.n	12590 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   124f0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   124f4:	1a18      	subs	r0, r3, r0
   124f6:	4290      	cmp	r0, r2
   124f8:	4616      	mov	r6, r2
   124fa:	d349      	bcc.n	12590 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   124fc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1259c <mbedtls_ctr_drbg_reseed_internal+0xc4>
   12500:	f44f 72c0 	mov.w	r2, #384	; 0x180
   12504:	460f      	mov	r7, r1
   12506:	4648      	mov	r0, r9
   12508:	2100      	movs	r1, #0
   1250a:	f002 fc30 	bl	14d6e <memset>
   1250e:	4649      	mov	r1, r9
   12510:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   12514:	69a2      	ldr	r2, [r4, #24]
   12516:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1251a:	4798      	blx	r3
   1251c:	2800      	cmp	r0, #0
   1251e:	d13a      	bne.n	12596 <mbedtls_ctr_drbg_reseed_internal+0xbe>
   12520:	f8d4 8018 	ldr.w	r8, [r4, #24]
   12524:	b14d      	cbz	r5, 1253a <mbedtls_ctr_drbg_reseed_internal+0x62>
   12526:	462a      	mov	r2, r5
   12528:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1252c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   12530:	eb09 0108 	add.w	r1, r9, r8
   12534:	4798      	blx	r3
   12536:	bb70      	cbnz	r0, 12596 <mbedtls_ctr_drbg_reseed_internal+0xbe>
   12538:	44a8      	add	r8, r5
   1253a:	b107      	cbz	r7, 1253e <mbedtls_ctr_drbg_reseed_internal+0x66>
   1253c:	b9c6      	cbnz	r6, 12570 <mbedtls_ctr_drbg_reseed_internal+0x98>
   1253e:	4917      	ldr	r1, [pc, #92]	; (1259c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12540:	4642      	mov	r2, r8
   12542:	4608      	mov	r0, r1
   12544:	f7ff fde4 	bl	12110 <block_cipher_df>
   12548:	4605      	mov	r5, r0
   1254a:	b138      	cbz	r0, 1255c <mbedtls_ctr_drbg_reseed_internal+0x84>
   1254c:	f44f 71c0 	mov.w	r1, #384	; 0x180
   12550:	4812      	ldr	r0, [pc, #72]	; (1259c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12552:	f7ff fdd3 	bl	120fc <mbedtls_platform_zeroize>
   12556:	4628      	mov	r0, r5
   12558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1255c:	4620      	mov	r0, r4
   1255e:	490f      	ldr	r1, [pc, #60]	; (1259c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12560:	f7ff ff16 	bl	12390 <ctr_drbg_update_internal>
   12564:	4605      	mov	r5, r0
   12566:	2800      	cmp	r0, #0
   12568:	d1f0      	bne.n	1254c <mbedtls_ctr_drbg_reseed_internal+0x74>
   1256a:	2301      	movs	r3, #1
   1256c:	6123      	str	r3, [r4, #16]
   1256e:	e7ed      	b.n	1254c <mbedtls_ctr_drbg_reseed_internal+0x74>
   12570:	4639      	mov	r1, r7
   12572:	4632      	mov	r2, r6
   12574:	eb09 0008 	add.w	r0, r9, r8
   12578:	f002 fbee 	bl	14d58 <memcpy>
   1257c:	4907      	ldr	r1, [pc, #28]	; (1259c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   1257e:	44b0      	add	r8, r6
   12580:	4642      	mov	r2, r8
   12582:	4608      	mov	r0, r1
   12584:	f7ff fdc4 	bl	12110 <block_cipher_df>
   12588:	4605      	mov	r5, r0
   1258a:	2800      	cmp	r0, #0
   1258c:	d1de      	bne.n	1254c <mbedtls_ctr_drbg_reseed_internal+0x74>
   1258e:	e7e5      	b.n	1255c <mbedtls_ctr_drbg_reseed_internal+0x84>
   12590:	f06f 0537 	mvn.w	r5, #55	; 0x37
   12594:	e7df      	b.n	12556 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   12596:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1259a:	e7dc      	b.n	12556 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1259c:	20000c2c 	.word	0x20000c2c

000125a0 <cc_mbedtls_ctr_drbg_init>:
   125a0:	b510      	push	{r4, lr}
   125a2:	22a4      	movs	r2, #164	; 0xa4
   125a4:	2100      	movs	r1, #0
   125a6:	4604      	mov	r4, r0
   125a8:	f002 fbe1 	bl	14d6e <memset>
   125ac:	f04f 31ff 	mov.w	r1, #4294967295
   125b0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   125b4:	4b04      	ldr	r3, [pc, #16]	; (125c8 <cc_mbedtls_ctr_drbg_init+0x28>)
   125b6:	6121      	str	r1, [r4, #16]
   125b8:	61e2      	str	r2, [r4, #28]
   125ba:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   125be:	681b      	ldr	r3, [r3, #0]
   125c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   125c4:	4718      	bx	r3
   125c6:	bf00      	nop
   125c8:	200000ec 	.word	0x200000ec

000125cc <cc_mbedtls_ctr_drbg_seed>:
   125cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125d0:	4605      	mov	r5, r0
   125d2:	b085      	sub	sp, #20
   125d4:	460f      	mov	r7, r1
   125d6:	4616      	mov	r6, r2
   125d8:	4668      	mov	r0, sp
   125da:	2210      	movs	r2, #16
   125dc:	2100      	movs	r1, #0
   125de:	4699      	mov	r9, r3
   125e0:	f002 fbc5 	bl	14d6e <memset>
   125e4:	4b1e      	ldr	r3, [pc, #120]	; (12660 <cc_mbedtls_ctr_drbg_seed+0x94>)
   125e6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   125ea:	4640      	mov	r0, r8
   125ec:	681b      	ldr	r3, [r3, #0]
   125ee:	4798      	blx	r3
   125f0:	b120      	cbz	r0, 125fc <cc_mbedtls_ctr_drbg_seed+0x30>
   125f2:	4604      	mov	r4, r0
   125f4:	4620      	mov	r0, r4
   125f6:	b005      	add	sp, #20
   125f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   125fc:	f105 0420 	add.w	r4, r5, #32
   12600:	4620      	mov	r0, r4
   12602:	f000 ff83 	bl	1350c <cc_mbedtls_aes_init>
   12606:	69aa      	ldr	r2, [r5, #24]
   12608:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1260c:	b9ea      	cbnz	r2, 1264a <cc_mbedtls_ctr_drbg_seed+0x7e>
   1260e:	2220      	movs	r2, #32
   12610:	692e      	ldr	r6, [r5, #16]
   12612:	61aa      	str	r2, [r5, #24]
   12614:	2e00      	cmp	r6, #0
   12616:	db20      	blt.n	1265a <cc_mbedtls_ctr_drbg_seed+0x8e>
   12618:	4620      	mov	r0, r4
   1261a:	4669      	mov	r1, sp
   1261c:	2280      	movs	r2, #128	; 0x80
   1261e:	f000 ff8b 	bl	13538 <cc_mbedtls_aes_setkey_enc>
   12622:	4604      	mov	r4, r0
   12624:	b930      	cbnz	r0, 12634 <cc_mbedtls_ctr_drbg_seed+0x68>
   12626:	4633      	mov	r3, r6
   12628:	4649      	mov	r1, r9
   1262a:	4628      	mov	r0, r5
   1262c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1262e:	f7ff ff53 	bl	124d8 <mbedtls_ctr_drbg_reseed_internal>
   12632:	4604      	mov	r4, r0
   12634:	4b0b      	ldr	r3, [pc, #44]	; (12664 <cc_mbedtls_ctr_drbg_seed+0x98>)
   12636:	4640      	mov	r0, r8
   12638:	681b      	ldr	r3, [r3, #0]
   1263a:	4798      	blx	r3
   1263c:	2800      	cmp	r0, #0
   1263e:	bf18      	it	ne
   12640:	4604      	movne	r4, r0
   12642:	4620      	mov	r0, r4
   12644:	b005      	add	sp, #20
   12646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1264a:	692e      	ldr	r6, [r5, #16]
   1264c:	2e00      	cmp	r6, #0
   1264e:	dae3      	bge.n	12618 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12650:	2a17      	cmp	r2, #23
   12652:	d802      	bhi.n	1265a <cc_mbedtls_ctr_drbg_seed+0x8e>
   12654:	1c53      	adds	r3, r2, #1
   12656:	085e      	lsrs	r6, r3, #1
   12658:	e7de      	b.n	12618 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1265a:	2600      	movs	r6, #0
   1265c:	e7dc      	b.n	12618 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1265e:	bf00      	nop
   12660:	200000f0 	.word	0x200000f0
   12664:	200000f4 	.word	0x200000f4

00012668 <cc_mbedtls_ctr_drbg_random_with_add>:
   12668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1266c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   12670:	b08d      	sub	sp, #52	; 0x34
   12672:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   12676:	f200 80e4 	bhi.w	12842 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1267a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1267e:	f200 80dd 	bhi.w	1283c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   12682:	4604      	mov	r4, r0
   12684:	4615      	mov	r5, r2
   12686:	460e      	mov	r6, r1
   12688:	2220      	movs	r2, #32
   1268a:	2100      	movs	r1, #0
   1268c:	a804      	add	r0, sp, #16
   1268e:	461f      	mov	r7, r3
   12690:	f002 fb6d 	bl	14d6e <memset>
   12694:	4b6c      	ldr	r3, [pc, #432]	; (12848 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   12696:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1269a:	4648      	mov	r0, r9
   1269c:	681b      	ldr	r3, [r3, #0]
   1269e:	4798      	blx	r3
   126a0:	4683      	mov	fp, r0
   126a2:	2800      	cmp	r0, #0
   126a4:	f040 8093 	bne.w	127ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   126a8:	6922      	ldr	r2, [r4, #16]
   126aa:	69e3      	ldr	r3, [r4, #28]
   126ac:	429a      	cmp	r2, r3
   126ae:	f300 8092 	bgt.w	127d6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   126b2:	6963      	ldr	r3, [r4, #20]
   126b4:	2b00      	cmp	r3, #0
   126b6:	f040 808e 	bne.w	127d6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   126ba:	f1b8 0f00 	cmp.w	r8, #0
   126be:	f040 80a9 	bne.w	12814 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   126c2:	f8df a188 	ldr.w	sl, [pc, #392]	; 1284c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   126c6:	466f      	mov	r7, sp
   126c8:	2d00      	cmp	r5, #0
   126ca:	f000 8098 	beq.w	127fe <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   126ce:	466f      	mov	r7, sp
   126d0:	f104 0820 	add.w	r8, r4, #32
   126d4:	e00e      	b.n	126f4 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   126d6:	2d10      	cmp	r5, #16
   126d8:	46ab      	mov	fp, r5
   126da:	bf28      	it	cs
   126dc:	f04f 0b10 	movcs.w	fp, #16
   126e0:	4630      	mov	r0, r6
   126e2:	4639      	mov	r1, r7
   126e4:	465a      	mov	r2, fp
   126e6:	f002 fb37 	bl	14d58 <memcpy>
   126ea:	ebb5 050b 	subs.w	r5, r5, fp
   126ee:	445e      	add	r6, fp
   126f0:	f000 8085 	beq.w	127fe <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   126f4:	7be3      	ldrb	r3, [r4, #15]
   126f6:	3301      	adds	r3, #1
   126f8:	b2db      	uxtb	r3, r3
   126fa:	73e3      	strb	r3, [r4, #15]
   126fc:	2b00      	cmp	r3, #0
   126fe:	d14d      	bne.n	1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12700:	7ba3      	ldrb	r3, [r4, #14]
   12702:	3301      	adds	r3, #1
   12704:	b2db      	uxtb	r3, r3
   12706:	73a3      	strb	r3, [r4, #14]
   12708:	2b00      	cmp	r3, #0
   1270a:	d147      	bne.n	1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1270c:	7b63      	ldrb	r3, [r4, #13]
   1270e:	3301      	adds	r3, #1
   12710:	b2db      	uxtb	r3, r3
   12712:	7363      	strb	r3, [r4, #13]
   12714:	2b00      	cmp	r3, #0
   12716:	d141      	bne.n	1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12718:	7b23      	ldrb	r3, [r4, #12]
   1271a:	3301      	adds	r3, #1
   1271c:	b2db      	uxtb	r3, r3
   1271e:	7323      	strb	r3, [r4, #12]
   12720:	2b00      	cmp	r3, #0
   12722:	d13b      	bne.n	1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12724:	7ae3      	ldrb	r3, [r4, #11]
   12726:	3301      	adds	r3, #1
   12728:	b2db      	uxtb	r3, r3
   1272a:	72e3      	strb	r3, [r4, #11]
   1272c:	2b00      	cmp	r3, #0
   1272e:	d135      	bne.n	1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12730:	7aa3      	ldrb	r3, [r4, #10]
   12732:	3301      	adds	r3, #1
   12734:	b2db      	uxtb	r3, r3
   12736:	72a3      	strb	r3, [r4, #10]
   12738:	2b00      	cmp	r3, #0
   1273a:	d12f      	bne.n	1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1273c:	7a63      	ldrb	r3, [r4, #9]
   1273e:	3301      	adds	r3, #1
   12740:	b2db      	uxtb	r3, r3
   12742:	7263      	strb	r3, [r4, #9]
   12744:	bb53      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12746:	7a23      	ldrb	r3, [r4, #8]
   12748:	3301      	adds	r3, #1
   1274a:	b2db      	uxtb	r3, r3
   1274c:	7223      	strb	r3, [r4, #8]
   1274e:	bb2b      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12750:	79e3      	ldrb	r3, [r4, #7]
   12752:	3301      	adds	r3, #1
   12754:	b2db      	uxtb	r3, r3
   12756:	71e3      	strb	r3, [r4, #7]
   12758:	bb03      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1275a:	79a3      	ldrb	r3, [r4, #6]
   1275c:	3301      	adds	r3, #1
   1275e:	b2db      	uxtb	r3, r3
   12760:	71a3      	strb	r3, [r4, #6]
   12762:	b9db      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12764:	7963      	ldrb	r3, [r4, #5]
   12766:	3301      	adds	r3, #1
   12768:	b2db      	uxtb	r3, r3
   1276a:	7163      	strb	r3, [r4, #5]
   1276c:	b9b3      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1276e:	7923      	ldrb	r3, [r4, #4]
   12770:	3301      	adds	r3, #1
   12772:	b2db      	uxtb	r3, r3
   12774:	7123      	strb	r3, [r4, #4]
   12776:	b98b      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12778:	78e3      	ldrb	r3, [r4, #3]
   1277a:	3301      	adds	r3, #1
   1277c:	b2db      	uxtb	r3, r3
   1277e:	70e3      	strb	r3, [r4, #3]
   12780:	b963      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12782:	78a3      	ldrb	r3, [r4, #2]
   12784:	3301      	adds	r3, #1
   12786:	b2db      	uxtb	r3, r3
   12788:	70a3      	strb	r3, [r4, #2]
   1278a:	b93b      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1278c:	7863      	ldrb	r3, [r4, #1]
   1278e:	3301      	adds	r3, #1
   12790:	b2db      	uxtb	r3, r3
   12792:	7063      	strb	r3, [r4, #1]
   12794:	b913      	cbnz	r3, 1279c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12796:	7823      	ldrb	r3, [r4, #0]
   12798:	3301      	adds	r3, #1
   1279a:	7023      	strb	r3, [r4, #0]
   1279c:	463b      	mov	r3, r7
   1279e:	4622      	mov	r2, r4
   127a0:	2101      	movs	r1, #1
   127a2:	4640      	mov	r0, r8
   127a4:	f000 fee2 	bl	1356c <cc_mbedtls_aes_crypt_ecb>
   127a8:	4683      	mov	fp, r0
   127aa:	2800      	cmp	r0, #0
   127ac:	d093      	beq.n	126d6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   127ae:	f8da 3000 	ldr.w	r3, [sl]
   127b2:	4648      	mov	r0, r9
   127b4:	4798      	blx	r3
   127b6:	4603      	mov	r3, r0
   127b8:	2120      	movs	r1, #32
   127ba:	a804      	add	r0, sp, #16
   127bc:	2b00      	cmp	r3, #0
   127be:	bf18      	it	ne
   127c0:	469b      	movne	fp, r3
   127c2:	f7ff fc9b 	bl	120fc <mbedtls_platform_zeroize>
   127c6:	4638      	mov	r0, r7
   127c8:	2110      	movs	r1, #16
   127ca:	f7ff fc97 	bl	120fc <mbedtls_platform_zeroize>
   127ce:	4658      	mov	r0, fp
   127d0:	b00d      	add	sp, #52	; 0x34
   127d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d6:	4642      	mov	r2, r8
   127d8:	4639      	mov	r1, r7
   127da:	2300      	movs	r3, #0
   127dc:	4620      	mov	r0, r4
   127de:	f7ff fe7b 	bl	124d8 <mbedtls_ctr_drbg_reseed_internal>
   127e2:	f8df a068 	ldr.w	sl, [pc, #104]	; 1284c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   127e6:	2800      	cmp	r0, #0
   127e8:	f43f af6d 	beq.w	126c6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   127ec:	4648      	mov	r0, r9
   127ee:	f8da 3000 	ldr.w	r3, [sl]
   127f2:	4798      	blx	r3
   127f4:	4683      	mov	fp, r0
   127f6:	2800      	cmp	r0, #0
   127f8:	f43f af65 	beq.w	126c6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   127fc:	e7e7      	b.n	127ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   127fe:	4620      	mov	r0, r4
   12800:	a904      	add	r1, sp, #16
   12802:	f7ff fdc5 	bl	12390 <ctr_drbg_update_internal>
   12806:	4683      	mov	fp, r0
   12808:	2800      	cmp	r0, #0
   1280a:	d1d0      	bne.n	127ae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1280c:	6923      	ldr	r3, [r4, #16]
   1280e:	3301      	adds	r3, #1
   12810:	6123      	str	r3, [r4, #16]
   12812:	e7cc      	b.n	127ae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   12814:	4642      	mov	r2, r8
   12816:	4639      	mov	r1, r7
   12818:	a804      	add	r0, sp, #16
   1281a:	f7ff fc79 	bl	12110 <block_cipher_df>
   1281e:	4683      	mov	fp, r0
   12820:	b118      	cbz	r0, 1282a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   12822:	466f      	mov	r7, sp
   12824:	f8df a024 	ldr.w	sl, [pc, #36]	; 1284c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   12828:	e7c1      	b.n	127ae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1282a:	4620      	mov	r0, r4
   1282c:	a904      	add	r1, sp, #16
   1282e:	f7ff fdaf 	bl	12390 <ctr_drbg_update_internal>
   12832:	4683      	mov	fp, r0
   12834:	2800      	cmp	r0, #0
   12836:	f43f af44 	beq.w	126c2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1283a:	e7f2      	b.n	12822 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1283c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   12840:	e7c5      	b.n	127ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12842:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   12846:	e7c2      	b.n	127ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12848:	200000f0 	.word	0x200000f0
   1284c:	200000f4 	.word	0x200000f4

00012850 <entropy_update>:
   12850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12854:	2b20      	cmp	r3, #32
   12856:	461d      	mov	r5, r3
   12858:	4606      	mov	r6, r0
   1285a:	4689      	mov	r9, r1
   1285c:	4690      	mov	r8, r2
   1285e:	b08b      	sub	sp, #44	; 0x2c
   12860:	d826      	bhi.n	128b0 <entropy_update+0x60>
   12862:	b2db      	uxtb	r3, r3
   12864:	af02      	add	r7, sp, #8
   12866:	6831      	ldr	r1, [r6, #0]
   12868:	f88d 9004 	strb.w	r9, [sp, #4]
   1286c:	f88d 3005 	strb.w	r3, [sp, #5]
   12870:	f106 0904 	add.w	r9, r6, #4
   12874:	b921      	cbnz	r1, 12880 <entropy_update+0x30>
   12876:	4648      	mov	r0, r9
   12878:	f000 febc 	bl	135f4 <cc_mbedtls_sha256_starts>
   1287c:	4604      	mov	r4, r0
   1287e:	b940      	cbnz	r0, 12892 <entropy_update+0x42>
   12880:	2301      	movs	r3, #1
   12882:	2202      	movs	r2, #2
   12884:	4648      	mov	r0, r9
   12886:	6033      	str	r3, [r6, #0]
   12888:	a901      	add	r1, sp, #4
   1288a:	f000 fec7 	bl	1361c <cc_mbedtls_sha256_update>
   1288e:	4604      	mov	r4, r0
   12890:	b138      	cbz	r0, 128a2 <entropy_update+0x52>
   12892:	4638      	mov	r0, r7
   12894:	2120      	movs	r1, #32
   12896:	f7ff fc31 	bl	120fc <mbedtls_platform_zeroize>
   1289a:	4620      	mov	r0, r4
   1289c:	b00b      	add	sp, #44	; 0x2c
   1289e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   128a2:	462a      	mov	r2, r5
   128a4:	4641      	mov	r1, r8
   128a6:	4648      	mov	r0, r9
   128a8:	f000 feb8 	bl	1361c <cc_mbedtls_sha256_update>
   128ac:	4604      	mov	r4, r0
   128ae:	e7f0      	b.n	12892 <entropy_update+0x42>
   128b0:	af02      	add	r7, sp, #8
   128b2:	4619      	mov	r1, r3
   128b4:	4610      	mov	r0, r2
   128b6:	2300      	movs	r3, #0
   128b8:	463a      	mov	r2, r7
   128ba:	f000 ffb1 	bl	13820 <cc_mbedtls_sha256>
   128be:	4604      	mov	r4, r0
   128c0:	2800      	cmp	r0, #0
   128c2:	d1e6      	bne.n	12892 <entropy_update+0x42>
   128c4:	2320      	movs	r3, #32
   128c6:	46b8      	mov	r8, r7
   128c8:	461d      	mov	r5, r3
   128ca:	e7cc      	b.n	12866 <entropy_update+0x16>

000128cc <entropy_gather_internal.part.0>:
   128cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   128ce:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   128d2:	b0a7      	sub	sp, #156	; 0x9c
   128d4:	2b00      	cmp	r3, #0
   128d6:	bfd8      	it	le
   128d8:	ae02      	addle	r6, sp, #8
   128da:	dd2c      	ble.n	12936 <entropy_gather_internal.part.0+0x6a>
   128dc:	4605      	mov	r5, r0
   128de:	2300      	movs	r3, #0
   128e0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   128e4:	ae02      	add	r6, sp, #8
   128e6:	9301      	str	r3, [sp, #4]
   128e8:	f1a4 0701 	sub.w	r7, r4, #1
   128ec:	4631      	mov	r1, r6
   128ee:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   128f2:	2290      	movs	r2, #144	; 0x90
   128f4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   128f8:	ab01      	add	r3, sp, #4
   128fa:	fab7 f787 	clz	r7, r7
   128fe:	47a0      	blx	r4
   12900:	097f      	lsrs	r7, r7, #5
   12902:	4604      	mov	r4, r0
   12904:	b910      	cbnz	r0, 1290c <entropy_gather_internal.part.0+0x40>
   12906:	9b01      	ldr	r3, [sp, #4]
   12908:	b93b      	cbnz	r3, 1291a <entropy_gather_internal.part.0+0x4e>
   1290a:	b1a7      	cbz	r7, 12936 <entropy_gather_internal.part.0+0x6a>
   1290c:	4630      	mov	r0, r6
   1290e:	2190      	movs	r1, #144	; 0x90
   12910:	f7ff fbf4 	bl	120fc <mbedtls_platform_zeroize>
   12914:	4620      	mov	r0, r4
   12916:	b027      	add	sp, #156	; 0x9c
   12918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1291a:	4601      	mov	r1, r0
   1291c:	4632      	mov	r2, r6
   1291e:	4628      	mov	r0, r5
   12920:	f7ff ff96 	bl	12850 <entropy_update>
   12924:	b950      	cbnz	r0, 1293c <entropy_gather_internal.part.0+0x70>
   12926:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1292a:	9a01      	ldr	r2, [sp, #4]
   1292c:	4413      	add	r3, r2
   1292e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   12932:	2f00      	cmp	r7, #0
   12934:	d1ea      	bne.n	1290c <entropy_gather_internal.part.0+0x40>
   12936:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1293a:	e7e7      	b.n	1290c <entropy_gather_internal.part.0+0x40>
   1293c:	4604      	mov	r4, r0
   1293e:	4620      	mov	r0, r4
   12940:	b027      	add	sp, #156	; 0x9c
   12942:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012944 <cc_mbedtls_entropy_init>:
   12944:	b570      	push	{r4, r5, r6, lr}
   12946:	2500      	movs	r5, #0
   12948:	4604      	mov	r4, r0
   1294a:	4629      	mov	r1, r5
   1294c:	2214      	movs	r2, #20
   1294e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   12952:	30f8      	adds	r0, #248	; 0xf8
   12954:	f002 fa0b 	bl	14d6e <memset>
   12958:	4b16      	ldr	r3, [pc, #88]	; (129b4 <cc_mbedtls_entropy_init+0x70>)
   1295a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1295e:	681b      	ldr	r3, [r3, #0]
   12960:	4630      	mov	r0, r6
   12962:	4798      	blx	r3
   12964:	4620      	mov	r0, r4
   12966:	f840 5b04 	str.w	r5, [r0], #4
   1296a:	f000 fe29 	bl	135c0 <cc_mbedtls_sha256_init>
   1296e:	4b12      	ldr	r3, [pc, #72]	; (129b8 <cc_mbedtls_entropy_init+0x74>)
   12970:	4630      	mov	r0, r6
   12972:	681b      	ldr	r3, [r3, #0]
   12974:	4798      	blx	r3
   12976:	b9d8      	cbnz	r0, 129b0 <cc_mbedtls_entropy_init+0x6c>
   12978:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1297c:	42ab      	cmp	r3, r5
   1297e:	dc11      	bgt.n	129a4 <cc_mbedtls_entropy_init+0x60>
   12980:	2101      	movs	r1, #1
   12982:	2520      	movs	r5, #32
   12984:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12988:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1298c:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   12990:	480a      	ldr	r0, [pc, #40]	; (129bc <cc_mbedtls_entropy_init+0x78>)
   12992:	440b      	add	r3, r1
   12994:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   12998:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
   1299c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   129a0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   129a4:	4b06      	ldr	r3, [pc, #24]	; (129c0 <cc_mbedtls_entropy_init+0x7c>)
   129a6:	4630      	mov	r0, r6
   129a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   129ac:	681b      	ldr	r3, [r3, #0]
   129ae:	4718      	bx	r3
   129b0:	bd70      	pop	{r4, r5, r6, pc}
   129b2:	bf00      	nop
   129b4:	200000ec 	.word	0x200000ec
   129b8:	200000f0 	.word	0x200000f0
   129bc:	00013409 	.word	0x00013409
   129c0:	200000f4 	.word	0x200000f4

000129c4 <cc_mbedtls_entropy_func>:
   129c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129c8:	2a20      	cmp	r2, #32
   129ca:	b088      	sub	sp, #32
   129cc:	d878      	bhi.n	12ac0 <cc_mbedtls_entropy_func+0xfc>
   129ce:	4b3e      	ldr	r3, [pc, #248]	; (12ac8 <cc_mbedtls_entropy_func+0x104>)
   129d0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   129d4:	4604      	mov	r4, r0
   129d6:	681b      	ldr	r3, [r3, #0]
   129d8:	4648      	mov	r0, r9
   129da:	4617      	mov	r7, r2
   129dc:	4688      	mov	r8, r1
   129de:	4798      	blx	r3
   129e0:	4605      	mov	r5, r0
   129e2:	bb40      	cbnz	r0, 12a36 <cc_mbedtls_entropy_func+0x72>
   129e4:	f240 1601 	movw	r6, #257	; 0x101
   129e8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   129ec:	2b00      	cmp	r3, #0
   129ee:	d063      	beq.n	12ab8 <cc_mbedtls_entropy_func+0xf4>
   129f0:	4620      	mov	r0, r4
   129f2:	f7ff ff6b 	bl	128cc <entropy_gather_internal.part.0>
   129f6:	4605      	mov	r5, r0
   129f8:	2800      	cmp	r0, #0
   129fa:	d15f      	bne.n	12abc <cc_mbedtls_entropy_func+0xf8>
   129fc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12a00:	2b00      	cmp	r3, #0
   12a02:	dd07      	ble.n	12a14 <cc_mbedtls_entropy_func+0x50>
   12a04:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   12a08:	4290      	cmp	r0, r2
   12a0a:	d303      	bcc.n	12a14 <cc_mbedtls_entropy_func+0x50>
   12a0c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12a10:	2a01      	cmp	r2, #1
   12a12:	d014      	beq.n	12a3e <cc_mbedtls_entropy_func+0x7a>
   12a14:	3e01      	subs	r6, #1
   12a16:	d1e9      	bne.n	129ec <cc_mbedtls_entropy_func+0x28>
   12a18:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12a1c:	466e      	mov	r6, sp
   12a1e:	4630      	mov	r0, r6
   12a20:	2120      	movs	r1, #32
   12a22:	f7ff fb6b 	bl	120fc <mbedtls_platform_zeroize>
   12a26:	4b29      	ldr	r3, [pc, #164]	; (12acc <cc_mbedtls_entropy_func+0x108>)
   12a28:	4648      	mov	r0, r9
   12a2a:	681b      	ldr	r3, [r3, #0]
   12a2c:	4798      	blx	r3
   12a2e:	2800      	cmp	r0, #0
   12a30:	bf18      	it	ne
   12a32:	f06f 051d 	mvnne.w	r5, #29
   12a36:	4628      	mov	r0, r5
   12a38:	b008      	add	sp, #32
   12a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a3e:	281f      	cmp	r0, #31
   12a40:	d9e8      	bls.n	12a14 <cc_mbedtls_entropy_func+0x50>
   12a42:	466e      	mov	r6, sp
   12a44:	4629      	mov	r1, r5
   12a46:	2220      	movs	r2, #32
   12a48:	4630      	mov	r0, r6
   12a4a:	f104 0a04 	add.w	sl, r4, #4
   12a4e:	f002 f98e 	bl	14d6e <memset>
   12a52:	4631      	mov	r1, r6
   12a54:	4650      	mov	r0, sl
   12a56:	f000 fe0b 	bl	13670 <cc_mbedtls_sha256_finish>
   12a5a:	4605      	mov	r5, r0
   12a5c:	2800      	cmp	r0, #0
   12a5e:	d1de      	bne.n	12a1e <cc_mbedtls_entropy_func+0x5a>
   12a60:	4650      	mov	r0, sl
   12a62:	f000 fdc1 	bl	135e8 <cc_mbedtls_sha256_free>
   12a66:	4650      	mov	r0, sl
   12a68:	f000 fdaa 	bl	135c0 <cc_mbedtls_sha256_init>
   12a6c:	4629      	mov	r1, r5
   12a6e:	4650      	mov	r0, sl
   12a70:	f000 fdc0 	bl	135f4 <cc_mbedtls_sha256_starts>
   12a74:	4605      	mov	r5, r0
   12a76:	2800      	cmp	r0, #0
   12a78:	d1d1      	bne.n	12a1e <cc_mbedtls_entropy_func+0x5a>
   12a7a:	4650      	mov	r0, sl
   12a7c:	2220      	movs	r2, #32
   12a7e:	4631      	mov	r1, r6
   12a80:	f000 fdcc 	bl	1361c <cc_mbedtls_sha256_update>
   12a84:	4605      	mov	r5, r0
   12a86:	2800      	cmp	r0, #0
   12a88:	d1c9      	bne.n	12a1e <cc_mbedtls_entropy_func+0x5a>
   12a8a:	4603      	mov	r3, r0
   12a8c:	4632      	mov	r2, r6
   12a8e:	2120      	movs	r1, #32
   12a90:	4630      	mov	r0, r6
   12a92:	f000 fec5 	bl	13820 <cc_mbedtls_sha256>
   12a96:	4605      	mov	r5, r0
   12a98:	2800      	cmp	r0, #0
   12a9a:	d1c0      	bne.n	12a1e <cc_mbedtls_entropy_func+0x5a>
   12a9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12aa0:	463a      	mov	r2, r7
   12aa2:	2b00      	cmp	r3, #0
   12aa4:	bfc8      	it	gt
   12aa6:	2300      	movgt	r3, #0
   12aa8:	4640      	mov	r0, r8
   12aaa:	4631      	mov	r1, r6
   12aac:	bfc8      	it	gt
   12aae:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   12ab2:	f002 f951 	bl	14d58 <memcpy>
   12ab6:	e7b2      	b.n	12a1e <cc_mbedtls_entropy_func+0x5a>
   12ab8:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   12abc:	466e      	mov	r6, sp
   12abe:	e7ae      	b.n	12a1e <cc_mbedtls_entropy_func+0x5a>
   12ac0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12ac4:	e7b7      	b.n	12a36 <cc_mbedtls_entropy_func+0x72>
   12ac6:	bf00      	nop
   12ac8:	200000f0 	.word	0x200000f0
   12acc:	200000f4 	.word	0x200000f4

00012ad0 <RndStartupTest.constprop.0>:
   12ad0:	b530      	push	{r4, r5, lr}
   12ad2:	b0c3      	sub	sp, #268	; 0x10c
   12ad4:	22dc      	movs	r2, #220	; 0xdc
   12ad6:	2100      	movs	r1, #0
   12ad8:	a80b      	add	r0, sp, #44	; 0x2c
   12ada:	f002 f948 	bl	14d6e <memset>
   12ade:	2228      	movs	r2, #40	; 0x28
   12ae0:	2100      	movs	r1, #0
   12ae2:	a801      	add	r0, sp, #4
   12ae4:	f002 f943 	bl	14d6e <memset>
   12ae8:	a801      	add	r0, sp, #4
   12aea:	f000 fec1 	bl	13870 <RNG_PLAT_SetUserRngParameters>
   12aee:	4604      	mov	r4, r0
   12af0:	b110      	cbz	r0, 12af8 <RndStartupTest.constprop.0+0x28>
   12af2:	4620      	mov	r0, r4
   12af4:	b043      	add	sp, #268	; 0x10c
   12af6:	bd30      	pop	{r4, r5, pc}
   12af8:	4d18      	ldr	r5, [pc, #96]	; (12b5c <RndStartupTest.constprop.0+0x8c>)
   12afa:	f04f 31ff 	mov.w	r1, #4294967295
   12afe:	6828      	ldr	r0, [r5, #0]
   12b00:	f000 f93a 	bl	12d78 <CC_PalMutexLock>
   12b04:	4604      	mov	r4, r0
   12b06:	b9c0      	cbnz	r0, 12b3a <RndStartupTest.constprop.0+0x6a>
   12b08:	2000      	movs	r0, #0
   12b0a:	f000 f965 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   12b0e:	bb00      	cbnz	r0, 12b52 <RndStartupTest.constprop.0+0x82>
   12b10:	4a13      	ldr	r2, [pc, #76]	; (12b60 <RndStartupTest.constprop.0+0x90>)
   12b12:	a901      	add	r1, sp, #4
   12b14:	a80b      	add	r0, sp, #44	; 0x2c
   12b16:	f000 fc69 	bl	133ec <LLF_RND_RunTrngStartupTest>
   12b1a:	4604      	mov	r4, r0
   12b1c:	2001      	movs	r0, #1
   12b1e:	f000 f95b 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   12b22:	b990      	cbnz	r0, 12b4a <RndStartupTest.constprop.0+0x7a>
   12b24:	6828      	ldr	r0, [r5, #0]
   12b26:	f000 f92f 	bl	12d88 <CC_PalMutexUnlock>
   12b2a:	2800      	cmp	r0, #0
   12b2c:	d0e1      	beq.n	12af2 <RndStartupTest.constprop.0+0x22>
   12b2e:	480d      	ldr	r0, [pc, #52]	; (12b64 <RndStartupTest.constprop.0+0x94>)
   12b30:	f7ff f9d8 	bl	11ee4 <CC_PalAbort>
   12b34:	4620      	mov	r0, r4
   12b36:	b043      	add	sp, #268	; 0x10c
   12b38:	bd30      	pop	{r4, r5, pc}
   12b3a:	480b      	ldr	r0, [pc, #44]	; (12b68 <RndStartupTest.constprop.0+0x98>)
   12b3c:	f7ff f9d2 	bl	11ee4 <CC_PalAbort>
   12b40:	2c01      	cmp	r4, #1
   12b42:	bf08      	it	eq
   12b44:	2405      	moveq	r4, #5
   12b46:	d0ed      	beq.n	12b24 <RndStartupTest.constprop.0+0x54>
   12b48:	e7de      	b.n	12b08 <RndStartupTest.constprop.0+0x38>
   12b4a:	4808      	ldr	r0, [pc, #32]	; (12b6c <RndStartupTest.constprop.0+0x9c>)
   12b4c:	f7ff f9ca 	bl	11ee4 <CC_PalAbort>
   12b50:	e7e8      	b.n	12b24 <RndStartupTest.constprop.0+0x54>
   12b52:	4807      	ldr	r0, [pc, #28]	; (12b70 <RndStartupTest.constprop.0+0xa0>)
   12b54:	f7ff f9c6 	bl	11ee4 <CC_PalAbort>
   12b58:	e7da      	b.n	12b10 <RndStartupTest.constprop.0+0x40>
   12b5a:	bf00      	nop
   12b5c:	200000e8 	.word	0x200000e8
   12b60:	20000e14 	.word	0x20000e14
   12b64:	000158e4 	.word	0x000158e4
   12b68:	0001588c 	.word	0x0001588c
   12b6c:	000158c4 	.word	0x000158c4
   12b70:	000158a4 	.word	0x000158a4

00012b74 <CC_LibInit>:
   12b74:	b510      	push	{r4, lr}
   12b76:	b082      	sub	sp, #8
   12b78:	f000 f854 	bl	12c24 <CC_HalInit>
   12b7c:	b128      	cbz	r0, 12b8a <CC_LibInit+0x16>
   12b7e:	f000 f8a3 	bl	12cc8 <CC_PalTerminate>
   12b82:	2403      	movs	r4, #3
   12b84:	4620      	mov	r0, r4
   12b86:	b002      	add	sp, #8
   12b88:	bd10      	pop	{r4, pc}
   12b8a:	f000 f86f 	bl	12c6c <CC_PalInit>
   12b8e:	b9d0      	cbnz	r0, 12bc6 <CC_LibInit+0x52>
   12b90:	f000 f922 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   12b94:	b9d8      	cbnz	r0, 12bce <CC_LibInit+0x5a>
   12b96:	4b1e      	ldr	r3, [pc, #120]	; (12c10 <CC_LibInit+0x9c>)
   12b98:	681b      	ldr	r3, [r3, #0]
   12b9a:	0e1b      	lsrs	r3, r3, #24
   12b9c:	2bf0      	cmp	r3, #240	; 0xf0
   12b9e:	d10a      	bne.n	12bb6 <CC_LibInit+0x42>
   12ba0:	4a1c      	ldr	r2, [pc, #112]	; (12c14 <CC_LibInit+0xa0>)
   12ba2:	4b1d      	ldr	r3, [pc, #116]	; (12c18 <CC_LibInit+0xa4>)
   12ba4:	6812      	ldr	r2, [r2, #0]
   12ba6:	429a      	cmp	r2, r3
   12ba8:	d029      	beq.n	12bfe <CC_LibInit+0x8a>
   12baa:	f000 f83d 	bl	12c28 <CC_HalTerminate>
   12bae:	2407      	movs	r4, #7
   12bb0:	f000 f88a 	bl	12cc8 <CC_PalTerminate>
   12bb4:	e7e6      	b.n	12b84 <CC_LibInit+0x10>
   12bb6:	2406      	movs	r4, #6
   12bb8:	f000 f836 	bl	12c28 <CC_HalTerminate>
   12bbc:	f000 f884 	bl	12cc8 <CC_PalTerminate>
   12bc0:	4620      	mov	r0, r4
   12bc2:	b002      	add	sp, #8
   12bc4:	bd10      	pop	{r4, pc}
   12bc6:	2404      	movs	r4, #4
   12bc8:	4620      	mov	r0, r4
   12bca:	b002      	add	sp, #8
   12bcc:	bd10      	pop	{r4, pc}
   12bce:	f000 f82b 	bl	12c28 <CC_HalTerminate>
   12bd2:	f000 f879 	bl	12cc8 <CC_PalTerminate>
   12bd6:	f7ff ff7b 	bl	12ad0 <RndStartupTest.constprop.0>
   12bda:	4604      	mov	r4, r0
   12bdc:	b958      	cbnz	r0, 12bf6 <CC_LibInit+0x82>
   12bde:	4602      	mov	r2, r0
   12be0:	4601      	mov	r1, r0
   12be2:	f7ff f9a3 	bl	11f2c <nrf_cc3xx_platform_ctr_drbg_init>
   12be6:	b930      	cbnz	r0, 12bf6 <CC_LibInit+0x82>
   12be8:	2268      	movs	r2, #104	; 0x68
   12bea:	490c      	ldr	r1, [pc, #48]	; (12c1c <CC_LibInit+0xa8>)
   12bec:	ab01      	add	r3, sp, #4
   12bee:	f7ff f9d1 	bl	11f94 <nrf_cc3xx_platform_ctr_drbg_get>
   12bf2:	2800      	cmp	r0, #0
   12bf4:	d0c6      	beq.n	12b84 <CC_LibInit+0x10>
   12bf6:	2405      	movs	r4, #5
   12bf8:	4620      	mov	r0, r4
   12bfa:	b002      	add	sp, #8
   12bfc:	bd10      	pop	{r4, pc}
   12bfe:	2001      	movs	r0, #1
   12c00:	f000 f8ea 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   12c04:	2800      	cmp	r0, #0
   12c06:	d1e2      	bne.n	12bce <CC_LibInit+0x5a>
   12c08:	4b05      	ldr	r3, [pc, #20]	; (12c20 <CC_LibInit+0xac>)
   12c0a:	6018      	str	r0, [r3, #0]
   12c0c:	e7e3      	b.n	12bd6 <CC_LibInit+0x62>
   12c0e:	bf00      	nop
   12c10:	50841928 	.word	0x50841928
   12c14:	50841a24 	.word	0x50841a24
   12c18:	20e00000 	.word	0x20e00000
   12c1c:	20000dac 	.word	0x20000dac
   12c20:	50841a0c 	.word	0x50841a0c

00012c24 <CC_HalInit>:
   12c24:	2000      	movs	r0, #0
   12c26:	4770      	bx	lr

00012c28 <CC_HalTerminate>:
   12c28:	2000      	movs	r0, #0
   12c2a:	4770      	bx	lr

00012c2c <CC_HalClearInterruptBit>:
   12c2c:	0543      	lsls	r3, r0, #21
   12c2e:	d503      	bpl.n	12c38 <CC_HalClearInterruptBit+0xc>
   12c30:	f04f 32ff 	mov.w	r2, #4294967295
   12c34:	4b02      	ldr	r3, [pc, #8]	; (12c40 <CC_HalClearInterruptBit+0x14>)
   12c36:	601a      	str	r2, [r3, #0]
   12c38:	4b02      	ldr	r3, [pc, #8]	; (12c44 <CC_HalClearInterruptBit+0x18>)
   12c3a:	6018      	str	r0, [r3, #0]
   12c3c:	4770      	bx	lr
   12c3e:	bf00      	nop
   12c40:	50841108 	.word	0x50841108
   12c44:	50841a08 	.word	0x50841a08

00012c48 <CC_HalMaskInterrupt>:
   12c48:	4b01      	ldr	r3, [pc, #4]	; (12c50 <CC_HalMaskInterrupt+0x8>)
   12c4a:	6018      	str	r0, [r3, #0]
   12c4c:	4770      	bx	lr
   12c4e:	bf00      	nop
   12c50:	50841a04 	.word	0x50841a04

00012c54 <CC_HalWaitInterrupt>:
   12c54:	b108      	cbz	r0, 12c5a <CC_HalWaitInterrupt+0x6>
   12c56:	f000 b86d 	b.w	12d34 <CC_PalWaitInterrupt>
   12c5a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12c5e:	4770      	bx	lr

00012c60 <CC_HalWaitInterruptRND>:
   12c60:	b108      	cbz	r0, 12c66 <CC_HalWaitInterruptRND+0x6>
   12c62:	f000 b84f 	b.w	12d04 <CC_PalWaitInterruptRND>
   12c66:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12c6a:	4770      	bx	lr

00012c6c <CC_PalInit>:
   12c6c:	b510      	push	{r4, lr}
   12c6e:	4811      	ldr	r0, [pc, #68]	; (12cb4 <CC_PalInit+0x48>)
   12c70:	f000 f86e 	bl	12d50 <CC_PalMutexCreate>
   12c74:	b100      	cbz	r0, 12c78 <CC_PalInit+0xc>
   12c76:	bd10      	pop	{r4, pc}
   12c78:	480f      	ldr	r0, [pc, #60]	; (12cb8 <CC_PalInit+0x4c>)
   12c7a:	f000 f869 	bl	12d50 <CC_PalMutexCreate>
   12c7e:	2800      	cmp	r0, #0
   12c80:	d1f9      	bne.n	12c76 <CC_PalInit+0xa>
   12c82:	4c0e      	ldr	r4, [pc, #56]	; (12cbc <CC_PalInit+0x50>)
   12c84:	4620      	mov	r0, r4
   12c86:	f000 f863 	bl	12d50 <CC_PalMutexCreate>
   12c8a:	2800      	cmp	r0, #0
   12c8c:	d1f3      	bne.n	12c76 <CC_PalInit+0xa>
   12c8e:	4b0c      	ldr	r3, [pc, #48]	; (12cc0 <CC_PalInit+0x54>)
   12c90:	480c      	ldr	r0, [pc, #48]	; (12cc4 <CC_PalInit+0x58>)
   12c92:	601c      	str	r4, [r3, #0]
   12c94:	f000 f85c 	bl	12d50 <CC_PalMutexCreate>
   12c98:	4601      	mov	r1, r0
   12c9a:	2800      	cmp	r0, #0
   12c9c:	d1eb      	bne.n	12c76 <CC_PalInit+0xa>
   12c9e:	f000 f82d 	bl	12cfc <CC_PalDmaInit>
   12ca2:	4604      	mov	r4, r0
   12ca4:	b108      	cbz	r0, 12caa <CC_PalInit+0x3e>
   12ca6:	4620      	mov	r0, r4
   12ca8:	bd10      	pop	{r4, pc}
   12caa:	f000 f877 	bl	12d9c <CC_PalPowerSaveModeInit>
   12cae:	4620      	mov	r0, r4
   12cb0:	e7fa      	b.n	12ca8 <CC_PalInit+0x3c>
   12cb2:	bf00      	nop
   12cb4:	200000e4 	.word	0x200000e4
   12cb8:	200000d8 	.word	0x200000d8
   12cbc:	200000e0 	.word	0x200000e0
   12cc0:	200000e8 	.word	0x200000e8
   12cc4:	200000dc 	.word	0x200000dc

00012cc8 <CC_PalTerminate>:
   12cc8:	b508      	push	{r3, lr}
   12cca:	4808      	ldr	r0, [pc, #32]	; (12cec <CC_PalTerminate+0x24>)
   12ccc:	f000 f84a 	bl	12d64 <CC_PalMutexDestroy>
   12cd0:	4807      	ldr	r0, [pc, #28]	; (12cf0 <CC_PalTerminate+0x28>)
   12cd2:	f000 f847 	bl	12d64 <CC_PalMutexDestroy>
   12cd6:	4807      	ldr	r0, [pc, #28]	; (12cf4 <CC_PalTerminate+0x2c>)
   12cd8:	f000 f844 	bl	12d64 <CC_PalMutexDestroy>
   12cdc:	4806      	ldr	r0, [pc, #24]	; (12cf8 <CC_PalTerminate+0x30>)
   12cde:	f000 f841 	bl	12d64 <CC_PalMutexDestroy>
   12ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12ce6:	f000 b80b 	b.w	12d00 <CC_PalDmaTerminate>
   12cea:	bf00      	nop
   12cec:	200000e4 	.word	0x200000e4
   12cf0:	200000d8 	.word	0x200000d8
   12cf4:	200000e0 	.word	0x200000e0
   12cf8:	200000dc 	.word	0x200000dc

00012cfc <CC_PalDmaInit>:
   12cfc:	2000      	movs	r0, #0
   12cfe:	4770      	bx	lr

00012d00 <CC_PalDmaTerminate>:
   12d00:	4770      	bx	lr
   12d02:	bf00      	nop

00012d04 <CC_PalWaitInterruptRND>:
   12d04:	4602      	mov	r2, r0
   12d06:	4807      	ldr	r0, [pc, #28]	; (12d24 <CC_PalWaitInterruptRND+0x20>)
   12d08:	6803      	ldr	r3, [r0, #0]
   12d0a:	4213      	tst	r3, r2
   12d0c:	d0fc      	beq.n	12d08 <CC_PalWaitInterruptRND+0x4>
   12d0e:	b121      	cbz	r1, 12d1a <CC_PalWaitInterruptRND+0x16>
   12d10:	4b05      	ldr	r3, [pc, #20]	; (12d28 <CC_PalWaitInterruptRND+0x24>)
   12d12:	4806      	ldr	r0, [pc, #24]	; (12d2c <CC_PalWaitInterruptRND+0x28>)
   12d14:	681b      	ldr	r3, [r3, #0]
   12d16:	600b      	str	r3, [r1, #0]
   12d18:	6003      	str	r3, [r0, #0]
   12d1a:	4b05      	ldr	r3, [pc, #20]	; (12d30 <CC_PalWaitInterruptRND+0x2c>)
   12d1c:	2000      	movs	r0, #0
   12d1e:	601a      	str	r2, [r3, #0]
   12d20:	4770      	bx	lr
   12d22:	bf00      	nop
   12d24:	50841a00 	.word	0x50841a00
   12d28:	50841104 	.word	0x50841104
   12d2c:	50841108 	.word	0x50841108
   12d30:	50841a08 	.word	0x50841a08

00012d34 <CC_PalWaitInterrupt>:
   12d34:	4602      	mov	r2, r0
   12d36:	4904      	ldr	r1, [pc, #16]	; (12d48 <CC_PalWaitInterrupt+0x14>)
   12d38:	680b      	ldr	r3, [r1, #0]
   12d3a:	421a      	tst	r2, r3
   12d3c:	d0fc      	beq.n	12d38 <CC_PalWaitInterrupt+0x4>
   12d3e:	4b03      	ldr	r3, [pc, #12]	; (12d4c <CC_PalWaitInterrupt+0x18>)
   12d40:	2000      	movs	r0, #0
   12d42:	601a      	str	r2, [r3, #0]
   12d44:	4770      	bx	lr
   12d46:	bf00      	nop
   12d48:	50841a00 	.word	0x50841a00
   12d4c:	50841a08 	.word	0x50841a08

00012d50 <CC_PalMutexCreate>:
   12d50:	b508      	push	{r3, lr}
   12d52:	4b03      	ldr	r3, [pc, #12]	; (12d60 <CC_PalMutexCreate+0x10>)
   12d54:	6802      	ldr	r2, [r0, #0]
   12d56:	681b      	ldr	r3, [r3, #0]
   12d58:	6810      	ldr	r0, [r2, #0]
   12d5a:	4798      	blx	r3
   12d5c:	2000      	movs	r0, #0
   12d5e:	bd08      	pop	{r3, pc}
   12d60:	20000098 	.word	0x20000098

00012d64 <CC_PalMutexDestroy>:
   12d64:	b508      	push	{r3, lr}
   12d66:	4b03      	ldr	r3, [pc, #12]	; (12d74 <CC_PalMutexDestroy+0x10>)
   12d68:	6802      	ldr	r2, [r0, #0]
   12d6a:	685b      	ldr	r3, [r3, #4]
   12d6c:	6810      	ldr	r0, [r2, #0]
   12d6e:	4798      	blx	r3
   12d70:	2000      	movs	r0, #0
   12d72:	bd08      	pop	{r3, pc}
   12d74:	20000098 	.word	0x20000098

00012d78 <CC_PalMutexLock>:
   12d78:	4b02      	ldr	r3, [pc, #8]	; (12d84 <CC_PalMutexLock+0xc>)
   12d7a:	6802      	ldr	r2, [r0, #0]
   12d7c:	689b      	ldr	r3, [r3, #8]
   12d7e:	6810      	ldr	r0, [r2, #0]
   12d80:	4718      	bx	r3
   12d82:	bf00      	nop
   12d84:	20000098 	.word	0x20000098

00012d88 <CC_PalMutexUnlock>:
   12d88:	b508      	push	{r3, lr}
   12d8a:	4b03      	ldr	r3, [pc, #12]	; (12d98 <CC_PalMutexUnlock+0x10>)
   12d8c:	6802      	ldr	r2, [r0, #0]
   12d8e:	68db      	ldr	r3, [r3, #12]
   12d90:	6810      	ldr	r0, [r2, #0]
   12d92:	4798      	blx	r3
   12d94:	2000      	movs	r0, #0
   12d96:	bd08      	pop	{r3, pc}
   12d98:	20000098 	.word	0x20000098

00012d9c <CC_PalPowerSaveModeInit>:
   12d9c:	b570      	push	{r4, r5, r6, lr}
   12d9e:	4c09      	ldr	r4, [pc, #36]	; (12dc4 <CC_PalPowerSaveModeInit+0x28>)
   12da0:	4d09      	ldr	r5, [pc, #36]	; (12dc8 <CC_PalPowerSaveModeInit+0x2c>)
   12da2:	6920      	ldr	r0, [r4, #16]
   12da4:	68ab      	ldr	r3, [r5, #8]
   12da6:	4798      	blx	r3
   12da8:	b118      	cbz	r0, 12db2 <CC_PalPowerSaveModeInit+0x16>
   12daa:	4b08      	ldr	r3, [pc, #32]	; (12dcc <CC_PalPowerSaveModeInit+0x30>)
   12dac:	4808      	ldr	r0, [pc, #32]	; (12dd0 <CC_PalPowerSaveModeInit+0x34>)
   12dae:	685b      	ldr	r3, [r3, #4]
   12db0:	4798      	blx	r3
   12db2:	2100      	movs	r1, #0
   12db4:	4a07      	ldr	r2, [pc, #28]	; (12dd4 <CC_PalPowerSaveModeInit+0x38>)
   12db6:	68eb      	ldr	r3, [r5, #12]
   12db8:	6011      	str	r1, [r2, #0]
   12dba:	6920      	ldr	r0, [r4, #16]
   12dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12dc0:	4718      	bx	r3
   12dc2:	bf00      	nop
   12dc4:	200000a8 	.word	0x200000a8
   12dc8:	20000098 	.word	0x20000098
   12dcc:	20000088 	.word	0x20000088
   12dd0:	000158fc 	.word	0x000158fc
   12dd4:	20001034 	.word	0x20001034

00012dd8 <CC_PalPowerSaveModeSelect>:
   12dd8:	b570      	push	{r4, r5, r6, lr}
   12dda:	4d1a      	ldr	r5, [pc, #104]	; (12e44 <CC_PalPowerSaveModeSelect+0x6c>)
   12ddc:	4e1a      	ldr	r6, [pc, #104]	; (12e48 <CC_PalPowerSaveModeSelect+0x70>)
   12dde:	4604      	mov	r4, r0
   12de0:	68b2      	ldr	r2, [r6, #8]
   12de2:	6928      	ldr	r0, [r5, #16]
   12de4:	4790      	blx	r2
   12de6:	b9f0      	cbnz	r0, 12e26 <CC_PalPowerSaveModeSelect+0x4e>
   12de8:	b15c      	cbz	r4, 12e02 <CC_PalPowerSaveModeSelect+0x2a>
   12dea:	4c18      	ldr	r4, [pc, #96]	; (12e4c <CC_PalPowerSaveModeSelect+0x74>)
   12dec:	6823      	ldr	r3, [r4, #0]
   12dee:	b1ab      	cbz	r3, 12e1c <CC_PalPowerSaveModeSelect+0x44>
   12df0:	2b01      	cmp	r3, #1
   12df2:	d01a      	beq.n	12e2a <CC_PalPowerSaveModeSelect+0x52>
   12df4:	3b01      	subs	r3, #1
   12df6:	6023      	str	r3, [r4, #0]
   12df8:	6928      	ldr	r0, [r5, #16]
   12dfa:	68f3      	ldr	r3, [r6, #12]
   12dfc:	4798      	blx	r3
   12dfe:	2000      	movs	r0, #0
   12e00:	bd70      	pop	{r4, r5, r6, pc}
   12e02:	4c12      	ldr	r4, [pc, #72]	; (12e4c <CC_PalPowerSaveModeSelect+0x74>)
   12e04:	6821      	ldr	r1, [r4, #0]
   12e06:	b939      	cbnz	r1, 12e18 <CC_PalPowerSaveModeSelect+0x40>
   12e08:	2001      	movs	r0, #1
   12e0a:	4b11      	ldr	r3, [pc, #68]	; (12e50 <CC_PalPowerSaveModeSelect+0x78>)
   12e0c:	4a11      	ldr	r2, [pc, #68]	; (12e54 <CC_PalPowerSaveModeSelect+0x7c>)
   12e0e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   12e12:	6813      	ldr	r3, [r2, #0]
   12e14:	2b00      	cmp	r3, #0
   12e16:	d1fc      	bne.n	12e12 <CC_PalPowerSaveModeSelect+0x3a>
   12e18:	3101      	adds	r1, #1
   12e1a:	6021      	str	r1, [r4, #0]
   12e1c:	68f3      	ldr	r3, [r6, #12]
   12e1e:	6928      	ldr	r0, [r5, #16]
   12e20:	4798      	blx	r3
   12e22:	2000      	movs	r0, #0
   12e24:	bd70      	pop	{r4, r5, r6, pc}
   12e26:	480c      	ldr	r0, [pc, #48]	; (12e58 <CC_PalPowerSaveModeSelect+0x80>)
   12e28:	bd70      	pop	{r4, r5, r6, pc}
   12e2a:	4a0a      	ldr	r2, [pc, #40]	; (12e54 <CC_PalPowerSaveModeSelect+0x7c>)
   12e2c:	6813      	ldr	r3, [r2, #0]
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d1fc      	bne.n	12e2c <CC_PalPowerSaveModeSelect+0x54>
   12e32:	4a07      	ldr	r2, [pc, #28]	; (12e50 <CC_PalPowerSaveModeSelect+0x78>)
   12e34:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   12e38:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12e3c:	f7ff ff04 	bl	12c48 <CC_HalMaskInterrupt>
   12e40:	6823      	ldr	r3, [r4, #0]
   12e42:	e7d7      	b.n	12df4 <CC_PalPowerSaveModeSelect+0x1c>
   12e44:	200000a8 	.word	0x200000a8
   12e48:	20000098 	.word	0x20000098
   12e4c:	20001034 	.word	0x20001034
   12e50:	50840000 	.word	0x50840000
   12e54:	50841910 	.word	0x50841910
   12e58:	ffff8fe9 	.word	0xffff8fe9

00012e5c <mutex_init>:
   12e5c:	4b01      	ldr	r3, [pc, #4]	; (12e64 <mutex_init+0x8>)
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	4718      	bx	r3
   12e62:	bf00      	nop
   12e64:	20000098 	.word	0x20000098

00012e68 <mutex_lock>:
   12e68:	4b01      	ldr	r3, [pc, #4]	; (12e70 <mutex_lock+0x8>)
   12e6a:	689b      	ldr	r3, [r3, #8]
   12e6c:	4718      	bx	r3
   12e6e:	bf00      	nop
   12e70:	20000098 	.word	0x20000098

00012e74 <mutex_unlock>:
   12e74:	4b01      	ldr	r3, [pc, #4]	; (12e7c <mutex_unlock+0x8>)
   12e76:	68db      	ldr	r3, [r3, #12]
   12e78:	4718      	bx	r3
   12e7a:	bf00      	nop
   12e7c:	20000098 	.word	0x20000098

00012e80 <startTrngHW>:
   12e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12e84:	2800      	cmp	r0, #0
   12e86:	d07c      	beq.n	12f82 <startTrngHW+0x102>
   12e88:	460c      	mov	r4, r1
   12e8a:	2900      	cmp	r1, #0
   12e8c:	d079      	beq.n	12f82 <startTrngHW+0x102>
   12e8e:	461d      	mov	r5, r3
   12e90:	2b00      	cmp	r3, #0
   12e92:	d076      	beq.n	12f82 <startTrngHW+0x102>
   12e94:	4606      	mov	r6, r0
   12e96:	b122      	cbz	r2, 12ea2 <startTrngHW+0x22>
   12e98:	2201      	movs	r2, #1
   12e9a:	2300      	movs	r3, #0
   12e9c:	602a      	str	r2, [r5, #0]
   12e9e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   12ea2:	682b      	ldr	r3, [r5, #0]
   12ea4:	2b00      	cmp	r3, #0
   12ea6:	d068      	beq.n	12f7a <startTrngHW+0xfa>
   12ea8:	4629      	mov	r1, r5
   12eaa:	4620      	mov	r0, r4
   12eac:	f000 fddc 	bl	13a68 <LLF_RND_GetFastestRosc>
   12eb0:	4607      	mov	r7, r0
   12eb2:	2800      	cmp	r0, #0
   12eb4:	d162      	bne.n	12f7c <startTrngHW+0xfc>
   12eb6:	4621      	mov	r1, r4
   12eb8:	6828      	ldr	r0, [r5, #0]
   12eba:	f000 fdb7 	bl	13a2c <LLF_RND_GetRoscSampleCnt>
   12ebe:	4607      	mov	r7, r0
   12ec0:	2800      	cmp	r0, #0
   12ec2:	d15b      	bne.n	12f7c <startTrngHW+0xfc>
   12ec4:	682b      	ldr	r3, [r5, #0]
   12ec6:	2b08      	cmp	r3, #8
   12ec8:	d06a      	beq.n	12fa0 <startTrngHW+0x120>
   12eca:	2b04      	cmp	r3, #4
   12ecc:	d06b      	beq.n	12fa6 <startTrngHW+0x126>
   12ece:	f1a3 0802 	sub.w	r8, r3, #2
   12ed2:	fab8 f888 	clz	r8, r8
   12ed6:	ea4f 1858 	mov.w	r8, r8, lsr #5
   12eda:	2301      	movs	r3, #1
   12edc:	469c      	mov	ip, r3
   12ede:	4a33      	ldr	r2, [pc, #204]	; (12fac <startTrngHW+0x12c>)
   12ee0:	4933      	ldr	r1, [pc, #204]	; (12fb0 <startTrngHW+0x130>)
   12ee2:	6013      	str	r3, [r2, #0]
   12ee4:	4610      	mov	r0, r2
   12ee6:	600b      	str	r3, [r1, #0]
   12ee8:	3a94      	subs	r2, #148	; 0x94
   12eea:	f8c0 c000 	str.w	ip, [r0]
   12eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ef0:	6013      	str	r3, [r2, #0]
   12ef2:	6811      	ldr	r1, [r2, #0]
   12ef4:	428b      	cmp	r3, r1
   12ef6:	d1f8      	bne.n	12eea <startTrngHW+0x6a>
   12ef8:	f04f 0900 	mov.w	r9, #0
   12efc:	4b2d      	ldr	r3, [pc, #180]	; (12fb4 <startTrngHW+0x134>)
   12efe:	f04f 30ff 	mov.w	r0, #4294967295
   12f02:	f8c3 9000 	str.w	r9, [r3]
   12f06:	f7ff fe91 	bl	12c2c <CC_HalClearInterruptBit>
   12f0a:	f06f 021b 	mvn.w	r2, #27
   12f0e:	4b2a      	ldr	r3, [pc, #168]	; (12fb8 <startTrngHW+0x138>)
   12f10:	4648      	mov	r0, r9
   12f12:	601a      	str	r2, [r3, #0]
   12f14:	f7ff fe98 	bl	12c48 <CC_HalMaskInterrupt>
   12f18:	4a28      	ldr	r2, [pc, #160]	; (12fbc <startTrngHW+0x13c>)
   12f1a:	4b29      	ldr	r3, [pc, #164]	; (12fc0 <startTrngHW+0x140>)
   12f1c:	f8c2 8000 	str.w	r8, [r2]
   12f20:	6818      	ldr	r0, [r3, #0]
   12f22:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   12f26:	f7ff fe8f 	bl	12c48 <CC_HalMaskInterrupt>
   12f2a:	220a      	movs	r2, #10
   12f2c:	4b25      	ldr	r3, [pc, #148]	; (12fc4 <startTrngHW+0x144>)
   12f2e:	601a      	str	r2, [r3, #0]
   12f30:	9a08      	ldr	r2, [sp, #32]
   12f32:	6923      	ldr	r3, [r4, #16]
   12f34:	2a01      	cmp	r2, #1
   12f36:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12f38:	d027      	beq.n	12f8a <startTrngHW+0x10a>
   12f3a:	4a23      	ldr	r2, [pc, #140]	; (12fc8 <startTrngHW+0x148>)
   12f3c:	fba2 2303 	umull	r2, r3, r2, r3
   12f40:	091b      	lsrs	r3, r3, #4
   12f42:	2201      	movs	r2, #1
   12f44:	fb03 f301 	mul.w	r3, r3, r1
   12f48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12f4c:	491f      	ldr	r1, [pc, #124]	; (12fcc <startTrngHW+0x14c>)
   12f4e:	03db      	lsls	r3, r3, #15
   12f50:	099b      	lsrs	r3, r3, #6
   12f52:	600b      	str	r3, [r1, #0]
   12f54:	4b17      	ldr	r3, [pc, #92]	; (12fb4 <startTrngHW+0x134>)
   12f56:	4638      	mov	r0, r7
   12f58:	601a      	str	r2, [r3, #0]
   12f5a:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   12f5e:	682a      	ldr	r2, [r5, #0]
   12f60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12f64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   12f68:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   12f6c:	682a      	ldr	r2, [r5, #0]
   12f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12f72:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   12f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12f7a:	4f15      	ldr	r7, [pc, #84]	; (12fd0 <startTrngHW+0x150>)
   12f7c:	4638      	mov	r0, r7
   12f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12f82:	4f14      	ldr	r7, [pc, #80]	; (12fd4 <startTrngHW+0x154>)
   12f84:	4638      	mov	r0, r7
   12f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12f8a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12f8e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   12f92:	3201      	adds	r2, #1
   12f94:	d002      	beq.n	12f9c <startTrngHW+0x11c>
   12f96:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   12f9a:	e7ce      	b.n	12f3a <startTrngHW+0xba>
   12f9c:	2316      	movs	r3, #22
   12f9e:	e7d0      	b.n	12f42 <startTrngHW+0xc2>
   12fa0:	f04f 0803 	mov.w	r8, #3
   12fa4:	e799      	b.n	12eda <startTrngHW+0x5a>
   12fa6:	f04f 0802 	mov.w	r8, #2
   12faa:	e796      	b.n	12eda <startTrngHW+0x5a>
   12fac:	508411c4 	.word	0x508411c4
   12fb0:	50841140 	.word	0x50841140
   12fb4:	5084112c 	.word	0x5084112c
   12fb8:	50841100 	.word	0x50841100
   12fbc:	5084110c 	.word	0x5084110c
   12fc0:	50841a04 	.word	0x50841a04
   12fc4:	50841138 	.word	0x50841138
   12fc8:	aaaaaaab 	.word	0xaaaaaaab
   12fcc:	508411d8 	.word	0x508411d8
   12fd0:	00f10c31 	.word	0x00f10c31
   12fd4:	00f10c35 	.word	0x00f10c35

00012fd8 <LLF_RND_RepetitionCounterTest.part.0>:
   12fd8:	b4f0      	push	{r4, r5, r6, r7}
   12fda:	2400      	movs	r4, #0
   12fdc:	00c9      	lsls	r1, r1, #3
   12fde:	4626      	mov	r6, r4
   12fe0:	4627      	mov	r7, r4
   12fe2:	f101 3cff 	add.w	ip, r1, #4294967295
   12fe6:	e006      	b.n	12ff6 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   12fe8:	429f      	cmp	r7, r3
   12fea:	d015      	beq.n	13018 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   12fec:	2601      	movs	r6, #1
   12fee:	4565      	cmp	r5, ip
   12ff0:	d818      	bhi.n	13024 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   12ff2:	462c      	mov	r4, r5
   12ff4:	461f      	mov	r7, r3
   12ff6:	0963      	lsrs	r3, r4, #5
   12ff8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   12ffc:	f004 011f 	and.w	r1, r4, #31
   13000:	40cb      	lsrs	r3, r1
   13002:	291f      	cmp	r1, #31
   13004:	f104 0501 	add.w	r5, r4, #1
   13008:	bf18      	it	ne
   1300a:	f003 0301 	andne.w	r3, r3, #1
   1300e:	2c00      	cmp	r4, #0
   13010:	d1ea      	bne.n	12fe8 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   13012:	2601      	movs	r6, #1
   13014:	4635      	mov	r5, r6
   13016:	e7ec      	b.n	12ff2 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   13018:	3601      	adds	r6, #1
   1301a:	4296      	cmp	r6, r2
   1301c:	d1e7      	bne.n	12fee <LLF_RND_RepetitionCounterTest.part.0+0x16>
   1301e:	4803      	ldr	r0, [pc, #12]	; (1302c <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   13020:	bcf0      	pop	{r4, r5, r6, r7}
   13022:	4770      	bx	lr
   13024:	2000      	movs	r0, #0
   13026:	bcf0      	pop	{r4, r5, r6, r7}
   13028:	4770      	bx	lr
   1302a:	bf00      	nop
   1302c:	00f10c36 	.word	0x00f10c36

00013030 <LLF_RND_AdaptiveProportionTest>:
   13030:	2800      	cmp	r0, #0
   13032:	d05f      	beq.n	130f4 <LLF_RND_AdaptiveProportionTest+0xc4>
   13034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13038:	1e4c      	subs	r4, r1, #1
   1303a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1303e:	d226      	bcs.n	1308e <LLF_RND_AdaptiveProportionTest+0x5e>
   13040:	b32b      	cbz	r3, 1308e <LLF_RND_AdaptiveProportionTest+0x5e>
   13042:	b322      	cbz	r2, 1308e <LLF_RND_AdaptiveProportionTest+0x5e>
   13044:	00cc      	lsls	r4, r1, #3
   13046:	2b01      	cmp	r3, #1
   13048:	f104 3eff 	add.w	lr, r4, #4294967295
   1304c:	d02f      	beq.n	130ae <LLF_RND_AdaptiveProportionTest+0x7e>
   1304e:	2100      	movs	r1, #0
   13050:	468c      	mov	ip, r1
   13052:	460f      	mov	r7, r1
   13054:	460d      	mov	r5, r1
   13056:	f103 38ff 	add.w	r8, r3, #4294967295
   1305a:	094c      	lsrs	r4, r1, #5
   1305c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   13060:	f001 061f 	and.w	r6, r1, #31
   13064:	40f4      	lsrs	r4, r6
   13066:	2e1f      	cmp	r6, #31
   13068:	bf18      	it	ne
   1306a:	f004 0401 	andne.w	r4, r4, #1
   1306e:	b921      	cbnz	r1, 1307a <LLF_RND_AdaptiveProportionTest+0x4a>
   13070:	2501      	movs	r5, #1
   13072:	46ac      	mov	ip, r5
   13074:	4629      	mov	r1, r5
   13076:	4627      	mov	r7, r4
   13078:	e7ef      	b.n	1305a <LLF_RND_AdaptiveProportionTest+0x2a>
   1307a:	42ab      	cmp	r3, r5
   1307c:	d013      	beq.n	130a6 <LLF_RND_AdaptiveProportionTest+0x76>
   1307e:	42a7      	cmp	r7, r4
   13080:	d101      	bne.n	13086 <LLF_RND_AdaptiveProportionTest+0x56>
   13082:	f10c 0c01 	add.w	ip, ip, #1
   13086:	4545      	cmp	r5, r8
   13088:	d104      	bne.n	13094 <LLF_RND_AdaptiveProportionTest+0x64>
   1308a:	4562      	cmp	r2, ip
   1308c:	d202      	bcs.n	13094 <LLF_RND_AdaptiveProportionTest+0x64>
   1308e:	481a      	ldr	r0, [pc, #104]	; (130f8 <LLF_RND_AdaptiveProportionTest+0xc8>)
   13090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13094:	463c      	mov	r4, r7
   13096:	3101      	adds	r1, #1
   13098:	458e      	cmp	lr, r1
   1309a:	f105 0501 	add.w	r5, r5, #1
   1309e:	d2ea      	bcs.n	13076 <LLF_RND_AdaptiveProportionTest+0x46>
   130a0:	2000      	movs	r0, #0
   130a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130a6:	2500      	movs	r5, #0
   130a8:	f04f 0c01 	mov.w	ip, #1
   130ac:	e7f3      	b.n	13096 <LLF_RND_AdaptiveProportionTest+0x66>
   130ae:	2600      	movs	r6, #0
   130b0:	46b4      	mov	ip, r6
   130b2:	4637      	mov	r7, r6
   130b4:	4631      	mov	r1, r6
   130b6:	094b      	lsrs	r3, r1, #5
   130b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   130bc:	f001 051f 	and.w	r5, r1, #31
   130c0:	40eb      	lsrs	r3, r5
   130c2:	2d1f      	cmp	r5, #31
   130c4:	bf18      	it	ne
   130c6:	f003 0301 	andne.w	r3, r3, #1
   130ca:	b139      	cbz	r1, 130dc <LLF_RND_AdaptiveProportionTest+0xac>
   130cc:	b95f      	cbnz	r7, 130e6 <LLF_RND_AdaptiveProportionTest+0xb6>
   130ce:	459c      	cmp	ip, r3
   130d0:	d001      	beq.n	130d6 <LLF_RND_AdaptiveProportionTest+0xa6>
   130d2:	4663      	mov	r3, ip
   130d4:	e008      	b.n	130e8 <LLF_RND_AdaptiveProportionTest+0xb8>
   130d6:	4663      	mov	r3, ip
   130d8:	3601      	adds	r6, #1
   130da:	e005      	b.n	130e8 <LLF_RND_AdaptiveProportionTest+0xb8>
   130dc:	2601      	movs	r6, #1
   130de:	4631      	mov	r1, r6
   130e0:	469c      	mov	ip, r3
   130e2:	2701      	movs	r7, #1
   130e4:	e7e7      	b.n	130b6 <LLF_RND_AdaptiveProportionTest+0x86>
   130e6:	463e      	mov	r6, r7
   130e8:	42b2      	cmp	r2, r6
   130ea:	d3d0      	bcc.n	1308e <LLF_RND_AdaptiveProportionTest+0x5e>
   130ec:	3101      	adds	r1, #1
   130ee:	42a1      	cmp	r1, r4
   130f0:	d1f6      	bne.n	130e0 <LLF_RND_AdaptiveProportionTest+0xb0>
   130f2:	e7d5      	b.n	130a0 <LLF_RND_AdaptiveProportionTest+0x70>
   130f4:	4800      	ldr	r0, [pc, #0]	; (130f8 <LLF_RND_AdaptiveProportionTest+0xc8>)
   130f6:	4770      	bx	lr
   130f8:	00f10c37 	.word	0x00f10c37

000130fc <getTrngSource>:
   130fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13100:	b08d      	sub	sp, #52	; 0x34
   13102:	9e18      	ldr	r6, [sp, #96]	; 0x60
   13104:	4607      	mov	r7, r0
   13106:	460c      	mov	r4, r1
   13108:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   1310a:	2e00      	cmp	r6, #0
   1310c:	d14d      	bne.n	131aa <getTrngSource+0xae>
   1310e:	f8d1 b010 	ldr.w	fp, [r1, #16]
   13112:	2100      	movs	r1, #0
   13114:	601d      	str	r5, [r3, #0]
   13116:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13118:	6019      	str	r1, [r3, #0]
   1311a:	2a00      	cmp	r2, #0
   1311c:	f000 8123 	beq.w	13366 <getTrngSource+0x26a>
   13120:	4a9d      	ldr	r2, [pc, #628]	; (13398 <getTrngSource+0x29c>)
   13122:	4b9e      	ldr	r3, [pc, #632]	; (1339c <getTrngSource+0x2a0>)
   13124:	6811      	ldr	r1, [r2, #0]
   13126:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13128:	681b      	ldr	r3, [r3, #0]
   1312a:	429a      	cmp	r2, r3
   1312c:	d148      	bne.n	131c0 <getTrngSource+0xc4>
   1312e:	290a      	cmp	r1, #10
   13130:	d146      	bne.n	131c0 <getTrngSource+0xc4>
   13132:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   13136:	9304      	str	r3, [sp, #16]
   13138:	2304      	movs	r3, #4
   1313a:	46b8      	mov	r8, r7
   1313c:	9302      	str	r3, [sp, #8]
   1313e:	4b98      	ldr	r3, [pc, #608]	; (133a0 <getTrngSource+0x2a4>)
   13140:	fba3 230b 	umull	r2, r3, r3, fp
   13144:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   13148:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   1314c:	f105 0208 	add.w	r2, r5, #8
   13150:	9203      	str	r2, [sp, #12]
   13152:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   13156:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13158:	f8c3 b000 	str.w	fp, [r3]
   1315c:	f1bb 0f00 	cmp.w	fp, #0
   13160:	f000 80c7 	beq.w	132f2 <getTrngSource+0x1f6>
   13164:	465d      	mov	r5, fp
   13166:	f04f 0900 	mov.w	r9, #0
   1316a:	9e03      	ldr	r6, [sp, #12]
   1316c:	f000 fc8c 	bl	13a88 <LLF_RND_TurnOffTrng>
   13170:	2300      	movs	r3, #0
   13172:	9305      	str	r3, [sp, #20]
   13174:	f1b8 0f00 	cmp.w	r8, #0
   13178:	f000 80e9 	beq.w	1334e <getTrngSource+0x252>
   1317c:	2c00      	cmp	r4, #0
   1317e:	f000 80e6 	beq.w	1334e <getTrngSource+0x252>
   13182:	9b04      	ldr	r3, [sp, #16]
   13184:	2b00      	cmp	r3, #0
   13186:	f000 80e0 	beq.w	1334a <getTrngSource+0x24e>
   1318a:	4620      	mov	r0, r4
   1318c:	a904      	add	r1, sp, #16
   1318e:	f000 fc6b 	bl	13a68 <LLF_RND_GetFastestRosc>
   13192:	b1b8      	cbz	r0, 131c4 <getTrngSource+0xc8>
   13194:	4b83      	ldr	r3, [pc, #524]	; (133a4 <getTrngSource+0x2a8>)
   13196:	4298      	cmp	r0, r3
   13198:	f040 80ab 	bne.w	132f2 <getTrngSource+0x1f6>
   1319c:	9002      	str	r0, [sp, #8]
   1319e:	f000 fc73 	bl	13a88 <LLF_RND_TurnOffTrng>
   131a2:	9802      	ldr	r0, [sp, #8]
   131a4:	b00d      	add	sp, #52	; 0x34
   131a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131aa:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   131ae:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   131b2:	3001      	adds	r0, #1
   131b4:	bf0c      	ite	eq
   131b6:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   131ba:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   131be:	e7a8      	b.n	13112 <getTrngSource+0x16>
   131c0:	4879      	ldr	r0, [pc, #484]	; (133a8 <getTrngSource+0x2ac>)
   131c2:	e7eb      	b.n	1319c <getTrngSource+0xa0>
   131c4:	4621      	mov	r1, r4
   131c6:	9804      	ldr	r0, [sp, #16]
   131c8:	f000 fc30 	bl	13a2c <LLF_RND_GetRoscSampleCnt>
   131cc:	2800      	cmp	r0, #0
   131ce:	d1e1      	bne.n	13194 <getTrngSource+0x98>
   131d0:	9f04      	ldr	r7, [sp, #16]
   131d2:	2f08      	cmp	r7, #8
   131d4:	f000 80bd 	beq.w	13352 <getTrngSource+0x256>
   131d8:	2f04      	cmp	r7, #4
   131da:	f000 80bc 	beq.w	13356 <getTrngSource+0x25a>
   131de:	f1a7 0702 	sub.w	r7, r7, #2
   131e2:	fab7 f787 	clz	r7, r7
   131e6:	097f      	lsrs	r7, r7, #5
   131e8:	2301      	movs	r3, #1
   131ea:	4619      	mov	r1, r3
   131ec:	486f      	ldr	r0, [pc, #444]	; (133ac <getTrngSource+0x2b0>)
   131ee:	6003      	str	r3, [r0, #0]
   131f0:	f840 3c84 	str.w	r3, [r0, #-132]
   131f4:	4b6d      	ldr	r3, [pc, #436]	; (133ac <getTrngSource+0x2b0>)
   131f6:	4869      	ldr	r0, [pc, #420]	; (1339c <getTrngSource+0x2a0>)
   131f8:	6019      	str	r1, [r3, #0]
   131fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   131fc:	6003      	str	r3, [r0, #0]
   131fe:	6800      	ldr	r0, [r0, #0]
   13200:	4283      	cmp	r3, r0
   13202:	d1f7      	bne.n	131f4 <getTrngSource+0xf8>
   13204:	2300      	movs	r3, #0
   13206:	4a6a      	ldr	r2, [pc, #424]	; (133b0 <getTrngSource+0x2b4>)
   13208:	f04f 30ff 	mov.w	r0, #4294967295
   1320c:	6013      	str	r3, [r2, #0]
   1320e:	f7ff fd0d 	bl	12c2c <CC_HalClearInterruptBit>
   13212:	2300      	movs	r3, #0
   13214:	f06f 011b 	mvn.w	r1, #27
   13218:	4618      	mov	r0, r3
   1321a:	4b66      	ldr	r3, [pc, #408]	; (133b4 <getTrngSource+0x2b8>)
   1321c:	6019      	str	r1, [r3, #0]
   1321e:	f7ff fd13 	bl	12c48 <CC_HalMaskInterrupt>
   13222:	4965      	ldr	r1, [pc, #404]	; (133b8 <getTrngSource+0x2bc>)
   13224:	4b65      	ldr	r3, [pc, #404]	; (133bc <getTrngSource+0x2c0>)
   13226:	600f      	str	r7, [r1, #0]
   13228:	6818      	ldr	r0, [r3, #0]
   1322a:	4f5d      	ldr	r7, [pc, #372]	; (133a0 <getTrngSource+0x2a4>)
   1322c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   13230:	f7ff fd0a 	bl	12c48 <CC_HalMaskInterrupt>
   13234:	210a      	movs	r1, #10
   13236:	2201      	movs	r2, #1
   13238:	4b57      	ldr	r3, [pc, #348]	; (13398 <getTrngSource+0x29c>)
   1323a:	4861      	ldr	r0, [pc, #388]	; (133c0 <getTrngSource+0x2c4>)
   1323c:	6019      	str	r1, [r3, #0]
   1323e:	6921      	ldr	r1, [r4, #16]
   13240:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13242:	fba7 c101 	umull	ip, r1, r7, r1
   13246:	0909      	lsrs	r1, r1, #4
   13248:	fb03 f301 	mul.w	r3, r3, r1
   1324c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13250:	03db      	lsls	r3, r3, #15
   13252:	099b      	lsrs	r3, r3, #6
   13254:	6003      	str	r3, [r0, #0]
   13256:	4b56      	ldr	r3, [pc, #344]	; (133b0 <getTrngSource+0x2b4>)
   13258:	a805      	add	r0, sp, #20
   1325a:	601a      	str	r2, [r3, #0]
   1325c:	9904      	ldr	r1, [sp, #16]
   1325e:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   13262:	020b      	lsls	r3, r1, #8
   13264:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13268:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1326c:	4313      	orrs	r3, r2
   1326e:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   13272:	f000 fbcb 	bl	13a0c <LLF_RND_WaitRngInterrupt>
   13276:	9b05      	ldr	r3, [sp, #20]
   13278:	f003 031a 	and.w	r3, r3, #26
   1327c:	4303      	orrs	r3, r0
   1327e:	d138      	bne.n	132f2 <getTrngSource+0x1f6>
   13280:	4b50      	ldr	r3, [pc, #320]	; (133c4 <getTrngSource+0x2c8>)
   13282:	fba7 2705 	umull	r2, r7, r7, r5
   13286:	681a      	ldr	r2, [r3, #0]
   13288:	3314      	adds	r3, #20
   1328a:	9206      	str	r2, [sp, #24]
   1328c:	f853 2c10 	ldr.w	r2, [r3, #-16]
   13290:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   13294:	9207      	str	r2, [sp, #28]
   13296:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   1329a:	9208      	str	r2, [sp, #32]
   1329c:	f853 2c08 	ldr.w	r2, [r3, #-8]
   132a0:	9209      	str	r2, [sp, #36]	; 0x24
   132a2:	f853 2c04 	ldr.w	r2, [r3, #-4]
   132a6:	920a      	str	r2, [sp, #40]	; 0x28
   132a8:	681b      	ldr	r3, [r3, #0]
   132aa:	930b      	str	r3, [sp, #44]	; 0x2c
   132ac:	d102      	bne.n	132b4 <getTrngSource+0x1b8>
   132ae:	f1ba 0f00 	cmp.w	sl, #0
   132b2:	d141      	bne.n	13338 <getTrngSource+0x23c>
   132b4:	2218      	movs	r2, #24
   132b6:	4630      	mov	r0, r6
   132b8:	eb0d 0102 	add.w	r1, sp, r2
   132bc:	f000 fb16 	bl	138ec <CC_PalMemCopyPlat>
   132c0:	3d18      	subs	r5, #24
   132c2:	3618      	adds	r6, #24
   132c4:	f109 0901 	add.w	r9, r9, #1
   132c8:	2d00      	cmp	r5, #0
   132ca:	f47f af4f 	bne.w	1316c <getTrngSource+0x70>
   132ce:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   132d2:	d85d      	bhi.n	13390 <getTrngSource+0x294>
   132d4:	9d03      	ldr	r5, [sp, #12]
   132d6:	4659      	mov	r1, fp
   132d8:	4628      	mov	r0, r5
   132da:	6962      	ldr	r2, [r4, #20]
   132dc:	f7ff fe7c 	bl	12fd8 <LLF_RND_RepetitionCounterTest.part.0>
   132e0:	2800      	cmp	r0, #0
   132e2:	d04b      	beq.n	1337c <getTrngSource+0x280>
   132e4:	2300      	movs	r3, #0
   132e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   132e8:	6013      	str	r3, [r2, #0]
   132ea:	4b2e      	ldr	r3, [pc, #184]	; (133a4 <getTrngSource+0x2a8>)
   132ec:	4298      	cmp	r0, r3
   132ee:	f43f af55 	beq.w	1319c <getTrngSource+0xa0>
   132f2:	9d04      	ldr	r5, [sp, #16]
   132f4:	2d08      	cmp	r5, #8
   132f6:	d034      	beq.n	13362 <getTrngSource+0x266>
   132f8:	2200      	movs	r2, #0
   132fa:	ab04      	add	r3, sp, #16
   132fc:	4621      	mov	r1, r4
   132fe:	4640      	mov	r0, r8
   13300:	006d      	lsls	r5, r5, #1
   13302:	9200      	str	r2, [sp, #0]
   13304:	9504      	str	r5, [sp, #16]
   13306:	f7ff fdbb 	bl	12e80 <startTrngHW>
   1330a:	4b2f      	ldr	r3, [pc, #188]	; (133c8 <getTrngSource+0x2cc>)
   1330c:	4298      	cmp	r0, r3
   1330e:	d024      	beq.n	1335a <getTrngSource+0x25e>
   13310:	2800      	cmp	r0, #0
   13312:	f47f af43 	bne.w	1319c <getTrngSource+0xa0>
   13316:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1331a:	0a13      	lsrs	r3, r2, #8
   1331c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   13320:	4313      	orrs	r3, r2
   13322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   13326:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1332a:	9b02      	ldr	r3, [sp, #8]
   1332c:	3b01      	subs	r3, #1
   1332e:	9302      	str	r3, [sp, #8]
   13330:	f47f af11 	bne.w	13156 <getTrngSource+0x5a>
   13334:	2000      	movs	r0, #0
   13336:	e731      	b.n	1319c <getTrngSource+0xa0>
   13338:	4630      	mov	r0, r6
   1333a:	4652      	mov	r2, sl
   1333c:	a906      	add	r1, sp, #24
   1333e:	f000 fad5 	bl	138ec <CC_PalMemCopyPlat>
   13342:	eba5 050a 	sub.w	r5, r5, sl
   13346:	4456      	add	r6, sl
   13348:	e7bc      	b.n	132c4 <getTrngSource+0x1c8>
   1334a:	481f      	ldr	r0, [pc, #124]	; (133c8 <getTrngSource+0x2cc>)
   1334c:	e722      	b.n	13194 <getTrngSource+0x98>
   1334e:	481f      	ldr	r0, [pc, #124]	; (133cc <getTrngSource+0x2d0>)
   13350:	e720      	b.n	13194 <getTrngSource+0x98>
   13352:	2703      	movs	r7, #3
   13354:	e748      	b.n	131e8 <getTrngSource+0xec>
   13356:	2702      	movs	r7, #2
   13358:	e746      	b.n	131e8 <getTrngSource+0xec>
   1335a:	6a23      	ldr	r3, [r4, #32]
   1335c:	2b00      	cmp	r3, #0
   1335e:	f43f af1d 	beq.w	1319c <getTrngSource+0xa0>
   13362:	481b      	ldr	r0, [pc, #108]	; (133d0 <getTrngSource+0x2d4>)
   13364:	e71a      	b.n	1319c <getTrngSource+0xa0>
   13366:	2201      	movs	r2, #1
   13368:	4621      	mov	r1, r4
   1336a:	4638      	mov	r0, r7
   1336c:	9600      	str	r6, [sp, #0]
   1336e:	ab04      	add	r3, sp, #16
   13370:	f7ff fd86 	bl	12e80 <startTrngHW>
   13374:	2800      	cmp	r0, #0
   13376:	f43f aedf 	beq.w	13138 <getTrngSource+0x3c>
   1337a:	e70f      	b.n	1319c <getTrngSource+0xa0>
   1337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13380:	4659      	mov	r1, fp
   13382:	4628      	mov	r0, r5
   13384:	69a2      	ldr	r2, [r4, #24]
   13386:	f7ff fe53 	bl	13030 <LLF_RND_AdaptiveProportionTest>
   1338a:	2800      	cmp	r0, #0
   1338c:	d1aa      	bne.n	132e4 <getTrngSource+0x1e8>
   1338e:	e7d1      	b.n	13334 <getTrngSource+0x238>
   13390:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13392:	601d      	str	r5, [r3, #0]
   13394:	e7ad      	b.n	132f2 <getTrngSource+0x1f6>
   13396:	bf00      	nop
   13398:	50841138 	.word	0x50841138
   1339c:	50841130 	.word	0x50841130
   133a0:	aaaaaaab 	.word	0xaaaaaaab
   133a4:	00f10c02 	.word	0x00f10c02
   133a8:	00f10c30 	.word	0x00f10c30
   133ac:	508411c4 	.word	0x508411c4
   133b0:	5084112c 	.word	0x5084112c
   133b4:	50841100 	.word	0x50841100
   133b8:	5084110c 	.word	0x5084110c
   133bc:	50841a04 	.word	0x50841a04
   133c0:	508411d8 	.word	0x508411d8
   133c4:	50841114 	.word	0x50841114
   133c8:	00f10c31 	.word	0x00f10c31
   133cc:	00f10c35 	.word	0x00f10c35
   133d0:	00f10c32 	.word	0x00f10c32

000133d4 <LLF_RND_GetTrngSource>:
   133d4:	2300      	movs	r3, #0
   133d6:	b430      	push	{r4, r5}
   133d8:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
   133dc:	9304      	str	r3, [sp, #16]
   133de:	9b02      	ldr	r3, [sp, #8]
   133e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   133e4:	bc30      	pop	{r4, r5}
   133e6:	f7ff be89 	b.w	130fc <getTrngSource>
   133ea:	bf00      	nop

000133ec <LLF_RND_RunTrngStartupTest>:
   133ec:	b510      	push	{r4, lr}
   133ee:	2401      	movs	r4, #1
   133f0:	b086      	sub	sp, #24
   133f2:	ab05      	add	r3, sp, #20
   133f4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   133f8:	9300      	str	r3, [sp, #0]
   133fa:	2200      	movs	r2, #0
   133fc:	ab04      	add	r3, sp, #16
   133fe:	f7ff fe7d 	bl	130fc <getTrngSource>
   13402:	b006      	add	sp, #24
   13404:	bd10      	pop	{r4, pc}
   13406:	bf00      	nop

00013408 <mbedtls_hardware_poll>:
   13408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1340c:	b088      	sub	sp, #32
   1340e:	9205      	str	r2, [sp, #20]
   13410:	2900      	cmp	r1, #0
   13412:	d068      	beq.n	134e6 <mbedtls_hardware_poll+0xde>
   13414:	461c      	mov	r4, r3
   13416:	2b00      	cmp	r3, #0
   13418:	d065      	beq.n	134e6 <mbedtls_hardware_poll+0xde>
   1341a:	4615      	mov	r5, r2
   1341c:	2a00      	cmp	r2, #0
   1341e:	d062      	beq.n	134e6 <mbedtls_hardware_poll+0xde>
   13420:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 13508 <mbedtls_hardware_poll+0x100>
   13424:	460e      	mov	r6, r1
   13426:	f8d8 0000 	ldr.w	r0, [r8]
   1342a:	f04f 31ff 	mov.w	r1, #4294967295
   1342e:	f7ff fca3 	bl	12d78 <CC_PalMutexLock>
   13432:	2800      	cmp	r0, #0
   13434:	d14c      	bne.n	134d0 <mbedtls_hardware_poll+0xc8>
   13436:	2000      	movs	r0, #0
   13438:	f7ff fcce 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   1343c:	2800      	cmp	r0, #0
   1343e:	d143      	bne.n	134c8 <mbedtls_hardware_poll+0xc0>
   13440:	482a      	ldr	r0, [pc, #168]	; (134ec <mbedtls_hardware_poll+0xe4>)
   13442:	f000 fa15 	bl	13870 <RNG_PLAT_SetUserRngParameters>
   13446:	b1e8      	cbz	r0, 13484 <mbedtls_hardware_poll+0x7c>
   13448:	2001      	movs	r0, #1
   1344a:	f04f 37ff 	mov.w	r7, #4294967295
   1344e:	f7ff fcc3 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   13452:	2800      	cmp	r0, #0
   13454:	d134      	bne.n	134c0 <mbedtls_hardware_poll+0xb8>
   13456:	f44f 7108 	mov.w	r1, #544	; 0x220
   1345a:	4825      	ldr	r0, [pc, #148]	; (134f0 <mbedtls_hardware_poll+0xe8>)
   1345c:	f7fe fe44 	bl	120e8 <mbedtls_zeroize_internal>
   13460:	21dc      	movs	r1, #220	; 0xdc
   13462:	4824      	ldr	r0, [pc, #144]	; (134f4 <mbedtls_hardware_poll+0xec>)
   13464:	f7fe fe40 	bl	120e8 <mbedtls_zeroize_internal>
   13468:	4820      	ldr	r0, [pc, #128]	; (134ec <mbedtls_hardware_poll+0xe4>)
   1346a:	2128      	movs	r1, #40	; 0x28
   1346c:	f7fe fe3c 	bl	120e8 <mbedtls_zeroize_internal>
   13470:	f8d8 0000 	ldr.w	r0, [r8]
   13474:	f7ff fc88 	bl	12d88 <CC_PalMutexUnlock>
   13478:	2800      	cmp	r0, #0
   1347a:	d12d      	bne.n	134d8 <mbedtls_hardware_poll+0xd0>
   1347c:	4638      	mov	r0, r7
   1347e:	b008      	add	sp, #32
   13480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13484:	491a      	ldr	r1, [pc, #104]	; (134f0 <mbedtls_hardware_poll+0xe8>)
   13486:	ab07      	add	r3, sp, #28
   13488:	4602      	mov	r2, r0
   1348a:	9003      	str	r0, [sp, #12]
   1348c:	9102      	str	r1, [sp, #8]
   1348e:	9300      	str	r3, [sp, #0]
   13490:	4916      	ldr	r1, [pc, #88]	; (134ec <mbedtls_hardware_poll+0xe4>)
   13492:	4818      	ldr	r0, [pc, #96]	; (134f4 <mbedtls_hardware_poll+0xec>)
   13494:	9401      	str	r4, [sp, #4]
   13496:	ab05      	add	r3, sp, #20
   13498:	f7ff ff9c 	bl	133d4 <LLF_RND_GetTrngSource>
   1349c:	2800      	cmp	r0, #0
   1349e:	d1d3      	bne.n	13448 <mbedtls_hardware_poll+0x40>
   134a0:	6823      	ldr	r3, [r4, #0]
   134a2:	42ab      	cmp	r3, r5
   134a4:	d3d0      	bcc.n	13448 <mbedtls_hardware_poll+0x40>
   134a6:	9907      	ldr	r1, [sp, #28]
   134a8:	4607      	mov	r7, r0
   134aa:	462a      	mov	r2, r5
   134ac:	4630      	mov	r0, r6
   134ae:	3108      	adds	r1, #8
   134b0:	f000 fa1c 	bl	138ec <CC_PalMemCopyPlat>
   134b4:	2001      	movs	r0, #1
   134b6:	6025      	str	r5, [r4, #0]
   134b8:	f7ff fc8e 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   134bc:	2800      	cmp	r0, #0
   134be:	d0ca      	beq.n	13456 <mbedtls_hardware_poll+0x4e>
   134c0:	480d      	ldr	r0, [pc, #52]	; (134f8 <mbedtls_hardware_poll+0xf0>)
   134c2:	f7fe fd0f 	bl	11ee4 <CC_PalAbort>
   134c6:	e7c6      	b.n	13456 <mbedtls_hardware_poll+0x4e>
   134c8:	480c      	ldr	r0, [pc, #48]	; (134fc <mbedtls_hardware_poll+0xf4>)
   134ca:	f7fe fd0b 	bl	11ee4 <CC_PalAbort>
   134ce:	e7b7      	b.n	13440 <mbedtls_hardware_poll+0x38>
   134d0:	480b      	ldr	r0, [pc, #44]	; (13500 <mbedtls_hardware_poll+0xf8>)
   134d2:	f7fe fd07 	bl	11ee4 <CC_PalAbort>
   134d6:	e7ae      	b.n	13436 <mbedtls_hardware_poll+0x2e>
   134d8:	480a      	ldr	r0, [pc, #40]	; (13504 <mbedtls_hardware_poll+0xfc>)
   134da:	f7fe fd03 	bl	11ee4 <CC_PalAbort>
   134de:	4638      	mov	r0, r7
   134e0:	b008      	add	sp, #32
   134e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134e6:	f04f 37ff 	mov.w	r7, #4294967295
   134ea:	e7c7      	b.n	1347c <mbedtls_hardware_poll+0x74>
   134ec:	20001334 	.word	0x20001334
   134f0:	20001114 	.word	0x20001114
   134f4:	20001038 	.word	0x20001038
   134f8:	000158c4 	.word	0x000158c4
   134fc:	000158a4 	.word	0x000158a4
   13500:	0001588c 	.word	0x0001588c
   13504:	0001591c 	.word	0x0001591c
   13508:	200000e8 	.word	0x200000e8

0001350c <cc_mbedtls_aes_init>:
   1350c:	b510      	push	{r4, lr}
   1350e:	4604      	mov	r4, r0
   13510:	b130      	cbz	r0, 13520 <cc_mbedtls_aes_init+0x14>
   13512:	2200      	movs	r2, #0
   13514:	2301      	movs	r3, #1
   13516:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1351a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1351e:	bd10      	pop	{r4, pc}
   13520:	4801      	ldr	r0, [pc, #4]	; (13528 <cc_mbedtls_aes_init+0x1c>)
   13522:	f7fe fcdf 	bl	11ee4 <CC_PalAbort>
   13526:	e7f4      	b.n	13512 <cc_mbedtls_aes_init+0x6>
   13528:	00015934 	.word	0x00015934

0001352c <cc_mbedtls_aes_free>:
   1352c:	b118      	cbz	r0, 13536 <cc_mbedtls_aes_free+0xa>
   1352e:	2274      	movs	r2, #116	; 0x74
   13530:	2100      	movs	r1, #0
   13532:	f000 b9dd 	b.w	138f0 <CC_PalMemSetPlat>
   13536:	4770      	bx	lr

00013538 <cc_mbedtls_aes_setkey_enc>:
   13538:	b188      	cbz	r0, 1355e <cc_mbedtls_aes_setkey_enc+0x26>
   1353a:	b199      	cbz	r1, 13564 <cc_mbedtls_aes_setkey_enc+0x2c>
   1353c:	b510      	push	{r4, lr}
   1353e:	2400      	movs	r4, #0
   13540:	2a80      	cmp	r2, #128	; 0x80
   13542:	6384      	str	r4, [r0, #56]	; 0x38
   13544:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   13548:	d106      	bne.n	13558 <cc_mbedtls_aes_setkey_enc+0x20>
   1354a:	6304      	str	r4, [r0, #48]	; 0x30
   1354c:	2210      	movs	r2, #16
   1354e:	3010      	adds	r0, #16
   13550:	f000 f9cc 	bl	138ec <CC_PalMemCopyPlat>
   13554:	4620      	mov	r0, r4
   13556:	bd10      	pop	{r4, pc}
   13558:	f06f 001f 	mvn.w	r0, #31
   1355c:	bd10      	pop	{r4, pc}
   1355e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   13562:	4770      	bx	lr
   13564:	f06f 001f 	mvn.w	r0, #31
   13568:	4770      	bx	lr
   1356a:	bf00      	nop

0001356c <cc_mbedtls_aes_crypt_ecb>:
   1356c:	b328      	cbz	r0, 135ba <cc_mbedtls_aes_crypt_ecb+0x4e>
   1356e:	b322      	cbz	r2, 135ba <cc_mbedtls_aes_crypt_ecb+0x4e>
   13570:	b31b      	cbz	r3, 135ba <cc_mbedtls_aes_crypt_ecb+0x4e>
   13572:	2901      	cmp	r1, #1
   13574:	d821      	bhi.n	135ba <cc_mbedtls_aes_crypt_ecb+0x4e>
   13576:	b570      	push	{r4, r5, r6, lr}
   13578:	4604      	mov	r4, r0
   1357a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1357c:	b086      	sub	sp, #24
   1357e:	d017      	beq.n	135b0 <cc_mbedtls_aes_crypt_ecb+0x44>
   13580:	2901      	cmp	r1, #1
   13582:	d117      	bne.n	135b4 <cc_mbedtls_aes_crypt_ecb+0x48>
   13584:	2510      	movs	r5, #16
   13586:	2100      	movs	r1, #0
   13588:	eb0d 0605 	add.w	r6, sp, r5
   1358c:	6361      	str	r1, [r4, #52]	; 0x34
   1358e:	4610      	mov	r0, r2
   13590:	4629      	mov	r1, r5
   13592:	9500      	str	r5, [sp, #0]
   13594:	aa02      	add	r2, sp, #8
   13596:	9601      	str	r6, [sp, #4]
   13598:	f000 fa84 	bl	13aa4 <SetDataBuffersInfo>
   1359c:	b950      	cbnz	r0, 135b4 <cc_mbedtls_aes_crypt_ecb+0x48>
   1359e:	462b      	mov	r3, r5
   135a0:	4632      	mov	r2, r6
   135a2:	4620      	mov	r0, r4
   135a4:	a902      	add	r1, sp, #8
   135a6:	f000 fd37 	bl	14018 <ProcessAesDrv>
   135aa:	b918      	cbnz	r0, 135b4 <cc_mbedtls_aes_crypt_ecb+0x48>
   135ac:	b006      	add	sp, #24
   135ae:	bd70      	pop	{r4, r5, r6, pc}
   135b0:	2900      	cmp	r1, #0
   135b2:	d0e7      	beq.n	13584 <cc_mbedtls_aes_crypt_ecb+0x18>
   135b4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   135b8:	e7f8      	b.n	135ac <cc_mbedtls_aes_crypt_ecb+0x40>
   135ba:	f06f 0021 	mvn.w	r0, #33	; 0x21
   135be:	4770      	bx	lr

000135c0 <cc_mbedtls_sha256_init>:
   135c0:	b510      	push	{r4, lr}
   135c2:	4604      	mov	r4, r0
   135c4:	b128      	cbz	r0, 135d2 <cc_mbedtls_sha256_init+0x12>
   135c6:	4620      	mov	r0, r4
   135c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   135cc:	21f0      	movs	r1, #240	; 0xf0
   135ce:	f000 b991 	b.w	138f4 <CC_PalMemSetZeroPlat>
   135d2:	4804      	ldr	r0, [pc, #16]	; (135e4 <cc_mbedtls_sha256_init+0x24>)
   135d4:	f7fe fc86 	bl	11ee4 <CC_PalAbort>
   135d8:	4620      	mov	r0, r4
   135da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   135de:	21f0      	movs	r1, #240	; 0xf0
   135e0:	f000 b988 	b.w	138f4 <CC_PalMemSetZeroPlat>
   135e4:	00015948 	.word	0x00015948

000135e8 <cc_mbedtls_sha256_free>:
   135e8:	b110      	cbz	r0, 135f0 <cc_mbedtls_sha256_free+0x8>
   135ea:	21f0      	movs	r1, #240	; 0xf0
   135ec:	f7fe bd7c 	b.w	120e8 <mbedtls_zeroize_internal>
   135f0:	4770      	bx	lr
   135f2:	bf00      	nop

000135f4 <cc_mbedtls_sha256_starts>:
   135f4:	b508      	push	{r3, lr}
   135f6:	b161      	cbz	r1, 13612 <cc_mbedtls_sha256_starts+0x1e>
   135f8:	2901      	cmp	r1, #1
   135fa:	d107      	bne.n	1360c <cc_mbedtls_sha256_starts+0x18>
   135fc:	2102      	movs	r1, #2
   135fe:	f000 f85b 	bl	136b8 <mbedtls_sha_starts_internal>
   13602:	2800      	cmp	r0, #0
   13604:	bf18      	it	ne
   13606:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1360a:	bd08      	pop	{r3, pc}
   1360c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13610:	bd08      	pop	{r3, pc}
   13612:	2101      	movs	r1, #1
   13614:	f000 f850 	bl	136b8 <mbedtls_sha_starts_internal>
   13618:	e7f3      	b.n	13602 <cc_mbedtls_sha256_starts+0xe>
   1361a:	bf00      	nop

0001361c <cc_mbedtls_sha256_update>:
   1361c:	b570      	push	{r4, r5, r6, lr}
   1361e:	188e      	adds	r6, r1, r2
   13620:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   13624:	460b      	mov	r3, r1
   13626:	4614      	mov	r4, r2
   13628:	4605      	mov	r5, r0
   1362a:	b0a0      	sub	sp, #128	; 0x80
   1362c:	d801      	bhi.n	13632 <cc_mbedtls_sha256_update+0x16>
   1362e:	2a80      	cmp	r2, #128	; 0x80
   13630:	d90c      	bls.n	1364c <cc_mbedtls_sha256_update+0x30>
   13632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13636:	d917      	bls.n	13668 <cc_mbedtls_sha256_update+0x4c>
   13638:	4622      	mov	r2, r4
   1363a:	4619      	mov	r1, r3
   1363c:	4628      	mov	r0, r5
   1363e:	f000 f87d 	bl	1373c <mbedtls_sha_update_internal>
   13642:	4604      	mov	r4, r0
   13644:	b984      	cbnz	r4, 13668 <cc_mbedtls_sha256_update+0x4c>
   13646:	4620      	mov	r0, r4
   13648:	b020      	add	sp, #128	; 0x80
   1364a:	bd70      	pop	{r4, r5, r6, pc}
   1364c:	4668      	mov	r0, sp
   1364e:	f000 f94d 	bl	138ec <CC_PalMemCopyPlat>
   13652:	4622      	mov	r2, r4
   13654:	4669      	mov	r1, sp
   13656:	4628      	mov	r0, r5
   13658:	f000 f870 	bl	1373c <mbedtls_sha_update_internal>
   1365c:	2180      	movs	r1, #128	; 0x80
   1365e:	4604      	mov	r4, r0
   13660:	4668      	mov	r0, sp
   13662:	f000 f947 	bl	138f4 <CC_PalMemSetZeroPlat>
   13666:	e7ed      	b.n	13644 <cc_mbedtls_sha256_update+0x28>
   13668:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1366c:	e7eb      	b.n	13646 <cc_mbedtls_sha256_update+0x2a>
   1366e:	bf00      	nop

00013670 <cc_mbedtls_sha256_finish>:
   13670:	b570      	push	{r4, r5, r6, lr}
   13672:	b1e8      	cbz	r0, 136b0 <cc_mbedtls_sha256_finish+0x40>
   13674:	460e      	mov	r6, r1
   13676:	b1d9      	cbz	r1, 136b0 <cc_mbedtls_sha256_finish+0x40>
   13678:	4604      	mov	r4, r0
   1367a:	f000 f831 	bl	136e0 <mbedtls_sha_finish_internal>
   1367e:	4605      	mov	r5, r0
   13680:	b9b0      	cbnz	r0, 136b0 <cc_mbedtls_sha256_finish+0x40>
   13682:	6823      	ldr	r3, [r4, #0]
   13684:	2b01      	cmp	r3, #1
   13686:	d00b      	beq.n	136a0 <cc_mbedtls_sha256_finish+0x30>
   13688:	2b02      	cmp	r3, #2
   1368a:	d001      	beq.n	13690 <cc_mbedtls_sha256_finish+0x20>
   1368c:	4628      	mov	r0, r5
   1368e:	bd70      	pop	{r4, r5, r6, pc}
   13690:	4630      	mov	r0, r6
   13692:	221c      	movs	r2, #28
   13694:	f104 0108 	add.w	r1, r4, #8
   13698:	f000 f928 	bl	138ec <CC_PalMemCopyPlat>
   1369c:	4628      	mov	r0, r5
   1369e:	bd70      	pop	{r4, r5, r6, pc}
   136a0:	4630      	mov	r0, r6
   136a2:	2220      	movs	r2, #32
   136a4:	f104 0108 	add.w	r1, r4, #8
   136a8:	f000 f920 	bl	138ec <CC_PalMemCopyPlat>
   136ac:	4628      	mov	r0, r5
   136ae:	bd70      	pop	{r4, r5, r6, pc}
   136b0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   136b4:	e7ea      	b.n	1368c <cc_mbedtls_sha256_finish+0x1c>
   136b6:	bf00      	nop

000136b8 <mbedtls_sha_starts_internal>:
   136b8:	b178      	cbz	r0, 136da <mbedtls_sha_starts_internal+0x22>
   136ba:	b538      	push	{r3, r4, r5, lr}
   136bc:	460d      	mov	r5, r1
   136be:	21f0      	movs	r1, #240	; 0xf0
   136c0:	4604      	mov	r4, r0
   136c2:	f000 f917 	bl	138f4 <CC_PalMemSetZeroPlat>
   136c6:	2340      	movs	r3, #64	; 0x40
   136c8:	4620      	mov	r0, r4
   136ca:	6025      	str	r5, [r4, #0]
   136cc:	65e3      	str	r3, [r4, #92]	; 0x5c
   136ce:	f000 fa21 	bl	13b14 <InitHashDrv>
   136d2:	3800      	subs	r0, #0
   136d4:	bf18      	it	ne
   136d6:	2001      	movne	r0, #1
   136d8:	bd38      	pop	{r3, r4, r5, pc}
   136da:	2001      	movs	r0, #1
   136dc:	4770      	bx	lr
   136de:	bf00      	nop

000136e0 <mbedtls_sha_finish_internal>:
   136e0:	b570      	push	{r4, r5, r6, lr}
   136e2:	6e05      	ldr	r5, [r0, #96]	; 0x60
   136e4:	b0a4      	sub	sp, #144	; 0x90
   136e6:	4604      	mov	r4, r0
   136e8:	ae04      	add	r6, sp, #16
   136ea:	b9e5      	cbnz	r5, 13726 <mbedtls_sha_finish_internal+0x46>
   136ec:	2201      	movs	r2, #1
   136ee:	2300      	movs	r3, #0
   136f0:	6062      	str	r2, [r4, #4]
   136f2:	4630      	mov	r0, r6
   136f4:	4629      	mov	r1, r5
   136f6:	e9cd 3300 	strd	r3, r3, [sp]
   136fa:	aa02      	add	r2, sp, #8
   136fc:	f000 f9d2 	bl	13aa4 <SetDataBuffersInfo>
   13700:	b110      	cbz	r0, 13708 <mbedtls_sha_finish_internal+0x28>
   13702:	2001      	movs	r0, #1
   13704:	b024      	add	sp, #144	; 0x90
   13706:	bd70      	pop	{r4, r5, r6, pc}
   13708:	462a      	mov	r2, r5
   1370a:	4620      	mov	r0, r4
   1370c:	a902      	add	r1, sp, #8
   1370e:	f000 fa2b 	bl	13b68 <ProcessHashDrv>
   13712:	2800      	cmp	r0, #0
   13714:	d1f5      	bne.n	13702 <mbedtls_sha_finish_internal+0x22>
   13716:	4620      	mov	r0, r4
   13718:	f000 fb50 	bl	13dbc <FinishHashDrv>
   1371c:	2800      	cmp	r0, #0
   1371e:	d1f0      	bne.n	13702 <mbedtls_sha_finish_internal+0x22>
   13720:	6620      	str	r0, [r4, #96]	; 0x60
   13722:	b024      	add	sp, #144	; 0x90
   13724:	bd70      	pop	{r4, r5, r6, pc}
   13726:	2d80      	cmp	r5, #128	; 0x80
   13728:	462a      	mov	r2, r5
   1372a:	4630      	mov	r0, r6
   1372c:	bf28      	it	cs
   1372e:	2280      	movcs	r2, #128	; 0x80
   13730:	f104 0164 	add.w	r1, r4, #100	; 0x64
   13734:	f000 f8da 	bl	138ec <CC_PalMemCopyPlat>
   13738:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1373a:	e7d7      	b.n	136ec <mbedtls_sha_finish_internal+0xc>

0001373c <mbedtls_sha_update_internal>:
   1373c:	2800      	cmp	r0, #0
   1373e:	d055      	beq.n	137ec <mbedtls_sha_update_internal+0xb0>
   13740:	b5f0      	push	{r4, r5, r6, r7, lr}
   13742:	4615      	mov	r5, r2
   13744:	b0a5      	sub	sp, #148	; 0x94
   13746:	b1b2      	cbz	r2, 13776 <mbedtls_sha_update_internal+0x3a>
   13748:	460e      	mov	r6, r1
   1374a:	b351      	cbz	r1, 137a2 <mbedtls_sha_update_internal+0x66>
   1374c:	4604      	mov	r4, r0
   1374e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   13752:	1a1a      	subs	r2, r3, r0
   13754:	fbb2 f7f3 	udiv	r7, r2, r3
   13758:	fb03 2717 	mls	r7, r3, r7, r2
   1375c:	42af      	cmp	r7, r5
   1375e:	bf28      	it	cs
   13760:	462f      	movcs	r7, r5
   13762:	2f00      	cmp	r7, #0
   13764:	d144      	bne.n	137f0 <mbedtls_sha_update_internal+0xb4>
   13766:	4283      	cmp	r3, r0
   13768:	d008      	beq.n	1377c <mbedtls_sha_update_internal+0x40>
   1376a:	fbb5 f7f3 	udiv	r7, r5, r3
   1376e:	fb03 f707 	mul.w	r7, r3, r7
   13772:	b9cf      	cbnz	r7, 137a8 <mbedtls_sha_update_internal+0x6c>
   13774:	bb6d      	cbnz	r5, 137d2 <mbedtls_sha_update_internal+0x96>
   13776:	4628      	mov	r0, r5
   13778:	b025      	add	sp, #148	; 0x94
   1377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1377c:	2b80      	cmp	r3, #128	; 0x80
   1377e:	bf28      	it	cs
   13780:	2380      	movcs	r3, #128	; 0x80
   13782:	f104 0164 	add.w	r1, r4, #100	; 0x64
   13786:	461a      	mov	r2, r3
   13788:	a804      	add	r0, sp, #16
   1378a:	f000 f8af 	bl	138ec <CC_PalMemCopyPlat>
   1378e:	2300      	movs	r3, #0
   13790:	e9cd 3300 	strd	r3, r3, [sp]
   13794:	a804      	add	r0, sp, #16
   13796:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   13798:	aa02      	add	r2, sp, #8
   1379a:	f000 f983 	bl	13aa4 <SetDataBuffersInfo>
   1379e:	2800      	cmp	r0, #0
   137a0:	d033      	beq.n	1380a <mbedtls_sha_update_internal+0xce>
   137a2:	2001      	movs	r0, #1
   137a4:	b025      	add	sp, #148	; 0x94
   137a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137a8:	2300      	movs	r3, #0
   137aa:	4639      	mov	r1, r7
   137ac:	4630      	mov	r0, r6
   137ae:	e9cd 3300 	strd	r3, r3, [sp]
   137b2:	aa02      	add	r2, sp, #8
   137b4:	f000 f976 	bl	13aa4 <SetDataBuffersInfo>
   137b8:	2800      	cmp	r0, #0
   137ba:	d1f2      	bne.n	137a2 <mbedtls_sha_update_internal+0x66>
   137bc:	463a      	mov	r2, r7
   137be:	4620      	mov	r0, r4
   137c0:	a902      	add	r1, sp, #8
   137c2:	f000 f9d1 	bl	13b68 <ProcessHashDrv>
   137c6:	2800      	cmp	r0, #0
   137c8:	d1eb      	bne.n	137a2 <mbedtls_sha_update_internal+0x66>
   137ca:	1bed      	subs	r5, r5, r7
   137cc:	443e      	add	r6, r7
   137ce:	2d00      	cmp	r5, #0
   137d0:	d0d1      	beq.n	13776 <mbedtls_sha_update_internal+0x3a>
   137d2:	6e20      	ldr	r0, [r4, #96]	; 0x60
   137d4:	462a      	mov	r2, r5
   137d6:	3019      	adds	r0, #25
   137d8:	4631      	mov	r1, r6
   137da:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   137de:	f000 f885 	bl	138ec <CC_PalMemCopyPlat>
   137e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
   137e4:	2000      	movs	r0, #0
   137e6:	442a      	add	r2, r5
   137e8:	6622      	str	r2, [r4, #96]	; 0x60
   137ea:	e7c5      	b.n	13778 <mbedtls_sha_update_internal+0x3c>
   137ec:	2001      	movs	r0, #1
   137ee:	4770      	bx	lr
   137f0:	f104 0364 	add.w	r3, r4, #100	; 0x64
   137f4:	4418      	add	r0, r3
   137f6:	463a      	mov	r2, r7
   137f8:	f000 f878 	bl	138ec <CC_PalMemCopyPlat>
   137fc:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
   13800:	4438      	add	r0, r7
   13802:	443e      	add	r6, r7
   13804:	1bed      	subs	r5, r5, r7
   13806:	6620      	str	r0, [r4, #96]	; 0x60
   13808:	e7ad      	b.n	13766 <mbedtls_sha_update_internal+0x2a>
   1380a:	4620      	mov	r0, r4
   1380c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1380e:	a902      	add	r1, sp, #8
   13810:	f000 f9aa 	bl	13b68 <ProcessHashDrv>
   13814:	2800      	cmp	r0, #0
   13816:	d1c4      	bne.n	137a2 <mbedtls_sha_update_internal+0x66>
   13818:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1381a:	6620      	str	r0, [r4, #96]	; 0x60
   1381c:	e7a5      	b.n	1376a <mbedtls_sha_update_internal+0x2e>
   1381e:	bf00      	nop

00013820 <cc_mbedtls_sha256>:
   13820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13822:	461c      	mov	r4, r3
   13824:	4605      	mov	r5, r0
   13826:	4811      	ldr	r0, [pc, #68]	; (1386c <cc_mbedtls_sha256+0x4c>)
   13828:	460e      	mov	r6, r1
   1382a:	4617      	mov	r7, r2
   1382c:	f7ff fec8 	bl	135c0 <cc_mbedtls_sha256_init>
   13830:	4621      	mov	r1, r4
   13832:	480e      	ldr	r0, [pc, #56]	; (1386c <cc_mbedtls_sha256+0x4c>)
   13834:	f7ff fede 	bl	135f4 <cc_mbedtls_sha256_starts>
   13838:	4604      	mov	r4, r0
   1383a:	b120      	cbz	r0, 13846 <cc_mbedtls_sha256+0x26>
   1383c:	480b      	ldr	r0, [pc, #44]	; (1386c <cc_mbedtls_sha256+0x4c>)
   1383e:	f7ff fed3 	bl	135e8 <cc_mbedtls_sha256_free>
   13842:	4620      	mov	r0, r4
   13844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13846:	4632      	mov	r2, r6
   13848:	4629      	mov	r1, r5
   1384a:	4808      	ldr	r0, [pc, #32]	; (1386c <cc_mbedtls_sha256+0x4c>)
   1384c:	f7ff fee6 	bl	1361c <cc_mbedtls_sha256_update>
   13850:	4604      	mov	r4, r0
   13852:	2800      	cmp	r0, #0
   13854:	d1f2      	bne.n	1383c <cc_mbedtls_sha256+0x1c>
   13856:	4639      	mov	r1, r7
   13858:	4804      	ldr	r0, [pc, #16]	; (1386c <cc_mbedtls_sha256+0x4c>)
   1385a:	f7ff ff09 	bl	13670 <cc_mbedtls_sha256_finish>
   1385e:	4604      	mov	r4, r0
   13860:	4802      	ldr	r0, [pc, #8]	; (1386c <cc_mbedtls_sha256+0x4c>)
   13862:	f7ff fec1 	bl	135e8 <cc_mbedtls_sha256_free>
   13866:	4620      	mov	r0, r4
   13868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1386a:	bf00      	nop
   1386c:	2000135c 	.word	0x2000135c

00013870 <RNG_PLAT_SetUserRngParameters>:
   13870:	231c      	movs	r3, #28
   13872:	b530      	push	{r4, r5, lr}
   13874:	b083      	sub	sp, #12
   13876:	a901      	add	r1, sp, #4
   13878:	4604      	mov	r4, r0
   1387a:	9301      	str	r3, [sp, #4]
   1387c:	f000 f83e 	bl	138fc <CC_PalTrngParamGet>
   13880:	4605      	mov	r5, r0
   13882:	b938      	cbnz	r0, 13894 <RNG_PLAT_SetUserRngParameters+0x24>
   13884:	9b01      	ldr	r3, [sp, #4]
   13886:	2b1c      	cmp	r3, #28
   13888:	d007      	beq.n	1389a <RNG_PLAT_SetUserRngParameters+0x2a>
   1388a:	4d16      	ldr	r5, [pc, #88]	; (138e4 <RNG_PLAT_SetUserRngParameters+0x74>)
   1388c:	4620      	mov	r0, r4
   1388e:	211c      	movs	r1, #28
   13890:	f000 f830 	bl	138f4 <CC_PalMemSetZeroPlat>
   13894:	4628      	mov	r0, r5
   13896:	b003      	add	sp, #12
   13898:	bd30      	pop	{r4, r5, pc}
   1389a:	2101      	movs	r1, #1
   1389c:	e9d4 3200 	ldrd	r3, r2, [r4]
   138a0:	3b00      	subs	r3, #0
   138a2:	bf18      	it	ne
   138a4:	2301      	movne	r3, #1
   138a6:	61e1      	str	r1, [r4, #28]
   138a8:	b10a      	cbz	r2, 138ae <RNG_PLAT_SetUserRngParameters+0x3e>
   138aa:	f043 0302 	orr.w	r3, r3, #2
   138ae:	68a2      	ldr	r2, [r4, #8]
   138b0:	b932      	cbnz	r2, 138c0 <RNG_PLAT_SetUserRngParameters+0x50>
   138b2:	68e2      	ldr	r2, [r4, #12]
   138b4:	b942      	cbnz	r2, 138c8 <RNG_PLAT_SetUserRngParameters+0x58>
   138b6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   138ba:	b98b      	cbnz	r3, 138e0 <RNG_PLAT_SetUserRngParameters+0x70>
   138bc:	4d0a      	ldr	r5, [pc, #40]	; (138e8 <RNG_PLAT_SetUserRngParameters+0x78>)
   138be:	e7e5      	b.n	1388c <RNG_PLAT_SetUserRngParameters+0x1c>
   138c0:	68e2      	ldr	r2, [r4, #12]
   138c2:	f043 0304 	orr.w	r3, r3, #4
   138c6:	b13a      	cbz	r2, 138d8 <RNG_PLAT_SetUserRngParameters+0x68>
   138c8:	2200      	movs	r2, #0
   138ca:	4628      	mov	r0, r5
   138cc:	f043 0308 	orr.w	r3, r3, #8
   138d0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   138d4:	b003      	add	sp, #12
   138d6:	bd30      	pop	{r4, r5, pc}
   138d8:	4615      	mov	r5, r2
   138da:	e9c4 3208 	strd	r3, r2, [r4, #32]
   138de:	e7d9      	b.n	13894 <RNG_PLAT_SetUserRngParameters+0x24>
   138e0:	4615      	mov	r5, r2
   138e2:	e7d7      	b.n	13894 <RNG_PLAT_SetUserRngParameters+0x24>
   138e4:	00f00c37 	.word	0x00f00c37
   138e8:	00f00c0e 	.word	0x00f00c0e

000138ec <CC_PalMemCopyPlat>:
   138ec:	f001 ba1d 	b.w	14d2a <memmove>

000138f0 <CC_PalMemSetPlat>:
   138f0:	f001 ba3d 	b.w	14d6e <memset>

000138f4 <CC_PalMemSetZeroPlat>:
   138f4:	460a      	mov	r2, r1
   138f6:	2100      	movs	r1, #0
   138f8:	f001 ba39 	b.w	14d6e <memset>

000138fc <CC_PalTrngParamGet>:
   138fc:	2800      	cmp	r0, #0
   138fe:	d066      	beq.n	139ce <CC_PalTrngParamGet+0xd2>
   13900:	2900      	cmp	r1, #0
   13902:	d064      	beq.n	139ce <CC_PalTrngParamGet+0xd2>
   13904:	680b      	ldr	r3, [r1, #0]
   13906:	2b1c      	cmp	r3, #28
   13908:	d161      	bne.n	139ce <CC_PalTrngParamGet+0xd2>
   1390a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1390e:	4a3b      	ldr	r2, [pc, #236]	; (139fc <CC_PalTrngParamGet+0x100>)
   13910:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   13914:	4291      	cmp	r1, r2
   13916:	d05c      	beq.n	139d2 <CC_PalTrngParamGet+0xd6>
   13918:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1391c:	3201      	adds	r2, #1
   1391e:	d058      	beq.n	139d2 <CC_PalTrngParamGet+0xd6>
   13920:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13924:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13928:	6002      	str	r2, [r0, #0]
   1392a:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   1392e:	4a34      	ldr	r2, [pc, #208]	; (13a00 <CC_PalTrngParamGet+0x104>)
   13930:	4291      	cmp	r1, r2
   13932:	d060      	beq.n	139f6 <CC_PalTrngParamGet+0xfa>
   13934:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13938:	3201      	adds	r2, #1
   1393a:	d05c      	beq.n	139f6 <CC_PalTrngParamGet+0xfa>
   1393c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13940:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13944:	6042      	str	r2, [r0, #4]
   13946:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1394a:	f512 7f94 	cmn.w	r2, #296	; 0x128
   1394e:	d04f      	beq.n	139f0 <CC_PalTrngParamGet+0xf4>
   13950:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13954:	3201      	adds	r2, #1
   13956:	d04b      	beq.n	139f0 <CC_PalTrngParamGet+0xf4>
   13958:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1395c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13960:	6082      	str	r2, [r0, #8]
   13962:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   13966:	4a27      	ldr	r2, [pc, #156]	; (13a04 <CC_PalTrngParamGet+0x108>)
   13968:	4291      	cmp	r1, r2
   1396a:	d03e      	beq.n	139ea <CC_PalTrngParamGet+0xee>
   1396c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13970:	3201      	adds	r2, #1
   13972:	d03a      	beq.n	139ea <CC_PalTrngParamGet+0xee>
   13974:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13978:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1397c:	60c2      	str	r2, [r0, #12]
   1397e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13982:	3270      	adds	r2, #112	; 0x70
   13984:	d02f      	beq.n	139e6 <CC_PalTrngParamGet+0xea>
   13986:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1398a:	3201      	adds	r2, #1
   1398c:	d02b      	beq.n	139e6 <CC_PalTrngParamGet+0xea>
   1398e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13992:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13996:	6102      	str	r2, [r0, #16]
   13998:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1399c:	32af      	adds	r2, #175	; 0xaf
   1399e:	d020      	beq.n	139e2 <CC_PalTrngParamGet+0xe6>
   139a0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   139a4:	3201      	adds	r2, #1
   139a6:	d01c      	beq.n	139e2 <CC_PalTrngParamGet+0xe6>
   139a8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   139ac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   139b0:	6142      	str	r2, [r0, #20]
   139b2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   139b6:	4a14      	ldr	r2, [pc, #80]	; (13a08 <CC_PalTrngParamGet+0x10c>)
   139b8:	4291      	cmp	r1, r2
   139ba:	d00d      	beq.n	139d8 <CC_PalTrngParamGet+0xdc>
   139bc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   139c0:	3201      	adds	r2, #1
   139c2:	d009      	beq.n	139d8 <CC_PalTrngParamGet+0xdc>
   139c4:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   139c8:	6183      	str	r3, [r0, #24]
   139ca:	2000      	movs	r0, #0
   139cc:	4770      	bx	lr
   139ce:	2001      	movs	r0, #1
   139d0:	4770      	bx	lr
   139d2:	f640 02fc 	movw	r2, #2300	; 0x8fc
   139d6:	e7a5      	b.n	13924 <CC_PalTrngParamGet+0x28>
   139d8:	f240 3337 	movw	r3, #823	; 0x337
   139dc:	6183      	str	r3, [r0, #24]
   139de:	2000      	movs	r0, #0
   139e0:	4770      	bx	lr
   139e2:	2251      	movs	r2, #81	; 0x51
   139e4:	e7e2      	b.n	139ac <CC_PalTrngParamGet+0xb0>
   139e6:	2290      	movs	r2, #144	; 0x90
   139e8:	e7d3      	b.n	13992 <CC_PalTrngParamGet+0x96>
   139ea:	f642 1204 	movw	r2, #10500	; 0x2904
   139ee:	e7c3      	b.n	13978 <CC_PalTrngParamGet+0x7c>
   139f0:	f640 62d8 	movw	r2, #3800	; 0xed8
   139f4:	e7b2      	b.n	1395c <CC_PalTrngParamGet+0x60>
   139f6:	f242 02d0 	movw	r2, #8400	; 0x20d0
   139fa:	e7a1      	b.n	13940 <CC_PalTrngParamGet+0x44>
   139fc:	fffff8fc 	.word	0xfffff8fc
   13a00:	ffff20d0 	.word	0xffff20d0
   13a04:	ffff2904 	.word	0xffff2904
   13a08:	fffff337 	.word	0xfffff337

00013a0c <LLF_RND_WaitRngInterrupt>:
   13a0c:	4601      	mov	r1, r0
   13a0e:	b508      	push	{r3, lr}
   13a10:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13a14:	f7ff f924 	bl	12c60 <CC_HalWaitInterruptRND>
   13a18:	2300      	movs	r3, #0
   13a1a:	4902      	ldr	r1, [pc, #8]	; (13a24 <LLF_RND_WaitRngInterrupt+0x18>)
   13a1c:	4a02      	ldr	r2, [pc, #8]	; (13a28 <LLF_RND_WaitRngInterrupt+0x1c>)
   13a1e:	600b      	str	r3, [r1, #0]
   13a20:	6013      	str	r3, [r2, #0]
   13a22:	bd08      	pop	{r3, pc}
   13a24:	508411c8 	.word	0x508411c8
   13a28:	5084112c 	.word	0x5084112c

00013a2c <LLF_RND_GetRoscSampleCnt>:
   13a2c:	3801      	subs	r0, #1
   13a2e:	2807      	cmp	r0, #7
   13a30:	d805      	bhi.n	13a3e <LLF_RND_GetRoscSampleCnt+0x12>
   13a32:	e8df f000 	tbb	[pc, r0]
   13a36:	0e0a      	.short	0x0e0a
   13a38:	04041204 	.word	0x04041204
   13a3c:	0604      	.short	0x0604
   13a3e:	4809      	ldr	r0, [pc, #36]	; (13a64 <LLF_RND_GetRoscSampleCnt+0x38>)
   13a40:	4770      	bx	lr
   13a42:	68cb      	ldr	r3, [r1, #12]
   13a44:	2000      	movs	r0, #0
   13a46:	624b      	str	r3, [r1, #36]	; 0x24
   13a48:	4770      	bx	lr
   13a4a:	680b      	ldr	r3, [r1, #0]
   13a4c:	2000      	movs	r0, #0
   13a4e:	624b      	str	r3, [r1, #36]	; 0x24
   13a50:	4770      	bx	lr
   13a52:	684b      	ldr	r3, [r1, #4]
   13a54:	2000      	movs	r0, #0
   13a56:	624b      	str	r3, [r1, #36]	; 0x24
   13a58:	4770      	bx	lr
   13a5a:	688b      	ldr	r3, [r1, #8]
   13a5c:	2000      	movs	r0, #0
   13a5e:	624b      	str	r3, [r1, #36]	; 0x24
   13a60:	4770      	bx	lr
   13a62:	bf00      	nop
   13a64:	00f10c31 	.word	0x00f10c31

00013a68 <LLF_RND_GetFastestRosc>:
   13a68:	680b      	ldr	r3, [r1, #0]
   13a6a:	e002      	b.n	13a72 <LLF_RND_GetFastestRosc+0xa>
   13a6c:	2b08      	cmp	r3, #8
   13a6e:	600b      	str	r3, [r1, #0]
   13a70:	d806      	bhi.n	13a80 <LLF_RND_GetFastestRosc+0x18>
   13a72:	6a02      	ldr	r2, [r0, #32]
   13a74:	4213      	tst	r3, r2
   13a76:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13a7a:	d0f7      	beq.n	13a6c <LLF_RND_GetFastestRosc+0x4>
   13a7c:	2000      	movs	r0, #0
   13a7e:	4770      	bx	lr
   13a80:	4800      	ldr	r0, [pc, #0]	; (13a84 <LLF_RND_GetFastestRosc+0x1c>)
   13a82:	4770      	bx	lr
   13a84:	00f10c31 	.word	0x00f10c31

00013a88 <LLF_RND_TurnOffTrng>:
   13a88:	2300      	movs	r3, #0
   13a8a:	4904      	ldr	r1, [pc, #16]	; (13a9c <LLF_RND_TurnOffTrng+0x14>)
   13a8c:	4a04      	ldr	r2, [pc, #16]	; (13aa0 <LLF_RND_TurnOffTrng+0x18>)
   13a8e:	600b      	str	r3, [r1, #0]
   13a90:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13a94:	6013      	str	r3, [r2, #0]
   13a96:	f7ff b8c9 	b.w	12c2c <CC_HalClearInterruptBit>
   13a9a:	bf00      	nop
   13a9c:	5084112c 	.word	0x5084112c
   13aa0:	508411c4 	.word	0x508411c4

00013aa4 <SetDataBuffersInfo>:
   13aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aa8:	2600      	movs	r6, #0
   13aaa:	b082      	sub	sp, #8
   13aac:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   13ab0:	f88d 6007 	strb.w	r6, [sp, #7]
   13ab4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   13ab6:	d327      	bcc.n	13b08 <SetDataBuffersInfo+0x64>
   13ab8:	460c      	mov	r4, r1
   13aba:	4404      	add	r4, r0
   13abc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   13ac0:	4605      	mov	r5, r0
   13ac2:	d821      	bhi.n	13b08 <SetDataBuffersInfo+0x64>
   13ac4:	4617      	mov	r7, r2
   13ac6:	4698      	mov	r8, r3
   13ac8:	2201      	movs	r2, #1
   13aca:	f10d 0307 	add.w	r3, sp, #7
   13ace:	f000 ff9f 	bl	14a10 <CC_PalDataBufferAttrGet>
   13ad2:	4604      	mov	r4, r0
   13ad4:	b9c0      	cbnz	r0, 13b08 <SetDataBuffersInfo+0x64>
   13ad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13ada:	603d      	str	r5, [r7, #0]
   13adc:	713b      	strb	r3, [r7, #4]
   13ade:	b1ae      	cbz	r6, 13b0c <SetDataBuffersInfo+0x68>
   13ae0:	f1b8 0f00 	cmp.w	r8, #0
   13ae4:	d009      	beq.n	13afa <SetDataBuffersInfo+0x56>
   13ae6:	4602      	mov	r2, r0
   13ae8:	9908      	ldr	r1, [sp, #32]
   13aea:	4640      	mov	r0, r8
   13aec:	f10d 0307 	add.w	r3, sp, #7
   13af0:	f000 ff8e 	bl	14a10 <CC_PalDataBufferAttrGet>
   13af4:	b940      	cbnz	r0, 13b08 <SetDataBuffersInfo+0x64>
   13af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13afa:	4620      	mov	r0, r4
   13afc:	f8c6 8000 	str.w	r8, [r6]
   13b00:	7133      	strb	r3, [r6, #4]
   13b02:	b002      	add	sp, #8
   13b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b08:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   13b0c:	4620      	mov	r0, r4
   13b0e:	b002      	add	sp, #8
   13b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013b14 <InitHashDrv>:
   13b14:	b1e8      	cbz	r0, 13b52 <InitHashDrv+0x3e>
   13b16:	b510      	push	{r4, lr}
   13b18:	6804      	ldr	r4, [r0, #0]
   13b1a:	2c01      	cmp	r4, #1
   13b1c:	d004      	beq.n	13b28 <InitHashDrv+0x14>
   13b1e:	2c02      	cmp	r4, #2
   13b20:	d010      	beq.n	13b44 <InitHashDrv+0x30>
   13b22:	b144      	cbz	r4, 13b36 <InitHashDrv+0x22>
   13b24:	480c      	ldr	r0, [pc, #48]	; (13b58 <InitHashDrv+0x44>)
   13b26:	bd10      	pop	{r4, pc}
   13b28:	2220      	movs	r2, #32
   13b2a:	490c      	ldr	r1, [pc, #48]	; (13b5c <InitHashDrv+0x48>)
   13b2c:	3008      	adds	r0, #8
   13b2e:	f7ff fedd 	bl	138ec <CC_PalMemCopyPlat>
   13b32:	2000      	movs	r0, #0
   13b34:	bd10      	pop	{r4, pc}
   13b36:	2214      	movs	r2, #20
   13b38:	4909      	ldr	r1, [pc, #36]	; (13b60 <InitHashDrv+0x4c>)
   13b3a:	3008      	adds	r0, #8
   13b3c:	f7ff fed6 	bl	138ec <CC_PalMemCopyPlat>
   13b40:	4620      	mov	r0, r4
   13b42:	bd10      	pop	{r4, pc}
   13b44:	2220      	movs	r2, #32
   13b46:	4907      	ldr	r1, [pc, #28]	; (13b64 <InitHashDrv+0x50>)
   13b48:	3008      	adds	r0, #8
   13b4a:	f7ff fecf 	bl	138ec <CC_PalMemCopyPlat>
   13b4e:	2000      	movs	r0, #0
   13b50:	bd10      	pop	{r4, pc}
   13b52:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   13b56:	4770      	bx	lr
   13b58:	00f30001 	.word	0x00f30001
   13b5c:	0001598c 	.word	0x0001598c
   13b60:	00015958 	.word	0x00015958
   13b64:	0001596c 	.word	0x0001596c

00013b68 <ProcessHashDrv>:
   13b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b6c:	2900      	cmp	r1, #0
   13b6e:	f000 80ef 	beq.w	13d50 <ProcessHashDrv+0x1e8>
   13b72:	4604      	mov	r4, r0
   13b74:	2800      	cmp	r0, #0
   13b76:	f000 80ef 	beq.w	13d58 <ProcessHashDrv+0x1f0>
   13b7a:	6803      	ldr	r3, [r0, #0]
   13b7c:	4617      	mov	r7, r2
   13b7e:	460e      	mov	r6, r1
   13b80:	2b00      	cmp	r3, #0
   13b82:	f000 80b9 	beq.w	13cf8 <ProcessHashDrv+0x190>
   13b86:	3b01      	subs	r3, #1
   13b88:	2b01      	cmp	r3, #1
   13b8a:	f200 80cd 	bhi.w	13d28 <ProcessHashDrv+0x1c0>
   13b8e:	f04f 31ff 	mov.w	r1, #4294967295
   13b92:	4873      	ldr	r0, [pc, #460]	; (13d60 <ProcessHashDrv+0x1f8>)
   13b94:	f04f 0802 	mov.w	r8, #2
   13b98:	f7ff f8ee 	bl	12d78 <CC_PalMutexLock>
   13b9c:	2800      	cmp	r0, #0
   13b9e:	f040 80b5 	bne.w	13d0c <ProcessHashDrv+0x1a4>
   13ba2:	2000      	movs	r0, #0
   13ba4:	f7ff f918 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   13ba8:	4605      	mov	r5, r0
   13baa:	2800      	cmp	r0, #0
   13bac:	f040 80b8 	bne.w	13d20 <ProcessHashDrv+0x1b8>
   13bb0:	4a6c      	ldr	r2, [pc, #432]	; (13d64 <ProcessHashDrv+0x1fc>)
   13bb2:	6813      	ldr	r3, [r2, #0]
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d1fc      	bne.n	13bb2 <ProcessHashDrv+0x4a>
   13bb8:	486b      	ldr	r0, [pc, #428]	; (13d68 <ProcessHashDrv+0x200>)
   13bba:	6803      	ldr	r3, [r0, #0]
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d1fc      	bne.n	13bba <ProcessHashDrv+0x52>
   13bc0:	f04f 30ff 	mov.w	r0, #4294967295
   13bc4:	f7ff f832 	bl	12c2c <CC_HalClearInterruptBit>
   13bc8:	4b68      	ldr	r3, [pc, #416]	; (13d6c <ProcessHashDrv+0x204>)
   13bca:	6818      	ldr	r0, [r3, #0]
   13bcc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   13bd0:	f7ff f83a 	bl	12c48 <CC_HalMaskInterrupt>
   13bd4:	2301      	movs	r3, #1
   13bd6:	2007      	movs	r0, #7
   13bd8:	4a65      	ldr	r2, [pc, #404]	; (13d70 <ProcessHashDrv+0x208>)
   13bda:	4966      	ldr	r1, [pc, #408]	; (13d74 <ProcessHashDrv+0x20c>)
   13bdc:	6013      	str	r3, [r2, #0]
   13bde:	6008      	str	r0, [r1, #0]
   13be0:	f842 3c54 	str.w	r3, [r2, #-84]
   13be4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   13be6:	4b64      	ldr	r3, [pc, #400]	; (13d78 <ProcessHashDrv+0x210>)
   13be8:	3a48      	subs	r2, #72	; 0x48
   13bea:	6019      	str	r1, [r3, #0]
   13bec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13bee:	6011      	str	r1, [r2, #0]
   13bf0:	f843 8c0c 	str.w	r8, [r3, #-12]
   13bf4:	6823      	ldr	r3, [r4, #0]
   13bf6:	b163      	cbz	r3, 13c12 <ProcessHashDrv+0xaa>
   13bf8:	3b01      	subs	r3, #1
   13bfa:	2b01      	cmp	r3, #1
   13bfc:	d818      	bhi.n	13c30 <ProcessHashDrv+0xc8>
   13bfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13c00:	4b5e      	ldr	r3, [pc, #376]	; (13d7c <ProcessHashDrv+0x214>)
   13c02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
   13c06:	6019      	str	r1, [r3, #0]
   13c08:	6a21      	ldr	r1, [r4, #32]
   13c0a:	6011      	str	r1, [r2, #0]
   13c0c:	69e2      	ldr	r2, [r4, #28]
   13c0e:	f843 2c08 	str.w	r2, [r3, #-8]
   13c12:	69a1      	ldr	r1, [r4, #24]
   13c14:	4b5a      	ldr	r3, [pc, #360]	; (13d80 <ProcessHashDrv+0x218>)
   13c16:	4a5b      	ldr	r2, [pc, #364]	; (13d84 <ProcessHashDrv+0x21c>)
   13c18:	6019      	str	r1, [r3, #0]
   13c1a:	6961      	ldr	r1, [r4, #20]
   13c1c:	6011      	str	r1, [r2, #0]
   13c1e:	6921      	ldr	r1, [r4, #16]
   13c20:	f843 1c08 	str.w	r1, [r3, #-8]
   13c24:	68e1      	ldr	r1, [r4, #12]
   13c26:	f842 1c08 	str.w	r1, [r2, #-8]
   13c2a:	68a2      	ldr	r2, [r4, #8]
   13c2c:	f843 2c10 	str.w	r2, [r3, #-16]
   13c30:	4a55      	ldr	r2, [pc, #340]	; (13d88 <ProcessHashDrv+0x220>)
   13c32:	6813      	ldr	r3, [r2, #0]
   13c34:	2b00      	cmp	r3, #0
   13c36:	d1fc      	bne.n	13c32 <ProcessHashDrv+0xca>
   13c38:	2f00      	cmp	r7, #0
   13c3a:	d059      	beq.n	13cf0 <ProcessHashDrv+0x188>
   13c3c:	6863      	ldr	r3, [r4, #4]
   13c3e:	2040      	movs	r0, #64	; 0x40
   13c40:	2b01      	cmp	r3, #1
   13c42:	bf04      	itt	eq
   13c44:	4a51      	ldreq	r2, [pc, #324]	; (13d8c <ProcessHashDrv+0x224>)
   13c46:	6013      	streq	r3, [r2, #0]
   13c48:	6831      	ldr	r1, [r6, #0]
   13c4a:	4a51      	ldr	r2, [pc, #324]	; (13d90 <ProcessHashDrv+0x228>)
   13c4c:	4b51      	ldr	r3, [pc, #324]	; (13d94 <ProcessHashDrv+0x22c>)
   13c4e:	6011      	str	r1, [r2, #0]
   13c50:	601f      	str	r7, [r3, #0]
   13c52:	f7fe ffff 	bl	12c54 <CC_HalWaitInterrupt>
   13c56:	4605      	mov	r5, r0
   13c58:	4a4b      	ldr	r2, [pc, #300]	; (13d88 <ProcessHashDrv+0x220>)
   13c5a:	6813      	ldr	r3, [r2, #0]
   13c5c:	2b00      	cmp	r3, #0
   13c5e:	d1fc      	bne.n	13c5a <ProcessHashDrv+0xf2>
   13c60:	4a41      	ldr	r2, [pc, #260]	; (13d68 <ProcessHashDrv+0x200>)
   13c62:	6813      	ldr	r3, [r2, #0]
   13c64:	2b00      	cmp	r3, #0
   13c66:	d1fc      	bne.n	13c62 <ProcessHashDrv+0xfa>
   13c68:	6823      	ldr	r3, [r4, #0]
   13c6a:	b15b      	cbz	r3, 13c84 <ProcessHashDrv+0x11c>
   13c6c:	3b01      	subs	r3, #1
   13c6e:	2b01      	cmp	r3, #1
   13c70:	d816      	bhi.n	13ca0 <ProcessHashDrv+0x138>
   13c72:	4b42      	ldr	r3, [pc, #264]	; (13d7c <ProcessHashDrv+0x214>)
   13c74:	4a48      	ldr	r2, [pc, #288]	; (13d98 <ProcessHashDrv+0x230>)
   13c76:	6819      	ldr	r1, [r3, #0]
   13c78:	3b08      	subs	r3, #8
   13c7a:	6261      	str	r1, [r4, #36]	; 0x24
   13c7c:	6812      	ldr	r2, [r2, #0]
   13c7e:	6222      	str	r2, [r4, #32]
   13c80:	681b      	ldr	r3, [r3, #0]
   13c82:	61e3      	str	r3, [r4, #28]
   13c84:	4b3e      	ldr	r3, [pc, #248]	; (13d80 <ProcessHashDrv+0x218>)
   13c86:	4a3f      	ldr	r2, [pc, #252]	; (13d84 <ProcessHashDrv+0x21c>)
   13c88:	6819      	ldr	r1, [r3, #0]
   13c8a:	3a08      	subs	r2, #8
   13c8c:	61a1      	str	r1, [r4, #24]
   13c8e:	6891      	ldr	r1, [r2, #8]
   13c90:	3b10      	subs	r3, #16
   13c92:	6161      	str	r1, [r4, #20]
   13c94:	6899      	ldr	r1, [r3, #8]
   13c96:	6121      	str	r1, [r4, #16]
   13c98:	6812      	ldr	r2, [r2, #0]
   13c9a:	60e2      	str	r2, [r4, #12]
   13c9c:	681b      	ldr	r3, [r3, #0]
   13c9e:	60a3      	str	r3, [r4, #8]
   13ca0:	2101      	movs	r1, #1
   13ca2:	2300      	movs	r3, #0
   13ca4:	4834      	ldr	r0, [pc, #208]	; (13d78 <ProcessHashDrv+0x210>)
   13ca6:	4a3d      	ldr	r2, [pc, #244]	; (13d9c <ProcessHashDrv+0x234>)
   13ca8:	6800      	ldr	r0, [r0, #0]
   13caa:	64a0      	str	r0, [r4, #72]	; 0x48
   13cac:	6810      	ldr	r0, [r2, #0]
   13cae:	64e0      	str	r0, [r4, #76]	; 0x4c
   13cb0:	f842 1c0c 	str.w	r1, [r2, #-12]
   13cb4:	4835      	ldr	r0, [pc, #212]	; (13d8c <ProcessHashDrv+0x224>)
   13cb6:	493a      	ldr	r1, [pc, #232]	; (13da0 <ProcessHashDrv+0x238>)
   13cb8:	6003      	str	r3, [r0, #0]
   13cba:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   13cbe:	600b      	str	r3, [r1, #0]
   13cc0:	6813      	ldr	r3, [r2, #0]
   13cc2:	2b00      	cmp	r3, #0
   13cc4:	d1fc      	bne.n	13cc0 <ProcessHashDrv+0x158>
   13cc6:	4a2a      	ldr	r2, [pc, #168]	; (13d70 <ProcessHashDrv+0x208>)
   13cc8:	6013      	str	r3, [r2, #0]
   13cca:	2d00      	cmp	r5, #0
   13ccc:	d13a      	bne.n	13d44 <ProcessHashDrv+0x1dc>
   13cce:	4b27      	ldr	r3, [pc, #156]	; (13d6c <ProcessHashDrv+0x204>)
   13cd0:	6818      	ldr	r0, [r3, #0]
   13cd2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   13cd6:	f7fe ffb7 	bl	12c48 <CC_HalMaskInterrupt>
   13cda:	2001      	movs	r0, #1
   13cdc:	f7ff f87c 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   13ce0:	bb60      	cbnz	r0, 13d3c <ProcessHashDrv+0x1d4>
   13ce2:	481f      	ldr	r0, [pc, #124]	; (13d60 <ProcessHashDrv+0x1f8>)
   13ce4:	f7ff f850 	bl	12d88 <CC_PalMutexUnlock>
   13ce8:	bb10      	cbnz	r0, 13d30 <ProcessHashDrv+0x1c8>
   13cea:	4628      	mov	r0, r5
   13cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cf0:	2204      	movs	r2, #4
   13cf2:	4b2b      	ldr	r3, [pc, #172]	; (13da0 <ProcessHashDrv+0x238>)
   13cf4:	601a      	str	r2, [r3, #0]
   13cf6:	e7af      	b.n	13c58 <ProcessHashDrv+0xf0>
   13cf8:	f04f 31ff 	mov.w	r1, #4294967295
   13cfc:	4818      	ldr	r0, [pc, #96]	; (13d60 <ProcessHashDrv+0x1f8>)
   13cfe:	f04f 0801 	mov.w	r8, #1
   13d02:	f7ff f839 	bl	12d78 <CC_PalMutexLock>
   13d06:	2800      	cmp	r0, #0
   13d08:	f43f af4b 	beq.w	13ba2 <ProcessHashDrv+0x3a>
   13d0c:	4825      	ldr	r0, [pc, #148]	; (13da4 <ProcessHashDrv+0x23c>)
   13d0e:	f7fe f8e9 	bl	11ee4 <CC_PalAbort>
   13d12:	2000      	movs	r0, #0
   13d14:	f7ff f860 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   13d18:	4605      	mov	r5, r0
   13d1a:	2800      	cmp	r0, #0
   13d1c:	f43f af48 	beq.w	13bb0 <ProcessHashDrv+0x48>
   13d20:	4821      	ldr	r0, [pc, #132]	; (13da8 <ProcessHashDrv+0x240>)
   13d22:	f7fe f8df 	bl	11ee4 <CC_PalAbort>
   13d26:	e743      	b.n	13bb0 <ProcessHashDrv+0x48>
   13d28:	4d20      	ldr	r5, [pc, #128]	; (13dac <ProcessHashDrv+0x244>)
   13d2a:	4628      	mov	r0, r5
   13d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d30:	481f      	ldr	r0, [pc, #124]	; (13db0 <ProcessHashDrv+0x248>)
   13d32:	f7fe f8d7 	bl	11ee4 <CC_PalAbort>
   13d36:	4628      	mov	r0, r5
   13d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d3c:	481d      	ldr	r0, [pc, #116]	; (13db4 <ProcessHashDrv+0x24c>)
   13d3e:	f7fe f8d1 	bl	11ee4 <CC_PalAbort>
   13d42:	e7ce      	b.n	13ce2 <ProcessHashDrv+0x17a>
   13d44:	2110      	movs	r1, #16
   13d46:	f104 0008 	add.w	r0, r4, #8
   13d4a:	f7ff fdd3 	bl	138f4 <CC_PalMemSetZeroPlat>
   13d4e:	e7be      	b.n	13cce <ProcessHashDrv+0x166>
   13d50:	4d19      	ldr	r5, [pc, #100]	; (13db8 <ProcessHashDrv+0x250>)
   13d52:	4628      	mov	r0, r5
   13d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d58:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   13d5c:	e7c5      	b.n	13cea <ProcessHashDrv+0x182>
   13d5e:	bf00      	nop
   13d60:	200000e4 	.word	0x200000e4
   13d64:	5084191c 	.word	0x5084191c
   13d68:	50841c20 	.word	0x50841c20
   13d6c:	50841a04 	.word	0x50841a04
   13d70:	50841818 	.word	0x50841818
   13d74:	50841900 	.word	0x50841900
   13d78:	508417cc 	.word	0x508417cc
   13d7c:	5084165c 	.word	0x5084165c
   13d80:	50841650 	.word	0x50841650
   13d84:	5084164c 	.word	0x5084164c
   13d88:	50841910 	.word	0x50841910
   13d8c:	50841684 	.word	0x50841684
   13d90:	50841c28 	.word	0x50841c28
   13d94:	50841c2c 	.word	0x50841c2c
   13d98:	50841658 	.word	0x50841658
   13d9c:	508417d0 	.word	0x508417d0
   13da0:	508417c8 	.word	0x508417c8
   13da4:	0001588c 	.word	0x0001588c
   13da8:	000158a4 	.word	0x000158a4
   13dac:	00f30001 	.word	0x00f30001
   13db0:	000158e4 	.word	0x000158e4
   13db4:	000158c4 	.word	0x000158c4
   13db8:	00f30003 	.word	0x00f30003

00013dbc <FinishHashDrv>:
   13dbc:	2800      	cmp	r0, #0
   13dbe:	d03a      	beq.n	13e36 <FinishHashDrv+0x7a>
   13dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dc4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   13dc8:	fa92 f882 	rev.w	r8, r2
   13dcc:	fa93 fe83 	rev.w	lr, r3
   13dd0:	6a02      	ldr	r2, [r0, #32]
   13dd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13dd4:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
   13dd8:	ba12      	rev	r2, r2
   13dda:	ba24      	rev	r4, r4
   13ddc:	ba1b      	rev	r3, r3
   13dde:	6104      	str	r4, [r0, #16]
   13de0:	6202      	str	r2, [r0, #32]
   13de2:	6a84      	ldr	r4, [r0, #40]	; 0x28
   13de4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   13de6:	6243      	str	r3, [r0, #36]	; 0x24
   13de8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   13dea:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
   13dee:	ba09      	rev	r1, r1
   13df0:	ba36      	rev	r6, r6
   13df2:	ba2d      	rev	r5, r5
   13df4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   13df6:	6086      	str	r6, [r0, #8]
   13df8:	60c5      	str	r5, [r0, #12]
   13dfa:	6b06      	ldr	r6, [r0, #48]	; 0x30
   13dfc:	6b45      	ldr	r5, [r0, #52]	; 0x34
   13dfe:	6141      	str	r1, [r0, #20]
   13e00:	fa94 fc84 	rev.w	ip, r4
   13e04:	ba19      	rev	r1, r3
   13e06:	ba14      	rev	r4, r2
   13e08:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13e0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
   13e0c:	ba3f      	rev	r7, r7
   13e0e:	ba36      	rev	r6, r6
   13e10:	ba2d      	rev	r5, r5
   13e12:	ba12      	rev	r2, r2
   13e14:	ba1b      	rev	r3, r3
   13e16:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   13e1a:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   13e1e:	f8c0 8018 	str.w	r8, [r0, #24]
   13e22:	f8c0 e01c 	str.w	lr, [r0, #28]
   13e26:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   13e2a:	62c7      	str	r7, [r0, #44]	; 0x2c
   13e2c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   13e30:	2000      	movs	r0, #0
   13e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e36:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   13e3a:	4770      	bx	lr

00013e3c <LoadAesKey>:
   13e3c:	2800      	cmp	r0, #0
   13e3e:	d060      	beq.n	13f02 <LoadAesKey+0xc6>
   13e40:	b538      	push	{r3, r4, r5, lr}
   13e42:	4604      	mov	r4, r0
   13e44:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   13e48:	2802      	cmp	r0, #2
   13e4a:	d016      	beq.n	13e7a <LoadAesKey+0x3e>
   13e4c:	2803      	cmp	r0, #3
   13e4e:	d03c      	beq.n	13eca <LoadAesKey+0x8e>
   13e50:	2800      	cmp	r0, #0
   13e52:	d02f      	beq.n	13eb4 <LoadAesKey+0x78>
   13e54:	482c      	ldr	r0, [pc, #176]	; (13f08 <LoadAesKey+0xcc>)
   13e56:	4d2d      	ldr	r5, [pc, #180]	; (13f0c <LoadAesKey+0xd0>)
   13e58:	682a      	ldr	r2, [r5, #0]
   13e5a:	4b2d      	ldr	r3, [pc, #180]	; (13f10 <LoadAesKey+0xd4>)
   13e5c:	6812      	ldr	r2, [r2, #0]
   13e5e:	492d      	ldr	r1, [pc, #180]	; (13f14 <LoadAesKey+0xd8>)
   13e60:	601a      	str	r2, [r3, #0]
   13e62:	682b      	ldr	r3, [r5, #0]
   13e64:	4a2c      	ldr	r2, [pc, #176]	; (13f18 <LoadAesKey+0xdc>)
   13e66:	685c      	ldr	r4, [r3, #4]
   13e68:	4b2c      	ldr	r3, [pc, #176]	; (13f1c <LoadAesKey+0xe0>)
   13e6a:	600c      	str	r4, [r1, #0]
   13e6c:	6829      	ldr	r1, [r5, #0]
   13e6e:	6889      	ldr	r1, [r1, #8]
   13e70:	6011      	str	r1, [r2, #0]
   13e72:	682a      	ldr	r2, [r5, #0]
   13e74:	68d2      	ldr	r2, [r2, #12]
   13e76:	601a      	str	r2, [r3, #0]
   13e78:	bd38      	pop	{r3, r4, r5, pc}
   13e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13e7c:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13e7e:	f000 fbdd 	bl	1463c <kmu_validate_slot_and_size_no_kdr>
   13e82:	4d22      	ldr	r5, [pc, #136]	; (13f0c <LoadAesKey+0xd0>)
   13e84:	2800      	cmp	r0, #0
   13e86:	d1e7      	bne.n	13e58 <LoadAesKey+0x1c>
   13e88:	682a      	ldr	r2, [r5, #0]
   13e8a:	4b21      	ldr	r3, [pc, #132]	; (13f10 <LoadAesKey+0xd4>)
   13e8c:	6810      	ldr	r0, [r2, #0]
   13e8e:	4921      	ldr	r1, [pc, #132]	; (13f14 <LoadAesKey+0xd8>)
   13e90:	6018      	str	r0, [r3, #0]
   13e92:	6828      	ldr	r0, [r5, #0]
   13e94:	4a20      	ldr	r2, [pc, #128]	; (13f18 <LoadAesKey+0xdc>)
   13e96:	6840      	ldr	r0, [r0, #4]
   13e98:	6008      	str	r0, [r1, #0]
   13e9a:	6829      	ldr	r1, [r5, #0]
   13e9c:	6889      	ldr	r1, [r1, #8]
   13e9e:	6011      	str	r1, [r2, #0]
   13ea0:	682a      	ldr	r2, [r5, #0]
   13ea2:	68d2      	ldr	r2, [r2, #12]
   13ea4:	60da      	str	r2, [r3, #12]
   13ea6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13ea8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13eaa:	f000 fc3b 	bl	14724 <kmu_load_key_aes>
   13eae:	2800      	cmp	r0, #0
   13eb0:	d025      	beq.n	13efe <LoadAesKey+0xc2>
   13eb2:	e7d1      	b.n	13e58 <LoadAesKey+0x1c>
   13eb4:	6921      	ldr	r1, [r4, #16]
   13eb6:	4a16      	ldr	r2, [pc, #88]	; (13f10 <LoadAesKey+0xd4>)
   13eb8:	4b16      	ldr	r3, [pc, #88]	; (13f14 <LoadAesKey+0xd8>)
   13eba:	6011      	str	r1, [r2, #0]
   13ebc:	6961      	ldr	r1, [r4, #20]
   13ebe:	6019      	str	r1, [r3, #0]
   13ec0:	69a1      	ldr	r1, [r4, #24]
   13ec2:	6091      	str	r1, [r2, #8]
   13ec4:	69e2      	ldr	r2, [r4, #28]
   13ec6:	609a      	str	r2, [r3, #8]
   13ec8:	bd38      	pop	{r3, r4, r5, pc}
   13eca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13ecc:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13ece:	f000 fbf9 	bl	146c4 <kmu_validate_kdr_slot_and_size>
   13ed2:	4d0e      	ldr	r5, [pc, #56]	; (13f0c <LoadAesKey+0xd0>)
   13ed4:	2800      	cmp	r0, #0
   13ed6:	d1bf      	bne.n	13e58 <LoadAesKey+0x1c>
   13ed8:	682a      	ldr	r2, [r5, #0]
   13eda:	4b0d      	ldr	r3, [pc, #52]	; (13f10 <LoadAesKey+0xd4>)
   13edc:	6810      	ldr	r0, [r2, #0]
   13ede:	490d      	ldr	r1, [pc, #52]	; (13f14 <LoadAesKey+0xd8>)
   13ee0:	6018      	str	r0, [r3, #0]
   13ee2:	6828      	ldr	r0, [r5, #0]
   13ee4:	4a0c      	ldr	r2, [pc, #48]	; (13f18 <LoadAesKey+0xdc>)
   13ee6:	6840      	ldr	r0, [r0, #4]
   13ee8:	6008      	str	r0, [r1, #0]
   13eea:	6829      	ldr	r1, [r5, #0]
   13eec:	6889      	ldr	r1, [r1, #8]
   13eee:	6011      	str	r1, [r2, #0]
   13ef0:	682a      	ldr	r2, [r5, #0]
   13ef2:	68d2      	ldr	r2, [r2, #12]
   13ef4:	60da      	str	r2, [r3, #12]
   13ef6:	f000 fc09 	bl	1470c <kmu_use_kdr_key>
   13efa:	2800      	cmp	r0, #0
   13efc:	d1ac      	bne.n	13e58 <LoadAesKey+0x1c>
   13efe:	2000      	movs	r0, #0
   13f00:	bd38      	pop	{r3, r4, r5, pc}
   13f02:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   13f06:	4770      	bx	lr
   13f08:	00f10009 	.word	0x00f10009
   13f0c:	200000d4 	.word	0x200000d4
   13f10:	50841400 	.word	0x50841400
   13f14:	50841404 	.word	0x50841404
   13f18:	50841408 	.word	0x50841408
   13f1c:	5084140c 	.word	0x5084140c

00013f20 <InitAes.part.0>:
   13f20:	b510      	push	{r4, lr}
   13f22:	4604      	mov	r4, r0
   13f24:	4a31      	ldr	r2, [pc, #196]	; (13fec <InitAes.part.0+0xcc>)
   13f26:	6813      	ldr	r3, [r2, #0]
   13f28:	2b00      	cmp	r3, #0
   13f2a:	d1fc      	bne.n	13f26 <InitAes.part.0+0x6>
   13f2c:	4a30      	ldr	r2, [pc, #192]	; (13ff0 <InitAes.part.0+0xd0>)
   13f2e:	6813      	ldr	r3, [r2, #0]
   13f30:	2b00      	cmp	r3, #0
   13f32:	d1fc      	bne.n	13f2e <InitAes.part.0+0xe>
   13f34:	4a2f      	ldr	r2, [pc, #188]	; (13ff4 <InitAes.part.0+0xd4>)
   13f36:	6813      	ldr	r3, [r2, #0]
   13f38:	2b00      	cmp	r3, #0
   13f3a:	d1fc      	bne.n	13f36 <InitAes.part.0+0x16>
   13f3c:	4a2e      	ldr	r2, [pc, #184]	; (13ff8 <InitAes.part.0+0xd8>)
   13f3e:	6813      	ldr	r3, [r2, #0]
   13f40:	2b00      	cmp	r3, #0
   13f42:	d1fc      	bne.n	13f3e <InitAes.part.0+0x1e>
   13f44:	4a2d      	ldr	r2, [pc, #180]	; (13ffc <InitAes.part.0+0xdc>)
   13f46:	6813      	ldr	r3, [r2, #0]
   13f48:	2b00      	cmp	r3, #0
   13f4a:	d1fc      	bne.n	13f46 <InitAes.part.0+0x26>
   13f4c:	4a2c      	ldr	r2, [pc, #176]	; (14000 <InitAes.part.0+0xe0>)
   13f4e:	6813      	ldr	r3, [r2, #0]
   13f50:	2b00      	cmp	r3, #0
   13f52:	d1fc      	bne.n	13f4e <InitAes.part.0+0x2e>
   13f54:	f04f 30ff 	mov.w	r0, #4294967295
   13f58:	f7fe fe68 	bl	12c2c <CC_HalClearInterruptBit>
   13f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13f5e:	f023 0304 	bic.w	r3, r3, #4
   13f62:	2b03      	cmp	r3, #3
   13f64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   13f66:	d036      	beq.n	13fd6 <InitAes.part.0+0xb6>
   13f68:	2b01      	cmp	r3, #1
   13f6a:	4b26      	ldr	r3, [pc, #152]	; (14004 <InitAes.part.0+0xe4>)
   13f6c:	6818      	ldr	r0, [r3, #0]
   13f6e:	bf0c      	ite	eq
   13f70:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   13f74:	f020 0020 	bicne.w	r0, r0, #32
   13f78:	f7fe fe66 	bl	12c48 <CC_HalMaskInterrupt>
   13f7c:	2101      	movs	r1, #1
   13f7e:	4b22      	ldr	r3, [pc, #136]	; (14008 <InitAes.part.0+0xe8>)
   13f80:	4a1a      	ldr	r2, [pc, #104]	; (13fec <InitAes.part.0+0xcc>)
   13f82:	6019      	str	r1, [r3, #0]
   13f84:	6813      	ldr	r3, [r2, #0]
   13f86:	2b00      	cmp	r3, #0
   13f88:	d1fc      	bne.n	13f84 <InitAes.part.0+0x64>
   13f8a:	4a19      	ldr	r2, [pc, #100]	; (13ff0 <InitAes.part.0+0xd0>)
   13f8c:	6813      	ldr	r3, [r2, #0]
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d1fc      	bne.n	13f8c <InitAes.part.0+0x6c>
   13f92:	491e      	ldr	r1, [pc, #120]	; (1400c <InitAes.part.0+0xec>)
   13f94:	4a15      	ldr	r2, [pc, #84]	; (13fec <InitAes.part.0+0xcc>)
   13f96:	600b      	str	r3, [r1, #0]
   13f98:	6813      	ldr	r3, [r2, #0]
   13f9a:	2b00      	cmp	r3, #0
   13f9c:	d1fc      	bne.n	13f98 <InitAes.part.0+0x78>
   13f9e:	4a14      	ldr	r2, [pc, #80]	; (13ff0 <InitAes.part.0+0xd0>)
   13fa0:	6813      	ldr	r3, [r2, #0]
   13fa2:	2b00      	cmp	r3, #0
   13fa4:	d1fc      	bne.n	13fa0 <InitAes.part.0+0x80>
   13fa6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   13fa8:	f022 0104 	bic.w	r1, r2, #4
   13fac:	2903      	cmp	r1, #3
   13fae:	bf18      	it	ne
   13fb0:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   13fb2:	ea4f 0282 	mov.w	r2, r2, lsl #2
   13fb6:	bf18      	it	ne
   13fb8:	f003 0301 	andne.w	r3, r3, #1
   13fbc:	4914      	ldr	r1, [pc, #80]	; (14010 <InitAes.part.0+0xf0>)
   13fbe:	f002 021c 	and.w	r2, r2, #28
   13fc2:	4313      	orrs	r3, r2
   13fc4:	600b      	str	r3, [r1, #0]
   13fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13fc8:	2b07      	cmp	r3, #7
   13fca:	d102      	bne.n	13fd2 <InitAes.part.0+0xb2>
   13fcc:	2201      	movs	r2, #1
   13fce:	4b11      	ldr	r3, [pc, #68]	; (14014 <InitAes.part.0+0xf4>)
   13fd0:	601a      	str	r2, [r3, #0]
   13fd2:	2000      	movs	r0, #0
   13fd4:	bd10      	pop	{r4, pc}
   13fd6:	2b01      	cmp	r3, #1
   13fd8:	4b0a      	ldr	r3, [pc, #40]	; (14004 <InitAes.part.0+0xe4>)
   13fda:	6818      	ldr	r0, [r3, #0]
   13fdc:	bf0c      	ite	eq
   13fde:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   13fe2:	f020 0010 	bicne.w	r0, r0, #16
   13fe6:	f7fe fe2f 	bl	12c48 <CC_HalMaskInterrupt>
   13fea:	e7c7      	b.n	13f7c <InitAes.part.0+0x5c>
   13fec:	50841910 	.word	0x50841910
   13ff0:	50841470 	.word	0x50841470
   13ff4:	50841d20 	.word	0x50841d20
   13ff8:	50841c20 	.word	0x50841c20
   13ffc:	50841d38 	.word	0x50841d38
   14000:	50841c38 	.word	0x50841c38
   14004:	50841a04 	.word	0x50841a04
   14008:	50841900 	.word	0x50841900
   1400c:	508414bc 	.word	0x508414bc
   14010:	508414c0 	.word	0x508414c0
   14014:	5084147c 	.word	0x5084147c

00014018 <ProcessAesDrv>:
   14018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1401c:	b087      	sub	sp, #28
   1401e:	2900      	cmp	r1, #0
   14020:	f000 80a5 	beq.w	1416e <ProcessAesDrv+0x156>
   14024:	4616      	mov	r6, r2
   14026:	2a00      	cmp	r2, #0
   14028:	f000 80a1 	beq.w	1416e <ProcessAesDrv+0x156>
   1402c:	4604      	mov	r4, r0
   1402e:	2800      	cmp	r0, #0
   14030:	f000 8141 	beq.w	142b6 <ProcessAesDrv+0x29e>
   14034:	461f      	mov	r7, r3
   14036:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14038:	460d      	mov	r5, r1
   1403a:	2b00      	cmp	r3, #0
   1403c:	d150      	bne.n	140e0 <ProcessAesDrv+0xc8>
   1403e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   14042:	d252      	bcs.n	140ea <ProcessAesDrv+0xd2>
   14044:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   14048:	2b04      	cmp	r3, #4
   1404a:	f000 810b 	beq.w	14264 <ProcessAesDrv+0x24c>
   1404e:	f04f 0800 	mov.w	r8, #0
   14052:	f04f 31ff 	mov.w	r1, #4294967295
   14056:	48a9      	ldr	r0, [pc, #676]	; (142fc <ProcessAesDrv+0x2e4>)
   14058:	f7fe fe8e 	bl	12d78 <CC_PalMutexLock>
   1405c:	2800      	cmp	r0, #0
   1405e:	f040 80e0 	bne.w	14222 <ProcessAesDrv+0x20a>
   14062:	2000      	movs	r0, #0
   14064:	f7fe feb8 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   14068:	2800      	cmp	r0, #0
   1406a:	f040 80e3 	bne.w	14234 <ProcessAesDrv+0x21c>
   1406e:	2101      	movs	r1, #1
   14070:	4ba3      	ldr	r3, [pc, #652]	; (14300 <ProcessAesDrv+0x2e8>)
   14072:	4aa4      	ldr	r2, [pc, #656]	; (14304 <ProcessAesDrv+0x2ec>)
   14074:	6019      	str	r1, [r3, #0]
   14076:	6813      	ldr	r3, [r2, #0]
   14078:	2b00      	cmp	r3, #0
   1407a:	d1fc      	bne.n	14076 <ProcessAesDrv+0x5e>
   1407c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1407e:	2b03      	cmp	r3, #3
   14080:	dc39      	bgt.n	140f6 <ProcessAesDrv+0xde>
   14082:	2b00      	cmp	r3, #0
   14084:	da3a      	bge.n	140fc <ProcessAesDrv+0xe4>
   14086:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 14350 <ProcessAesDrv+0x338>
   1408a:	4a9e      	ldr	r2, [pc, #632]	; (14304 <ProcessAesDrv+0x2ec>)
   1408c:	6813      	ldr	r3, [r2, #0]
   1408e:	2b00      	cmp	r3, #0
   14090:	d1fc      	bne.n	1408c <ProcessAesDrv+0x74>
   14092:	f1b8 0f00 	cmp.w	r8, #0
   14096:	f040 80dc 	bne.w	14252 <ProcessAesDrv+0x23a>
   1409a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1409c:	f023 0304 	bic.w	r3, r3, #4
   140a0:	2b03      	cmp	r3, #3
   140a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   140a4:	d058      	beq.n	14158 <ProcessAesDrv+0x140>
   140a6:	2b01      	cmp	r3, #1
   140a8:	4b97      	ldr	r3, [pc, #604]	; (14308 <ProcessAesDrv+0x2f0>)
   140aa:	6818      	ldr	r0, [r3, #0]
   140ac:	bf0c      	ite	eq
   140ae:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   140b2:	f040 0020 	orrne.w	r0, r0, #32
   140b6:	f7fe fdc7 	bl	12c48 <CC_HalMaskInterrupt>
   140ba:	2200      	movs	r2, #0
   140bc:	4b90      	ldr	r3, [pc, #576]	; (14300 <ProcessAesDrv+0x2e8>)
   140be:	2001      	movs	r0, #1
   140c0:	601a      	str	r2, [r3, #0]
   140c2:	f7fe fe89 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   140c6:	2800      	cmp	r0, #0
   140c8:	f040 80bf 	bne.w	1424a <ProcessAesDrv+0x232>
   140cc:	488b      	ldr	r0, [pc, #556]	; (142fc <ProcessAesDrv+0x2e4>)
   140ce:	f7fe fe5b 	bl	12d88 <CC_PalMutexUnlock>
   140d2:	2800      	cmp	r0, #0
   140d4:	f040 80b2 	bne.w	1423c <ProcessAesDrv+0x224>
   140d8:	4648      	mov	r0, r9
   140da:	b007      	add	sp, #28
   140dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e0:	2b01      	cmp	r3, #1
   140e2:	d1af      	bne.n	14044 <ProcessAesDrv+0x2c>
   140e4:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   140e8:	d3ac      	bcc.n	14044 <ProcessAesDrv+0x2c>
   140ea:	f8df 9268 	ldr.w	r9, [pc, #616]	; 14354 <ProcessAesDrv+0x33c>
   140ee:	4648      	mov	r0, r9
   140f0:	b007      	add	sp, #28
   140f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f6:	3b06      	subs	r3, #6
   140f8:	2b01      	cmp	r3, #1
   140fa:	d8c4      	bhi.n	14086 <ProcessAesDrv+0x6e>
   140fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   140fe:	2b01      	cmp	r3, #1
   14100:	f200 80d6 	bhi.w	142b0 <ProcessAesDrv+0x298>
   14104:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14106:	2b01      	cmp	r3, #1
   14108:	d837      	bhi.n	1417a <ProcessAesDrv+0x162>
   1410a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1410c:	2b01      	cmp	r3, #1
   1410e:	f200 8134 	bhi.w	1437a <ProcessAesDrv+0x362>
   14112:	4620      	mov	r0, r4
   14114:	f7ff ff04 	bl	13f20 <InitAes.part.0>
   14118:	4681      	mov	r9, r0
   1411a:	2800      	cmp	r0, #0
   1411c:	d1b5      	bne.n	1408a <ProcessAesDrv+0x72>
   1411e:	4620      	mov	r0, r4
   14120:	f7ff fe8c 	bl	13e3c <LoadAesKey>
   14124:	4681      	mov	r9, r0
   14126:	2800      	cmp	r0, #0
   14128:	d1af      	bne.n	1408a <ProcessAesDrv+0x72>
   1412a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1412c:	2b07      	cmp	r3, #7
   1412e:	d8aa      	bhi.n	14086 <ProcessAesDrv+0x6e>
   14130:	a201      	add	r2, pc, #4	; (adr r2, 14138 <ProcessAesDrv+0x120>)
   14132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14136:	bf00      	nop
   14138:	00014197 	.word	0x00014197
   1413c:	00014181 	.word	0x00014181
   14140:	000142f3 	.word	0x000142f3
   14144:	00014181 	.word	0x00014181
   14148:	00014087 	.word	0x00014087
   1414c:	00014087 	.word	0x00014087
   14150:	000142f3 	.word	0x000142f3
   14154:	00014181 	.word	0x00014181
   14158:	2b01      	cmp	r3, #1
   1415a:	4b6b      	ldr	r3, [pc, #428]	; (14308 <ProcessAesDrv+0x2f0>)
   1415c:	6818      	ldr	r0, [r3, #0]
   1415e:	bf0c      	ite	eq
   14160:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   14164:	f040 0010 	orrne.w	r0, r0, #16
   14168:	f7fe fd6e 	bl	12c48 <CC_HalMaskInterrupt>
   1416c:	e7a5      	b.n	140ba <ProcessAesDrv+0xa2>
   1416e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 14358 <ProcessAesDrv+0x340>
   14172:	4648      	mov	r0, r9
   14174:	b007      	add	sp, #28
   14176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1417a:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1435c <ProcessAesDrv+0x344>
   1417e:	e784      	b.n	1408a <ProcessAesDrv+0x72>
   14180:	6821      	ldr	r1, [r4, #0]
   14182:	4a62      	ldr	r2, [pc, #392]	; (1430c <ProcessAesDrv+0x2f4>)
   14184:	4b62      	ldr	r3, [pc, #392]	; (14310 <ProcessAesDrv+0x2f8>)
   14186:	6011      	str	r1, [r2, #0]
   14188:	6861      	ldr	r1, [r4, #4]
   1418a:	6019      	str	r1, [r3, #0]
   1418c:	68a1      	ldr	r1, [r4, #8]
   1418e:	6091      	str	r1, [r2, #8]
   14190:	68e2      	ldr	r2, [r4, #12]
   14192:	609a      	str	r2, [r3, #8]
   14194:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14196:	f023 0304 	bic.w	r3, r3, #4
   1419a:	2b03      	cmp	r3, #3
   1419c:	682a      	ldr	r2, [r5, #0]
   1419e:	d009      	beq.n	141b4 <ProcessAesDrv+0x19c>
   141a0:	6e21      	ldr	r1, [r4, #96]	; 0x60
   141a2:	6833      	ldr	r3, [r6, #0]
   141a4:	2901      	cmp	r1, #1
   141a6:	bf07      	ittee	eq
   141a8:	485a      	ldreq	r0, [pc, #360]	; (14314 <ProcessAesDrv+0x2fc>)
   141aa:	495b      	ldreq	r1, [pc, #364]	; (14318 <ProcessAesDrv+0x300>)
   141ac:	485b      	ldrne	r0, [pc, #364]	; (1431c <ProcessAesDrv+0x304>)
   141ae:	495c      	ldrne	r1, [pc, #368]	; (14320 <ProcessAesDrv+0x308>)
   141b0:	6003      	str	r3, [r0, #0]
   141b2:	600f      	str	r7, [r1, #0]
   141b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   141b6:	2b01      	cmp	r3, #1
   141b8:	bf0b      	itete	eq
   141ba:	4b5a      	ldreq	r3, [pc, #360]	; (14324 <ProcessAesDrv+0x30c>)
   141bc:	4b5a      	ldrne	r3, [pc, #360]	; (14328 <ProcessAesDrv+0x310>)
   141be:	495b      	ldreq	r1, [pc, #364]	; (1432c <ProcessAesDrv+0x314>)
   141c0:	495b      	ldrne	r1, [pc, #364]	; (14330 <ProcessAesDrv+0x318>)
   141c2:	600a      	str	r2, [r1, #0]
   141c4:	601f      	str	r7, [r3, #0]
   141c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   141c8:	f023 0304 	bic.w	r3, r3, #4
   141cc:	2b03      	cmp	r3, #3
   141ce:	d075      	beq.n	142bc <ProcessAesDrv+0x2a4>
   141d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   141d2:	2b01      	cmp	r3, #1
   141d4:	bf0c      	ite	eq
   141d6:	2080      	moveq	r0, #128	; 0x80
   141d8:	2020      	movne	r0, #32
   141da:	f7fe fd3b 	bl	12c54 <CC_HalWaitInterrupt>
   141de:	4681      	mov	r9, r0
   141e0:	2800      	cmp	r0, #0
   141e2:	f47f af52 	bne.w	1408a <ProcessAesDrv+0x72>
   141e6:	4b47      	ldr	r3, [pc, #284]	; (14304 <ProcessAesDrv+0x2ec>)
   141e8:	681a      	ldr	r2, [r3, #0]
   141ea:	2a00      	cmp	r2, #0
   141ec:	d1fc      	bne.n	141e8 <ProcessAesDrv+0x1d0>
   141ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   141f0:	4691      	mov	r9, r2
   141f2:	3b01      	subs	r3, #1
   141f4:	2b06      	cmp	r3, #6
   141f6:	d811      	bhi.n	1421c <ProcessAesDrv+0x204>
   141f8:	e8df f003 	tbb	[pc, r3]
   141fc:	1004bc04 	.word	0x1004bc04
   14200:	bc10      	.short	0xbc10
   14202:	04          	.byte	0x04
   14203:	00          	.byte	0x00
   14204:	4a41      	ldr	r2, [pc, #260]	; (1430c <ProcessAesDrv+0x2f4>)
   14206:	4b42      	ldr	r3, [pc, #264]	; (14310 <ProcessAesDrv+0x2f8>)
   14208:	6811      	ldr	r1, [r2, #0]
   1420a:	3208      	adds	r2, #8
   1420c:	6021      	str	r1, [r4, #0]
   1420e:	6819      	ldr	r1, [r3, #0]
   14210:	3308      	adds	r3, #8
   14212:	6061      	str	r1, [r4, #4]
   14214:	6812      	ldr	r2, [r2, #0]
   14216:	60a2      	str	r2, [r4, #8]
   14218:	681b      	ldr	r3, [r3, #0]
   1421a:	60e3      	str	r3, [r4, #12]
   1421c:	2301      	movs	r3, #1
   1421e:	65a3      	str	r3, [r4, #88]	; 0x58
   14220:	e733      	b.n	1408a <ProcessAesDrv+0x72>
   14222:	4844      	ldr	r0, [pc, #272]	; (14334 <ProcessAesDrv+0x31c>)
   14224:	f7fd fe5e 	bl	11ee4 <CC_PalAbort>
   14228:	2000      	movs	r0, #0
   1422a:	f7fe fdd5 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   1422e:	2800      	cmp	r0, #0
   14230:	f43f af1d 	beq.w	1406e <ProcessAesDrv+0x56>
   14234:	4840      	ldr	r0, [pc, #256]	; (14338 <ProcessAesDrv+0x320>)
   14236:	f7fd fe55 	bl	11ee4 <CC_PalAbort>
   1423a:	e718      	b.n	1406e <ProcessAesDrv+0x56>
   1423c:	483f      	ldr	r0, [pc, #252]	; (1433c <ProcessAesDrv+0x324>)
   1423e:	f7fd fe51 	bl	11ee4 <CC_PalAbort>
   14242:	4648      	mov	r0, r9
   14244:	b007      	add	sp, #28
   14246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1424a:	483d      	ldr	r0, [pc, #244]	; (14340 <ProcessAesDrv+0x328>)
   1424c:	f7fd fe4a 	bl	11ee4 <CC_PalAbort>
   14250:	e73c      	b.n	140cc <ProcessAesDrv+0xb4>
   14252:	2304      	movs	r3, #4
   14254:	2120      	movs	r1, #32
   14256:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1425a:	f104 0010 	add.w	r0, r4, #16
   1425e:	f7ff fb49 	bl	138f4 <CC_PalMemSetZeroPlat>
   14262:	e71a      	b.n	1409a <ProcessAesDrv+0x82>
   14264:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14266:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14268:	f000 f9d2 	bl	14610 <kmu_validate_slot_and_size>
   1426c:	b9e8      	cbnz	r0, 142aa <ProcessAesDrv+0x292>
   1426e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 14360 <ProcessAesDrv+0x348>
   14272:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 14364 <ProcessAesDrv+0x34c>
   14276:	f8d8 3000 	ldr.w	r3, [r8]
   1427a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 14368 <ProcessAesDrv+0x350>
   1427e:	681b      	ldr	r3, [r3, #0]
   14280:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1436c <ProcessAesDrv+0x354>
   14284:	f8cb 3000 	str.w	r3, [fp]
   14288:	f8d8 3000 	ldr.w	r3, [r8]
   1428c:	4a2d      	ldr	r2, [pc, #180]	; (14344 <ProcessAesDrv+0x32c>)
   1428e:	685b      	ldr	r3, [r3, #4]
   14290:	f8ca 3000 	str.w	r3, [sl]
   14294:	f8d8 3000 	ldr.w	r3, [r8]
   14298:	689b      	ldr	r3, [r3, #8]
   1429a:	f8c9 3000 	str.w	r3, [r9]
   1429e:	f8d8 3000 	ldr.w	r3, [r8]
   142a2:	68db      	ldr	r3, [r3, #12]
   142a4:	6013      	str	r3, [r2, #0]
   142a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   142a8:	b171      	cbz	r1, 142c8 <ProcessAesDrv+0x2b0>
   142aa:	f04f 0801 	mov.w	r8, #1
   142ae:	e6d0      	b.n	14052 <ProcessAesDrv+0x3a>
   142b0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 14370 <ProcessAesDrv+0x358>
   142b4:	e6e9      	b.n	1408a <ProcessAesDrv+0x72>
   142b6:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   142ba:	e70d      	b.n	140d8 <ProcessAesDrv+0xc0>
   142bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   142be:	2b01      	cmp	r3, #1
   142c0:	bf0c      	ite	eq
   142c2:	2040      	moveq	r0, #64	; 0x40
   142c4:	2010      	movne	r0, #16
   142c6:	e788      	b.n	141da <ProcessAesDrv+0x1c2>
   142c8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   142cc:	9300      	str	r3, [sp, #0]
   142ce:	2310      	movs	r3, #16
   142d0:	f104 0010 	add.w	r0, r4, #16
   142d4:	e9cd 2001 	strd	r2, r0, [sp, #4]
   142d8:	9303      	str	r3, [sp, #12]
   142da:	9005      	str	r0, [sp, #20]
   142dc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   142e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   142e2:	f000 fa93 	bl	1480c <kmu_derive_cmac>
   142e6:	2800      	cmp	r0, #0
   142e8:	d14a      	bne.n	14380 <ProcessAesDrv+0x368>
   142ea:	2300      	movs	r3, #0
   142ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   142f0:	e7db      	b.n	142aa <ProcessAesDrv+0x292>
   142f2:	6821      	ldr	r1, [r4, #0]
   142f4:	4a14      	ldr	r2, [pc, #80]	; (14348 <ProcessAesDrv+0x330>)
   142f6:	4b15      	ldr	r3, [pc, #84]	; (1434c <ProcessAesDrv+0x334>)
   142f8:	e745      	b.n	14186 <ProcessAesDrv+0x16e>
   142fa:	bf00      	nop
   142fc:	200000e4 	.word	0x200000e4
   14300:	50841810 	.word	0x50841810
   14304:	50841910 	.word	0x50841910
   14308:	50841a04 	.word	0x50841a04
   1430c:	50841440 	.word	0x50841440
   14310:	50841444 	.word	0x50841444
   14314:	50841d28 	.word	0x50841d28
   14318:	50841d2c 	.word	0x50841d2c
   1431c:	50841d30 	.word	0x50841d30
   14320:	50841d34 	.word	0x50841d34
   14324:	50841c2c 	.word	0x50841c2c
   14328:	50841c34 	.word	0x50841c34
   1432c:	50841c28 	.word	0x50841c28
   14330:	50841c30 	.word	0x50841c30
   14334:	0001588c 	.word	0x0001588c
   14338:	000158a4 	.word	0x000158a4
   1433c:	000158e4 	.word	0x000158e4
   14340:	000158c4 	.word	0x000158c4
   14344:	5084140c 	.word	0x5084140c
   14348:	50841460 	.word	0x50841460
   1434c:	50841464 	.word	0x50841464
   14350:	00f10001 	.word	0x00f10001
   14354:	00f10005 	.word	0x00f10005
   14358:	00f1000b 	.word	0x00f1000b
   1435c:	00f10003 	.word	0x00f10003
   14360:	200000d4 	.word	0x200000d4
   14364:	50841400 	.word	0x50841400
   14368:	50841404 	.word	0x50841404
   1436c:	50841408 	.word	0x50841408
   14370:	00f10002 	.word	0x00f10002
   14374:	4a0f      	ldr	r2, [pc, #60]	; (143b4 <ProcessAesDrv+0x39c>)
   14376:	4b10      	ldr	r3, [pc, #64]	; (143b8 <ProcessAesDrv+0x3a0>)
   14378:	e746      	b.n	14208 <ProcessAesDrv+0x1f0>
   1437a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 143c0 <ProcessAesDrv+0x3a8>
   1437e:	e684      	b.n	1408a <ProcessAesDrv+0x72>
   14380:	f8d8 3000 	ldr.w	r3, [r8]
   14384:	9805      	ldr	r0, [sp, #20]
   14386:	681b      	ldr	r3, [r3, #0]
   14388:	4a0c      	ldr	r2, [pc, #48]	; (143bc <ProcessAesDrv+0x3a4>)
   1438a:	f8cb 3000 	str.w	r3, [fp]
   1438e:	f8d8 3000 	ldr.w	r3, [r8]
   14392:	2110      	movs	r1, #16
   14394:	685b      	ldr	r3, [r3, #4]
   14396:	f8ca 3000 	str.w	r3, [sl]
   1439a:	f8d8 3000 	ldr.w	r3, [r8]
   1439e:	689b      	ldr	r3, [r3, #8]
   143a0:	f8c9 3000 	str.w	r3, [r9]
   143a4:	f8d8 3000 	ldr.w	r3, [r8]
   143a8:	68db      	ldr	r3, [r3, #12]
   143aa:	6013      	str	r3, [r2, #0]
   143ac:	f7ff faa2 	bl	138f4 <CC_PalMemSetZeroPlat>
   143b0:	e79b      	b.n	142ea <ProcessAesDrv+0x2d2>
   143b2:	bf00      	nop
   143b4:	50841460 	.word	0x50841460
   143b8:	50841464 	.word	0x50841464
   143bc:	5084140c 	.word	0x5084140c
   143c0:	00f10004 	.word	0x00f10004

000143c4 <FinishAesDrv>:
   143c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143c8:	b301      	cbz	r1, 1440c <FinishAesDrv+0x48>
   143ca:	b1fa      	cbz	r2, 1440c <FinishAesDrv+0x48>
   143cc:	4604      	mov	r4, r0
   143ce:	2800      	cmp	r0, #0
   143d0:	d07a      	beq.n	144c8 <FinishAesDrv+0x104>
   143d2:	461d      	mov	r5, r3
   143d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   143d6:	460e      	mov	r6, r1
   143d8:	2b07      	cmp	r3, #7
   143da:	d01b      	beq.n	14414 <FinishAesDrv+0x50>
   143dc:	b95d      	cbnz	r5, 143f6 <FinishAesDrv+0x32>
   143de:	2b03      	cmp	r3, #3
   143e0:	d110      	bne.n	14404 <FinishAesDrv+0x40>
   143e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   143e4:	b973      	cbnz	r3, 14404 <FinishAesDrv+0x40>
   143e6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   143ea:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   143ee:	2510      	movs	r5, #16
   143f0:	f100 0364 	add.w	r3, r0, #100	; 0x64
   143f4:	600b      	str	r3, [r1, #0]
   143f6:	462b      	mov	r3, r5
   143f8:	4631      	mov	r1, r6
   143fa:	4620      	mov	r0, r4
   143fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14400:	f7ff be0a 	b.w	14018 <ProcessAesDrv>
   14404:	462f      	mov	r7, r5
   14406:	4638      	mov	r0, r7
   14408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1440c:	4f68      	ldr	r7, [pc, #416]	; (145b0 <FinishAesDrv+0x1ec>)
   1440e:	4638      	mov	r0, r7
   14410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14414:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14416:	2b00      	cmp	r3, #0
   14418:	d159      	bne.n	144ce <FinishAesDrv+0x10a>
   1441a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1441e:	d25b      	bcs.n	144d8 <FinishAesDrv+0x114>
   14420:	b915      	cbnz	r5, 14428 <FinishAesDrv+0x64>
   14422:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14424:	2b00      	cmp	r3, #0
   14426:	d157      	bne.n	144d8 <FinishAesDrv+0x114>
   14428:	f04f 31ff 	mov.w	r1, #4294967295
   1442c:	4861      	ldr	r0, [pc, #388]	; (145b4 <FinishAesDrv+0x1f0>)
   1442e:	f7fe fca3 	bl	12d78 <CC_PalMutexLock>
   14432:	2800      	cmp	r0, #0
   14434:	f040 809a 	bne.w	1456c <FinishAesDrv+0x1a8>
   14438:	2000      	movs	r0, #0
   1443a:	f7fe fccd 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   1443e:	2800      	cmp	r0, #0
   14440:	f040 8090 	bne.w	14564 <FinishAesDrv+0x1a0>
   14444:	2101      	movs	r1, #1
   14446:	4b5c      	ldr	r3, [pc, #368]	; (145b8 <FinishAesDrv+0x1f4>)
   14448:	4a5c      	ldr	r2, [pc, #368]	; (145bc <FinishAesDrv+0x1f8>)
   1444a:	6019      	str	r1, [r3, #0]
   1444c:	6813      	ldr	r3, [r2, #0]
   1444e:	2b00      	cmp	r3, #0
   14450:	d1fc      	bne.n	1444c <FinishAesDrv+0x88>
   14452:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14454:	2b03      	cmp	r3, #3
   14456:	dd20      	ble.n	1449a <FinishAesDrv+0xd6>
   14458:	3b06      	subs	r3, #6
   1445a:	2b01      	cmp	r3, #1
   1445c:	d81f      	bhi.n	1449e <FinishAesDrv+0xda>
   1445e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14460:	2b01      	cmp	r3, #1
   14462:	d83b      	bhi.n	144dc <FinishAesDrv+0x118>
   14464:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14466:	2b01      	cmp	r3, #1
   14468:	f200 8088 	bhi.w	1457c <FinishAesDrv+0x1b8>
   1446c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1446e:	2b01      	cmp	r3, #1
   14470:	f200 8086 	bhi.w	14580 <FinishAesDrv+0x1bc>
   14474:	4620      	mov	r0, r4
   14476:	f7ff fd53 	bl	13f20 <InitAes.part.0>
   1447a:	4607      	mov	r7, r0
   1447c:	b980      	cbnz	r0, 144a0 <FinishAesDrv+0xdc>
   1447e:	4620      	mov	r0, r4
   14480:	f7ff fcdc 	bl	13e3c <LoadAesKey>
   14484:	4607      	mov	r7, r0
   14486:	b958      	cbnz	r0, 144a0 <FinishAesDrv+0xdc>
   14488:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1448a:	2b07      	cmp	r3, #7
   1448c:	d807      	bhi.n	1449e <FinishAesDrv+0xda>
   1448e:	e8df f003 	tbb	[pc, r3]
   14492:	2731      	.short	0x2731
   14494:	06062755 	.word	0x06062755
   14498:	2755      	.short	0x2755
   1449a:	2b00      	cmp	r3, #0
   1449c:	dadf      	bge.n	1445e <FinishAesDrv+0x9a>
   1449e:	4f48      	ldr	r7, [pc, #288]	; (145c0 <FinishAesDrv+0x1fc>)
   144a0:	4a46      	ldr	r2, [pc, #280]	; (145bc <FinishAesDrv+0x1f8>)
   144a2:	6813      	ldr	r3, [r2, #0]
   144a4:	2b00      	cmp	r3, #0
   144a6:	d1fc      	bne.n	144a2 <FinishAesDrv+0xde>
   144a8:	4a43      	ldr	r2, [pc, #268]	; (145b8 <FinishAesDrv+0x1f4>)
   144aa:	2001      	movs	r0, #1
   144ac:	6013      	str	r3, [r2, #0]
   144ae:	f7fe fc93 	bl	12dd8 <CC_PalPowerSaveModeSelect>
   144b2:	2800      	cmp	r0, #0
   144b4:	d15e      	bne.n	14574 <FinishAesDrv+0x1b0>
   144b6:	483f      	ldr	r0, [pc, #252]	; (145b4 <FinishAesDrv+0x1f0>)
   144b8:	f7fe fc66 	bl	12d88 <CC_PalMutexUnlock>
   144bc:	2800      	cmp	r0, #0
   144be:	d0a2      	beq.n	14406 <FinishAesDrv+0x42>
   144c0:	4840      	ldr	r0, [pc, #256]	; (145c4 <FinishAesDrv+0x200>)
   144c2:	f7fd fd0f 	bl	11ee4 <CC_PalAbort>
   144c6:	e79e      	b.n	14406 <FinishAesDrv+0x42>
   144c8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   144cc:	e79b      	b.n	14406 <FinishAesDrv+0x42>
   144ce:	2b01      	cmp	r3, #1
   144d0:	d1a6      	bne.n	14420 <FinishAesDrv+0x5c>
   144d2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   144d6:	d3a3      	bcc.n	14420 <FinishAesDrv+0x5c>
   144d8:	4f3b      	ldr	r7, [pc, #236]	; (145c8 <FinishAesDrv+0x204>)
   144da:	e794      	b.n	14406 <FinishAesDrv+0x42>
   144dc:	4f3b      	ldr	r7, [pc, #236]	; (145cc <FinishAesDrv+0x208>)
   144de:	e7df      	b.n	144a0 <FinishAesDrv+0xdc>
   144e0:	6821      	ldr	r1, [r4, #0]
   144e2:	4a3b      	ldr	r2, [pc, #236]	; (145d0 <FinishAesDrv+0x20c>)
   144e4:	4b3b      	ldr	r3, [pc, #236]	; (145d4 <FinishAesDrv+0x210>)
   144e6:	6011      	str	r1, [r2, #0]
   144e8:	6861      	ldr	r1, [r4, #4]
   144ea:	6019      	str	r1, [r3, #0]
   144ec:	68a1      	ldr	r1, [r4, #8]
   144ee:	6091      	str	r1, [r2, #8]
   144f0:	68e2      	ldr	r2, [r4, #12]
   144f2:	609a      	str	r2, [r3, #8]
   144f4:	2301      	movs	r3, #1
   144f6:	4938      	ldr	r1, [pc, #224]	; (145d8 <FinishAesDrv+0x214>)
   144f8:	4a38      	ldr	r2, [pc, #224]	; (145dc <FinishAesDrv+0x218>)
   144fa:	600b      	str	r3, [r1, #0]
   144fc:	6015      	str	r5, [r2, #0]
   144fe:	2d00      	cmp	r5, #0
   14500:	d140      	bne.n	14584 <FinishAesDrv+0x1c0>
   14502:	6da2      	ldr	r2, [r4, #88]	; 0x58
   14504:	b90a      	cbnz	r2, 1450a <FinishAesDrv+0x146>
   14506:	4a36      	ldr	r2, [pc, #216]	; (145e0 <FinishAesDrv+0x21c>)
   14508:	6013      	str	r3, [r2, #0]
   1450a:	4b2c      	ldr	r3, [pc, #176]	; (145bc <FinishAesDrv+0x1f8>)
   1450c:	681f      	ldr	r7, [r3, #0]
   1450e:	2f00      	cmp	r7, #0
   14510:	d1fc      	bne.n	1450c <FinishAesDrv+0x148>
   14512:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14514:	3b01      	subs	r3, #1
   14516:	2b06      	cmp	r3, #6
   14518:	d8c2      	bhi.n	144a0 <FinishAesDrv+0xdc>
   1451a:	a201      	add	r2, pc, #4	; (adr r2, 14520 <FinishAesDrv+0x15c>)
   1451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14520:	00014545 	.word	0x00014545
   14524:	0001455f 	.word	0x0001455f
   14528:	00014545 	.word	0x00014545
   1452c:	000144a1 	.word	0x000144a1
   14530:	000144a1 	.word	0x000144a1
   14534:	0001455f 	.word	0x0001455f
   14538:	00014545 	.word	0x00014545
   1453c:	6821      	ldr	r1, [r4, #0]
   1453e:	4a29      	ldr	r2, [pc, #164]	; (145e4 <FinishAesDrv+0x220>)
   14540:	4b29      	ldr	r3, [pc, #164]	; (145e8 <FinishAesDrv+0x224>)
   14542:	e7d0      	b.n	144e6 <FinishAesDrv+0x122>
   14544:	4a22      	ldr	r2, [pc, #136]	; (145d0 <FinishAesDrv+0x20c>)
   14546:	4b23      	ldr	r3, [pc, #140]	; (145d4 <FinishAesDrv+0x210>)
   14548:	6811      	ldr	r1, [r2, #0]
   1454a:	3208      	adds	r2, #8
   1454c:	6021      	str	r1, [r4, #0]
   1454e:	6819      	ldr	r1, [r3, #0]
   14550:	3308      	adds	r3, #8
   14552:	6061      	str	r1, [r4, #4]
   14554:	6812      	ldr	r2, [r2, #0]
   14556:	60a2      	str	r2, [r4, #8]
   14558:	681b      	ldr	r3, [r3, #0]
   1455a:	60e3      	str	r3, [r4, #12]
   1455c:	e7a0      	b.n	144a0 <FinishAesDrv+0xdc>
   1455e:	4a21      	ldr	r2, [pc, #132]	; (145e4 <FinishAesDrv+0x220>)
   14560:	4b21      	ldr	r3, [pc, #132]	; (145e8 <FinishAesDrv+0x224>)
   14562:	e7f1      	b.n	14548 <FinishAesDrv+0x184>
   14564:	4821      	ldr	r0, [pc, #132]	; (145ec <FinishAesDrv+0x228>)
   14566:	f7fd fcbd 	bl	11ee4 <CC_PalAbort>
   1456a:	e76b      	b.n	14444 <FinishAesDrv+0x80>
   1456c:	4820      	ldr	r0, [pc, #128]	; (145f0 <FinishAesDrv+0x22c>)
   1456e:	f7fd fcb9 	bl	11ee4 <CC_PalAbort>
   14572:	e761      	b.n	14438 <FinishAesDrv+0x74>
   14574:	481f      	ldr	r0, [pc, #124]	; (145f4 <FinishAesDrv+0x230>)
   14576:	f7fd fcb5 	bl	11ee4 <CC_PalAbort>
   1457a:	e79c      	b.n	144b6 <FinishAesDrv+0xf2>
   1457c:	4f1e      	ldr	r7, [pc, #120]	; (145f8 <FinishAesDrv+0x234>)
   1457e:	e78f      	b.n	144a0 <FinishAesDrv+0xdc>
   14580:	4f1e      	ldr	r7, [pc, #120]	; (145fc <FinishAesDrv+0x238>)
   14582:	e78d      	b.n	144a0 <FinishAesDrv+0xdc>
   14584:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   14586:	6833      	ldr	r3, [r6, #0]
   14588:	2a01      	cmp	r2, #1
   1458a:	d00a      	beq.n	145a2 <FinishAesDrv+0x1de>
   1458c:	2010      	movs	r0, #16
   1458e:	491c      	ldr	r1, [pc, #112]	; (14600 <FinishAesDrv+0x23c>)
   14590:	4a1c      	ldr	r2, [pc, #112]	; (14604 <FinishAesDrv+0x240>)
   14592:	600b      	str	r3, [r1, #0]
   14594:	6015      	str	r5, [r2, #0]
   14596:	f7fe fb5d 	bl	12c54 <CC_HalWaitInterrupt>
   1459a:	4607      	mov	r7, r0
   1459c:	2800      	cmp	r0, #0
   1459e:	d0b4      	beq.n	1450a <FinishAesDrv+0x146>
   145a0:	e77e      	b.n	144a0 <FinishAesDrv+0xdc>
   145a2:	4919      	ldr	r1, [pc, #100]	; (14608 <FinishAesDrv+0x244>)
   145a4:	4a19      	ldr	r2, [pc, #100]	; (1460c <FinishAesDrv+0x248>)
   145a6:	600b      	str	r3, [r1, #0]
   145a8:	2040      	movs	r0, #64	; 0x40
   145aa:	6015      	str	r5, [r2, #0]
   145ac:	e7f3      	b.n	14596 <FinishAesDrv+0x1d2>
   145ae:	bf00      	nop
   145b0:	00f1000b 	.word	0x00f1000b
   145b4:	200000e4 	.word	0x200000e4
   145b8:	50841810 	.word	0x50841810
   145bc:	50841910 	.word	0x50841910
   145c0:	00f10001 	.word	0x00f10001
   145c4:	000158e4 	.word	0x000158e4
   145c8:	00f10005 	.word	0x00f10005
   145cc:	00f10002 	.word	0x00f10002
   145d0:	50841440 	.word	0x50841440
   145d4:	50841444 	.word	0x50841444
   145d8:	5084147c 	.word	0x5084147c
   145dc:	508414bc 	.word	0x508414bc
   145e0:	50841524 	.word	0x50841524
   145e4:	50841460 	.word	0x50841460
   145e8:	50841464 	.word	0x50841464
   145ec:	000158a4 	.word	0x000158a4
   145f0:	0001588c 	.word	0x0001588c
   145f4:	000158c4 	.word	0x000158c4
   145f8:	00f10003 	.word	0x00f10003
   145fc:	00f10004 	.word	0x00f10004
   14600:	50841c30 	.word	0x50841c30
   14604:	50841c34 	.word	0x50841c34
   14608:	50841c28 	.word	0x50841c28
   1460c:	50841c2c 	.word	0x50841c2c

00014610 <kmu_validate_slot_and_size>:
   14610:	287f      	cmp	r0, #127	; 0x7f
   14612:	d80c      	bhi.n	1462e <kmu_validate_slot_and_size+0x1e>
   14614:	b149      	cbz	r1, 1462a <kmu_validate_slot_and_size+0x1a>
   14616:	2903      	cmp	r1, #3
   14618:	d001      	beq.n	1461e <kmu_validate_slot_and_size+0xe>
   1461a:	4806      	ldr	r0, [pc, #24]	; (14634 <kmu_validate_slot_and_size+0x24>)
   1461c:	4770      	bx	lr
   1461e:	4906      	ldr	r1, [pc, #24]	; (14638 <kmu_validate_slot_and_size+0x28>)
   14620:	287f      	cmp	r0, #127	; 0x7f
   14622:	bf0c      	ite	eq
   14624:	4608      	moveq	r0, r1
   14626:	2000      	movne	r0, #0
   14628:	4770      	bx	lr
   1462a:	4608      	mov	r0, r1
   1462c:	4770      	bx	lr
   1462e:	4802      	ldr	r0, [pc, #8]	; (14638 <kmu_validate_slot_and_size+0x28>)
   14630:	4770      	bx	lr
   14632:	bf00      	nop
   14634:	00f70003 	.word	0x00f70003
   14638:	00f70001 	.word	0x00f70001

0001463c <kmu_validate_slot_and_size_no_kdr>:
   1463c:	b4f0      	push	{r4, r5, r6, r7}
   1463e:	4a1c      	ldr	r2, [pc, #112]	; (146b0 <kmu_validate_slot_and_size_no_kdr+0x74>)
   14640:	00c5      	lsls	r5, r0, #3
   14642:	1c44      	adds	r4, r0, #1
   14644:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
   14648:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   1464c:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   14650:	681c      	ldr	r4, [r3, #0]
   14652:	b082      	sub	sp, #8
   14654:	f3bf 8f4f 	dsb	sy
   14658:	2300      	movs	r3, #0
   1465a:	9400      	str	r4, [sp, #0]
   1465c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14660:	9e00      	ldr	r6, [sp, #0]
   14662:	4c14      	ldr	r4, [pc, #80]	; (146b4 <kmu_validate_slot_and_size_no_kdr+0x78>)
   14664:	42a6      	cmp	r6, r4
   14666:	d018      	beq.n	1469a <kmu_validate_slot_and_size_no_kdr+0x5e>
   14668:	b1a9      	cbz	r1, 14696 <kmu_validate_slot_and_size_no_kdr+0x5a>
   1466a:	4e13      	ldr	r6, [pc, #76]	; (146b8 <kmu_validate_slot_and_size_no_kdr+0x7c>)
   1466c:	1c87      	adds	r7, r0, #2
   1466e:	442e      	add	r6, r5
   14670:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
   14674:	6835      	ldr	r5, [r6, #0]
   14676:	f3bf 8f4f 	dsb	sy
   1467a:	9501      	str	r5, [sp, #4]
   1467c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14680:	9a01      	ldr	r2, [sp, #4]
   14682:	42a2      	cmp	r2, r4
   14684:	d009      	beq.n	1469a <kmu_validate_slot_and_size_no_kdr+0x5e>
   14686:	287f      	cmp	r0, #127	; 0x7f
   14688:	d807      	bhi.n	1469a <kmu_validate_slot_and_size_no_kdr+0x5e>
   1468a:	2903      	cmp	r1, #3
   1468c:	d10b      	bne.n	146a6 <kmu_validate_slot_and_size_no_kdr+0x6a>
   1468e:	287f      	cmp	r0, #127	; 0x7f
   14690:	d003      	beq.n	1469a <kmu_validate_slot_and_size_no_kdr+0x5e>
   14692:	4618      	mov	r0, r3
   14694:	e002      	b.n	1469c <kmu_validate_slot_and_size_no_kdr+0x60>
   14696:	287f      	cmp	r0, #127	; 0x7f
   14698:	d903      	bls.n	146a2 <kmu_validate_slot_and_size_no_kdr+0x66>
   1469a:	4808      	ldr	r0, [pc, #32]	; (146bc <kmu_validate_slot_and_size_no_kdr+0x80>)
   1469c:	b002      	add	sp, #8
   1469e:	bcf0      	pop	{r4, r5, r6, r7}
   146a0:	4770      	bx	lr
   146a2:	4608      	mov	r0, r1
   146a4:	e7fa      	b.n	1469c <kmu_validate_slot_and_size_no_kdr+0x60>
   146a6:	4806      	ldr	r0, [pc, #24]	; (146c0 <kmu_validate_slot_and_size_no_kdr+0x84>)
   146a8:	b002      	add	sp, #8
   146aa:	bcf0      	pop	{r4, r5, r6, r7}
   146ac:	4770      	bx	lr
   146ae:	bf00      	nop
   146b0:	50039000 	.word	0x50039000
   146b4:	50841a50 	.word	0x50841a50
   146b8:	00ff8408 	.word	0x00ff8408
   146bc:	00f70001 	.word	0x00f70001
   146c0:	00f70003 	.word	0x00f70003

000146c4 <kmu_validate_kdr_slot_and_size>:
   146c4:	b9b9      	cbnz	r1, 146f6 <kmu_validate_kdr_slot_and_size+0x32>
   146c6:	4a0d      	ldr	r2, [pc, #52]	; (146fc <kmu_validate_kdr_slot_and_size+0x38>)
   146c8:	00c3      	lsls	r3, r0, #3
   146ca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   146ce:	3001      	adds	r0, #1
   146d0:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   146d4:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   146d8:	b082      	sub	sp, #8
   146da:	681b      	ldr	r3, [r3, #0]
   146dc:	f3bf 8f4f 	dsb	sy
   146e0:	9301      	str	r3, [sp, #4]
   146e2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   146e6:	9a01      	ldr	r2, [sp, #4]
   146e8:	4b05      	ldr	r3, [pc, #20]	; (14700 <kmu_validate_kdr_slot_and_size+0x3c>)
   146ea:	4806      	ldr	r0, [pc, #24]	; (14704 <kmu_validate_kdr_slot_and_size+0x40>)
   146ec:	429a      	cmp	r2, r3
   146ee:	bf08      	it	eq
   146f0:	2000      	moveq	r0, #0
   146f2:	b002      	add	sp, #8
   146f4:	4770      	bx	lr
   146f6:	4804      	ldr	r0, [pc, #16]	; (14708 <kmu_validate_kdr_slot_and_size+0x44>)
   146f8:	4770      	bx	lr
   146fa:	bf00      	nop
   146fc:	50039000 	.word	0x50039000
   14700:	50841a50 	.word	0x50841a50
   14704:	00f70001 	.word	0x00f70001
   14708:	00f70003 	.word	0x00f70003

0001470c <kmu_use_kdr_key>:
   1470c:	2000      	movs	r0, #0
   1470e:	2201      	movs	r2, #1
   14710:	4902      	ldr	r1, [pc, #8]	; (1471c <kmu_use_kdr_key+0x10>)
   14712:	4b03      	ldr	r3, [pc, #12]	; (14720 <kmu_use_kdr_key+0x14>)
   14714:	6008      	str	r0, [r1, #0]
   14716:	601a      	str	r2, [r3, #0]
   14718:	4770      	bx	lr
   1471a:	bf00      	nop
   1471c:	50841a38 	.word	0x50841a38
   14720:	50841478 	.word	0x50841478

00014724 <kmu_load_key_aes>:
   14724:	b109      	cbz	r1, 1472a <kmu_load_key_aes+0x6>
   14726:	4832      	ldr	r0, [pc, #200]	; (147f0 <kmu_load_key_aes+0xcc>)
   14728:	4770      	bx	lr
   1472a:	b430      	push	{r4, r5}
   1472c:	2401      	movs	r4, #1
   1472e:	4b31      	ldr	r3, [pc, #196]	; (147f4 <kmu_load_key_aes+0xd0>)
   14730:	4a31      	ldr	r2, [pc, #196]	; (147f8 <kmu_load_key_aes+0xd4>)
   14732:	b084      	sub	sp, #16
   14734:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   14738:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1473c:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   14740:	00c2      	lsls	r2, r0, #3
   14742:	9502      	str	r5, [sp, #8]
   14744:	9d02      	ldr	r5, [sp, #8]
   14746:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1474a:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   1474e:	4420      	add	r0, r4
   14750:	9502      	str	r5, [sp, #8]
   14752:	9d02      	ldr	r5, [sp, #8]
   14754:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   14758:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   1475c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   14760:	9102      	str	r1, [sp, #8]
   14762:	9902      	ldr	r1, [sp, #8]
   14764:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   14768:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1476c:	6812      	ldr	r2, [r2, #0]
   1476e:	f3bf 8f4f 	dsb	sy
   14772:	9203      	str	r2, [sp, #12]
   14774:	9903      	ldr	r1, [sp, #12]
   14776:	4a21      	ldr	r2, [pc, #132]	; (147fc <kmu_load_key_aes+0xd8>)
   14778:	4291      	cmp	r1, r2
   1477a:	d132      	bne.n	147e2 <kmu_load_key_aes+0xbe>
   1477c:	461a      	mov	r2, r3
   1477e:	601c      	str	r4, [r3, #0]
   14780:	e005      	b.n	1478e <kmu_load_key_aes+0x6a>
   14782:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14786:	b9db      	cbnz	r3, 147c0 <kmu_load_key_aes+0x9c>
   14788:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1478c:	b9c3      	cbnz	r3, 147c0 <kmu_load_key_aes+0x9c>
   1478e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   14792:	3b00      	subs	r3, #0
   14794:	bf18      	it	ne
   14796:	2301      	movne	r3, #1
   14798:	f88d 3005 	strb.w	r3, [sp, #5]
   1479c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   147a0:	3b00      	subs	r3, #0
   147a2:	bf18      	it	ne
   147a4:	2301      	movne	r3, #1
   147a6:	f88d 3006 	strb.w	r3, [sp, #6]
   147aa:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   147ae:	3b00      	subs	r3, #0
   147b0:	bf18      	it	ne
   147b2:	2301      	movne	r3, #1
   147b4:	f88d 3007 	strb.w	r3, [sp, #7]
   147b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   147bc:	2b00      	cmp	r3, #0
   147be:	d0e0      	beq.n	14782 <kmu_load_key_aes+0x5e>
   147c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   147c4:	b98b      	cbnz	r3, 147ea <kmu_load_key_aes+0xc6>
   147c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   147ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   147ce:	b933      	cbnz	r3, 147de <kmu_load_key_aes+0xba>
   147d0:	4610      	mov	r0, r2
   147d2:	4b08      	ldr	r3, [pc, #32]	; (147f4 <kmu_load_key_aes+0xd0>)
   147d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   147d8:	b004      	add	sp, #16
   147da:	bc30      	pop	{r4, r5}
   147dc:	4770      	bx	lr
   147de:	4808      	ldr	r0, [pc, #32]	; (14800 <kmu_load_key_aes+0xdc>)
   147e0:	e7fa      	b.n	147d8 <kmu_load_key_aes+0xb4>
   147e2:	4808      	ldr	r0, [pc, #32]	; (14804 <kmu_load_key_aes+0xe0>)
   147e4:	b004      	add	sp, #16
   147e6:	bc30      	pop	{r4, r5}
   147e8:	4770      	bx	lr
   147ea:	4807      	ldr	r0, [pc, #28]	; (14808 <kmu_load_key_aes+0xe4>)
   147ec:	e7f4      	b.n	147d8 <kmu_load_key_aes+0xb4>
   147ee:	bf00      	nop
   147f0:	00f1000c 	.word	0x00f1000c
   147f4:	50039000 	.word	0x50039000
   147f8:	50840000 	.word	0x50840000
   147fc:	50841400 	.word	0x50841400
   14800:	00f70002 	.word	0x00f70002
   14804:	00f70006 	.word	0x00f70006
   14808:	00f70001 	.word	0x00f70001

0001480c <kmu_derive_cmac>:
   1480c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14810:	2400      	movs	r4, #0
   14812:	b0ce      	sub	sp, #312	; 0x138
   14814:	4605      	mov	r5, r0
   14816:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
   1481a:	468a      	mov	sl, r1
   1481c:	4617      	mov	r7, r2
   1481e:	4621      	mov	r1, r4
   14820:	2274      	movs	r2, #116	; 0x74
   14822:	a810      	add	r0, sp, #64	; 0x40
   14824:	4698      	mov	r8, r3
   14826:	f000 faa2 	bl	14d6e <memset>
   1482a:	4621      	mov	r1, r4
   1482c:	2280      	movs	r2, #128	; 0x80
   1482e:	a82e      	add	r0, sp, #184	; 0xb8
   14830:	942d      	str	r4, [sp, #180]	; 0xb4
   14832:	f000 fa9c 	bl	14d6e <memset>
   14836:	2384      	movs	r3, #132	; 0x84
   14838:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
   1483c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   14840:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   14844:	9306      	str	r3, [sp, #24]
   14846:	d873      	bhi.n	14930 <kmu_derive_cmac+0x124>
   14848:	ab06      	add	r3, sp, #24
   1484a:	ac2d      	add	r4, sp, #180	; 0xb4
   1484c:	9301      	str	r3, [sp, #4]
   1484e:	4641      	mov	r1, r8
   14850:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   14854:	4638      	mov	r0, r7
   14856:	9602      	str	r6, [sp, #8]
   14858:	9400      	str	r4, [sp, #0]
   1485a:	f000 f87d 	bl	14958 <UtilCmacBuildDataForDerivation>
   1485e:	2800      	cmp	r0, #0
   14860:	d16d      	bne.n	1493e <kmu_derive_cmac+0x132>
   14862:	2200      	movs	r2, #0
   14864:	2301      	movs	r3, #1
   14866:	2101      	movs	r1, #1
   14868:	2707      	movs	r7, #7
   1486a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
   1486e:	4a36      	ldr	r2, [pc, #216]	; (14948 <kmu_derive_cmac+0x13c>)
   14870:	00eb      	lsls	r3, r5, #3
   14872:	9520      	str	r5, [sp, #128]	; 0x80
   14874:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   14878:	440d      	add	r5, r1
   1487a:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
   1487e:	901e      	str	r0, [sp, #120]	; 0x78
   14880:	9128      	str	r1, [sp, #160]	; 0xa0
   14882:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   14886:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
   1488a:	681b      	ldr	r3, [r3, #0]
   1488c:	f3bf 8f4f 	dsb	sy
   14890:	9307      	str	r3, [sp, #28]
   14892:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   14896:	9a07      	ldr	r2, [sp, #28]
   14898:	4b2c      	ldr	r3, [pc, #176]	; (1494c <kmu_derive_cmac+0x140>)
   1489a:	429a      	cmp	r2, r3
   1489c:	d142      	bne.n	14924 <kmu_derive_cmac+0x118>
   1489e:	2203      	movs	r2, #3
   148a0:	f10d 0317 	add.w	r3, sp, #23
   148a4:	701a      	strb	r2, [r3, #0]
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	2110      	movs	r1, #16
   148aa:	a810      	add	r0, sp, #64	; 0x40
   148ac:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   148b0:	f7ff f820 	bl	138f4 <CC_PalMemSetZeroPlat>
   148b4:	2210      	movs	r2, #16
   148b6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   148ba:	9200      	str	r2, [sp, #0]
   148bc:	4620      	mov	r0, r4
   148be:	9906      	ldr	r1, [sp, #24]
   148c0:	ab0c      	add	r3, sp, #48	; 0x30
   148c2:	aa08      	add	r2, sp, #32
   148c4:	f8cd 8004 	str.w	r8, [sp, #4]
   148c8:	f7ff f8ec 	bl	13aa4 <SetDataBuffersInfo>
   148cc:	4607      	mov	r7, r0
   148ce:	bb00      	cbnz	r0, 14912 <kmu_derive_cmac+0x106>
   148d0:	2401      	movs	r4, #1
   148d2:	e010      	b.n	148f6 <kmu_derive_cmac+0xea>
   148d4:	2e10      	cmp	r6, #16
   148d6:	4635      	mov	r5, r6
   148d8:	bf28      	it	cs
   148da:	2510      	movcs	r5, #16
   148dc:	a910      	add	r1, sp, #64	; 0x40
   148de:	462a      	mov	r2, r5
   148e0:	f7ff f804 	bl	138ec <CC_PalMemCopyPlat>
   148e4:	2110      	movs	r1, #16
   148e6:	a810      	add	r0, sp, #64	; 0x40
   148e8:	f7ff f804 	bl	138f4 <CC_PalMemSetZeroPlat>
   148ec:	3401      	adds	r4, #1
   148ee:	1b76      	subs	r6, r6, r5
   148f0:	442f      	add	r7, r5
   148f2:	b2e4      	uxtb	r4, r4
   148f4:	d021      	beq.n	1493a <kmu_derive_cmac+0x12e>
   148f6:	9b06      	ldr	r3, [sp, #24]
   148f8:	4642      	mov	r2, r8
   148fa:	a908      	add	r1, sp, #32
   148fc:	a810      	add	r0, sp, #64	; 0x40
   148fe:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
   14902:	f7ff fd5f 	bl	143c4 <FinishAesDrv>
   14906:	4603      	mov	r3, r0
   14908:	eb09 0007 	add.w	r0, r9, r7
   1490c:	2b00      	cmp	r3, #0
   1490e:	d0e1      	beq.n	148d4 <kmu_derive_cmac+0xc8>
   14910:	461f      	mov	r7, r3
   14912:	a810      	add	r0, sp, #64	; 0x40
   14914:	2274      	movs	r2, #116	; 0x74
   14916:	2100      	movs	r1, #0
   14918:	f7fe ffea 	bl	138f0 <CC_PalMemSetPlat>
   1491c:	4638      	mov	r0, r7
   1491e:	b04e      	add	sp, #312	; 0x138
   14920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14924:	2202      	movs	r2, #2
   14926:	f10d 0317 	add.w	r3, sp, #23
   1492a:	f88d 2017 	strb.w	r2, [sp, #23]
   1492e:	e7ba      	b.n	148a6 <kmu_derive_cmac+0x9a>
   14930:	4f07      	ldr	r7, [pc, #28]	; (14950 <kmu_derive_cmac+0x144>)
   14932:	4638      	mov	r0, r7
   14934:	b04e      	add	sp, #312	; 0x138
   14936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1493a:	4637      	mov	r7, r6
   1493c:	e7e9      	b.n	14912 <kmu_derive_cmac+0x106>
   1493e:	4f05      	ldr	r7, [pc, #20]	; (14954 <kmu_derive_cmac+0x148>)
   14940:	4638      	mov	r0, r7
   14942:	b04e      	add	sp, #312	; 0x138
   14944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14948:	50039000 	.word	0x50039000
   1494c:	50841a50 	.word	0x50841a50
   14950:	00f1000f 	.word	0x00f1000f
   14954:	00f1000e 	.word	0x00f1000e

00014958 <UtilCmacBuildDataForDerivation>:
   14958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1495c:	2600      	movs	r6, #0
   1495e:	b082      	sub	sp, #8
   14960:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14962:	9601      	str	r6, [sp, #4]
   14964:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   14968:	d83b      	bhi.n	149e2 <UtilCmacBuildDataForDerivation+0x8a>
   1496a:	00ee      	lsls	r6, r5, #3
   1496c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   14970:	461f      	mov	r7, r3
   14972:	bf34      	ite	cc
   14974:	2303      	movcc	r3, #3
   14976:	2304      	movcs	r3, #4
   14978:	1e4d      	subs	r5, r1, #1
   1497a:	2d3f      	cmp	r5, #63	; 0x3f
   1497c:	460c      	mov	r4, r1
   1497e:	9300      	str	r3, [sp, #0]
   14980:	d82f      	bhi.n	149e2 <UtilCmacBuildDataForDerivation+0x8a>
   14982:	b370      	cbz	r0, 149e2 <UtilCmacBuildDataForDerivation+0x8a>
   14984:	4690      	mov	r8, r2
   14986:	b117      	cbz	r7, 1498e <UtilCmacBuildDataForDerivation+0x36>
   14988:	b35a      	cbz	r2, 149e2 <UtilCmacBuildDataForDerivation+0x8a>
   1498a:	2f40      	cmp	r7, #64	; 0x40
   1498c:	d829      	bhi.n	149e2 <UtilCmacBuildDataForDerivation+0x8a>
   1498e:	9a08      	ldr	r2, [sp, #32]
   14990:	b33a      	cbz	r2, 149e2 <UtilCmacBuildDataForDerivation+0x8a>
   14992:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14994:	6811      	ldr	r1, [r2, #0]
   14996:	b321      	cbz	r1, 149e2 <UtilCmacBuildDataForDerivation+0x8a>
   14998:	19e2      	adds	r2, r4, r7
   1499a:	4413      	add	r3, r2
   1499c:	4299      	cmp	r1, r3
   1499e:	d320      	bcc.n	149e2 <UtilCmacBuildDataForDerivation+0x8a>
   149a0:	9b08      	ldr	r3, [sp, #32]
   149a2:	4622      	mov	r2, r4
   149a4:	4601      	mov	r1, r0
   149a6:	1c58      	adds	r0, r3, #1
   149a8:	f7fe ffa0 	bl	138ec <CC_PalMemCopyPlat>
   149ac:	2200      	movs	r2, #0
   149ae:	9b08      	ldr	r3, [sp, #32]
   149b0:	4423      	add	r3, r4
   149b2:	705a      	strb	r2, [r3, #1]
   149b4:	3402      	adds	r4, #2
   149b6:	bb07      	cbnz	r7, 149fa <UtilCmacBuildDataForDerivation+0xa2>
   149b8:	2eff      	cmp	r6, #255	; 0xff
   149ba:	9600      	str	r6, [sp, #0]
   149bc:	d915      	bls.n	149ea <UtilCmacBuildDataForDerivation+0x92>
   149be:	9b08      	ldr	r3, [sp, #32]
   149c0:	0235      	lsls	r5, r6, #8
   149c2:	b2ad      	uxth	r5, r5
   149c4:	1918      	adds	r0, r3, r4
   149c6:	2202      	movs	r2, #2
   149c8:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   149cc:	a901      	add	r1, sp, #4
   149ce:	9501      	str	r5, [sp, #4]
   149d0:	f7fe ff8c 	bl	138ec <CC_PalMemCopyPlat>
   149d4:	3402      	adds	r4, #2
   149d6:	2000      	movs	r0, #0
   149d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   149da:	601c      	str	r4, [r3, #0]
   149dc:	b002      	add	sp, #8
   149de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149e2:	480a      	ldr	r0, [pc, #40]	; (14a0c <UtilCmacBuildDataForDerivation+0xb4>)
   149e4:	b002      	add	sp, #8
   149e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149ea:	9b08      	ldr	r3, [sp, #32]
   149ec:	2201      	movs	r2, #1
   149ee:	1918      	adds	r0, r3, r4
   149f0:	4669      	mov	r1, sp
   149f2:	f7fe ff7b 	bl	138ec <CC_PalMemCopyPlat>
   149f6:	3401      	adds	r4, #1
   149f8:	e7ed      	b.n	149d6 <UtilCmacBuildDataForDerivation+0x7e>
   149fa:	9b08      	ldr	r3, [sp, #32]
   149fc:	4641      	mov	r1, r8
   149fe:	1918      	adds	r0, r3, r4
   14a00:	463a      	mov	r2, r7
   14a02:	f7fe ff73 	bl	138ec <CC_PalMemCopyPlat>
   14a06:	443c      	add	r4, r7
   14a08:	e7d6      	b.n	149b8 <UtilCmacBuildDataForDerivation+0x60>
   14a0a:	bf00      	nop
   14a0c:	80000006 	.word	0x80000006

00014a10 <CC_PalDataBufferAttrGet>:
   14a10:	2000      	movs	r0, #0
   14a12:	7018      	strb	r0, [r3, #0]
   14a14:	4770      	bx	lr
   14a16:	bf00      	nop

00014a18 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   14a18:	4770      	bx	lr

00014a1a <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   14a1a:	b508      	push	{r3, lr}
	spm_config();
   14a1c:	f7f8 fcfa 	bl	d414 <spm_config>
	spm_jump();
}
   14a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   14a24:	f7f8 bca8 	b.w	d378 <spm_jump>

00014a28 <arch_printk_char_out>:
}
   14a28:	2000      	movs	r0, #0
   14a2a:	4770      	bx	lr

00014a2c <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   14a2c:	b40f      	push	{r0, r1, r2, r3}
   14a2e:	b507      	push	{r0, r1, r2, lr}
   14a30:	a904      	add	r1, sp, #16
   14a32:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14a36:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   14a38:	f7f7 fe92 	bl	c760 <vprintk>
	}
	va_end(ap);
}
   14a3c:	b003      	add	sp, #12
   14a3e:	f85d eb04 	ldr.w	lr, [sp], #4
   14a42:	b004      	add	sp, #16
   14a44:	4770      	bx	lr

00014a46 <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
   14a46:	b538      	push	{r3, r4, r5, lr}
   14a48:	460c      	mov	r4, r1
	if ((mgr == NULL)
   14a4a:	4605      	mov	r5, r0
   14a4c:	b158      	cbz	r0, 14a66 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   14a4e:	b151      	cbz	r1, 14a66 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   14a50:	680b      	ldr	r3, [r1, #0]
   14a52:	b143      	cbz	r3, 14a66 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   14a54:	684b      	ldr	r3, [r1, #4]
   14a56:	b133      	cbz	r3, 14a66 <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14a58:	2220      	movs	r2, #32
   14a5a:	2100      	movs	r1, #0
   14a5c:	f000 f987 	bl	14d6e <memset>

	return 0;
   14a60:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14a62:	612c      	str	r4, [r5, #16]
}
   14a64:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14a66:	f06f 0015 	mvn.w	r0, #21
   14a6a:	e7fb      	b.n	14a64 <onoff_manager_init+0x1e>

00014a6c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14a6c:	4604      	mov	r4, r0
   14a6e:	b508      	push	{r3, lr}
   14a70:	4608      	mov	r0, r1
   14a72:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14a74:	461a      	mov	r2, r3
   14a76:	47a0      	blx	r4
	return z_impl_z_current_get();
   14a78:	f7fc feb6 	bl	117e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14a7c:	f7f9 fb90 	bl	e1a0 <z_impl_k_thread_abort>

00014a80 <encode_uint>:
{
   14a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a84:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   14a86:	78d3      	ldrb	r3, [r2, #3]
{
   14a88:	4680      	mov	r8, r0
	switch (specifier) {
   14a8a:	2b6f      	cmp	r3, #111	; 0x6f
{
   14a8c:	460f      	mov	r7, r1
   14a8e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   14a90:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   14a94:	d029      	beq.n	14aea <encode_uint+0x6a>
   14a96:	d824      	bhi.n	14ae2 <encode_uint+0x62>
		return 10;
   14a98:	2b58      	cmp	r3, #88	; 0x58
   14a9a:	bf0c      	ite	eq
   14a9c:	2610      	moveq	r6, #16
   14a9e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   14aa0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   14aa4:	4632      	mov	r2, r6
   14aa6:	2300      	movs	r3, #0
   14aa8:	4640      	mov	r0, r8
   14aaa:	4639      	mov	r1, r7
   14aac:	f7f7 fcc6 	bl	c43c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14ab0:	2a09      	cmp	r2, #9
   14ab2:	b2d4      	uxtb	r4, r2
   14ab4:	d81e      	bhi.n	14af4 <encode_uint+0x74>
   14ab6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   14ab8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14aba:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   14abc:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14ac0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   14ac4:	d301      	bcc.n	14aca <encode_uint+0x4a>
   14ac6:	45d1      	cmp	r9, sl
   14ac8:	d811      	bhi.n	14aee <encode_uint+0x6e>
	if (conv->flag_hash) {
   14aca:	782b      	ldrb	r3, [r5, #0]
   14acc:	069b      	lsls	r3, r3, #26
   14ace:	d505      	bpl.n	14adc <encode_uint+0x5c>
		if (radix == 8) {
   14ad0:	2e08      	cmp	r6, #8
   14ad2:	d115      	bne.n	14b00 <encode_uint+0x80>
			conv->altform_0 = true;
   14ad4:	78ab      	ldrb	r3, [r5, #2]
   14ad6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   14ada:	70ab      	strb	r3, [r5, #2]
}
   14adc:	4648      	mov	r0, r9
   14ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   14ae2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   14ae6:	2b70      	cmp	r3, #112	; 0x70
   14ae8:	e7d7      	b.n	14a9a <encode_uint+0x1a>
	switch (specifier) {
   14aea:	2608      	movs	r6, #8
   14aec:	e7d8      	b.n	14aa0 <encode_uint+0x20>
		value /= radix;
   14aee:	4680      	mov	r8, r0
   14af0:	460f      	mov	r7, r1
   14af2:	e7d7      	b.n	14aa4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14af4:	f1bb 0f19 	cmp.w	fp, #25
   14af8:	bf94      	ite	ls
   14afa:	3437      	addls	r4, #55	; 0x37
   14afc:	3457      	addhi	r4, #87	; 0x57
   14afe:	e7db      	b.n	14ab8 <encode_uint+0x38>
		} else if (radix == 16) {
   14b00:	2e10      	cmp	r6, #16
   14b02:	d1eb      	bne.n	14adc <encode_uint+0x5c>
			conv->altform_0c = true;
   14b04:	78ab      	ldrb	r3, [r5, #2]
   14b06:	f043 0310 	orr.w	r3, r3, #16
   14b0a:	e7e6      	b.n	14ada <encode_uint+0x5a>

00014b0c <outs>:
{
   14b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b10:	4607      	mov	r7, r0
   14b12:	4688      	mov	r8, r1
   14b14:	4615      	mov	r5, r2
   14b16:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14b18:	4614      	mov	r4, r2
   14b1a:	42b4      	cmp	r4, r6
   14b1c:	d305      	bcc.n	14b2a <outs+0x1e>
   14b1e:	b10e      	cbz	r6, 14b24 <outs+0x18>
	return (int)count;
   14b20:	1b60      	subs	r0, r4, r5
   14b22:	e008      	b.n	14b36 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14b24:	7823      	ldrb	r3, [r4, #0]
   14b26:	2b00      	cmp	r3, #0
   14b28:	d0fa      	beq.n	14b20 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   14b2a:	4641      	mov	r1, r8
   14b2c:	f814 0b01 	ldrb.w	r0, [r4], #1
   14b30:	47b8      	blx	r7
		if (rc < 0) {
   14b32:	2800      	cmp	r0, #0
   14b34:	daf1      	bge.n	14b1a <outs+0xe>
}
   14b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014b3a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   14b3a:	4040      	eors	r0, r0
   14b3c:	f380 8811 	msr	BASEPRI, r0
   14b40:	f04f 0004 	mov.w	r0, #4
   14b44:	df02      	svc	2
}
   14b46:	4770      	bx	lr

00014b48 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14b48:	4770      	bx	lr

00014b4a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   14b4a:	b084      	sub	sp, #16
   14b4c:	ab04      	add	r3, sp, #16
   14b4e:	e903 0007 	stmdb	r3, {r0, r1, r2}
   14b52:	2300      	movs	r3, #0
   14b54:	f383 8811 	msr	BASEPRI, r3
   14b58:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14b5c:	b004      	add	sp, #16
   14b5e:	4770      	bx	lr

00014b60 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   14b60:	b40f      	push	{r0, r1, r2, r3}
   14b62:	b507      	push	{r0, r1, r2, lr}
   14b64:	a904      	add	r1, sp, #16
   14b66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14b6a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   14b6c:	f7f7 fdf8 	bl	c760 <vprintk>
	va_end(ap);
}
   14b70:	b003      	add	sp, #12
   14b72:	f85d eb04 	ldr.w	lr, [sp], #4
   14b76:	b004      	add	sp, #16
   14b78:	4770      	bx	lr

00014b7a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   14b7a:	2200      	movs	r2, #0
   14b7c:	e9c0 2200 	strd	r2, r2, [r0]
   14b80:	6082      	str	r2, [r0, #8]
}
   14b82:	4770      	bx	lr

00014b84 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   14b84:	f000 021f 	and.w	r2, r0, #31
   14b88:	211f      	movs	r1, #31
   14b8a:	2004      	movs	r0, #4
   14b8c:	f7f8 bb2c 	b.w	d1e8 <adp536x_reg_write_mask>

00014b90 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   14b90:	f000 0207 	and.w	r2, r0, #7
   14b94:	2107      	movs	r1, #7
   14b96:	2002      	movs	r0, #2
   14b98:	f7f8 bb26 	b.w	d1e8 <adp536x_reg_write_mask>

00014b9c <adp536x_charging_enable>:
{
   14b9c:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   14b9e:	2101      	movs	r1, #1
   14ba0:	2007      	movs	r0, #7
   14ba2:	f7f8 bb21 	b.w	d1e8 <adp536x_reg_write_mask>

00014ba6 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   14ba6:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   14ba8:	21e0      	movs	r1, #224	; 0xe0
   14baa:	2015      	movs	r0, #21
   14bac:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   14bb0:	f7f8 bb1a 	b.w	d1e8 <adp536x_reg_write_mask>

00014bb4 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   14bb4:	2218      	movs	r2, #24
   14bb6:	213f      	movs	r1, #63	; 0x3f
   14bb8:	202a      	movs	r0, #42	; 0x2a
   14bba:	f7f8 bb15 	b.w	d1e8 <adp536x_reg_write_mask>

00014bbe <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   14bbe:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   14bc0:	2102      	movs	r1, #2
   14bc2:	2029      	movs	r0, #41	; 0x29
   14bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   14bc8:	f7f8 bb0e 	b.w	d1e8 <adp536x_reg_write_mask>

00014bcc <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   14bcc:	2213      	movs	r2, #19
   14bce:	213f      	movs	r1, #63	; 0x3f
   14bd0:	202c      	movs	r0, #44	; 0x2c
   14bd2:	f7f8 bb09 	b.w	d1e8 <adp536x_reg_write_mask>

00014bd6 <adp536x_buckbst_enable>:
{
   14bd6:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   14bd8:	2101      	movs	r1, #1
   14bda:	202b      	movs	r0, #43	; 0x2b
   14bdc:	f7f8 bb04 	b.w	d1e8 <adp536x_reg_write_mask>

00014be0 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
   14be0:	b538      	push	{r3, r4, r5, lr}
   14be2:	4605      	mov	r5, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   14be4:	460c      	mov	r4, r1
   14be6:	b951      	cbnz	r1, 14bfe <__acle_se_spm_firmware_info_nse+0x1e>
		return -EINVAL;
   14be8:	f06f 0015 	mvn.w	r0, #21
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
}
   14bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14bf0:	4671      	mov	r1, lr
   14bf2:	4672      	mov	r2, lr
   14bf4:	4673      	mov	r3, lr
   14bf6:	46f4      	mov	ip, lr
   14bf8:	f38e 8c00 	msr	CPSR_fs, lr
   14bfc:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
   14bfe:	f000 f863 	bl	14cc8 <arm_cmse_addr_is_secure>
	if (!ptr_in_secure_area(fw_address)) {
   14c02:	2801      	cmp	r0, #1
   14c04:	d1f0      	bne.n	14be8 <__acle_se_spm_firmware_info_nse+0x8>
	return arm_cmse_addr_is_secure(ptr) == 1;
   14c06:	4620      	mov	r0, r4
   14c08:	f000 f85e 	bl	14cc8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)info)) {
   14c0c:	2801      	cmp	r0, #1
   14c0e:	d0eb      	beq.n	14be8 <__acle_se_spm_firmware_info_nse+0x8>
	tmp_info = fw_info_find(fw_address);
   14c10:	4628      	mov	r0, r5
   14c12:	f7f8 fccd 	bl	d5b0 <fw_info_find>
	if (tmp_info != NULL) {
   14c16:	4601      	mov	r1, r0
   14c18:	b128      	cbz	r0, 14c26 <__acle_se_spm_firmware_info_nse+0x46>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   14c1a:	223c      	movs	r2, #60	; 0x3c
   14c1c:	4620      	mov	r0, r4
   14c1e:	f000 f89b 	bl	14d58 <memcpy>
		return 0;
   14c22:	2000      	movs	r0, #0
   14c24:	e7e2      	b.n	14bec <__acle_se_spm_firmware_info_nse+0xc>
	return -EFAULT;
   14c26:	f06f 000d 	mvn.w	r0, #13
   14c2a:	e7df      	b.n	14bec <__acle_se_spm_firmware_info_nse+0xc>

00014c2c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   14c2c:	2000      	movs	r0, #0
{
   14c2e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14c30:	f7f8 f956 	bl	cee0 <sys_reboot>

00014c34 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14c34:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   14c36:	6800      	ldr	r0, [r0, #0]
   14c38:	f7f8 be50 	b.w	d8dc <z_arm_fatal_error>

00014c3c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14c3c:	2100      	movs	r1, #0
   14c3e:	2001      	movs	r0, #1
   14c40:	f7f8 be4c 	b.w	d8dc <z_arm_fatal_error>

00014c44 <irq_target_state_set>:
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
		/* Set target to Secure */
		result = NVIC_ClearTargetState(irq);
   14c44:	b243      	sxtb	r3, r0
	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   14c46:	4608      	mov	r0, r1
   14c48:	b9c1      	cbnz	r1, 14c7c <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
   14c4a:	2b00      	cmp	r3, #0
   14c4c:	db27      	blt.n	14c9e <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14c4e:	2001      	movs	r0, #1
   14c50:	095a      	lsrs	r2, r3, #5
   14c52:	0092      	lsls	r2, r2, #2
   14c54:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   14c58:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
   14c5c:	f8d2 1280 	ldr.w	r1, [r2, #640]	; 0x280
   14c60:	f003 031f 	and.w	r3, r3, #31
   14c64:	4098      	lsls	r0, r3
   14c66:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14c6a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   14c6e:	f8d2 0280 	ldr.w	r0, [r2, #640]	; 0x280
   14c72:	40d8      	lsrs	r0, r3
   14c74:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   14c78:	b2c0      	uxtb	r0, r0
   14c7a:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   14c7c:	2b00      	cmp	r3, #0
   14c7e:	db0d      	blt.n	14c9c <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14c80:	2101      	movs	r1, #1
   14c82:	095a      	lsrs	r2, r3, #5
   14c84:	0092      	lsls	r2, r2, #2
   14c86:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   14c8a:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
   14c8e:	f8d2 0280 	ldr.w	r0, [r2, #640]	; 0x280
   14c92:	f003 031f 	and.w	r3, r3, #31
   14c96:	4099      	lsls	r1, r3
   14c98:	4301      	orrs	r1, r0
   14c9a:	e7e6      	b.n	14c6a <irq_target_state_set+0x26>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   14c9c:	2000      	movs	r0, #0
	}
}
   14c9e:	4770      	bx	lr

00014ca0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14ca0:	b508      	push	{r3, lr}
	handler();
   14ca2:	f7f8 fe8b 	bl	d9bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14caa:	f7f8 bf4d 	b.w	db48 <z_arm_exc_exit>

00014cae <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14cae:	6e43      	ldr	r3, [r0, #100]	; 0x64
   14cb0:	f383 880b 	msr	PSPLIM, r3
}
   14cb4:	4770      	bx	lr

00014cb6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   14cb6:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   14cba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   14cbe:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   14cc0:	bf08      	it	eq
   14cc2:	f06f 0015 	mvneq.w	r0, #21
   14cc6:	4770      	bx	lr

00014cc8 <arm_cmse_addr_is_secure>:
   14cc8:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   14ccc:	f3c0 5080 	ubfx	r0, r0, #22, #1
   14cd0:	4770      	bx	lr

00014cd2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   14cd2:	4603      	mov	r3, r0
	size_t n = 0;
   14cd4:	2000      	movs	r0, #0

	while (*s != '\0') {
   14cd6:	5c1a      	ldrb	r2, [r3, r0]
   14cd8:	b902      	cbnz	r2, 14cdc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   14cda:	4770      	bx	lr
		n++;
   14cdc:	3001      	adds	r0, #1
   14cde:	e7fa      	b.n	14cd6 <strlen+0x4>

00014ce0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   14ce0:	4603      	mov	r3, r0
	size_t n = 0;
   14ce2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   14ce4:	5c1a      	ldrb	r2, [r3, r0]
   14ce6:	b10a      	cbz	r2, 14cec <strnlen+0xc>
   14ce8:	4288      	cmp	r0, r1
   14cea:	d100      	bne.n	14cee <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   14cec:	4770      	bx	lr
		n++;
   14cee:	3001      	adds	r0, #1
   14cf0:	e7f8      	b.n	14ce4 <strnlen+0x4>

00014cf2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   14cf2:	1e43      	subs	r3, r0, #1
   14cf4:	3901      	subs	r1, #1
   14cf6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14cfa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   14cfe:	4282      	cmp	r2, r0
   14d00:	d101      	bne.n	14d06 <strcmp+0x14>
   14d02:	2a00      	cmp	r2, #0
   14d04:	d1f7      	bne.n	14cf6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   14d06:	1a10      	subs	r0, r2, r0
   14d08:	4770      	bx	lr

00014d0a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   14d0a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   14d0c:	b15a      	cbz	r2, 14d26 <memcmp+0x1c>
   14d0e:	3901      	subs	r1, #1
   14d10:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14d12:	f810 2b01 	ldrb.w	r2, [r0], #1
   14d16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   14d1a:	42a0      	cmp	r0, r4
   14d1c:	d001      	beq.n	14d22 <memcmp+0x18>
   14d1e:	429a      	cmp	r2, r3
   14d20:	d0f7      	beq.n	14d12 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14d22:	1ad0      	subs	r0, r2, r3
}
   14d24:	bd10      	pop	{r4, pc}
		return 0;
   14d26:	4610      	mov	r0, r2
   14d28:	e7fc      	b.n	14d24 <memcmp+0x1a>

00014d2a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   14d2a:	1a43      	subs	r3, r0, r1
   14d2c:	4293      	cmp	r3, r2
{
   14d2e:	b510      	push	{r4, lr}
   14d30:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   14d34:	d308      	bcc.n	14d48 <memmove+0x1e>
	char *dest = d;
   14d36:	4602      	mov	r2, r0
   14d38:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   14d3a:	429a      	cmp	r2, r3
   14d3c:	d00b      	beq.n	14d56 <memmove+0x2c>
			*dest = *src;
   14d3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14d42:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   14d46:	e7f8      	b.n	14d3a <memmove+0x10>
   14d48:	440a      	add	r2, r1
			dest[n] = src[n];
   14d4a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   14d4e:	428a      	cmp	r2, r1
			dest[n] = src[n];
   14d50:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   14d54:	d1f9      	bne.n	14d4a <memmove+0x20>
		}
	}

	return d;
}
   14d56:	bd10      	pop	{r4, pc}

00014d58 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   14d58:	b510      	push	{r4, lr}
   14d5a:	1e43      	subs	r3, r0, #1
   14d5c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   14d5e:	4291      	cmp	r1, r2
   14d60:	d100      	bne.n	14d64 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   14d62:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   14d64:	f811 4b01 	ldrb.w	r4, [r1], #1
   14d68:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   14d6c:	e7f7      	b.n	14d5e <memcpy+0x6>

00014d6e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   14d6e:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   14d70:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   14d72:	4402      	add	r2, r0
   14d74:	4293      	cmp	r3, r2
   14d76:	d100      	bne.n	14d7a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   14d78:	4770      	bx	lr
		*(d_byte++) = c_byte;
   14d7a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14d7e:	e7f9      	b.n	14d74 <memset+0x6>

00014d80 <_stdout_hook_default>:
}
   14d80:	f04f 30ff 	mov.w	r0, #4294967295
   14d84:	4770      	bx	lr

00014d86 <set_on_state>:
	__asm__ volatile(
   14d86:	f04f 0320 	mov.w	r3, #32
   14d8a:	f3ef 8211 	mrs	r2, BASEPRI
   14d8e:	f383 8812 	msr	BASEPRI_MAX, r3
   14d92:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   14d96:	6803      	ldr	r3, [r0, #0]
   14d98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14d9c:	f043 0302 	orr.w	r3, r3, #2
   14da0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14da2:	f382 8811 	msr	BASEPRI, r2
   14da6:	f3bf 8f6f 	isb	sy
}
   14daa:	4770      	bx	lr

00014dac <async_start>:
{
   14dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dae:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   14db0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   14db2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   14db4:	f04f 0520 	mov.w	r5, #32
   14db8:	f3ef 8611 	mrs	r6, BASEPRI
   14dbc:	f385 8812 	msr	BASEPRI_MAX, r5
   14dc0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14dc4:	250c      	movs	r5, #12
   14dc6:	4369      	muls	r1, r5
   14dc8:	440c      	add	r4, r1
   14dca:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14dcc:	f005 0c07 	and.w	ip, r5, #7
   14dd0:	f1bc 0f01 	cmp.w	ip, #1
   14dd4:	d10b      	bne.n	14dee <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14dd6:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   14dd8:	f386 8811 	msr	BASEPRI, r6
   14ddc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   14de0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   14de4:	6843      	ldr	r3, [r0, #4]
   14de6:	585b      	ldr	r3, [r3, r1]
   14de8:	4798      	blx	r3
	return 0;
   14dea:	2000      	movs	r0, #0
}
   14dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   14dee:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   14df2:	42af      	cmp	r7, r5
   14df4:	f386 8811 	msr	BASEPRI, r6
   14df8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   14dfc:	bf0c      	ite	eq
   14dfe:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   14e02:	f04f 30ff 	movne.w	r0, #4294967295
   14e06:	e7f1      	b.n	14dec <async_start+0x40>

00014e08 <api_start>:
{
   14e08:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14e0a:	2480      	movs	r4, #128	; 0x80
   14e0c:	9400      	str	r4, [sp, #0]
   14e0e:	f7ff ffcd 	bl	14dac <async_start>
}
   14e12:	b002      	add	sp, #8
   14e14:	bd10      	pop	{r4, pc}

00014e16 <onoff_started_callback>:
	return &data->mgr[type];
   14e16:	6900      	ldr	r0, [r0, #16]
   14e18:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   14e1a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   14e1e:	2100      	movs	r1, #0
   14e20:	4710      	bx	r2

00014e22 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14e22:	2000      	movs	r0, #0
   14e24:	f7fa bb98 	b.w	f558 <nrfx_clock_start>

00014e28 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14e28:	2000      	movs	r0, #0
   14e2a:	f7fa bbe7 	b.w	f5fc <nrfx_clock_stop>

00014e2e <api_stop>:
	return stop(dev, subsys, CTX_API);
   14e2e:	2280      	movs	r2, #128	; 0x80
   14e30:	f7f9 bcea 	b.w	e808 <stop>

00014e34 <blocking_start_callback>:
{
   14e34:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   14e36:	f7fb bd8d 	b.w	10954 <z_impl_k_sem_give>

00014e3a <uarte_nrfx_config_get>:
{
   14e3a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   14e3c:	6902      	ldr	r2, [r0, #16]
   14e3e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   14e42:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14e46:	2000      	movs	r0, #0
   14e48:	4770      	bx	lr

00014e4a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   14e4a:	6843      	ldr	r3, [r0, #4]
   14e4c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14e4e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14e52:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14e56:	4770      	bx	lr

00014e58 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   14e58:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   14e5a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   14e5c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e5e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14e62:	b148      	cbz	r0, 14e78 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e64:	2000      	movs	r0, #0
	*c = data->rx_data;
   14e66:	7c52      	ldrb	r2, [r2, #17]
   14e68:	700a      	strb	r2, [r1, #0]
   14e6a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14e6e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e72:	2201      	movs	r2, #1
   14e74:	601a      	str	r2, [r3, #0]
	return 0;
   14e76:	4770      	bx	lr
		return -1;
   14e78:	f04f 30ff 	mov.w	r0, #4294967295
}
   14e7c:	4770      	bx	lr

00014e7e <nrf_gpio_cfg_input>:
{
   14e7e:	b513      	push	{r0, r1, r4, lr}
   14e80:	460c      	mov	r4, r1
   14e82:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14e84:	a801      	add	r0, sp, #4
   14e86:	f7f9 ff6f 	bl	ed68 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   14e8a:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   14e8c:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
   14e8e:	3380      	adds	r3, #128	; 0x80
   14e90:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
   14e94:	b002      	add	sp, #8
   14e96:	bd10      	pop	{r4, pc}

00014e98 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   14e98:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   14e9a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e9c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   14ea0:	b940      	cbnz	r0, 14eb4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   14ea2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   14ea4:	079b      	lsls	r3, r3, #30
   14ea6:	d406      	bmi.n	14eb6 <is_tx_ready.isra.0+0x1e>
   14ea8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   14eac:	3800      	subs	r0, #0
   14eae:	bf18      	it	ne
   14eb0:	2001      	movne	r0, #1
   14eb2:	4770      	bx	lr
   14eb4:	2001      	movs	r0, #1
}
   14eb6:	4770      	bx	lr

00014eb8 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   14eb8:	6843      	ldr	r3, [r0, #4]
   14eba:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   14ebc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   14ec0:	05d1      	lsls	r1, r2, #23
   14ec2:	d518      	bpl.n	14ef6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ec4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   14ec8:	b1aa      	cbz	r2, 14ef6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   14eca:	f04f 0120 	mov.w	r1, #32
   14ece:	f3ef 8211 	mrs	r2, BASEPRI
   14ed2:	f381 8812 	msr	BASEPRI_MAX, r1
   14ed6:	f3bf 8f6f 	isb	sy
   14eda:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14ede:	b131      	cbz	r1, 14eee <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ee0:	2100      	movs	r1, #0
   14ee2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   14ee6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14eea:	2101      	movs	r1, #1
   14eec:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   14eee:	f382 8811 	msr	BASEPRI, r2
   14ef2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14ef6:	6842      	ldr	r2, [r0, #4]
   14ef8:	6852      	ldr	r2, [r2, #4]
   14efa:	06d2      	lsls	r2, r2, #27
   14efc:	d515      	bpl.n	14f2a <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   14efe:	f04f 0120 	mov.w	r1, #32
   14f02:	f3ef 8211 	mrs	r2, BASEPRI
   14f06:	f381 8812 	msr	BASEPRI_MAX, r1
   14f0a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f0e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14f12:	b111      	cbz	r1, 14f1a <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14f14:	2100      	movs	r1, #0
   14f16:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   14f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14f1e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   14f22:	f382 8811 	msr	BASEPRI, r2
   14f26:	f3bf 8f6f 	isb	sy
}
   14f2a:	4770      	bx	lr

00014f2c <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14f2c:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   14f2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return dev->config;
   14f32:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return dev->data;
   14f36:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   14f38:	f8d8 4000 	ldr.w	r4, [r8]
static int uarte_instance_init(const struct device *dev,
   14f3c:	4606      	mov	r6, r0
   14f3e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   14f42:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   14f44:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14f46:	68eb      	ldr	r3, [r5, #12]
   14f48:	1c5a      	adds	r2, r3, #1
   14f4a:	d011      	beq.n	14f70 <uarte_instance_init.constprop.0+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14f4c:	a801      	add	r0, sp, #4
   14f4e:	9301      	str	r3, [sp, #4]
   14f50:	f7f9 ff0a 	bl	ed68 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14f54:	2301      	movs	r3, #1
   14f56:	9a01      	ldr	r2, [sp, #4]
   14f58:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   14f5a:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   14f5c:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14f5e:	a801      	add	r0, sp, #4
   14f60:	9301      	str	r3, [sp, #4]
   14f62:	f7f9 ff01 	bl	ed68 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   14f66:	2203      	movs	r2, #3
   14f68:	9b01      	ldr	r3, [sp, #4]
   14f6a:	3380      	adds	r3, #128	; 0x80
   14f6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14f70:	6928      	ldr	r0, [r5, #16]
   14f72:	1c43      	adds	r3, r0, #1
   14f74:	d006      	beq.n	14f84 <uarte_instance_init.constprop.0+0x58>
			nrf_gpio_cfg_input(cfg->rx_pin,
   14f76:	7f2b      	ldrb	r3, [r5, #28]
   14f78:	2b00      	cmp	r3, #0
   14f7a:	bf14      	ite	ne
   14f7c:	2103      	movne	r1, #3
   14f7e:	2100      	moveq	r1, #0
   14f80:	f7ff ff7d 	bl	14e7e <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14f84:	696b      	ldr	r3, [r5, #20]
   14f86:	1c5a      	adds	r2, r3, #1
   14f88:	d011      	beq.n	14fae <uarte_instance_init.constprop.0+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14f8a:	a801      	add	r0, sp, #4
   14f8c:	9301      	str	r3, [sp, #4]
   14f8e:	f7f9 feeb 	bl	ed68 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14f92:	2301      	movs	r3, #1
   14f94:	9a01      	ldr	r2, [sp, #4]
   14f96:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   14f98:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   14f9a:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14f9c:	a801      	add	r0, sp, #4
   14f9e:	9301      	str	r3, [sp, #4]
   14fa0:	f7f9 fee2 	bl	ed68 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   14fa4:	2203      	movs	r2, #3
   14fa6:	9b01      	ldr	r3, [sp, #4]
   14fa8:	3380      	adds	r3, #128	; 0x80
   14faa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14fae:	69a8      	ldr	r0, [r5, #24]
   14fb0:	1c43      	adds	r3, r0, #1
   14fb2:	d006      	beq.n	14fc2 <uarte_instance_init.constprop.0+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   14fb4:	7f6b      	ldrb	r3, [r5, #29]
   14fb6:	2b00      	cmp	r3, #0
   14fb8:	bf14      	ite	ne
   14fba:	2103      	movne	r1, #3
   14fbc:	2100      	moveq	r1, #0
   14fbe:	f7ff ff5e 	bl	14e7e <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   14fc2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   14fc6:	682b      	ldr	r3, [r5, #0]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14fc8:	4630      	mov	r0, r6
    p_reg->PSEL.TXD = pseltxd;
   14fca:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   14fce:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   14fd2:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   14fd6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14fda:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
   14fdc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   14fe0:	3104      	adds	r1, #4
   14fe2:	f7f9 feef 	bl	edc4 <uarte_nrfx_configure>
	if (err) {
   14fe6:	bb40      	cbnz	r0, 1503a <uarte_instance_init.constprop.0+0x10e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14fe8:	2308      	movs	r3, #8
   14fea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   14fee:	f898 3008 	ldrb.w	r3, [r8, #8]
   14ff2:	b95b      	cbnz	r3, 1500c <uarte_instance_init.constprop.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ff4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   14ff8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   14ffc:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15000:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15004:	2301      	movs	r3, #1
   15006:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1500a:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1500c:	f8d8 3004 	ldr.w	r3, [r8, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15010:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   15012:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   15014:	bf5c      	itt	pl
   15016:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1501a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1501e:	06db      	lsls	r3, r3, #27
   15020:	bf44      	itt	mi
   15022:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   15026:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1502a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1502c:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15030:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15034:	2301      	movs	r3, #1
   15036:	60a3      	str	r3, [r4, #8]
   15038:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1503a:	b002      	add	sp, #8
   1503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015040 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   15040:	b510      	push	{r4, lr}
   15042:	4604      	mov	r4, r0
   15044:	2200      	movs	r2, #0
   15046:	2101      	movs	r1, #1
   15048:	2009      	movs	r0, #9
   1504a:	f7f8 fc91 	bl	d970 <z_arm_irq_priority_set>
   1504e:	2009      	movs	r0, #9
   15050:	f7f8 fc72 	bl	d938 <arch_irq_enable>
   15054:	4620      	mov	r0, r4
   15056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1505a:	f7ff bf67 	b.w	14f2c <uarte_instance_init.constprop.0>

0001505e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1505e:	b510      	push	{r4, lr}
   15060:	4604      	mov	r4, r0
   15062:	2200      	movs	r2, #0
   15064:	2101      	movs	r1, #1
   15066:	2008      	movs	r0, #8
   15068:	f7f8 fc82 	bl	d970 <z_arm_irq_priority_set>
   1506c:	2008      	movs	r0, #8
   1506e:	f7f8 fc63 	bl	d938 <arch_irq_enable>
   15072:	4620      	mov	r0, r4
   15074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15078:	f7ff bf58 	b.w	14f2c <uarte_instance_init.constprop.0>

0001507c <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1507c:	2200      	movs	r2, #0
{
   1507e:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   15080:	4611      	mov	r1, r2
   15082:	4610      	mov	r0, r2
   15084:	f7fc ff52 	bl	11f2c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
			return -EINVAL;
   15088:	2800      	cmp	r0, #0
		}
	#endif

	return 0;
}
   1508a:	bf18      	it	ne
   1508c:	f06f 0015 	mvnne.w	r0, #21
   15090:	bd08      	pop	{r3, pc}

00015092 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
   15092:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15096:	6913      	ldr	r3, [r2, #16]
   15098:	f023 0301 	bic.w	r3, r3, #1
   1509c:	6113      	str	r3, [r2, #16]
}
   1509e:	4770      	bx	lr

000150a0 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   150a0:	f7fc beec 	b.w	11e7c <nrf_cc3xx_platform_init>

000150a4 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   150a4:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   150a6:	f7f8 fb43 	bl	d730 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   150aa:	f7f8 fbed 	bl	d888 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   150ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   150b2:	f7fc bee3 	b.w	11e7c <nrf_cc3xx_platform_init>

000150b6 <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   150b6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   150ba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   150be:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
   150c2:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
   150c6:	2a09      	cmp	r2, #9
   150c8:	d103      	bne.n	150d2 <nrf91_errata_14+0x1c>
                switch(var2)
   150ca:	1e43      	subs	r3, r0, #1
   150cc:	4258      	negs	r0, r3
   150ce:	4158      	adcs	r0, r3
   150d0:	4770      	bx	lr
                        return false;
   150d2:	2000      	movs	r0, #0
}
   150d4:	4770      	bx	lr

000150d6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   150d6:	4700      	bx	r0

000150d8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   150d8:	f000 b89b 	b.w	15212 <z_impl_k_busy_wait>

000150dc <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   150dc:	7b0a      	ldrb	r2, [r1, #12]
{
   150de:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   150e0:	2a03      	cmp	r2, #3
   150e2:	d829      	bhi.n	15138 <xfer_completeness_check+0x5c>
   150e4:	e8df f002 	tbb	[pc, r2]
   150e8:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   150ec:	688a      	ldr	r2, [r1, #8]
   150ee:	0350      	lsls	r0, r2, #13
   150f0:	d504      	bpl.n	150fc <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   150f2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   150f6:	6908      	ldr	r0, [r1, #16]
   150f8:	4290      	cmp	r0, r2
   150fa:	d107      	bne.n	1510c <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   150fc:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   150fe:	0352      	lsls	r2, r2, #13
   15100:	d41a      	bmi.n	15138 <xfer_completeness_check+0x5c>
   15102:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   15106:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   15108:	4291      	cmp	r1, r2
   1510a:	d015      	beq.n	15138 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1510c:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1510e:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   15110:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   15114:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   15118:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1511a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1511e:	6908      	ldr	r0, [r1, #16]
   15120:	4290      	cmp	r0, r2
   15122:	d1f3      	bne.n	1510c <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   15124:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   15128:	e7ed      	b.n	15106 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1512a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1512e:	6909      	ldr	r1, [r1, #16]
   15130:	e7ea      	b.n	15108 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   15132:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   15136:	e7fa      	b.n	1512e <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   15138:	2001      	movs	r0, #1
}
   1513a:	4770      	bx	lr

0001513c <nrf_gpio_pin_set>:
{
   1513c:	b507      	push	{r0, r1, r2, lr}
   1513e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15140:	a801      	add	r0, sp, #4
   15142:	f7fa fea7 	bl	fe94 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15146:	2301      	movs	r3, #1
   15148:	9a01      	ldr	r2, [sp, #4]
   1514a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1514c:	6083      	str	r3, [r0, #8]
}
   1514e:	b003      	add	sp, #12
   15150:	f85d fb04 	ldr.w	pc, [sp], #4

00015154 <z_device_state_init>:
}
   15154:	4770      	bx	lr

00015156 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   15156:	b138      	cbz	r0, 15168 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15158:	68c3      	ldr	r3, [r0, #12]
   1515a:	8818      	ldrh	r0, [r3, #0]
   1515c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15160:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   15164:	4258      	negs	r0, r3
   15166:	4158      	adcs	r0, r3
}
   15168:	4770      	bx	lr

0001516a <k_mem_slab_init>:
{
   1516a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1516c:	2400      	movs	r4, #0
   1516e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   15170:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15172:	ea41 0402 	orr.w	r4, r1, r2
   15176:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1517a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1517e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15180:	d10c      	bne.n	1519c <k_mem_slab_init+0x32>
   15182:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
   15184:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
   15186:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15188:	d103      	bne.n	15192 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
   1518a:	e9c0 0000 	strd	r0, r0, [r0]
}
   1518e:	2000      	movs	r0, #0
}
   15190:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   15192:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15194:	3401      	adds	r4, #1
   15196:	460d      	mov	r5, r1
		p += slab->block_size;
   15198:	4411      	add	r1, r2
   1519a:	e7f3      	b.n	15184 <k_mem_slab_init+0x1a>
		return -EINVAL;
   1519c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   151a0:	e7f6      	b.n	15190 <k_mem_slab_init+0x26>

000151a2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   151a2:	f3ef 8005 	mrs	r0, IPSR
}
   151a6:	3800      	subs	r0, #0
   151a8:	bf18      	it	ne
   151aa:	2001      	movne	r0, #1
   151ac:	4770      	bx	lr

000151ae <k_thread_name_get>:
}
   151ae:	2000      	movs	r0, #0
   151b0:	4770      	bx	lr

000151b2 <z_pm_save_idle_exit>:
{
   151b2:	b508      	push	{r3, lr}
	pm_system_resume();
   151b4:	f7f7 ff46 	bl	d044 <pm_system_resume>
}
   151b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   151bc:	f7fa b862 	b.w	f284 <sys_clock_idle_exit>

000151c0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   151c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   151c4:	428b      	cmp	r3, r1
   151c6:	d001      	beq.n	151cc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   151c8:	f7fc b844 	b.w	11254 <z_set_prio>
}
   151cc:	2000      	movs	r0, #0
   151ce:	4770      	bx	lr

000151d0 <z_impl_k_mutex_init>:
{
   151d0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   151d2:	2000      	movs	r0, #0
   151d4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   151d8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   151dc:	4770      	bx	lr

000151de <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   151de:	4603      	mov	r3, r0
   151e0:	b920      	cbnz	r0, 151ec <z_reschedule_irqlock+0xe>
   151e2:	f3ef 8205 	mrs	r2, IPSR
   151e6:	b90a      	cbnz	r2, 151ec <z_reschedule_irqlock+0xe>
   151e8:	f7f8 bc08 	b.w	d9fc <arch_swap>
   151ec:	f383 8811 	msr	BASEPRI, r3
   151f0:	f3bf 8f6f 	isb	sy
}
   151f4:	4770      	bx	lr

000151f6 <z_reschedule_unlocked>:
	__asm__ volatile(
   151f6:	f04f 0320 	mov.w	r3, #32
   151fa:	f3ef 8011 	mrs	r0, BASEPRI
   151fe:	f383 8812 	msr	BASEPRI_MAX, r3
   15202:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15206:	f7ff bfea 	b.w	151de <z_reschedule_irqlock>

0001520a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1520a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1520c:	f7fc fdec 	bl	11de8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15210:	bd08      	pop	{r3, pc}

00015212 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15212:	b108      	cbz	r0, 15218 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   15214:	f7f7 be90 	b.w	cf38 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15218:	4770      	bx	lr
	...

0001521c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1521c:	f7fa b896 	b.w	f34c <SystemInit>

Disassembly of section .gnu.sgstubs:

00016d60 <spm_firmware_info_nse-0x1280>:
	...

00017fe0 <spm_firmware_info_nse>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7fc bdfc 	b.w	14be0 <__acle_se_spm_firmware_info_nse>

00017fe8 <spm_request_random_number_nse>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f5 bb42 	b.w	d674 <__acle_se_spm_request_random_number_nse>

00017ff0 <spm_s0_active>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7f5 bb62 	b.w	d6bc <__acle_se_spm_s0_active>

00017ff8 <spm_request_read_nse>:
   17ff8:	e97f e97f 	sg
   17ffc:	f7f5 bb04 	b.w	d608 <__acle_se_spm_request_read_nse>
